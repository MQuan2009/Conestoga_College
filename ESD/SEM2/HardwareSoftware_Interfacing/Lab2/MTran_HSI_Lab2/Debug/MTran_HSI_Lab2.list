
MTran_HSI_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800487c  0800487c  0000587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048fc  080048fc  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080048fc  080048fc  000058fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004904  08004904  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004904  08004904  00005904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004908  08004908  00005908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800490c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08004974  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004974  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcf5  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7b  00000000  00000000  00013d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00015d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a45  00000000  00000000  00016a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173ff  00000000  00000000  00017475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efb5  00000000  00000000  0002e874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090141  00000000  00000000  0003d829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd96a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d70  00000000  00000000  000cd9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000d1720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004864 	.word	0x08004864

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08004864 	.word	0x08004864

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <setLed>:
*
* RETURNS :
*
*/
void setLed(bool led1Status,bool led2Status, bool led3Status)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	460b      	mov	r3, r1
 80004d4:	71bb      	strb	r3, [r7, #6]
 80004d6:	4613      	mov	r3, r2
 80004d8:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,led1Status);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	461a      	mov	r2, r3
 80004de:	2120      	movs	r1, #32
 80004e0:	4809      	ldr	r0, [pc, #36]	@ (8000508 <setLed+0x40>)
 80004e2:	f001 f8a1 	bl	8001628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,led2Status);
 80004e6:	79bb      	ldrb	r3, [r7, #6]
 80004e8:	461a      	mov	r2, r3
 80004ea:	2140      	movs	r1, #64	@ 0x40
 80004ec:	4806      	ldr	r0, [pc, #24]	@ (8000508 <setLed+0x40>)
 80004ee:	f001 f89b 	bl	8001628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,led3Status);
 80004f2:	797b      	ldrb	r3, [r7, #5]
 80004f4:	461a      	mov	r2, r3
 80004f6:	2180      	movs	r1, #128	@ 0x80
 80004f8:	4803      	ldr	r0, [pc, #12]	@ (8000508 <setLed+0x40>)
 80004fa:	f001 f895 	bl	8001628 <HAL_GPIO_WritePin>

}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020000 	.word	0x40020000

0800050c <shiftLeftLed>:
*
* RETURNS :
*
*/
void shiftLeftLed(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	setLed(0,0,1);
 8000510:	2201      	movs	r2, #1
 8000512:	2100      	movs	r1, #0
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ffd7 	bl	80004c8 <setLed>
	HAL_Delay(100);
 800051a:	2064      	movs	r0, #100	@ 0x64
 800051c:	f000 fd20 	bl	8000f60 <HAL_Delay>
	setLed(0,1,0);
 8000520:	2200      	movs	r2, #0
 8000522:	2101      	movs	r1, #1
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ffcf 	bl	80004c8 <setLed>
	HAL_Delay(100);
 800052a:	2064      	movs	r0, #100	@ 0x64
 800052c:	f000 fd18 	bl	8000f60 <HAL_Delay>
	setLed(1,0,0);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff ffc7 	bl	80004c8 <setLed>
	HAL_Delay(100);
 800053a:	2064      	movs	r0, #100	@ 0x64
 800053c:	f000 fd10 	bl	8000f60 <HAL_Delay>
	setLed(0,0,0);
 8000540:	2200      	movs	r2, #0
 8000542:	2100      	movs	r1, #0
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff ffbf 	bl	80004c8 <setLed>
	HAL_Delay(100);
 800054a:	2064      	movs	r0, #100	@ 0x64
 800054c:	f000 fd08 	bl	8000f60 <HAL_Delay>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <shiftRightLed>:
*
* RETURNS :
*
*/
void shiftRightLed(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	setLed(1,0,0);
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff ffb3 	bl	80004c8 <setLed>
	HAL_Delay(100);
 8000562:	2064      	movs	r0, #100	@ 0x64
 8000564:	f000 fcfc 	bl	8000f60 <HAL_Delay>
	setLed(0,1,0);
 8000568:	2200      	movs	r2, #0
 800056a:	2101      	movs	r1, #1
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ffab 	bl	80004c8 <setLed>
	HAL_Delay(100);
 8000572:	2064      	movs	r0, #100	@ 0x64
 8000574:	f000 fcf4 	bl	8000f60 <HAL_Delay>
	setLed(0,0,1);
 8000578:	2201      	movs	r2, #1
 800057a:	2100      	movs	r1, #0
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ffa3 	bl	80004c8 <setLed>
	HAL_Delay(100);
 8000582:	2064      	movs	r0, #100	@ 0x64
 8000584:	f000 fcec 	bl	8000f60 <HAL_Delay>
	setLed(0,0,0);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff ff9b 	bl	80004c8 <setLed>
	HAL_Delay(100);
 8000592:	2064      	movs	r0, #100	@ 0x64
 8000594:	f000 fce4 	bl	8000f60 <HAL_Delay>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <getCharFromUart2>:
*
* RETURNS : uint8_t: return either the character or TIMEOUT code
*
*/
uint8_t getCharFromUart2(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
    uint8_t rcvChar;
    HAL_StatusTypeDef status;

    // Try to receive a single character with a timeout
    status = HAL_UART_Receive(&huart2, &rcvChar, 1, UART_TIMEOUT);
 80005a2:	1db9      	adds	r1, r7, #6
 80005a4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80005a8:	2201      	movs	r2, #1
 80005aa:	4807      	ldr	r0, [pc, #28]	@ (80005c8 <getCharFromUart2+0x2c>)
 80005ac:	f002 fcf1 	bl	8002f92 <HAL_UART_Receive>
 80005b0:	4603      	mov	r3, r0
 80005b2:	71fb      	strb	r3, [r7, #7]

    if (status == HAL_OK)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <getCharFromUart2+0x22>
    {
        // Successfully received a character
        return rcvChar;
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	e000      	b.n	80005c0 <getCharFromUart2+0x24>
    }
    else
    {
        // Timeout occurred
        return UART_TIMEOUT_ERROR;
 80005be:	23ff      	movs	r3, #255	@ 0xff
    }
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200000cc 	.word	0x200000cc

080005cc <HAL_GPIO_EXTI_Callback>:
*
* RETURNS : VOID
*
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	btnPressed = GPIO_Pin;
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b04      	ldr	r3, [pc, #16]	@ (80005ec <HAL_GPIO_EXTI_Callback+0x20>)
 80005dc:	701a      	strb	r2, [r3, #0]

	// Start a timer to handle debounce
    HAL_TIM_Base_Start_IT(&htim2);
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <HAL_GPIO_EXTI_Callback+0x24>)
 80005e0:	f001 fd3c 	bl	800205c <HAL_TIM_Base_Start_IT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000114 	.word	0x20000114
 80005f0:	20000084 	.word	0x20000084

080005f4 <HAL_TIM_PeriodElapsedCallback>:
*
* RETURNS : VOID
*
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000604:	d132      	bne.n	800066c <HAL_TIM_PeriodElapsedCallback+0x78>
    {
        // Stop the timer
        HAL_TIM_Base_Stop_IT(&htim2);
 8000606:	481b      	ldr	r0, [pc, #108]	@ (8000674 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000608:	f001 fd8a 	bl	8002120 <HAL_TIM_Base_Stop_IT>

        // Check the button state after 20ms
        if ((btnPressed == LEFT_PIN) && (HAL_GPIO_ReadPin(GPIOC,LEFT_PIN) == GPIO_PIN_RESET))
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b01      	cmp	r3, #1
 8000614:	d10a      	bne.n	800062c <HAL_TIM_PeriodElapsedCallback+0x38>
 8000616:	2101      	movs	r1, #1
 8000618:	4818      	ldr	r0, [pc, #96]	@ (800067c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800061a:	f000 ffed 	bl	80015f8 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d103      	bne.n	800062c <HAL_TIM_PeriodElapsedCallback+0x38>
        {
        	btnState = LEFT;
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	e01f      	b.n	800066c <HAL_TIM_PeriodElapsedCallback+0x78>
        }
        else if ((btnPressed == RIGHT_PIN) && (HAL_GPIO_ReadPin(GPIOC,RIGHT_PIN) == GPIO_PIN_RESET))
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b02      	cmp	r3, #2
 8000634:	d10a      	bne.n	800064c <HAL_TIM_PeriodElapsedCallback+0x58>
 8000636:	2102      	movs	r1, #2
 8000638:	4810      	ldr	r0, [pc, #64]	@ (800067c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800063a:	f000 ffdd 	bl	80015f8 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <HAL_TIM_PeriodElapsedCallback+0x58>
        {
        	btnState = RIGHT;
 8000644:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000646:	2202      	movs	r2, #2
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	e00f      	b.n	800066c <HAL_TIM_PeriodElapsedCallback+0x78>
        }
        else if ((btnPressed == TOGGLE_PIN) && (HAL_GPIO_ReadPin(GPIOC,TOGGLE_PIN) == GPIO_PIN_RESET))
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b04      	cmp	r3, #4
 8000654:	d10a      	bne.n	800066c <HAL_TIM_PeriodElapsedCallback+0x78>
 8000656:	2104      	movs	r1, #4
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800065a:	f000 ffcd 	bl	80015f8 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <HAL_TIM_PeriodElapsedCallback+0x78>
        {
            btnState = TOGGLE;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000666:	2203      	movs	r2, #3
 8000668:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800066a:	e7ff      	b.n	800066c <HAL_TIM_PeriodElapsedCallback+0x78>
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000084 	.word	0x20000084
 8000678:	20000114 	.word	0x20000114
 800067c:	40020800 	.word	0x40020800
 8000680:	20000115 	.word	0x20000115

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char rcvChar = ' ';
 800068a:	2320      	movs	r3, #32
 800068c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fbf5 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f873 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f977 	bl	8000988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069a:	f000 f94b 	bl	8000934 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800069e:	f000 f8d7 	bl	8000850 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(controlState)
 80006a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000760 <main+0xdc>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <main+0x2e>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d01b      	beq.n	80006e8 <main+0x64>
 80006b0:	e7f7      	b.n	80006a2 <main+0x1e>
	  {
	  	  case BTN:
	  		  switch(btnState)
 80006b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000764 <main+0xe0>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d00c      	beq.n	80006d6 <main+0x52>
 80006bc:	2b03      	cmp	r3, #3
 80006be:	dc11      	bgt.n	80006e4 <main+0x60>
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d002      	beq.n	80006ca <main+0x46>
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d003      	beq.n	80006d0 <main+0x4c>
	  			  case TOGGLE:
	  				  controlState = PROMPT;
	  				  btnState = NONE;
	  				  break;
	  			  default:
	  				  break;
 80006c8:	e00c      	b.n	80006e4 <main+0x60>
	  				  shiftLeftLed();
 80006ca:	f7ff ff1f 	bl	800050c <shiftLeftLed>
	  				  break;
 80006ce:	e00a      	b.n	80006e6 <main+0x62>
	  				  shiftRightLed();
 80006d0:	f7ff ff40 	bl	8000554 <shiftRightLed>
	  				  break;
 80006d4:	e007      	b.n	80006e6 <main+0x62>
	  				  controlState = PROMPT;
 80006d6:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <main+0xdc>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
	  				  btnState = NONE;
 80006dc:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <main+0xe0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	  				  break;
 80006e2:	e000      	b.n	80006e6 <main+0x62>
	  				  break;
 80006e4:	bf00      	nop

	  		  }
	  		  break;
 80006e6:	e03a      	b.n	800075e <main+0xda>
	  	  case PROMPT:

	  		  // Toggle a button again to enter how the LED lit
	  		  if (btnState == TOGGLE)
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <main+0xe0>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d129      	bne.n	8000746 <main+0xc2>
	  		  {
				  printf("Insert L/R to control LED\r\n");
 80006f2:	481d      	ldr	r0, [pc, #116]	@ (8000768 <main+0xe4>)
 80006f4:	f003 fd22 	bl	800413c <puts>
				  switch(getCharFromUart2())
 80006f8:	f7ff ff50 	bl	800059c <getCharFromUart2>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2bff      	cmp	r3, #255	@ 0xff
 8000700:	d012      	beq.n	8000728 <main+0xa4>
 8000702:	2bff      	cmp	r3, #255	@ 0xff
 8000704:	dc1b      	bgt.n	800073e <main+0xba>
 8000706:	2b4c      	cmp	r3, #76	@ 0x4c
 8000708:	d002      	beq.n	8000710 <main+0x8c>
 800070a:	2b52      	cmp	r3, #82	@ 0x52
 800070c:	d006      	beq.n	800071c <main+0x98>
						  printf("Prompt Timeout\r\n");
						  printf("Switching to BTN control state\r\n");
						  controlState = BTN;
						  rcvChar = ' ';
					  default:
						  break;
 800070e:	e016      	b.n	800073e <main+0xba>
						  rcvChar = 'L';
 8000710:	234c      	movs	r3, #76	@ 0x4c
 8000712:	71fb      	strb	r3, [r7, #7]
						  printf("Shift Left\r\n");
 8000714:	4815      	ldr	r0, [pc, #84]	@ (800076c <main+0xe8>)
 8000716:	f003 fd11 	bl	800413c <puts>
						  break;
 800071a:	e011      	b.n	8000740 <main+0xbc>
						  rcvChar = 'R';
 800071c:	2352      	movs	r3, #82	@ 0x52
 800071e:	71fb      	strb	r3, [r7, #7]
						  printf("Shift Right\r\n");
 8000720:	4813      	ldr	r0, [pc, #76]	@ (8000770 <main+0xec>)
 8000722:	f003 fd0b 	bl	800413c <puts>
						  break;
 8000726:	e00b      	b.n	8000740 <main+0xbc>
						  printf("Prompt Timeout\r\n");
 8000728:	4812      	ldr	r0, [pc, #72]	@ (8000774 <main+0xf0>)
 800072a:	f003 fd07 	bl	800413c <puts>
						  printf("Switching to BTN control state\r\n");
 800072e:	4812      	ldr	r0, [pc, #72]	@ (8000778 <main+0xf4>)
 8000730:	f003 fd04 	bl	800413c <puts>
						  controlState = BTN;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <main+0xdc>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
						  rcvChar = ' ';
 800073a:	2320      	movs	r3, #32
 800073c:	71fb      	strb	r3, [r7, #7]
						  break;
 800073e:	bf00      	nop

				  }
				  btnState = NONE;
 8000740:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <main+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  switch(rcvChar)
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b4c      	cmp	r3, #76	@ 0x4c
 800074a:	d002      	beq.n	8000752 <main+0xce>
 800074c:	2b52      	cmp	r3, #82	@ 0x52
 800074e:	d003      	beq.n	8000758 <main+0xd4>
			  		  break;
			  	  case 'R':
			  		  shiftRightLed();
			  		  break;
			  	  default:
			  		  break;
 8000750:	e005      	b.n	800075e <main+0xda>
			  		  shiftLeftLed();
 8000752:	f7ff fedb 	bl	800050c <shiftLeftLed>
			  		  break;
 8000756:	e002      	b.n	800075e <main+0xda>
			  		  shiftRightLed();
 8000758:	f7ff fefc 	bl	8000554 <shiftRightLed>
			  		  break;
 800075c:	bf00      	nop
	  switch(controlState)
 800075e:	e7a0      	b.n	80006a2 <main+0x1e>
 8000760:	20000116 	.word	0x20000116
 8000764:	20000115 	.word	0x20000115
 8000768:	0800487c 	.word	0x0800487c
 800076c:	08004898 	.word	0x08004898
 8000770:	080048a4 	.word	0x080048a4
 8000774:	080048b4 	.word	0x080048b4
 8000778:	080048c4 	.word	0x080048c4

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fdb6 	bl	80042fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <SystemClock_Config+0xd0>)
 80007c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007ec:	2310      	movs	r3, #16
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	4618      	mov	r0, r3
 8000804:	f000 ff42 	bl	800168c <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800080e:	f000 f94f 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2302      	movs	r3, #2
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f001 f9a4 	bl	8001b7c <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083a:	f000 f939 	bl	8000ab0 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	@ 0x38
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <MX_TIM2_Init+0xe0>)
 8000882:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000888:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <MX_TIM2_Init+0xe0>)
 800088a:	2253      	movs	r2, #83	@ 0x53
 800088c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <MX_TIM2_Init+0xe0>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000894:	4b26      	ldr	r3, [pc, #152]	@ (8000930 <MX_TIM2_Init+0xe0>)
 8000896:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800089a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <MX_TIM2_Init+0xe0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <MX_TIM2_Init+0xe0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a8:	4821      	ldr	r0, [pc, #132]	@ (8000930 <MX_TIM2_Init+0xe0>)
 80008aa:	f001 fb87 	bl	8001fbc <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008b4:	f000 f8fc 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c2:	4619      	mov	r1, r3
 80008c4:	481a      	ldr	r0, [pc, #104]	@ (8000930 <MX_TIM2_Init+0xe0>)
 80008c6:	f001 fe65 	bl	8002594 <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008d0:	f000 f8ee 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d4:	4816      	ldr	r0, [pc, #88]	@ (8000930 <MX_TIM2_Init+0xe0>)
 80008d6:	f001 fc52 	bl	800217e <HAL_TIM_PWM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008e0:	f000 f8e6 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	4619      	mov	r1, r3
 80008f2:	480f      	ldr	r0, [pc, #60]	@ (8000930 <MX_TIM2_Init+0xe0>)
 80008f4:	f002 f9f0 	bl	8002cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008fe:	f000 f8d7 	bl	8000ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000902:	2360      	movs	r3, #96	@ 0x60
 8000904:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_TIM2_Init+0xe0>)
 800091a:	f001 fd79 	bl	8002410 <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000924:	f000 f8c4 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3738      	adds	r7, #56	@ 0x38
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000084 	.word	0x20000084

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <MX_USART2_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800096c:	f002 fa36 	bl	8002ddc <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f89b 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000cc 	.word	0x200000cc
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b40      	ldr	r3, [pc, #256]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a3f      	ldr	r2, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b3d      	ldr	r3, [pc, #244]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a31      	ldr	r2, [pc, #196]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a2a      	ldr	r2, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <MX_GPIO_Init+0x11c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	21e0      	movs	r1, #224	@ 0xe0
 8000a12:	4825      	ldr	r0, [pc, #148]	@ (8000aa8 <MX_GPIO_Init+0x120>)
 8000a14:	f000 fe08 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481f      	ldr	r0, [pc, #124]	@ (8000aac <MX_GPIO_Init+0x124>)
 8000a30:	f000 fc5e 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a34:	2307      	movs	r3, #7
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a38:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_GPIO_Init+0x124>)
 8000a4a:	f000 fc51 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000a4e:	23e0      	movs	r3, #224	@ 0xe0
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4810      	ldr	r0, [pc, #64]	@ (8000aa8 <MX_GPIO_Init+0x120>)
 8000a66:	f000 fc43 	bl	80012f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2006      	movs	r0, #6
 8000a70:	f000 fb75 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a74:	2006      	movs	r0, #6
 8000a76:	f000 fb8e 	bl	8001196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f000 fb6d 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a84:	2007      	movs	r0, #7
 8000a86:	f000 fb86 	bl	8001196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2008      	movs	r0, #8
 8000a90:	f000 fb65 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a94:	2008      	movs	r0, #8
 8000a96:	f000 fb7e 	bl	8001196 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020800 	.word	0x40020800

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <Error_Handler+0x8>

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f000 fb24 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b1c:	d115      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a0b      	ldr	r2, [pc, #44]	@ (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	201c      	movs	r0, #28
 8000b40:	f000 fb0d 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b44:	201c      	movs	r0, #28
 8000b46:	f000 fb26 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1d      	ldr	r2, [pc, #116]	@ (8000bec <HAL_UART_MspInit+0x94>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d133      	bne.n	8000be2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_UART_MspInit+0x98>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <HAL_UART_MspInit+0x98>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_UART_MspInit+0x98>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <HAL_UART_MspInit+0x9c>)
 8000bce:	f000 fb8f 	bl	80012f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2026      	movs	r0, #38	@ 0x26
 8000bd8:	f000 fac1 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bdc:	2026      	movs	r0, #38	@ 0x26
 8000bde:	f000 fada 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004400 	.word	0x40004400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 f967 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 fcfe 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f000 fcf7 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c76:	2004      	movs	r0, #4
 8000c78:	f000 fcf0 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <TIM2_IRQHandler+0x10>)
 8000c86:	f001 fad3 	bl	8002230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000084 	.word	0x20000084

08000c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <USART2_IRQHandler+0x10>)
 8000c9a:	f002 fa11 	bl	80030c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000cc 	.word	0x200000cc

08000ca8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75fb      	strb	r3, [r7, #23]

	len = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	607b      	str	r3, [r7, #4]

	result = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <_read+0x40>)
 8000cc8:	f002 f963 	bl	8002f92 <HAL_UART_Receive>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	75fb      	strb	r3, [r7, #23]
	if (result != HAL_OK)
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <_read+0x34>
	{
		len = EOF;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	607b      	str	r3, [r7, #4]
	}
	return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000cc 	.word	0x200000cc

08000cec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  extern UART_HandleTypeDef huart2;

  HAL_StatusTypeDef result = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	75fb      	strb	r3, [r7, #23]

  result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <_write+0x40>)
 8000d08:	f002 f8b8 	bl	8002e7c <HAL_UART_Transmit>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	75fb      	strb	r3, [r7, #23]
  if (result == HAL_ERROR || result == HAL_BUSY)
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d002      	beq.n	8000d1c <_write+0x30>
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d101      	bne.n	8000d20 <_write+0x34>
  {
	  Error_Handler();
 8000d1c:	f7ff fec8 	bl	8000ab0 <Error_Handler>
  }
  return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200000cc 	.word	0x200000cc

08000d30 <_close>:

int _close(int file)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d58:	605a      	str	r2, [r3, #4]
  return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_isatty>:

int _isatty(int file)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d70:	2301      	movs	r3, #1
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b085      	sub	sp, #20
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	@ (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f003 fae6 	bl	8004398 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20020000 	.word	0x20020000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	20000118 	.word	0x20000118
 8000e00:	20000270 	.word	0x20000270

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f003 faa5 	bl	80043a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fc13 	bl	8000684 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e6c:	0800490c 	.word	0x0800490c
  ldr r2, =_sbss
 8000e70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e74:	2000026c 	.word	0x2000026c

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f94f 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fe04 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f967 	bl	80011b2 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f92f 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	2000011c 	.word	0x2000011c

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000011c 	.word	0x2000011c

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffde 	bl	8000f48 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	@ (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	@ (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff29 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff3e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff31 	bl	800100c <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff feb6 	bl	8000f48 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d008      	beq.n	80011fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e052      	b.n	80012a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0216 	bic.w	r2, r2, #22
 800120a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800121a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <HAL_DMA_Abort+0x62>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0208 	bic.w	r2, r2, #8
 800123a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800124c:	e013      	b.n	8001276 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800124e:	f7ff fe7b 	bl	8000f48 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b05      	cmp	r3, #5
 800125a:	d90c      	bls.n	8001276 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2220      	movs	r2, #32
 8001260:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e015      	b.n	80012a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1e4      	bne.n	800124e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001288:	223f      	movs	r2, #63	@ 0x3f
 800128a:	409a      	lsls	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d004      	beq.n	80012c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e00c      	b.n	80012e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2205      	movs	r2, #5
 80012cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e159      	b.n	80015c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 8148 	bne.w	80015ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d005      	beq.n	8001342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133e:	2b02      	cmp	r3, #2
 8001340:	d130      	bne.n	80013a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 0201 	and.w	r2, r3, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d017      	beq.n	80013e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d123      	bne.n	8001434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a2 	beq.w	80015ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b57      	ldr	r3, [pc, #348]	@ (80015d8 <HAL_GPIO_Init+0x2e8>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a56      	ldr	r2, [pc, #344]	@ (80015d8 <HAL_GPIO_Init+0x2e8>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b54      	ldr	r3, [pc, #336]	@ (80015d8 <HAL_GPIO_Init+0x2e8>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001492:	4a52      	ldr	r2, [pc, #328]	@ (80015dc <HAL_GPIO_Init+0x2ec>)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a49      	ldr	r2, [pc, #292]	@ (80015e0 <HAL_GPIO_Init+0x2f0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x202>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a48      	ldr	r2, [pc, #288]	@ (80015e4 <HAL_GPIO_Init+0x2f4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x1fe>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a47      	ldr	r2, [pc, #284]	@ (80015e8 <HAL_GPIO_Init+0x2f8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x1fa>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a46      	ldr	r2, [pc, #280]	@ (80015ec <HAL_GPIO_Init+0x2fc>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x1f6>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a45      	ldr	r2, [pc, #276]	@ (80015f0 <HAL_GPIO_Init+0x300>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x1f2>
 80014de:	2304      	movs	r3, #4
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x204>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	@ (80015dc <HAL_GPIO_Init+0x2ec>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001512:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <HAL_GPIO_Init+0x304>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001536:	4a2f      	ldr	r2, [pc, #188]	@ (80015f4 <HAL_GPIO_Init+0x304>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800153c:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <HAL_GPIO_Init+0x304>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001560:	4a24      	ldr	r2, [pc, #144]	@ (80015f4 <HAL_GPIO_Init+0x304>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001566:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <HAL_GPIO_Init+0x304>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158a:	4a1a      	ldr	r2, [pc, #104]	@ (80015f4 <HAL_GPIO_Init+0x304>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_GPIO_Init+0x304>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b4:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <HAL_GPIO_Init+0x304>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f aea2 	bls.w	800130c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	@ 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40013c00 	.word	0x40013c00

080015f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e001      	b.n	800161a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001672:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ffa6 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40013c00 	.word	0x40013c00

0800168c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e267      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d075      	beq.n	8001796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016aa:	4b88      	ldr	r3, [pc, #544]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d00c      	beq.n	80016d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	4b85      	ldr	r3, [pc, #532]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d112      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c2:	4b82      	ldr	r3, [pc, #520]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016ce:	d10b      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	4b7e      	ldr	r3, [pc, #504]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d05b      	beq.n	8001794 <HAL_RCC_OscConfig+0x108>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d157      	bne.n	8001794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e242      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x74>
 80016f2:	4b76      	ldr	r3, [pc, #472]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a75      	ldr	r2, [pc, #468]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e01d      	b.n	800173c <HAL_RCC_OscConfig+0xb0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x98>
 800170a:	4b70      	ldr	r3, [pc, #448]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6f      	ldr	r2, [pc, #444]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b6d      	ldr	r3, [pc, #436]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6c      	ldr	r2, [pc, #432]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0xb0>
 8001724:	4b69      	ldr	r3, [pc, #420]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a68      	ldr	r2, [pc, #416]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800172a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b66      	ldr	r3, [pc, #408]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a65      	ldr	r2, [pc, #404]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800173a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fc00 	bl	8000f48 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fbfc 	bl	8000f48 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	@ 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e207      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b5b      	ldr	r3, [pc, #364]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0xc0>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fbec 	bl	8000f48 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fbe8 	bl	8000f48 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	@ 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1f3      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	4b51      	ldr	r3, [pc, #324]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0xe8>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d063      	beq.n	800186a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017a2:	4b4a      	ldr	r3, [pc, #296]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00b      	beq.n	80017c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d11c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b44      	ldr	r3, [pc, #272]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d116      	bne.n	80017f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <HAL_RCC_OscConfig+0x152>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e1c7      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017de:	4b3b      	ldr	r3, [pc, #236]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4937      	ldr	r1, [pc, #220]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	e03a      	b.n	800186a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fc:	4b34      	ldr	r3, [pc, #208]	@ (80018d0 <HAL_RCC_OscConfig+0x244>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff fba1 	bl	8000f48 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff fb9d 	bl	8000f48 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1a8      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b28      	ldr	r3, [pc, #160]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4925      	ldr	r1, [pc, #148]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183e:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <HAL_RCC_OscConfig+0x244>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fb80 	bl	8000f48 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff fb7c 	bl	8000f48 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e187      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d036      	beq.n	80018e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_RCC_OscConfig+0x248>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff fb60 	bl	8000f48 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188c:	f7ff fb5c 	bl	8000f48 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e167      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_RCC_OscConfig+0x240>)
 80018a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x200>
 80018aa:	e01b      	b.n	80018e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ac:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_RCC_OscConfig+0x248>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fb49 	bl	8000f48 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	e00e      	b.n	80018d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ba:	f7ff fb45 	bl	8000f48 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d907      	bls.n	80018d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e150      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
 80018cc:	40023800 	.word	0x40023800
 80018d0:	42470000 	.word	0x42470000
 80018d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	4b88      	ldr	r3, [pc, #544]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80018da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ea      	bne.n	80018ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8097 	beq.w	8001a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f6:	4b81      	ldr	r3, [pc, #516]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b7d      	ldr	r3, [pc, #500]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	4a7c      	ldr	r2, [pc, #496]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	@ 0x40
 8001912:	4b7a      	ldr	r3, [pc, #488]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b77      	ldr	r3, [pc, #476]	@ (8001b00 <HAL_RCC_OscConfig+0x474>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d118      	bne.n	8001960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192e:	4b74      	ldr	r3, [pc, #464]	@ (8001b00 <HAL_RCC_OscConfig+0x474>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a73      	ldr	r2, [pc, #460]	@ (8001b00 <HAL_RCC_OscConfig+0x474>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff fb05 	bl	8000f48 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff fb01 	bl	8000f48 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e10c      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	4b6a      	ldr	r3, [pc, #424]	@ (8001b00 <HAL_RCC_OscConfig+0x474>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x2ea>
 8001968:	4b64      	ldr	r3, [pc, #400]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196c:	4a63      	ldr	r2, [pc, #396]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6713      	str	r3, [r2, #112]	@ 0x70
 8001974:	e01c      	b.n	80019b0 <HAL_RCC_OscConfig+0x324>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x30c>
 800197e:	4b5f      	ldr	r3, [pc, #380]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001982:	4a5e      	ldr	r2, [pc, #376]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6713      	str	r3, [r2, #112]	@ 0x70
 800198a:	4b5c      	ldr	r3, [pc, #368]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	4a5b      	ldr	r2, [pc, #364]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	@ 0x70
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0x324>
 8001998:	4b58      	ldr	r3, [pc, #352]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199c:	4a57      	ldr	r2, [pc, #348]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a4:	4b55      	ldr	r3, [pc, #340]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a8:	4a54      	ldr	r2, [pc, #336]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80019aa:	f023 0304 	bic.w	r3, r3, #4
 80019ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d015      	beq.n	80019e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff fac6 	bl	8000f48 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff fac2 	bl	8000f48 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e0cb      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	4b49      	ldr	r3, [pc, #292]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0ee      	beq.n	80019c0 <HAL_RCC_OscConfig+0x334>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7ff fab0 	bl	8000f48 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f7ff faac 	bl	8000f48 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e0b5      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a02:	4b3e      	ldr	r3, [pc, #248]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ee      	bne.n	80019ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a14:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	4a38      	ldr	r2, [pc, #224]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80a1 	beq.w	8001b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2a:	4b34      	ldr	r3, [pc, #208]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d05c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d141      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b31      	ldr	r3, [pc, #196]	@ (8001b04 <HAL_RCC_OscConfig+0x478>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fa80 	bl	8000f48 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff fa7c 	bl	8000f48 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e087      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	019b      	lsls	r3, r3, #6
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	3b01      	subs	r3, #1
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	491b      	ldr	r1, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_RCC_OscConfig+0x478>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fa55 	bl	8000f48 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff fa51 	bl	8000f48 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e05c      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x416>
 8001ac0:	e054      	b.n	8001b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <HAL_RCC_OscConfig+0x478>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa3e 	bl	8000f48 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff fa3a 	bl	8000f48 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e045      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_RCC_OscConfig+0x470>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x444>
 8001aee:	e03d      	b.n	8001b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e038      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000
 8001b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x4ec>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d028      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d121      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d11a      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b38:	4013      	ands	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d111      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	085b      	lsrs	r3, r3, #1
 8001b50:	3b01      	subs	r3, #1
 8001b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0cc      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b68      	ldr	r3, [pc, #416]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d90c      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b65      	ldr	r3, [pc, #404]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b63      	ldr	r3, [pc, #396]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0b8      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd0:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be8:	4b53      	ldr	r3, [pc, #332]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a52      	ldr	r2, [pc, #328]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	494d      	ldr	r1, [pc, #308]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d044      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b47      	ldr	r3, [pc, #284]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d119      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e07f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e06f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e067      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5a:	4b37      	ldr	r3, [pc, #220]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f023 0203 	bic.w	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4934      	ldr	r1, [pc, #208]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c6c:	f7ff f96c 	bl	8000f48 <HAL_GetTick>
 8001c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c74:	f7ff f968 	bl	8000f48 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e04f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 020c 	and.w	r2, r3, #12
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1eb      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d20c      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e032      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4916      	ldr	r1, [pc, #88]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cee:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	490e      	ldr	r1, [pc, #56]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d02:	f000 f821 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	490a      	ldr	r1, [pc, #40]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a09      	ldr	r2, [pc, #36]	@ (8001d40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f8cc 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023c00 	.word	0x40023c00
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	080048e4 	.word	0x080048e4
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d4c:	b094      	sub	sp, #80	@ 0x50
 8001d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d60:	4b79      	ldr	r3, [pc, #484]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d00d      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x40>
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	f200 80e1 	bhi.w	8001f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x34>
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d7a:	e0db      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b73      	ldr	r3, [pc, #460]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d80:	e0db      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d82:	4b73      	ldr	r3, [pc, #460]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d86:	e0d8      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d88:	4b6f      	ldr	r3, [pc, #444]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d92:	4b6d      	ldr	r3, [pc, #436]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d063      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	2200      	movs	r2, #0
 8001da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dba:	4622      	mov	r2, r4
 8001dbc:	462b      	mov	r3, r5
 8001dbe:	f04f 0000 	mov.w	r0, #0
 8001dc2:	f04f 0100 	mov.w	r1, #0
 8001dc6:	0159      	lsls	r1, r3, #5
 8001dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dcc:	0150      	lsls	r0, r2, #5
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	1a51      	subs	r1, r2, r1
 8001dd6:	6139      	str	r1, [r7, #16]
 8001dd8:	4629      	mov	r1, r5
 8001dda:	eb63 0301 	sbc.w	r3, r3, r1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dec:	4659      	mov	r1, fp
 8001dee:	018b      	lsls	r3, r1, #6
 8001df0:	4651      	mov	r1, sl
 8001df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001df6:	4651      	mov	r1, sl
 8001df8:	018a      	lsls	r2, r1, #6
 8001dfa:	4651      	mov	r1, sl
 8001dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8001e00:	4659      	mov	r1, fp
 8001e02:	eb63 0901 	sbc.w	r9, r3, r1
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e1a:	4690      	mov	r8, r2
 8001e1c:	4699      	mov	r9, r3
 8001e1e:	4623      	mov	r3, r4
 8001e20:	eb18 0303 	adds.w	r3, r8, r3
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	462b      	mov	r3, r5
 8001e28:	eb49 0303 	adc.w	r3, r9, r3
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	024b      	lsls	r3, r1, #9
 8001e3e:	4621      	mov	r1, r4
 8001e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e44:	4621      	mov	r1, r4
 8001e46:	024a      	lsls	r2, r1, #9
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4e:	2200      	movs	r2, #0
 8001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e58:	f7fe f9be 	bl	80001d8 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e64:	e058      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e66:	4b38      	ldr	r3, [pc, #224]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4611      	mov	r1, r2
 8001e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e76:	623b      	str	r3, [r7, #32]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e80:	4642      	mov	r2, r8
 8001e82:	464b      	mov	r3, r9
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	0159      	lsls	r1, r3, #5
 8001e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e92:	0150      	lsls	r0, r2, #5
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4641      	mov	r1, r8
 8001e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e9e:	4649      	mov	r1, r9
 8001ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8001ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	00eb      	lsls	r3, r5, #3
 8001eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ece:	00e2      	lsls	r2, r4, #3
 8001ed0:	4614      	mov	r4, r2
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	18e3      	adds	r3, r4, r3
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	464b      	mov	r3, r9
 8001edc:	eb45 0303 	adc.w	r3, r5, r3
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eee:	4629      	mov	r1, r5
 8001ef0:	028b      	lsls	r3, r1, #10
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef8:	4621      	mov	r1, r4
 8001efa:	028a      	lsls	r2, r1, #10
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f02:	2200      	movs	r2, #0
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	61fa      	str	r2, [r7, #28]
 8001f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f0c:	f7fe f964 	bl	80001d8 <__aeabi_uldivmod>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4613      	mov	r3, r2
 8001f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	3301      	adds	r3, #1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f32:	e002      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3750      	adds	r7, #80	@ 0x50
 8001f40:	46bd      	mov	sp, r7
 8001f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	00f42400 	.word	0x00f42400
 8001f50:	007a1200 	.word	0x007a1200

08001f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000000 	.word	0x20000000

08001f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f70:	f7ff fff0 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	0a9b      	lsrs	r3, r3, #10
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	4903      	ldr	r1, [pc, #12]	@ (8001f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f82:	5ccb      	ldrb	r3, [r1, r3]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	080048f4 	.word	0x080048f4

08001f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f98:	f7ff ffdc 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0b5b      	lsrs	r3, r3, #13
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4903      	ldr	r1, [pc, #12]	@ (8001fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	080048f4 	.word	0x080048f4

08001fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e041      	b.n	8002052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fd92 	bl	8000b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f000 fbba 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d001      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e044      	b.n	80020fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1e      	ldr	r2, [pc, #120]	@ (800210c <HAL_TIM_Base_Start_IT+0xb0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d018      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x6c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209e:	d013      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x6c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002110 <HAL_TIM_Base_Start_IT+0xb4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00e      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x6c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a19      	ldr	r2, [pc, #100]	@ (8002114 <HAL_TIM_Base_Start_IT+0xb8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d009      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x6c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <HAL_TIM_Base_Start_IT+0xbc>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d004      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x6c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a16      	ldr	r2, [pc, #88]	@ (800211c <HAL_TIM_Base_Start_IT+0xc0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d111      	bne.n	80020ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d010      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ea:	e007      	b.n	80020fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40010000 	.word	0x40010000
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800
 8002118:	40000c00 	.word	0x40000c00
 800211c:	40014000 	.word	0x40014000

08002120 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <HAL_TIM_Base_Stop_IT+0x48>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a1a      	ldr	r2, [r3, #32]
 800214e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_TIM_Base_Stop_IT+0x48>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e041      	b.n	8002214 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d106      	bne.n	80021aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f839 	bl	800221c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3304      	adds	r3, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f000 fad9 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d020      	beq.n	8002294 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01b      	beq.n	8002294 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0202 	mvn.w	r2, #2
 8002264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fa5b 	bl	8002736 <HAL_TIM_IC_CaptureCallback>
 8002280:	e005      	b.n	800228e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa4d 	bl	8002722 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fa5e 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d020      	beq.n	80022e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01b      	beq.n	80022e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0204 	mvn.w	r2, #4
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2202      	movs	r2, #2
 80022b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fa35 	bl	8002736 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa27 	bl	8002722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fa38 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d020      	beq.n	800232c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01b      	beq.n	800232c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0208 	mvn.w	r2, #8
 80022fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2204      	movs	r2, #4
 8002302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa0f 	bl	8002736 <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa01 	bl	8002722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fa12 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d020      	beq.n	8002378 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0210 	mvn.w	r2, #16
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2208      	movs	r2, #8
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f9e9 	bl	8002736 <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f9db 	bl	8002722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f9ec 	bl	800274a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0201 	mvn.w	r2, #1
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe f92c 	bl	80005f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00c      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fd04 	bl	8002dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00c      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f9bd 	bl	800275e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00c      	beq.n	8002408 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0220 	mvn.w	r2, #32
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fcd6 	bl	8002db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800242a:	2302      	movs	r3, #2
 800242c:	e0ae      	b.n	800258c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	f200 809f 	bhi.w	800257c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800243e:	a201      	add	r2, pc, #4	@ (adr r2, 8002444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002444:	08002479 	.word	0x08002479
 8002448:	0800257d 	.word	0x0800257d
 800244c:	0800257d 	.word	0x0800257d
 8002450:	0800257d 	.word	0x0800257d
 8002454:	080024b9 	.word	0x080024b9
 8002458:	0800257d 	.word	0x0800257d
 800245c:	0800257d 	.word	0x0800257d
 8002460:	0800257d 	.word	0x0800257d
 8002464:	080024fb 	.word	0x080024fb
 8002468:	0800257d 	.word	0x0800257d
 800246c:	0800257d 	.word	0x0800257d
 8002470:	0800257d 	.word	0x0800257d
 8002474:	0800253b 	.word	0x0800253b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fa04 	bl	800288c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0208 	orr.w	r2, r2, #8
 8002492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0204 	bic.w	r2, r2, #4
 80024a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6999      	ldr	r1, [r3, #24]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	619a      	str	r2, [r3, #24]
      break;
 80024b6:	e064      	b.n	8002582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fa4a 	bl	8002958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6999      	ldr	r1, [r3, #24]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	021a      	lsls	r2, r3, #8
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	619a      	str	r2, [r3, #24]
      break;
 80024f8:	e043      	b.n	8002582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fa95 	bl	8002a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0208 	orr.w	r2, r2, #8
 8002514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0204 	bic.w	r2, r2, #4
 8002524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69d9      	ldr	r1, [r3, #28]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	61da      	str	r2, [r3, #28]
      break;
 8002538:	e023      	b.n	8002582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fadf 	bl	8002b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69da      	ldr	r2, [r3, #28]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69d9      	ldr	r1, [r3, #28]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	021a      	lsls	r2, r3, #8
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	61da      	str	r2, [r3, #28]
      break;
 800257a:	e002      	b.n	8002582 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	75fb      	strb	r3, [r7, #23]
      break;
 8002580:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800258a:	7dfb      	ldrb	r3, [r7, #23]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_TIM_ConfigClockSource+0x1c>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e0b4      	b.n	800271a <HAL_TIM_ConfigClockSource+0x186>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e8:	d03e      	beq.n	8002668 <HAL_TIM_ConfigClockSource+0xd4>
 80025ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ee:	f200 8087 	bhi.w	8002700 <HAL_TIM_ConfigClockSource+0x16c>
 80025f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025f6:	f000 8086 	beq.w	8002706 <HAL_TIM_ConfigClockSource+0x172>
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025fe:	d87f      	bhi.n	8002700 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b70      	cmp	r3, #112	@ 0x70
 8002602:	d01a      	beq.n	800263a <HAL_TIM_ConfigClockSource+0xa6>
 8002604:	2b70      	cmp	r3, #112	@ 0x70
 8002606:	d87b      	bhi.n	8002700 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b60      	cmp	r3, #96	@ 0x60
 800260a:	d050      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x11a>
 800260c:	2b60      	cmp	r3, #96	@ 0x60
 800260e:	d877      	bhi.n	8002700 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b50      	cmp	r3, #80	@ 0x50
 8002612:	d03c      	beq.n	800268e <HAL_TIM_ConfigClockSource+0xfa>
 8002614:	2b50      	cmp	r3, #80	@ 0x50
 8002616:	d873      	bhi.n	8002700 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b40      	cmp	r3, #64	@ 0x40
 800261a:	d058      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x13a>
 800261c:	2b40      	cmp	r3, #64	@ 0x40
 800261e:	d86f      	bhi.n	8002700 <HAL_TIM_ConfigClockSource+0x16c>
 8002620:	2b30      	cmp	r3, #48	@ 0x30
 8002622:	d064      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x15a>
 8002624:	2b30      	cmp	r3, #48	@ 0x30
 8002626:	d86b      	bhi.n	8002700 <HAL_TIM_ConfigClockSource+0x16c>
 8002628:	2b20      	cmp	r3, #32
 800262a:	d060      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x15a>
 800262c:	2b20      	cmp	r3, #32
 800262e:	d867      	bhi.n	8002700 <HAL_TIM_ConfigClockSource+0x16c>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d05c      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x15a>
 8002634:	2b10      	cmp	r3, #16
 8002636:	d05a      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x15a>
 8002638:	e062      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800264a:	f000 fb25 	bl	8002c98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800265c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	609a      	str	r2, [r3, #8]
      break;
 8002666:	e04f      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002678:	f000 fb0e 	bl	8002c98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800268a:	609a      	str	r2, [r3, #8]
      break;
 800268c:	e03c      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800269a:	461a      	mov	r2, r3
 800269c:	f000 fa82 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2150      	movs	r1, #80	@ 0x50
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fadb 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80026ac:	e02c      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ba:	461a      	mov	r2, r3
 80026bc:	f000 faa1 	bl	8002c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2160      	movs	r1, #96	@ 0x60
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 facb 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80026cc:	e01c      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026da:	461a      	mov	r2, r3
 80026dc:	f000 fa62 	bl	8002ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2140      	movs	r1, #64	@ 0x40
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fabb 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80026ec:	e00c      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f000 fab2 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 80026fe:	e003      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
      break;
 8002704:	e000      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a3a      	ldr	r2, [pc, #232]	@ (8002870 <TIM_Base_SetConfig+0xfc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00f      	beq.n	80027ac <TIM_Base_SetConfig+0x38>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002792:	d00b      	beq.n	80027ac <TIM_Base_SetConfig+0x38>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a37      	ldr	r2, [pc, #220]	@ (8002874 <TIM_Base_SetConfig+0x100>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d007      	beq.n	80027ac <TIM_Base_SetConfig+0x38>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a36      	ldr	r2, [pc, #216]	@ (8002878 <TIM_Base_SetConfig+0x104>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d003      	beq.n	80027ac <TIM_Base_SetConfig+0x38>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a35      	ldr	r2, [pc, #212]	@ (800287c <TIM_Base_SetConfig+0x108>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d108      	bne.n	80027be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002870 <TIM_Base_SetConfig+0xfc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01b      	beq.n	80027fe <TIM_Base_SetConfig+0x8a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027cc:	d017      	beq.n	80027fe <TIM_Base_SetConfig+0x8a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <TIM_Base_SetConfig+0x100>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <TIM_Base_SetConfig+0x8a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a27      	ldr	r2, [pc, #156]	@ (8002878 <TIM_Base_SetConfig+0x104>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00f      	beq.n	80027fe <TIM_Base_SetConfig+0x8a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a26      	ldr	r2, [pc, #152]	@ (800287c <TIM_Base_SetConfig+0x108>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00b      	beq.n	80027fe <TIM_Base_SetConfig+0x8a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a25      	ldr	r2, [pc, #148]	@ (8002880 <TIM_Base_SetConfig+0x10c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <TIM_Base_SetConfig+0x8a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a24      	ldr	r2, [pc, #144]	@ (8002884 <TIM_Base_SetConfig+0x110>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <TIM_Base_SetConfig+0x8a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a23      	ldr	r2, [pc, #140]	@ (8002888 <TIM_Base_SetConfig+0x114>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0e      	ldr	r2, [pc, #56]	@ (8002870 <TIM_Base_SetConfig+0xfc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d103      	bne.n	8002844 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f023 0201 	bic.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	611a      	str	r2, [r3, #16]
  }
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40010000 	.word	0x40010000
 8002874:	40000400 	.word	0x40000400
 8002878:	40000800 	.word	0x40000800
 800287c:	40000c00 	.word	0x40000c00
 8002880:	40014000 	.word	0x40014000
 8002884:	40014400 	.word	0x40014400
 8002888:	40014800 	.word	0x40014800

0800288c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f023 0201 	bic.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f023 0302 	bic.w	r3, r3, #2
 80028d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002954 <TIM_OC1_SetConfig+0xc8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10c      	bne.n	8002902 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 0308 	bic.w	r3, r3, #8
 80028ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a13      	ldr	r2, [pc, #76]	@ (8002954 <TIM_OC1_SetConfig+0xc8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d111      	bne.n	800292e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40010000 	.word	0x40010000

08002958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f023 0210 	bic.w	r2, r3, #16
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800298e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f023 0320 	bic.w	r3, r3, #32
 80029a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a2c <TIM_OC2_SetConfig+0xd4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d10d      	bne.n	80029d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a15      	ldr	r2, [pc, #84]	@ (8002a2c <TIM_OC2_SetConfig+0xd4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d113      	bne.n	8002a04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000

08002a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0303 	bic.w	r3, r3, #3
 8002a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a1d      	ldr	r2, [pc, #116]	@ (8002b00 <TIM_OC3_SetConfig+0xd0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10d      	bne.n	8002aaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <TIM_OC3_SetConfig+0xd0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d113      	bne.n	8002ada <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	621a      	str	r2, [r3, #32]
}
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40010000 	.word	0x40010000

08002b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	031b      	lsls	r3, r3, #12
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ba0 <TIM_OC4_SetConfig+0x9c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d109      	bne.n	8002b78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	019b      	lsls	r3, r3, #6
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40010000 	.word	0x40010000

08002ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f023 0201 	bic.w	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f023 030a 	bic.w	r3, r3, #10
 8002be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f023 0210 	bic.w	r2, r3, #16
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	031b      	lsls	r3, r3, #12
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f043 0307 	orr.w	r3, r3, #7
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	021a      	lsls	r2, r3, #8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	609a      	str	r2, [r3, #8]
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e050      	b.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d018      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d3c:	d013      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00e      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a16      	ldr	r2, [pc, #88]	@ (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a15      	ldr	r2, [pc, #84]	@ (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a13      	ldr	r2, [pc, #76]	@ (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10c      	bne.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40014000 	.word	0x40014000

08002db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e042      	b.n	8002e74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fea8 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	@ 0x24
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fdff 	bl	8003a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	@ 0x28
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d175      	bne.n	8002f88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_UART_Transmit+0x2c>
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e06e      	b.n	8002f8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2221      	movs	r2, #33	@ 0x21
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eba:	f7fe f845 	bl	8000f48 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed4:	d108      	bne.n	8002ee8 <HAL_UART_Transmit+0x6c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	e003      	b.n	8002ef0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef0:	e02e      	b.n	8002f50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2180      	movs	r1, #128	@ 0x80
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fb9b 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e03a      	b.n	8002f8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10b      	bne.n	8002f32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	e007      	b.n	8002f42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1cb      	bne.n	8002ef2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2200      	movs	r2, #0
 8002f62:	2140      	movs	r1, #64	@ 0x40
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fb67 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e006      	b.n	8002f8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b08a      	sub	sp, #40	@ 0x28
 8002f96:	af02      	add	r7, sp, #8
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	f040 8081 	bne.w	80030b6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_UART_Receive+0x2e>
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e079      	b.n	80030b8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2222      	movs	r2, #34	@ 0x22
 8002fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fd8:	f7fd ffb6 	bl	8000f48 <HAL_GetTick>
 8002fdc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff2:	d108      	bne.n	8003006 <HAL_UART_Receive+0x74>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d104      	bne.n	8003006 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	e003      	b.n	800300e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800300e:	e047      	b.n	80030a0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2200      	movs	r2, #0
 8003018:	2120      	movs	r1, #32
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fb0c 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e042      	b.n	80030b8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10c      	bne.n	8003052 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003044:	b29a      	uxth	r2, r3
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	3302      	adds	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e01f      	b.n	8003092 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800305a:	d007      	beq.n	800306c <HAL_UART_Receive+0xda>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <HAL_UART_Receive+0xe8>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e008      	b.n	800308c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003086:	b2da      	uxtb	r2, r3
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1b2      	bne.n	8003010 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0ba      	sub	sp, #232	@ 0xe8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10f      	bne.n	8003126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_UART_IRQHandler+0x66>
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fbc2 	bl	80038a8 <UART_Receive_IT>
      return;
 8003124:	e25b      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80de 	beq.w	80032ec <HAL_UART_IRQHandler+0x22c>
 8003130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800313c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003140:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80d1 	beq.w	80032ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_UART_IRQHandler+0xae>
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800315a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f043 0201 	orr.w	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xd2>
 800317a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f043 0202 	orr.w	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_UART_IRQHandler+0xf6>
 800319e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f043 0204 	orr.w	r2, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d011      	beq.n	80031e6 <HAL_UART_IRQHandler+0x126>
 80031c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d105      	bne.n	80031da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f043 0208 	orr.w	r2, r3, #8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 81f2 	beq.w	80035d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_UART_IRQHandler+0x14e>
 80031fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fb4d 	bl	80038a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003218:	2b40      	cmp	r3, #64	@ 0x40
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_UART_IRQHandler+0x17a>
 8003232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d04f      	beq.n	80032da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa55 	bl	80036ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324a:	2b40      	cmp	r3, #64	@ 0x40
 800324c:	d141      	bne.n	80032d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3314      	adds	r3, #20
 8003254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800326c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3314      	adds	r3, #20
 8003276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800327a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800327e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1d9      	bne.n	800324e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d013      	beq.n	80032ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a6:	4a7e      	ldr	r2, [pc, #504]	@ (80034a0 <HAL_UART_IRQHandler+0x3e0>)
 80032a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fffb 	bl	80012aa <HAL_DMA_Abort_IT>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032c4:	4610      	mov	r0, r2
 80032c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e00e      	b.n	80032e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f99e 	bl	800360c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e00a      	b.n	80032e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f99a 	bl	800360c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e006      	b.n	80032e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f996 	bl	800360c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032e6:	e175      	b.n	80035d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	bf00      	nop
    return;
 80032ea:	e173      	b.n	80035d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f040 814f 	bne.w	8003594 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8148 	beq.w	8003594 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8141 	beq.w	8003594 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003332:	2b40      	cmp	r3, #64	@ 0x40
 8003334:	f040 80b6 	bne.w	80034a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8145 	beq.w	80035d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003356:	429a      	cmp	r2, r3
 8003358:	f080 813e 	bcs.w	80035d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003362:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800336e:	f000 8088 	beq.w	8003482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800338c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800339e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1d9      	bne.n	8003372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3314      	adds	r3, #20
 80033c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3314      	adds	r3, #20
 80033de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e1      	bne.n	80033be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3314      	adds	r3, #20
 8003400:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800340a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800340c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800341e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003420:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003424:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800342c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e3      	bne.n	80033fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003452:	f023 0310 	bic.w	r3, r3, #16
 8003456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003464:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003466:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800346a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e3      	bne.n	8003440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd fea4 	bl	80011ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003490:	b29b      	uxth	r3, r3
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	b29b      	uxth	r3, r3
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f8c1 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800349e:	e09b      	b.n	80035d8 <HAL_UART_IRQHandler+0x518>
 80034a0:	080037b1 	.word	0x080037b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 808e 	beq.w	80035dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8089 	beq.w	80035dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80034f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e3      	bne.n	80034ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	623b      	str	r3, [r7, #32]
   return(result);
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3314      	adds	r3, #20
 8003522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003526:	633a      	str	r2, [r7, #48]	@ 0x30
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800352c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e3      	bne.n	8003502 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	60fb      	str	r3, [r7, #12]
   return(result);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0310 	bic.w	r3, r3, #16
 800355e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800356c:	61fa      	str	r2, [r7, #28]
 800356e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	69b9      	ldr	r1, [r7, #24]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	617b      	str	r3, [r7, #20]
   return(result);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e3      	bne.n	8003548 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f847 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003592:	e023      	b.n	80035dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <HAL_UART_IRQHandler+0x4f4>
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f913 	bl	80037d8 <UART_Transmit_IT>
    return;
 80035b2:	e014      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00e      	beq.n	80035de <HAL_UART_IRQHandler+0x51e>
 80035c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f953 	bl	8003878 <UART_EndTransmit_IT>
    return;
 80035d2:	e004      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
    return;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
      return;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_UART_IRQHandler+0x51e>
      return;
 80035dc:	bf00      	nop
  }
}
 80035de:	37e8      	adds	r7, #232	@ 0xe8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003648:	e03b      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d037      	beq.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fd fc79 	bl	8000f48 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	6a3a      	ldr	r2, [r7, #32]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <UART_WaitOnFlagUntilTimeout+0x30>
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e03a      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d023      	beq.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b80      	cmp	r3, #128	@ 0x80
 800367e:	d020      	beq.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b40      	cmp	r3, #64	@ 0x40
 8003684:	d01d      	beq.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d116      	bne.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f81d 	bl	80036ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2208      	movs	r2, #8
 80036b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e00f      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d0b4      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b095      	sub	sp, #84	@ 0x54
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003712:	643a      	str	r2, [r7, #64]	@ 0x40
 8003714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	61fb      	str	r3, [r7, #28]
   return(result);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3314      	adds	r3, #20
 8003744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800374c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375e:	2b01      	cmp	r3, #1
 8003760:	d119      	bne.n	8003796 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	60bb      	str	r3, [r7, #8]
   return(result);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f023 0310 	bic.w	r3, r3, #16
 8003778:	647b      	str	r3, [r7, #68]	@ 0x44
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003782:	61ba      	str	r2, [r7, #24]
 8003784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6979      	ldr	r1, [r7, #20]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	613b      	str	r3, [r7, #16]
   return(result);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037a4:	bf00      	nop
 80037a6:	3754      	adds	r7, #84	@ 0x54
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff ff1e 	bl	800360c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b21      	cmp	r3, #33	@ 0x21
 80037ea:	d13e      	bne.n	800386a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f4:	d114      	bne.n	8003820 <UART_Transmit_IT+0x48>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d110      	bne.n	8003820 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003812:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	1c9a      	adds	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	621a      	str	r2, [r3, #32]
 800381e:	e008      	b.n	8003832 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	1c59      	adds	r1, r3, #1
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6211      	str	r1, [r2, #32]
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4619      	mov	r1, r3
 8003840:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003854:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003864:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800388e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fea3 	bl	80035e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	@ 0x30
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b22      	cmp	r3, #34	@ 0x22
 80038ba:	f040 80ae 	bne.w	8003a1a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c6:	d117      	bne.n	80038f8 <UART_Receive_IT+0x50>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d113      	bne.n	80038f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	1c9a      	adds	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80038f6:	e026      	b.n	8003946 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800390a:	d007      	beq.n	800391c <UART_Receive_IT+0x74>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <UART_Receive_IT+0x82>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e008      	b.n	800393c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003936:	b2da      	uxtb	r2, r3
 8003938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29b      	uxth	r3, r3
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4619      	mov	r1, r3
 8003954:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003956:	2b00      	cmp	r3, #0
 8003958:	d15d      	bne.n	8003a16 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0220 	bic.w	r2, r2, #32
 8003968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003978:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	2b01      	cmp	r3, #1
 800399e:	d135      	bne.n	8003a0c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	613b      	str	r3, [r7, #16]
   return(result);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c6:	623a      	str	r2, [r7, #32]
 80039c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	69f9      	ldr	r1, [r7, #28]
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e5      	bne.n	80039a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d10a      	bne.n	80039fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff fe0b 	bl	8003620 <HAL_UARTEx_RxEventCallback>
 8003a0a:	e002      	b.n	8003a12 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff fdf3 	bl	80035f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e002      	b.n	8003a1c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3730      	adds	r7, #48	@ 0x30
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b0c0      	sub	sp, #256	@ 0x100
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	68d9      	ldr	r1, [r3, #12]
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	ea40 0301 	orr.w	r3, r0, r1
 8003a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a7c:	f021 010c 	bic.w	r1, r1, #12
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9e:	6999      	ldr	r1, [r3, #24]
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	ea40 0301 	orr.w	r3, r0, r1
 8003aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8003cf0 <UART_SetConfig+0x2cc>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d005      	beq.n	8003ac4 <UART_SetConfig+0xa0>
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b8d      	ldr	r3, [pc, #564]	@ (8003cf4 <UART_SetConfig+0x2d0>)
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d104      	bne.n	8003ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7fe fa66 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003acc:	e003      	b.n	8003ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fe fa4d 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
 8003ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae0:	f040 810c 	bne.w	8003cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003af6:	4622      	mov	r2, r4
 8003af8:	462b      	mov	r3, r5
 8003afa:	1891      	adds	r1, r2, r2
 8003afc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003afe:	415b      	adcs	r3, r3
 8003b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b06:	4621      	mov	r1, r4
 8003b08:	eb12 0801 	adds.w	r8, r2, r1
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	eb43 0901 	adc.w	r9, r3, r1
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b26:	4690      	mov	r8, r2
 8003b28:	4699      	mov	r9, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	eb18 0303 	adds.w	r3, r8, r3
 8003b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b34:	462b      	mov	r3, r5
 8003b36:	eb49 0303 	adc.w	r3, r9, r3
 8003b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b52:	460b      	mov	r3, r1
 8003b54:	18db      	adds	r3, r3, r3
 8003b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b58:	4613      	mov	r3, r2
 8003b5a:	eb42 0303 	adc.w	r3, r2, r3
 8003b5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b68:	f7fc fb36 	bl	80001d8 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4b61      	ldr	r3, [pc, #388]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003b72:	fba3 2302 	umull	r2, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	011c      	lsls	r4, r3, #4
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b94:	415b      	adcs	r3, r3
 8003b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bbc:	4692      	mov	sl, r2
 8003bbe:	469b      	mov	fp, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003be0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003be8:	460b      	mov	r3, r1
 8003bea:	18db      	adds	r3, r3, r3
 8003bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bee:	4613      	mov	r3, r2
 8003bf0:	eb42 0303 	adc.w	r3, r2, r3
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bfe:	f7fc faeb 	bl	80001d8 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2264      	movs	r2, #100	@ 0x64
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	1acb      	subs	r3, r1, r3
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c1e:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003c20:	fba3 2302 	umull	r2, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c2c:	441c      	add	r4, r3
 8003c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c50:	4641      	mov	r1, r8
 8003c52:	1851      	adds	r1, r2, r1
 8003c54:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c56:	4649      	mov	r1, r9
 8003c58:	414b      	adcs	r3, r1
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c68:	4659      	mov	r1, fp
 8003c6a:	00cb      	lsls	r3, r1, #3
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c72:	4651      	mov	r1, sl
 8003c74:	00ca      	lsls	r2, r1, #3
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c84:	464b      	mov	r3, r9
 8003c86:	460a      	mov	r2, r1
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	18db      	adds	r3, r3, r3
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003caa:	4613      	mov	r3, r2
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cba:	f7fc fa8d 	bl	80001d8 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	@ 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	3332      	adds	r3, #50	@ 0x32
 8003cd6:	4a08      	ldr	r2, [pc, #32]	@ (8003cf8 <UART_SetConfig+0x2d4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 0207 	and.w	r2, r3, #7
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4422      	add	r2, r4
 8003cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cec:	e106      	b.n	8003efc <UART_SetConfig+0x4d8>
 8003cee:	bf00      	nop
 8003cf0:	40011000 	.word	0x40011000
 8003cf4:	40011400 	.word	0x40011400
 8003cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d0e:	4642      	mov	r2, r8
 8003d10:	464b      	mov	r3, r9
 8003d12:	1891      	adds	r1, r2, r2
 8003d14:	6239      	str	r1, [r7, #32]
 8003d16:	415b      	adcs	r3, r3
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d1e:	4641      	mov	r1, r8
 8003d20:	1854      	adds	r4, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb43 0501 	adc.w	r5, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	00eb      	lsls	r3, r5, #3
 8003d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d36:	00e2      	lsls	r2, r4, #3
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	18e3      	adds	r3, r4, r3
 8003d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d44:	464b      	mov	r3, r9
 8003d46:	eb45 0303 	adc.w	r3, r5, r3
 8003d4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	008b      	lsls	r3, r1, #2
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d74:	4621      	mov	r1, r4
 8003d76:	008a      	lsls	r2, r1, #2
 8003d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d7c:	f7fc fa2c 	bl	80001d8 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4b60      	ldr	r3, [pc, #384]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003d86:	fba3 2302 	umull	r2, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	011c      	lsls	r4, r3, #4
 8003d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003da0:	4642      	mov	r2, r8
 8003da2:	464b      	mov	r3, r9
 8003da4:	1891      	adds	r1, r2, r2
 8003da6:	61b9      	str	r1, [r7, #24]
 8003da8:	415b      	adcs	r3, r3
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db0:	4641      	mov	r1, r8
 8003db2:	1851      	adds	r1, r2, r1
 8003db4:	6139      	str	r1, [r7, #16]
 8003db6:	4649      	mov	r1, r9
 8003db8:	414b      	adcs	r3, r1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc8:	4659      	mov	r1, fp
 8003dca:	00cb      	lsls	r3, r1, #3
 8003dcc:	4651      	mov	r1, sl
 8003dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	00ca      	lsls	r2, r1, #3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4642      	mov	r2, r8
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003de4:	464b      	mov	r3, r9
 8003de6:	460a      	mov	r2, r1
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e08:	4649      	mov	r1, r9
 8003e0a:	008b      	lsls	r3, r1, #2
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e12:	4641      	mov	r1, r8
 8003e14:	008a      	lsls	r2, r1, #2
 8003e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e1a:	f7fc f9dd 	bl	80001d8 <__aeabi_uldivmod>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	4b38      	ldr	r3, [pc, #224]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003e26:	fba3 2301 	umull	r2, r3, r3, r1
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2264      	movs	r2, #100	@ 0x64
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	1acb      	subs	r3, r1, r3
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	3332      	adds	r3, #50	@ 0x32
 8003e38:	4a33      	ldr	r2, [pc, #204]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e44:	441c      	add	r4, r3
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e54:	4642      	mov	r2, r8
 8003e56:	464b      	mov	r3, r9
 8003e58:	1891      	adds	r1, r2, r2
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	415b      	adcs	r3, r3
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e64:	4641      	mov	r1, r8
 8003e66:	1851      	adds	r1, r2, r1
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	414b      	adcs	r3, r1
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e7c:	4659      	mov	r1, fp
 8003e7e:	00cb      	lsls	r3, r1, #3
 8003e80:	4651      	mov	r1, sl
 8003e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e86:	4651      	mov	r1, sl
 8003e88:	00ca      	lsls	r2, r1, #3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4642      	mov	r2, r8
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e96:	464b      	mov	r3, r9
 8003e98:	460a      	mov	r2, r1
 8003e9a:	eb42 0303 	adc.w	r3, r2, r3
 8003e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003eb8:	4649      	mov	r1, r9
 8003eba:	008b      	lsls	r3, r1, #2
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	008a      	lsls	r2, r1, #2
 8003ec6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003eca:	f7fc f985 	bl	80001d8 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	@ 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	3332      	adds	r3, #50	@ 0x32
 8003ee6:	4a08      	ldr	r2, [pc, #32]	@ (8003f08 <UART_SetConfig+0x4e4>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4422      	add	r2, r4
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f02:	46bd      	mov	sp, r7
 8003f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f08:	51eb851f 	.word	0x51eb851f

08003f0c <std>:
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	b510      	push	{r4, lr}
 8003f10:	4604      	mov	r4, r0
 8003f12:	e9c0 3300 	strd	r3, r3, [r0]
 8003f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f1a:	6083      	str	r3, [r0, #8]
 8003f1c:	8181      	strh	r1, [r0, #12]
 8003f1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f20:	81c2      	strh	r2, [r0, #14]
 8003f22:	6183      	str	r3, [r0, #24]
 8003f24:	4619      	mov	r1, r3
 8003f26:	2208      	movs	r2, #8
 8003f28:	305c      	adds	r0, #92	@ 0x5c
 8003f2a:	f000 f9e7 	bl	80042fc <memset>
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <std+0x58>)
 8003f30:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <std+0x5c>)
 8003f34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <std+0x60>)
 8003f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <std+0x64>)
 8003f3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <std+0x68>)
 8003f40:	6224      	str	r4, [r4, #32]
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d006      	beq.n	8003f54 <std+0x48>
 8003f46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f4a:	4294      	cmp	r4, r2
 8003f4c:	d002      	beq.n	8003f54 <std+0x48>
 8003f4e:	33d0      	adds	r3, #208	@ 0xd0
 8003f50:	429c      	cmp	r4, r3
 8003f52:	d105      	bne.n	8003f60 <std+0x54>
 8003f54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f5c:	f000 ba46 	b.w	80043ec <__retarget_lock_init_recursive>
 8003f60:	bd10      	pop	{r4, pc}
 8003f62:	bf00      	nop
 8003f64:	0800414d 	.word	0x0800414d
 8003f68:	0800416f 	.word	0x0800416f
 8003f6c:	080041a7 	.word	0x080041a7
 8003f70:	080041cb 	.word	0x080041cb
 8003f74:	20000120 	.word	0x20000120

08003f78 <stdio_exit_handler>:
 8003f78:	4a02      	ldr	r2, [pc, #8]	@ (8003f84 <stdio_exit_handler+0xc>)
 8003f7a:	4903      	ldr	r1, [pc, #12]	@ (8003f88 <stdio_exit_handler+0x10>)
 8003f7c:	4803      	ldr	r0, [pc, #12]	@ (8003f8c <stdio_exit_handler+0x14>)
 8003f7e:	f000 b869 	b.w	8004054 <_fwalk_sglue>
 8003f82:	bf00      	nop
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	080046ed 	.word	0x080046ed
 8003f8c:	2000001c 	.word	0x2000001c

08003f90 <cleanup_stdio>:
 8003f90:	6841      	ldr	r1, [r0, #4]
 8003f92:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <cleanup_stdio+0x34>)
 8003f94:	4299      	cmp	r1, r3
 8003f96:	b510      	push	{r4, lr}
 8003f98:	4604      	mov	r4, r0
 8003f9a:	d001      	beq.n	8003fa0 <cleanup_stdio+0x10>
 8003f9c:	f000 fba6 	bl	80046ec <_fflush_r>
 8003fa0:	68a1      	ldr	r1, [r4, #8]
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <cleanup_stdio+0x38>)
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	d002      	beq.n	8003fae <cleanup_stdio+0x1e>
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 fb9f 	bl	80046ec <_fflush_r>
 8003fae:	68e1      	ldr	r1, [r4, #12]
 8003fb0:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <cleanup_stdio+0x3c>)
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	d004      	beq.n	8003fc0 <cleanup_stdio+0x30>
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbc:	f000 bb96 	b.w	80046ec <_fflush_r>
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000120 	.word	0x20000120
 8003fc8:	20000188 	.word	0x20000188
 8003fcc:	200001f0 	.word	0x200001f0

08003fd0 <global_stdio_init.part.0>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <global_stdio_init.part.0+0x30>)
 8003fd4:	4c0b      	ldr	r4, [pc, #44]	@ (8004004 <global_stdio_init.part.0+0x34>)
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8004008 <global_stdio_init.part.0+0x38>)
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	4620      	mov	r0, r4
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2104      	movs	r1, #4
 8003fe0:	f7ff ff94 	bl	8003f0c <std>
 8003fe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fe8:	2201      	movs	r2, #1
 8003fea:	2109      	movs	r1, #9
 8003fec:	f7ff ff8e 	bl	8003f0c <std>
 8003ff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffa:	2112      	movs	r1, #18
 8003ffc:	f7ff bf86 	b.w	8003f0c <std>
 8004000:	20000258 	.word	0x20000258
 8004004:	20000120 	.word	0x20000120
 8004008:	08003f79 	.word	0x08003f79

0800400c <__sfp_lock_acquire>:
 800400c:	4801      	ldr	r0, [pc, #4]	@ (8004014 <__sfp_lock_acquire+0x8>)
 800400e:	f000 b9ee 	b.w	80043ee <__retarget_lock_acquire_recursive>
 8004012:	bf00      	nop
 8004014:	20000261 	.word	0x20000261

08004018 <__sfp_lock_release>:
 8004018:	4801      	ldr	r0, [pc, #4]	@ (8004020 <__sfp_lock_release+0x8>)
 800401a:	f000 b9e9 	b.w	80043f0 <__retarget_lock_release_recursive>
 800401e:	bf00      	nop
 8004020:	20000261 	.word	0x20000261

08004024 <__sinit>:
 8004024:	b510      	push	{r4, lr}
 8004026:	4604      	mov	r4, r0
 8004028:	f7ff fff0 	bl	800400c <__sfp_lock_acquire>
 800402c:	6a23      	ldr	r3, [r4, #32]
 800402e:	b11b      	cbz	r3, 8004038 <__sinit+0x14>
 8004030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004034:	f7ff bff0 	b.w	8004018 <__sfp_lock_release>
 8004038:	4b04      	ldr	r3, [pc, #16]	@ (800404c <__sinit+0x28>)
 800403a:	6223      	str	r3, [r4, #32]
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <__sinit+0x2c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f5      	bne.n	8004030 <__sinit+0xc>
 8004044:	f7ff ffc4 	bl	8003fd0 <global_stdio_init.part.0>
 8004048:	e7f2      	b.n	8004030 <__sinit+0xc>
 800404a:	bf00      	nop
 800404c:	08003f91 	.word	0x08003f91
 8004050:	20000258 	.word	0x20000258

08004054 <_fwalk_sglue>:
 8004054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004058:	4607      	mov	r7, r0
 800405a:	4688      	mov	r8, r1
 800405c:	4614      	mov	r4, r2
 800405e:	2600      	movs	r6, #0
 8004060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004064:	f1b9 0901 	subs.w	r9, r9, #1
 8004068:	d505      	bpl.n	8004076 <_fwalk_sglue+0x22>
 800406a:	6824      	ldr	r4, [r4, #0]
 800406c:	2c00      	cmp	r4, #0
 800406e:	d1f7      	bne.n	8004060 <_fwalk_sglue+0xc>
 8004070:	4630      	mov	r0, r6
 8004072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004076:	89ab      	ldrh	r3, [r5, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d907      	bls.n	800408c <_fwalk_sglue+0x38>
 800407c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004080:	3301      	adds	r3, #1
 8004082:	d003      	beq.n	800408c <_fwalk_sglue+0x38>
 8004084:	4629      	mov	r1, r5
 8004086:	4638      	mov	r0, r7
 8004088:	47c0      	blx	r8
 800408a:	4306      	orrs	r6, r0
 800408c:	3568      	adds	r5, #104	@ 0x68
 800408e:	e7e9      	b.n	8004064 <_fwalk_sglue+0x10>

08004090 <_puts_r>:
 8004090:	6a03      	ldr	r3, [r0, #32]
 8004092:	b570      	push	{r4, r5, r6, lr}
 8004094:	6884      	ldr	r4, [r0, #8]
 8004096:	4605      	mov	r5, r0
 8004098:	460e      	mov	r6, r1
 800409a:	b90b      	cbnz	r3, 80040a0 <_puts_r+0x10>
 800409c:	f7ff ffc2 	bl	8004024 <__sinit>
 80040a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040a2:	07db      	lsls	r3, r3, #31
 80040a4:	d405      	bmi.n	80040b2 <_puts_r+0x22>
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	0598      	lsls	r0, r3, #22
 80040aa:	d402      	bmi.n	80040b2 <_puts_r+0x22>
 80040ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040ae:	f000 f99e 	bl	80043ee <__retarget_lock_acquire_recursive>
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	0719      	lsls	r1, r3, #28
 80040b6:	d502      	bpl.n	80040be <_puts_r+0x2e>
 80040b8:	6923      	ldr	r3, [r4, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d135      	bne.n	800412a <_puts_r+0x9a>
 80040be:	4621      	mov	r1, r4
 80040c0:	4628      	mov	r0, r5
 80040c2:	f000 f8c5 	bl	8004250 <__swsetup_r>
 80040c6:	b380      	cbz	r0, 800412a <_puts_r+0x9a>
 80040c8:	f04f 35ff 	mov.w	r5, #4294967295
 80040cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040ce:	07da      	lsls	r2, r3, #31
 80040d0:	d405      	bmi.n	80040de <_puts_r+0x4e>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	059b      	lsls	r3, r3, #22
 80040d6:	d402      	bmi.n	80040de <_puts_r+0x4e>
 80040d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040da:	f000 f989 	bl	80043f0 <__retarget_lock_release_recursive>
 80040de:	4628      	mov	r0, r5
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	da04      	bge.n	80040f0 <_puts_r+0x60>
 80040e6:	69a2      	ldr	r2, [r4, #24]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	dc17      	bgt.n	800411c <_puts_r+0x8c>
 80040ec:	290a      	cmp	r1, #10
 80040ee:	d015      	beq.n	800411c <_puts_r+0x8c>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	6022      	str	r2, [r4, #0]
 80040f6:	7019      	strb	r1, [r3, #0]
 80040f8:	68a3      	ldr	r3, [r4, #8]
 80040fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040fe:	3b01      	subs	r3, #1
 8004100:	60a3      	str	r3, [r4, #8]
 8004102:	2900      	cmp	r1, #0
 8004104:	d1ed      	bne.n	80040e2 <_puts_r+0x52>
 8004106:	2b00      	cmp	r3, #0
 8004108:	da11      	bge.n	800412e <_puts_r+0x9e>
 800410a:	4622      	mov	r2, r4
 800410c:	210a      	movs	r1, #10
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f85f 	bl	80041d2 <__swbuf_r>
 8004114:	3001      	adds	r0, #1
 8004116:	d0d7      	beq.n	80040c8 <_puts_r+0x38>
 8004118:	250a      	movs	r5, #10
 800411a:	e7d7      	b.n	80040cc <_puts_r+0x3c>
 800411c:	4622      	mov	r2, r4
 800411e:	4628      	mov	r0, r5
 8004120:	f000 f857 	bl	80041d2 <__swbuf_r>
 8004124:	3001      	adds	r0, #1
 8004126:	d1e7      	bne.n	80040f8 <_puts_r+0x68>
 8004128:	e7ce      	b.n	80040c8 <_puts_r+0x38>
 800412a:	3e01      	subs	r6, #1
 800412c:	e7e4      	b.n	80040f8 <_puts_r+0x68>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	6022      	str	r2, [r4, #0]
 8004134:	220a      	movs	r2, #10
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e7ee      	b.n	8004118 <_puts_r+0x88>
	...

0800413c <puts>:
 800413c:	4b02      	ldr	r3, [pc, #8]	@ (8004148 <puts+0xc>)
 800413e:	4601      	mov	r1, r0
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f7ff bfa5 	b.w	8004090 <_puts_r>
 8004146:	bf00      	nop
 8004148:	20000018 	.word	0x20000018

0800414c <__sread>:
 800414c:	b510      	push	{r4, lr}
 800414e:	460c      	mov	r4, r1
 8004150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004154:	f000 f8fc 	bl	8004350 <_read_r>
 8004158:	2800      	cmp	r0, #0
 800415a:	bfab      	itete	ge
 800415c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800415e:	89a3      	ldrhlt	r3, [r4, #12]
 8004160:	181b      	addge	r3, r3, r0
 8004162:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004166:	bfac      	ite	ge
 8004168:	6563      	strge	r3, [r4, #84]	@ 0x54
 800416a:	81a3      	strhlt	r3, [r4, #12]
 800416c:	bd10      	pop	{r4, pc}

0800416e <__swrite>:
 800416e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004172:	461f      	mov	r7, r3
 8004174:	898b      	ldrh	r3, [r1, #12]
 8004176:	05db      	lsls	r3, r3, #23
 8004178:	4605      	mov	r5, r0
 800417a:	460c      	mov	r4, r1
 800417c:	4616      	mov	r6, r2
 800417e:	d505      	bpl.n	800418c <__swrite+0x1e>
 8004180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004184:	2302      	movs	r3, #2
 8004186:	2200      	movs	r2, #0
 8004188:	f000 f8d0 	bl	800432c <_lseek_r>
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	4632      	mov	r2, r6
 800419a:	463b      	mov	r3, r7
 800419c:	4628      	mov	r0, r5
 800419e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a2:	f000 b8e7 	b.w	8004374 <_write_r>

080041a6 <__sseek>:
 80041a6:	b510      	push	{r4, lr}
 80041a8:	460c      	mov	r4, r1
 80041aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ae:	f000 f8bd 	bl	800432c <_lseek_r>
 80041b2:	1c43      	adds	r3, r0, #1
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	bf15      	itete	ne
 80041b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041c2:	81a3      	strheq	r3, [r4, #12]
 80041c4:	bf18      	it	ne
 80041c6:	81a3      	strhne	r3, [r4, #12]
 80041c8:	bd10      	pop	{r4, pc}

080041ca <__sclose>:
 80041ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ce:	f000 b89d 	b.w	800430c <_close_r>

080041d2 <__swbuf_r>:
 80041d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d4:	460e      	mov	r6, r1
 80041d6:	4614      	mov	r4, r2
 80041d8:	4605      	mov	r5, r0
 80041da:	b118      	cbz	r0, 80041e4 <__swbuf_r+0x12>
 80041dc:	6a03      	ldr	r3, [r0, #32]
 80041de:	b90b      	cbnz	r3, 80041e4 <__swbuf_r+0x12>
 80041e0:	f7ff ff20 	bl	8004024 <__sinit>
 80041e4:	69a3      	ldr	r3, [r4, #24]
 80041e6:	60a3      	str	r3, [r4, #8]
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	071a      	lsls	r2, r3, #28
 80041ec:	d501      	bpl.n	80041f2 <__swbuf_r+0x20>
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	b943      	cbnz	r3, 8004204 <__swbuf_r+0x32>
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f000 f82b 	bl	8004250 <__swsetup_r>
 80041fa:	b118      	cbz	r0, 8004204 <__swbuf_r+0x32>
 80041fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004200:	4638      	mov	r0, r7
 8004202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	6922      	ldr	r2, [r4, #16]
 8004208:	1a98      	subs	r0, r3, r2
 800420a:	6963      	ldr	r3, [r4, #20]
 800420c:	b2f6      	uxtb	r6, r6
 800420e:	4283      	cmp	r3, r0
 8004210:	4637      	mov	r7, r6
 8004212:	dc05      	bgt.n	8004220 <__swbuf_r+0x4e>
 8004214:	4621      	mov	r1, r4
 8004216:	4628      	mov	r0, r5
 8004218:	f000 fa68 	bl	80046ec <_fflush_r>
 800421c:	2800      	cmp	r0, #0
 800421e:	d1ed      	bne.n	80041fc <__swbuf_r+0x2a>
 8004220:	68a3      	ldr	r3, [r4, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	60a3      	str	r3, [r4, #8]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	701e      	strb	r6, [r3, #0]
 800422e:	6962      	ldr	r2, [r4, #20]
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	429a      	cmp	r2, r3
 8004234:	d004      	beq.n	8004240 <__swbuf_r+0x6e>
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	07db      	lsls	r3, r3, #31
 800423a:	d5e1      	bpl.n	8004200 <__swbuf_r+0x2e>
 800423c:	2e0a      	cmp	r6, #10
 800423e:	d1df      	bne.n	8004200 <__swbuf_r+0x2e>
 8004240:	4621      	mov	r1, r4
 8004242:	4628      	mov	r0, r5
 8004244:	f000 fa52 	bl	80046ec <_fflush_r>
 8004248:	2800      	cmp	r0, #0
 800424a:	d0d9      	beq.n	8004200 <__swbuf_r+0x2e>
 800424c:	e7d6      	b.n	80041fc <__swbuf_r+0x2a>
	...

08004250 <__swsetup_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4b29      	ldr	r3, [pc, #164]	@ (80042f8 <__swsetup_r+0xa8>)
 8004254:	4605      	mov	r5, r0
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	460c      	mov	r4, r1
 800425a:	b118      	cbz	r0, 8004264 <__swsetup_r+0x14>
 800425c:	6a03      	ldr	r3, [r0, #32]
 800425e:	b90b      	cbnz	r3, 8004264 <__swsetup_r+0x14>
 8004260:	f7ff fee0 	bl	8004024 <__sinit>
 8004264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004268:	0719      	lsls	r1, r3, #28
 800426a:	d422      	bmi.n	80042b2 <__swsetup_r+0x62>
 800426c:	06da      	lsls	r2, r3, #27
 800426e:	d407      	bmi.n	8004280 <__swsetup_r+0x30>
 8004270:	2209      	movs	r2, #9
 8004272:	602a      	str	r2, [r5, #0]
 8004274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	f04f 30ff 	mov.w	r0, #4294967295
 800427e:	e033      	b.n	80042e8 <__swsetup_r+0x98>
 8004280:	0758      	lsls	r0, r3, #29
 8004282:	d512      	bpl.n	80042aa <__swsetup_r+0x5a>
 8004284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004286:	b141      	cbz	r1, 800429a <__swsetup_r+0x4a>
 8004288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800428c:	4299      	cmp	r1, r3
 800428e:	d002      	beq.n	8004296 <__swsetup_r+0x46>
 8004290:	4628      	mov	r0, r5
 8004292:	f000 f8af 	bl	80043f4 <_free_r>
 8004296:	2300      	movs	r3, #0
 8004298:	6363      	str	r3, [r4, #52]	@ 0x34
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	2300      	movs	r3, #0
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f043 0308 	orr.w	r3, r3, #8
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	6923      	ldr	r3, [r4, #16]
 80042b4:	b94b      	cbnz	r3, 80042ca <__swsetup_r+0x7a>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c0:	d003      	beq.n	80042ca <__swsetup_r+0x7a>
 80042c2:	4621      	mov	r1, r4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 fa5f 	bl	8004788 <__smakebuf_r>
 80042ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ce:	f013 0201 	ands.w	r2, r3, #1
 80042d2:	d00a      	beq.n	80042ea <__swsetup_r+0x9a>
 80042d4:	2200      	movs	r2, #0
 80042d6:	60a2      	str	r2, [r4, #8]
 80042d8:	6962      	ldr	r2, [r4, #20]
 80042da:	4252      	negs	r2, r2
 80042dc:	61a2      	str	r2, [r4, #24]
 80042de:	6922      	ldr	r2, [r4, #16]
 80042e0:	b942      	cbnz	r2, 80042f4 <__swsetup_r+0xa4>
 80042e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042e6:	d1c5      	bne.n	8004274 <__swsetup_r+0x24>
 80042e8:	bd38      	pop	{r3, r4, r5, pc}
 80042ea:	0799      	lsls	r1, r3, #30
 80042ec:	bf58      	it	pl
 80042ee:	6962      	ldrpl	r2, [r4, #20]
 80042f0:	60a2      	str	r2, [r4, #8]
 80042f2:	e7f4      	b.n	80042de <__swsetup_r+0x8e>
 80042f4:	2000      	movs	r0, #0
 80042f6:	e7f7      	b.n	80042e8 <__swsetup_r+0x98>
 80042f8:	20000018 	.word	0x20000018

080042fc <memset>:
 80042fc:	4402      	add	r2, r0
 80042fe:	4603      	mov	r3, r0
 8004300:	4293      	cmp	r3, r2
 8004302:	d100      	bne.n	8004306 <memset+0xa>
 8004304:	4770      	bx	lr
 8004306:	f803 1b01 	strb.w	r1, [r3], #1
 800430a:	e7f9      	b.n	8004300 <memset+0x4>

0800430c <_close_r>:
 800430c:	b538      	push	{r3, r4, r5, lr}
 800430e:	4d06      	ldr	r5, [pc, #24]	@ (8004328 <_close_r+0x1c>)
 8004310:	2300      	movs	r3, #0
 8004312:	4604      	mov	r4, r0
 8004314:	4608      	mov	r0, r1
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	f7fc fd0a 	bl	8000d30 <_close>
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	d102      	bne.n	8004326 <_close_r+0x1a>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	b103      	cbz	r3, 8004326 <_close_r+0x1a>
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	bd38      	pop	{r3, r4, r5, pc}
 8004328:	2000025c 	.word	0x2000025c

0800432c <_lseek_r>:
 800432c:	b538      	push	{r3, r4, r5, lr}
 800432e:	4d07      	ldr	r5, [pc, #28]	@ (800434c <_lseek_r+0x20>)
 8004330:	4604      	mov	r4, r0
 8004332:	4608      	mov	r0, r1
 8004334:	4611      	mov	r1, r2
 8004336:	2200      	movs	r2, #0
 8004338:	602a      	str	r2, [r5, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	f7fc fd1f 	bl	8000d7e <_lseek>
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	d102      	bne.n	800434a <_lseek_r+0x1e>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	b103      	cbz	r3, 800434a <_lseek_r+0x1e>
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	bd38      	pop	{r3, r4, r5, pc}
 800434c:	2000025c 	.word	0x2000025c

08004350 <_read_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4d07      	ldr	r5, [pc, #28]	@ (8004370 <_read_r+0x20>)
 8004354:	4604      	mov	r4, r0
 8004356:	4608      	mov	r0, r1
 8004358:	4611      	mov	r1, r2
 800435a:	2200      	movs	r2, #0
 800435c:	602a      	str	r2, [r5, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	f7fc fca2 	bl	8000ca8 <_read>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_read_r+0x1e>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_read_r+0x1e>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	2000025c 	.word	0x2000025c

08004374 <_write_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4d07      	ldr	r5, [pc, #28]	@ (8004394 <_write_r+0x20>)
 8004378:	4604      	mov	r4, r0
 800437a:	4608      	mov	r0, r1
 800437c:	4611      	mov	r1, r2
 800437e:	2200      	movs	r2, #0
 8004380:	602a      	str	r2, [r5, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	f7fc fcb2 	bl	8000cec <_write>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_write_r+0x1e>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	b103      	cbz	r3, 8004392 <_write_r+0x1e>
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	2000025c 	.word	0x2000025c

08004398 <__errno>:
 8004398:	4b01      	ldr	r3, [pc, #4]	@ (80043a0 <__errno+0x8>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000018 	.word	0x20000018

080043a4 <__libc_init_array>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	4d0d      	ldr	r5, [pc, #52]	@ (80043dc <__libc_init_array+0x38>)
 80043a8:	4c0d      	ldr	r4, [pc, #52]	@ (80043e0 <__libc_init_array+0x3c>)
 80043aa:	1b64      	subs	r4, r4, r5
 80043ac:	10a4      	asrs	r4, r4, #2
 80043ae:	2600      	movs	r6, #0
 80043b0:	42a6      	cmp	r6, r4
 80043b2:	d109      	bne.n	80043c8 <__libc_init_array+0x24>
 80043b4:	4d0b      	ldr	r5, [pc, #44]	@ (80043e4 <__libc_init_array+0x40>)
 80043b6:	4c0c      	ldr	r4, [pc, #48]	@ (80043e8 <__libc_init_array+0x44>)
 80043b8:	f000 fa54 	bl	8004864 <_init>
 80043bc:	1b64      	subs	r4, r4, r5
 80043be:	10a4      	asrs	r4, r4, #2
 80043c0:	2600      	movs	r6, #0
 80043c2:	42a6      	cmp	r6, r4
 80043c4:	d105      	bne.n	80043d2 <__libc_init_array+0x2e>
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043cc:	4798      	blx	r3
 80043ce:	3601      	adds	r6, #1
 80043d0:	e7ee      	b.n	80043b0 <__libc_init_array+0xc>
 80043d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d6:	4798      	blx	r3
 80043d8:	3601      	adds	r6, #1
 80043da:	e7f2      	b.n	80043c2 <__libc_init_array+0x1e>
 80043dc:	08004904 	.word	0x08004904
 80043e0:	08004904 	.word	0x08004904
 80043e4:	08004904 	.word	0x08004904
 80043e8:	08004908 	.word	0x08004908

080043ec <__retarget_lock_init_recursive>:
 80043ec:	4770      	bx	lr

080043ee <__retarget_lock_acquire_recursive>:
 80043ee:	4770      	bx	lr

080043f0 <__retarget_lock_release_recursive>:
 80043f0:	4770      	bx	lr
	...

080043f4 <_free_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4605      	mov	r5, r0
 80043f8:	2900      	cmp	r1, #0
 80043fa:	d041      	beq.n	8004480 <_free_r+0x8c>
 80043fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004400:	1f0c      	subs	r4, r1, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	bfb8      	it	lt
 8004406:	18e4      	addlt	r4, r4, r3
 8004408:	f000 f8e0 	bl	80045cc <__malloc_lock>
 800440c:	4a1d      	ldr	r2, [pc, #116]	@ (8004484 <_free_r+0x90>)
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	b933      	cbnz	r3, 8004420 <_free_r+0x2c>
 8004412:	6063      	str	r3, [r4, #4]
 8004414:	6014      	str	r4, [r2, #0]
 8004416:	4628      	mov	r0, r5
 8004418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800441c:	f000 b8dc 	b.w	80045d8 <__malloc_unlock>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d908      	bls.n	8004436 <_free_r+0x42>
 8004424:	6820      	ldr	r0, [r4, #0]
 8004426:	1821      	adds	r1, r4, r0
 8004428:	428b      	cmp	r3, r1
 800442a:	bf01      	itttt	eq
 800442c:	6819      	ldreq	r1, [r3, #0]
 800442e:	685b      	ldreq	r3, [r3, #4]
 8004430:	1809      	addeq	r1, r1, r0
 8004432:	6021      	streq	r1, [r4, #0]
 8004434:	e7ed      	b.n	8004412 <_free_r+0x1e>
 8004436:	461a      	mov	r2, r3
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b10b      	cbz	r3, 8004440 <_free_r+0x4c>
 800443c:	42a3      	cmp	r3, r4
 800443e:	d9fa      	bls.n	8004436 <_free_r+0x42>
 8004440:	6811      	ldr	r1, [r2, #0]
 8004442:	1850      	adds	r0, r2, r1
 8004444:	42a0      	cmp	r0, r4
 8004446:	d10b      	bne.n	8004460 <_free_r+0x6c>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	4401      	add	r1, r0
 800444c:	1850      	adds	r0, r2, r1
 800444e:	4283      	cmp	r3, r0
 8004450:	6011      	str	r1, [r2, #0]
 8004452:	d1e0      	bne.n	8004416 <_free_r+0x22>
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	6053      	str	r3, [r2, #4]
 800445a:	4408      	add	r0, r1
 800445c:	6010      	str	r0, [r2, #0]
 800445e:	e7da      	b.n	8004416 <_free_r+0x22>
 8004460:	d902      	bls.n	8004468 <_free_r+0x74>
 8004462:	230c      	movs	r3, #12
 8004464:	602b      	str	r3, [r5, #0]
 8004466:	e7d6      	b.n	8004416 <_free_r+0x22>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	1821      	adds	r1, r4, r0
 800446c:	428b      	cmp	r3, r1
 800446e:	bf04      	itt	eq
 8004470:	6819      	ldreq	r1, [r3, #0]
 8004472:	685b      	ldreq	r3, [r3, #4]
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	bf04      	itt	eq
 8004478:	1809      	addeq	r1, r1, r0
 800447a:	6021      	streq	r1, [r4, #0]
 800447c:	6054      	str	r4, [r2, #4]
 800447e:	e7ca      	b.n	8004416 <_free_r+0x22>
 8004480:	bd38      	pop	{r3, r4, r5, pc}
 8004482:	bf00      	nop
 8004484:	20000268 	.word	0x20000268

08004488 <sbrk_aligned>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	4e0f      	ldr	r6, [pc, #60]	@ (80044c8 <sbrk_aligned+0x40>)
 800448c:	460c      	mov	r4, r1
 800448e:	6831      	ldr	r1, [r6, #0]
 8004490:	4605      	mov	r5, r0
 8004492:	b911      	cbnz	r1, 800449a <sbrk_aligned+0x12>
 8004494:	f000 f9d6 	bl	8004844 <_sbrk_r>
 8004498:	6030      	str	r0, [r6, #0]
 800449a:	4621      	mov	r1, r4
 800449c:	4628      	mov	r0, r5
 800449e:	f000 f9d1 	bl	8004844 <_sbrk_r>
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	d103      	bne.n	80044ae <sbrk_aligned+0x26>
 80044a6:	f04f 34ff 	mov.w	r4, #4294967295
 80044aa:	4620      	mov	r0, r4
 80044ac:	bd70      	pop	{r4, r5, r6, pc}
 80044ae:	1cc4      	adds	r4, r0, #3
 80044b0:	f024 0403 	bic.w	r4, r4, #3
 80044b4:	42a0      	cmp	r0, r4
 80044b6:	d0f8      	beq.n	80044aa <sbrk_aligned+0x22>
 80044b8:	1a21      	subs	r1, r4, r0
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 f9c2 	bl	8004844 <_sbrk_r>
 80044c0:	3001      	adds	r0, #1
 80044c2:	d1f2      	bne.n	80044aa <sbrk_aligned+0x22>
 80044c4:	e7ef      	b.n	80044a6 <sbrk_aligned+0x1e>
 80044c6:	bf00      	nop
 80044c8:	20000264 	.word	0x20000264

080044cc <_malloc_r>:
 80044cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044d0:	1ccd      	adds	r5, r1, #3
 80044d2:	f025 0503 	bic.w	r5, r5, #3
 80044d6:	3508      	adds	r5, #8
 80044d8:	2d0c      	cmp	r5, #12
 80044da:	bf38      	it	cc
 80044dc:	250c      	movcc	r5, #12
 80044de:	2d00      	cmp	r5, #0
 80044e0:	4606      	mov	r6, r0
 80044e2:	db01      	blt.n	80044e8 <_malloc_r+0x1c>
 80044e4:	42a9      	cmp	r1, r5
 80044e6:	d904      	bls.n	80044f2 <_malloc_r+0x26>
 80044e8:	230c      	movs	r3, #12
 80044ea:	6033      	str	r3, [r6, #0]
 80044ec:	2000      	movs	r0, #0
 80044ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045c8 <_malloc_r+0xfc>
 80044f6:	f000 f869 	bl	80045cc <__malloc_lock>
 80044fa:	f8d8 3000 	ldr.w	r3, [r8]
 80044fe:	461c      	mov	r4, r3
 8004500:	bb44      	cbnz	r4, 8004554 <_malloc_r+0x88>
 8004502:	4629      	mov	r1, r5
 8004504:	4630      	mov	r0, r6
 8004506:	f7ff ffbf 	bl	8004488 <sbrk_aligned>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	4604      	mov	r4, r0
 800450e:	d158      	bne.n	80045c2 <_malloc_r+0xf6>
 8004510:	f8d8 4000 	ldr.w	r4, [r8]
 8004514:	4627      	mov	r7, r4
 8004516:	2f00      	cmp	r7, #0
 8004518:	d143      	bne.n	80045a2 <_malloc_r+0xd6>
 800451a:	2c00      	cmp	r4, #0
 800451c:	d04b      	beq.n	80045b6 <_malloc_r+0xea>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	4639      	mov	r1, r7
 8004522:	4630      	mov	r0, r6
 8004524:	eb04 0903 	add.w	r9, r4, r3
 8004528:	f000 f98c 	bl	8004844 <_sbrk_r>
 800452c:	4581      	cmp	r9, r0
 800452e:	d142      	bne.n	80045b6 <_malloc_r+0xea>
 8004530:	6821      	ldr	r1, [r4, #0]
 8004532:	1a6d      	subs	r5, r5, r1
 8004534:	4629      	mov	r1, r5
 8004536:	4630      	mov	r0, r6
 8004538:	f7ff ffa6 	bl	8004488 <sbrk_aligned>
 800453c:	3001      	adds	r0, #1
 800453e:	d03a      	beq.n	80045b6 <_malloc_r+0xea>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	442b      	add	r3, r5
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	f8d8 3000 	ldr.w	r3, [r8]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	bb62      	cbnz	r2, 80045a8 <_malloc_r+0xdc>
 800454e:	f8c8 7000 	str.w	r7, [r8]
 8004552:	e00f      	b.n	8004574 <_malloc_r+0xa8>
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	1b52      	subs	r2, r2, r5
 8004558:	d420      	bmi.n	800459c <_malloc_r+0xd0>
 800455a:	2a0b      	cmp	r2, #11
 800455c:	d917      	bls.n	800458e <_malloc_r+0xc2>
 800455e:	1961      	adds	r1, r4, r5
 8004560:	42a3      	cmp	r3, r4
 8004562:	6025      	str	r5, [r4, #0]
 8004564:	bf18      	it	ne
 8004566:	6059      	strne	r1, [r3, #4]
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	bf08      	it	eq
 800456c:	f8c8 1000 	streq.w	r1, [r8]
 8004570:	5162      	str	r2, [r4, r5]
 8004572:	604b      	str	r3, [r1, #4]
 8004574:	4630      	mov	r0, r6
 8004576:	f000 f82f 	bl	80045d8 <__malloc_unlock>
 800457a:	f104 000b 	add.w	r0, r4, #11
 800457e:	1d23      	adds	r3, r4, #4
 8004580:	f020 0007 	bic.w	r0, r0, #7
 8004584:	1ac2      	subs	r2, r0, r3
 8004586:	bf1c      	itt	ne
 8004588:	1a1b      	subne	r3, r3, r0
 800458a:	50a3      	strne	r3, [r4, r2]
 800458c:	e7af      	b.n	80044ee <_malloc_r+0x22>
 800458e:	6862      	ldr	r2, [r4, #4]
 8004590:	42a3      	cmp	r3, r4
 8004592:	bf0c      	ite	eq
 8004594:	f8c8 2000 	streq.w	r2, [r8]
 8004598:	605a      	strne	r2, [r3, #4]
 800459a:	e7eb      	b.n	8004574 <_malloc_r+0xa8>
 800459c:	4623      	mov	r3, r4
 800459e:	6864      	ldr	r4, [r4, #4]
 80045a0:	e7ae      	b.n	8004500 <_malloc_r+0x34>
 80045a2:	463c      	mov	r4, r7
 80045a4:	687f      	ldr	r7, [r7, #4]
 80045a6:	e7b6      	b.n	8004516 <_malloc_r+0x4a>
 80045a8:	461a      	mov	r2, r3
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	d1fb      	bne.n	80045a8 <_malloc_r+0xdc>
 80045b0:	2300      	movs	r3, #0
 80045b2:	6053      	str	r3, [r2, #4]
 80045b4:	e7de      	b.n	8004574 <_malloc_r+0xa8>
 80045b6:	230c      	movs	r3, #12
 80045b8:	6033      	str	r3, [r6, #0]
 80045ba:	4630      	mov	r0, r6
 80045bc:	f000 f80c 	bl	80045d8 <__malloc_unlock>
 80045c0:	e794      	b.n	80044ec <_malloc_r+0x20>
 80045c2:	6005      	str	r5, [r0, #0]
 80045c4:	e7d6      	b.n	8004574 <_malloc_r+0xa8>
 80045c6:	bf00      	nop
 80045c8:	20000268 	.word	0x20000268

080045cc <__malloc_lock>:
 80045cc:	4801      	ldr	r0, [pc, #4]	@ (80045d4 <__malloc_lock+0x8>)
 80045ce:	f7ff bf0e 	b.w	80043ee <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	20000260 	.word	0x20000260

080045d8 <__malloc_unlock>:
 80045d8:	4801      	ldr	r0, [pc, #4]	@ (80045e0 <__malloc_unlock+0x8>)
 80045da:	f7ff bf09 	b.w	80043f0 <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	20000260 	.word	0x20000260

080045e4 <__sflush_r>:
 80045e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ec:	0716      	lsls	r6, r2, #28
 80045ee:	4605      	mov	r5, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	d454      	bmi.n	800469e <__sflush_r+0xba>
 80045f4:	684b      	ldr	r3, [r1, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	dc02      	bgt.n	8004600 <__sflush_r+0x1c>
 80045fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	dd48      	ble.n	8004692 <__sflush_r+0xae>
 8004600:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004602:	2e00      	cmp	r6, #0
 8004604:	d045      	beq.n	8004692 <__sflush_r+0xae>
 8004606:	2300      	movs	r3, #0
 8004608:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800460c:	682f      	ldr	r7, [r5, #0]
 800460e:	6a21      	ldr	r1, [r4, #32]
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	d030      	beq.n	8004676 <__sflush_r+0x92>
 8004614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	0759      	lsls	r1, r3, #29
 800461a:	d505      	bpl.n	8004628 <__sflush_r+0x44>
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	1ad2      	subs	r2, r2, r3
 8004620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004622:	b10b      	cbz	r3, 8004628 <__sflush_r+0x44>
 8004624:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004626:	1ad2      	subs	r2, r2, r3
 8004628:	2300      	movs	r3, #0
 800462a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800462c:	6a21      	ldr	r1, [r4, #32]
 800462e:	4628      	mov	r0, r5
 8004630:	47b0      	blx	r6
 8004632:	1c43      	adds	r3, r0, #1
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	d106      	bne.n	8004646 <__sflush_r+0x62>
 8004638:	6829      	ldr	r1, [r5, #0]
 800463a:	291d      	cmp	r1, #29
 800463c:	d82b      	bhi.n	8004696 <__sflush_r+0xb2>
 800463e:	4a2a      	ldr	r2, [pc, #168]	@ (80046e8 <__sflush_r+0x104>)
 8004640:	410a      	asrs	r2, r1
 8004642:	07d6      	lsls	r6, r2, #31
 8004644:	d427      	bmi.n	8004696 <__sflush_r+0xb2>
 8004646:	2200      	movs	r2, #0
 8004648:	6062      	str	r2, [r4, #4]
 800464a:	04d9      	lsls	r1, r3, #19
 800464c:	6922      	ldr	r2, [r4, #16]
 800464e:	6022      	str	r2, [r4, #0]
 8004650:	d504      	bpl.n	800465c <__sflush_r+0x78>
 8004652:	1c42      	adds	r2, r0, #1
 8004654:	d101      	bne.n	800465a <__sflush_r+0x76>
 8004656:	682b      	ldr	r3, [r5, #0]
 8004658:	b903      	cbnz	r3, 800465c <__sflush_r+0x78>
 800465a:	6560      	str	r0, [r4, #84]	@ 0x54
 800465c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800465e:	602f      	str	r7, [r5, #0]
 8004660:	b1b9      	cbz	r1, 8004692 <__sflush_r+0xae>
 8004662:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004666:	4299      	cmp	r1, r3
 8004668:	d002      	beq.n	8004670 <__sflush_r+0x8c>
 800466a:	4628      	mov	r0, r5
 800466c:	f7ff fec2 	bl	80043f4 <_free_r>
 8004670:	2300      	movs	r3, #0
 8004672:	6363      	str	r3, [r4, #52]	@ 0x34
 8004674:	e00d      	b.n	8004692 <__sflush_r+0xae>
 8004676:	2301      	movs	r3, #1
 8004678:	4628      	mov	r0, r5
 800467a:	47b0      	blx	r6
 800467c:	4602      	mov	r2, r0
 800467e:	1c50      	adds	r0, r2, #1
 8004680:	d1c9      	bne.n	8004616 <__sflush_r+0x32>
 8004682:	682b      	ldr	r3, [r5, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0c6      	beq.n	8004616 <__sflush_r+0x32>
 8004688:	2b1d      	cmp	r3, #29
 800468a:	d001      	beq.n	8004690 <__sflush_r+0xac>
 800468c:	2b16      	cmp	r3, #22
 800468e:	d11e      	bne.n	80046ce <__sflush_r+0xea>
 8004690:	602f      	str	r7, [r5, #0]
 8004692:	2000      	movs	r0, #0
 8004694:	e022      	b.n	80046dc <__sflush_r+0xf8>
 8004696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800469a:	b21b      	sxth	r3, r3
 800469c:	e01b      	b.n	80046d6 <__sflush_r+0xf2>
 800469e:	690f      	ldr	r7, [r1, #16]
 80046a0:	2f00      	cmp	r7, #0
 80046a2:	d0f6      	beq.n	8004692 <__sflush_r+0xae>
 80046a4:	0793      	lsls	r3, r2, #30
 80046a6:	680e      	ldr	r6, [r1, #0]
 80046a8:	bf08      	it	eq
 80046aa:	694b      	ldreq	r3, [r1, #20]
 80046ac:	600f      	str	r7, [r1, #0]
 80046ae:	bf18      	it	ne
 80046b0:	2300      	movne	r3, #0
 80046b2:	eba6 0807 	sub.w	r8, r6, r7
 80046b6:	608b      	str	r3, [r1, #8]
 80046b8:	f1b8 0f00 	cmp.w	r8, #0
 80046bc:	dde9      	ble.n	8004692 <__sflush_r+0xae>
 80046be:	6a21      	ldr	r1, [r4, #32]
 80046c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80046c2:	4643      	mov	r3, r8
 80046c4:	463a      	mov	r2, r7
 80046c6:	4628      	mov	r0, r5
 80046c8:	47b0      	blx	r6
 80046ca:	2800      	cmp	r0, #0
 80046cc:	dc08      	bgt.n	80046e0 <__sflush_r+0xfc>
 80046ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046d6:	81a3      	strh	r3, [r4, #12]
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e0:	4407      	add	r7, r0
 80046e2:	eba8 0800 	sub.w	r8, r8, r0
 80046e6:	e7e7      	b.n	80046b8 <__sflush_r+0xd4>
 80046e8:	dfbffffe 	.word	0xdfbffffe

080046ec <_fflush_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	690b      	ldr	r3, [r1, #16]
 80046f0:	4605      	mov	r5, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	b913      	cbnz	r3, 80046fc <_fflush_r+0x10>
 80046f6:	2500      	movs	r5, #0
 80046f8:	4628      	mov	r0, r5
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	b118      	cbz	r0, 8004706 <_fflush_r+0x1a>
 80046fe:	6a03      	ldr	r3, [r0, #32]
 8004700:	b90b      	cbnz	r3, 8004706 <_fflush_r+0x1a>
 8004702:	f7ff fc8f 	bl	8004024 <__sinit>
 8004706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f3      	beq.n	80046f6 <_fflush_r+0xa>
 800470e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004710:	07d0      	lsls	r0, r2, #31
 8004712:	d404      	bmi.n	800471e <_fflush_r+0x32>
 8004714:	0599      	lsls	r1, r3, #22
 8004716:	d402      	bmi.n	800471e <_fflush_r+0x32>
 8004718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800471a:	f7ff fe68 	bl	80043ee <__retarget_lock_acquire_recursive>
 800471e:	4628      	mov	r0, r5
 8004720:	4621      	mov	r1, r4
 8004722:	f7ff ff5f 	bl	80045e4 <__sflush_r>
 8004726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004728:	07da      	lsls	r2, r3, #31
 800472a:	4605      	mov	r5, r0
 800472c:	d4e4      	bmi.n	80046f8 <_fflush_r+0xc>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	059b      	lsls	r3, r3, #22
 8004732:	d4e1      	bmi.n	80046f8 <_fflush_r+0xc>
 8004734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004736:	f7ff fe5b 	bl	80043f0 <__retarget_lock_release_recursive>
 800473a:	e7dd      	b.n	80046f8 <_fflush_r+0xc>

0800473c <__swhatbuf_r>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	460c      	mov	r4, r1
 8004740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004744:	2900      	cmp	r1, #0
 8004746:	b096      	sub	sp, #88	@ 0x58
 8004748:	4615      	mov	r5, r2
 800474a:	461e      	mov	r6, r3
 800474c:	da0d      	bge.n	800476a <__swhatbuf_r+0x2e>
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	bf14      	ite	ne
 800475a:	2340      	movne	r3, #64	@ 0x40
 800475c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004760:	2000      	movs	r0, #0
 8004762:	6031      	str	r1, [r6, #0]
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	b016      	add	sp, #88	@ 0x58
 8004768:	bd70      	pop	{r4, r5, r6, pc}
 800476a:	466a      	mov	r2, sp
 800476c:	f000 f848 	bl	8004800 <_fstat_r>
 8004770:	2800      	cmp	r0, #0
 8004772:	dbec      	blt.n	800474e <__swhatbuf_r+0x12>
 8004774:	9901      	ldr	r1, [sp, #4]
 8004776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800477a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800477e:	4259      	negs	r1, r3
 8004780:	4159      	adcs	r1, r3
 8004782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004786:	e7eb      	b.n	8004760 <__swhatbuf_r+0x24>

08004788 <__smakebuf_r>:
 8004788:	898b      	ldrh	r3, [r1, #12]
 800478a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800478c:	079d      	lsls	r5, r3, #30
 800478e:	4606      	mov	r6, r0
 8004790:	460c      	mov	r4, r1
 8004792:	d507      	bpl.n	80047a4 <__smakebuf_r+0x1c>
 8004794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	6123      	str	r3, [r4, #16]
 800479c:	2301      	movs	r3, #1
 800479e:	6163      	str	r3, [r4, #20]
 80047a0:	b003      	add	sp, #12
 80047a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a4:	ab01      	add	r3, sp, #4
 80047a6:	466a      	mov	r2, sp
 80047a8:	f7ff ffc8 	bl	800473c <__swhatbuf_r>
 80047ac:	9f00      	ldr	r7, [sp, #0]
 80047ae:	4605      	mov	r5, r0
 80047b0:	4639      	mov	r1, r7
 80047b2:	4630      	mov	r0, r6
 80047b4:	f7ff fe8a 	bl	80044cc <_malloc_r>
 80047b8:	b948      	cbnz	r0, 80047ce <__smakebuf_r+0x46>
 80047ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047be:	059a      	lsls	r2, r3, #22
 80047c0:	d4ee      	bmi.n	80047a0 <__smakebuf_r+0x18>
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	81a3      	strh	r3, [r4, #12]
 80047cc:	e7e2      	b.n	8004794 <__smakebuf_r+0xc>
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	6020      	str	r0, [r4, #0]
 80047d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d6:	81a3      	strh	r3, [r4, #12]
 80047d8:	9b01      	ldr	r3, [sp, #4]
 80047da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80047de:	b15b      	cbz	r3, 80047f8 <__smakebuf_r+0x70>
 80047e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 f81d 	bl	8004824 <_isatty_r>
 80047ea:	b128      	cbz	r0, 80047f8 <__smakebuf_r+0x70>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	431d      	orrs	r5, r3
 80047fc:	81a5      	strh	r5, [r4, #12]
 80047fe:	e7cf      	b.n	80047a0 <__smakebuf_r+0x18>

08004800 <_fstat_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4d07      	ldr	r5, [pc, #28]	@ (8004820 <_fstat_r+0x20>)
 8004804:	2300      	movs	r3, #0
 8004806:	4604      	mov	r4, r0
 8004808:	4608      	mov	r0, r1
 800480a:	4611      	mov	r1, r2
 800480c:	602b      	str	r3, [r5, #0]
 800480e:	f7fc fa9b 	bl	8000d48 <_fstat>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	d102      	bne.n	800481c <_fstat_r+0x1c>
 8004816:	682b      	ldr	r3, [r5, #0]
 8004818:	b103      	cbz	r3, 800481c <_fstat_r+0x1c>
 800481a:	6023      	str	r3, [r4, #0]
 800481c:	bd38      	pop	{r3, r4, r5, pc}
 800481e:	bf00      	nop
 8004820:	2000025c 	.word	0x2000025c

08004824 <_isatty_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d06      	ldr	r5, [pc, #24]	@ (8004840 <_isatty_r+0x1c>)
 8004828:	2300      	movs	r3, #0
 800482a:	4604      	mov	r4, r0
 800482c:	4608      	mov	r0, r1
 800482e:	602b      	str	r3, [r5, #0]
 8004830:	f7fc fa9a 	bl	8000d68 <_isatty>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_isatty_r+0x1a>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_isatty_r+0x1a>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	2000025c 	.word	0x2000025c

08004844 <_sbrk_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4d06      	ldr	r5, [pc, #24]	@ (8004860 <_sbrk_r+0x1c>)
 8004848:	2300      	movs	r3, #0
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	602b      	str	r3, [r5, #0]
 8004850:	f7fc faa2 	bl	8000d98 <_sbrk>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_sbrk_r+0x1a>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b103      	cbz	r3, 800485e <_sbrk_r+0x1a>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	2000025c 	.word	0x2000025c

08004864 <_init>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr

08004870 <_fini>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	bf00      	nop
 8004874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004876:	bc08      	pop	{r3}
 8004878:	469e      	mov	lr, r3
 800487a:	4770      	bx	lr
