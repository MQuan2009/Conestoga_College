library ieee;
use ieee.std_logic_1164.ALL;

entity MTran_Lab6_VHDL_Adder is
    port
	 (
		mode  : in   std_logic_vector (9 downto 8);
		A     : in   std_logic_vector (3 downto 0);
      B     : in   std_logic_vector (7 downto 4);
      LED   : out  std_logic_vector (7 downto 0);
		HEX1  : out  std_logic_vector (6 downto 0);
		HEX0  : out  std_logic_vector (6 downto 0)
		
	  );
end MTran_Lab6_VHDL_Adder;

architecture Behavioral of MTran_Lab6_VHDL_Adder is

-------------------------- Component Declaration---------------------------------

--Half Adder
component MTran_Lab6_VHDL_HalfAdder is
    port
	 (
		A     : in   std_logic_vector (3 downto 0);
      B     : in   std_logic_vector (7 downto 4);
      Sum   : out  std_logic_vector (3 downto 0);
      Carry : out  std_logic_vector (3 downto 0)
	  );
end component;

--Half Subtractor
component MTran_Lab6_VHDL_HalfSubtractor is
    port
	 (
		A            : in   std_logic_vector (3 downto 0);
      B            : in   std_logic_vector (7 downto 4);
      Difference   : out  std_logic_vector (3 downto 0);
      Borrow       : out  std_logic_vector (3 downto 0)
	  );
end component;

--Full Adder
component MTran_Lab6_VHDL_FullAdder is
    port
	 (
		A            : in   std_logic_vector (3 downto 0);
      B            : in   std_logic_vector (3 downto 0);
      Sum          : out  std_logic_vector (3 downto 0);
      CarryOut     : out  std_logic_vector (3 downto 0)
	  );
end component;

-------------------------- End of Component Declaration--------------------------

-------------------------- Function Declaration----------------------------------

-- Function to calculate Sum of Half Adder
function Sum_HalfAdder ( a : std_logic_vector (3 downto 0);
								 b : std_logic_vector (7 downto 4)) return std_logic_vector is
begin
	return a xor b;
end Sum_HalfAdder;

-- Function to calculate Carry of Half Adder
function Carry_HalfAdder ( a : std_logic_vector (3 downto 0);
									b : std_logic_vector (7 downto 4)) return std_logic_vector is
begin
	return a and b;
end Carry_HalfAdder;

-- Function to calculate Difference of Half Subtractor
function Difference_HalfSubtractor ( a : std_logic_vector (3 downto 0);
												 b : std_logic_vector (7 downto 4)) return std_logic_vector is
begin
	return a xor b;
end Difference_HalfSubtractor;

-- Function to calculate Borrow of Half Subtractor
function Borrow_HalfSubtractor ( a : std_logic_vector (3 downto 0);
											b : std_logic_vector (7 downto 4)) return std_logic_vector is
begin
	return (not a) and b;
end Borrow_HalfSubtractor;

-- Seven Segment Display
function SevenSegmentDisplay(Switch : std_logic_vector (3 downto 0)) return std_logic_vector is
begin
	case (Switch) is
	when "0000" => return "1000000";
	when "0001" => return "1111001";
	when "0010" => return "0100100";
	when "0011" => return "0110000";
	when "0100" => return "0011001";
	when "0101" => return "0010010";
	when "0110" => return "0000010";
	when "0111" => return "1111000";
	when "1000" => return "0000000";
	when "1001" => return "0010000";
	when "1010" => return "0001000";
	when "1011" => return "0000011";
	when "1100" => return "1000110";
	when "1101" => return "0100001";
	when "1110" => return "0000110";
	when "1111" => return "0001110";
	when others => return "1111111";
	end case;
end SevenSegmentDisplay;

--------------------------End of Function Declaration--------------------------

-- Variable and Signal Declaration
signal Sum_HA : std_logic_vector(3 downto 0);
signal Carry_HA : std_logic_vector(3 downto 0);

signal Difference_HS: std_logic_vector(3 downto 0);
signal Borrow_HS: std_logic_vector(3 downto 0);

signal Sum_FA : std_logic_vector(3 downto 0);
signal Carry_FA : std_logic;
-- End of Variable and Signal Declaration

begin
-- Main code

-- Component
HalfAdder: MTran_Lab6_VHDL_HalfAdder
	port map(
		A => A,
		B => B,
		Sum => Sum_HA,
		Carry => Carry_HA
	);
	
HalfSubtractor: MTran_Lab6_VHDL_HalfSubtractor
	port map(
		A => A,
		B => B,
		Difference => Difference_HS,
		Borrow => Borrow_HS
	);
	
FullAdder: MTran_Lab6_VHDL_FullAdder
	port map(
		A => A,
		B => B,
		Sum => Sum_FA,
		CarryOut => Carry_FA
	);
	

process(mode, A, B)
begin
	if mode = "00" then 				--Half Adder mode 
		LED(3 downto 0) <= Sum_HA;
		LED(7 downto 4) <= Carry_HA;
	elsif mode = "01" then        -- Half Subtractor mode
		LED(3 downto 0) <= Difference_HS;
		LED(7 downto 4) <= Borrow_HS;
	elsif mode = "11" then        -- Full Adder mode
		LED(3 downto 0) <= Sum_FA;
		LED(7 downto 4) <= Carry_FA;
	end if;
end process;
end Behavioral;