
MTran_Assignment2_Embedded_PassCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000608c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800621c  0800621c  0000721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  0000809c  2**0
                  CONTENTS
  4 .ARM          00000008  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800655c  0800655c  0000809c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800655c  0800655c  0000755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006560  08006560  00007560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08006564  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000009c  08006600  0000809c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08006600  000082e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103c4  00000000  00000000  000080cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002254  00000000  00000000  00018490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0001a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c19  00000000  00000000  0001b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021af4  00000000  00000000  0001c289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c72  00000000  00000000  0003dd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb637  00000000  00000000  0004f9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b026  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c40  00000000  00000000  0011b06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011fcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006204 	.word	0x08006204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08006204 	.word	0x08006204

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <changeSpeakerFrequency>:
* uint32_t newFrequency:  New desire frequency
*
* RETURNS : void
*/
void changeSpeakerFrequency(TIM_HandleTypeDef *htim, uint32_t newFrequency)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	// Calculate new prescaler
	uint32_t timer_clock = 4000000; // ABP Timer Clock is 4MHz
 800056a:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <changeSpeakerFrequency+0x74>)
 800056c:	617b      	str	r3, [r7, #20]
	uint32_t period = 39; // Configured period value
 800056e:	2327      	movs	r3, #39	@ 0x27
 8000570:	613b      	str	r3, [r7, #16]
	uint32_t prescaler = (timer_clock / (period + 1)) / newFrequency - 1;
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	3301      	adds	r3, #1
 8000576:	697a      	ldr	r2, [r7, #20]
 8000578:	fbb2 f2f3 	udiv	r2, r2, r3
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	3b01      	subs	r3, #1
 8000584:	60fb      	str	r3, [r7, #12]

	htim->Instance->ARR = period;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	62da      	str	r2, [r3, #44]	@ 0x2c
	htim->Instance->PSC = prescaler;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update the timer registers
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2200      	movs	r2, #0
 800059c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(htim, period);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(htim, prescaler);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	629a      	str	r2, [r3, #40]	@ 0x28

	// Restart the timer PWM generation
	if(speakerOff)
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <changeSpeakerFrequency+0x78>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d006      	beq.n	80005ca <changeSpeakerFrequency+0x6a>
	{
		HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80005bc:	2100      	movs	r1, #0
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f002 fb38 	bl	8002c34 <HAL_TIM_PWM_Start>
		speakerOff = false;
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <changeSpeakerFrequency+0x78>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	}
}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	003d0900 	.word	0x003d0900
 80005d8:	20000032 	.word	0x20000032

080005dc <turnOffSpeaker>:
* PARAMETERS : void
*
* RETURNS : void
*/
void turnOffSpeaker(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	speakerOff = true;
 80005e0:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <turnOffSpeaker+0x18>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80005e6:	2100      	movs	r1, #0
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <turnOffSpeaker+0x1c>)
 80005ea:	f002 fc01 	bl	8002df0 <HAL_TIM_PWM_Stop>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000032 	.word	0x20000032
 80005f8:	200000b8 	.word	0x200000b8

080005fc <playCorrectSound>:
* PARAMETERS : void
*
* RETURNS : void
*/
void playCorrectSound(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	changeSpeakerFrequency(&htim1, 200);
 8000600:	21c8      	movs	r1, #200	@ 0xc8
 8000602:	480f      	ldr	r0, [pc, #60]	@ (8000640 <playCorrectSound+0x44>)
 8000604:	f7ff ffac 	bl	8000560 <changeSpeakerFrequency>
	HAL_Delay(200);
 8000608:	20c8      	movs	r0, #200	@ 0xc8
 800060a:	f000 fe2b 	bl	8001264 <HAL_Delay>
	turnOffSpeaker();
 800060e:	f7ff ffe5 	bl	80005dc <turnOffSpeaker>
	changeSpeakerFrequency(&htim1, 500);
 8000612:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000616:	480a      	ldr	r0, [pc, #40]	@ (8000640 <playCorrectSound+0x44>)
 8000618:	f7ff ffa2 	bl	8000560 <changeSpeakerFrequency>
	HAL_Delay(200);
 800061c:	20c8      	movs	r0, #200	@ 0xc8
 800061e:	f000 fe21 	bl	8001264 <HAL_Delay>
	turnOffSpeaker();
 8000622:	f7ff ffdb 	bl	80005dc <turnOffSpeaker>
	changeSpeakerFrequency(&htim1, 800);
 8000626:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <playCorrectSound+0x44>)
 800062c:	f7ff ff98 	bl	8000560 <changeSpeakerFrequency>
	HAL_Delay(200);
 8000630:	20c8      	movs	r0, #200	@ 0xc8
 8000632:	f000 fe17 	bl	8001264 <HAL_Delay>

	// Turn off sound
	turnOffSpeaker();
 8000636:	f7ff ffd1 	bl	80005dc <turnOffSpeaker>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000b8 	.word	0x200000b8

08000644 <playWrongSound>:
* PARAMETERS : void
*
* RETURNS : void
*/
void playWrongSound(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	changeSpeakerFrequency(&htim1, 800);
 8000648:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800064c:	480e      	ldr	r0, [pc, #56]	@ (8000688 <playWrongSound+0x44>)
 800064e:	f7ff ff87 	bl	8000560 <changeSpeakerFrequency>
	HAL_Delay(200);
 8000652:	20c8      	movs	r0, #200	@ 0xc8
 8000654:	f000 fe06 	bl	8001264 <HAL_Delay>
	turnOffSpeaker();
 8000658:	f7ff ffc0 	bl	80005dc <turnOffSpeaker>
	changeSpeakerFrequency(&htim1, 500);
 800065c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <playWrongSound+0x44>)
 8000662:	f7ff ff7d 	bl	8000560 <changeSpeakerFrequency>
	HAL_Delay(200);
 8000666:	20c8      	movs	r0, #200	@ 0xc8
 8000668:	f000 fdfc 	bl	8001264 <HAL_Delay>
	turnOffSpeaker();
 800066c:	f7ff ffb6 	bl	80005dc <turnOffSpeaker>
	changeSpeakerFrequency(&htim1, 200);
 8000670:	21c8      	movs	r1, #200	@ 0xc8
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <playWrongSound+0x44>)
 8000674:	f7ff ff74 	bl	8000560 <changeSpeakerFrequency>
	HAL_Delay(200);
 8000678:	20c8      	movs	r0, #200	@ 0xc8
 800067a:	f000 fdf3 	bl	8001264 <HAL_Delay>

	// Turn off sound
	turnOffSpeaker();
 800067e:	f7ff ffad 	bl	80005dc <turnOffSpeaker>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000b8 	.word	0x200000b8

0800068c <checkPassCode>:
* uint16_t usrPassCode: user input pass code
*
* RETURNS : bool
*/
bool checkPassCode(uint16_t usrPassCode)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < NUM_PASSCODE; i++)
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e012      	b.n	80006c2 <checkPassCode+0x36>
	{
		if (usrPassCode == passCode[i] || usrPassCode == uniquePassCode[i])
 800069c:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <checkPassCode+0x4c>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	88fa      	ldrh	r2, [r7, #6]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d006      	beq.n	80006b8 <checkPassCode+0x2c>
 80006aa:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <checkPassCode+0x50>)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b2:	88fa      	ldrh	r2, [r7, #6]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d101      	bne.n	80006bc <checkPassCode+0x30>
		{
			return true;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e006      	b.n	80006ca <checkPassCode+0x3e>
	for (int i = 0; i < NUM_PASSCODE; i++)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	dde9      	ble.n	800069c <checkPassCode+0x10>
		}
	}
	return false;
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000014 	.word	0x20000014

080006e0 <checkOwnerCode>:
* uint16_t usrPassCode: user input pass code
*
* RETURNS : uint8_t
*/
uint8_t checkOwnerCode(uint16_t usrPassCode)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < NUM_PASSCODE; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	e013      	b.n	8000718 <checkOwnerCode+0x38>
	{
		if (usrPassCode == passCode[i] || usrPassCode == uniquePassCode[i])
 80006f0:	4a0e      	ldr	r2, [pc, #56]	@ (800072c <checkOwnerCode+0x4c>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f8:	88fa      	ldrh	r2, [r7, #6]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d006      	beq.n	800070c <checkOwnerCode+0x2c>
 80006fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000730 <checkOwnerCode+0x50>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000706:	88fa      	ldrh	r2, [r7, #6]
 8000708:	429a      	cmp	r2, r3
 800070a:	d102      	bne.n	8000712 <checkOwnerCode+0x32>
		{
			return i;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	e006      	b.n	8000720 <checkOwnerCode+0x40>
	for (int i = 0; i < NUM_PASSCODE; i++)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3301      	adds	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b09      	cmp	r3, #9
 800071c:	dde8      	ble.n	80006f0 <checkOwnerCode+0x10>
		}
	}
	return 10;
 800071e:	230a      	movs	r3, #10
}
 8000720:	4618      	mov	r0, r3
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	20000000 	.word	0x20000000
 8000730:	20000014 	.word	0x20000014

08000734 <setLed>:
* int ledColour: Led colour
*
* RETURNS : void
*/
void setLed(int ledColour)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	switch(ledColour)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b03      	cmp	r3, #3
 8000740:	d03b      	beq.n	80007ba <setLed+0x86>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b03      	cmp	r3, #3
 8000746:	dc51      	bgt.n	80007ec <setLed+0xb8>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d003      	beq.n	8000756 <setLed+0x22>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d019      	beq.n	8000788 <setLed+0x54>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
		break;
	}

}
 8000754:	e04a      	b.n	80007ec <setLed+0xb8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2110      	movs	r1, #16
 800075a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075e:	f000 fff5 	bl	800174c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2120      	movs	r1, #32
 8000766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076a:	f000 ffef 	bl	800174c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2140      	movs	r1, #64	@ 0x40
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f000 ffe9 	bl	800174c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2180      	movs	r1, #128	@ 0x80
 800077e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000782:	f000 ffe3 	bl	800174c <HAL_GPIO_WritePin>
		break;
 8000786:	e031      	b.n	80007ec <setLed+0xb8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000790:	f000 ffdc 	bl	800174c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2120      	movs	r1, #32
 8000798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079c:	f000 ffd6 	bl	800174c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2140      	movs	r1, #64	@ 0x40
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f000 ffd0 	bl	800174c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2180      	movs	r1, #128	@ 0x80
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b4:	f000 ffca 	bl	800174c <HAL_GPIO_WritePin>
		break;
 80007b8:	e018      	b.n	80007ec <setLed+0xb8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2110      	movs	r1, #16
 80007be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c2:	f000 ffc3 	bl	800174c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ce:	f000 ffbd 	bl	800174c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2140      	movs	r1, #64	@ 0x40
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007da:	f000 ffb7 	bl	800174c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f000 ffb1 	bl	800174c <HAL_GPIO_WritePin>
		break;
 80007ea:	bf00      	nop
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <resetPassCode>:
* char usrReset: User choice to reset or not
*
* RETURNS : void
*/
void resetPassCode(char usrReset)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	int usrUniqueCode, usrNewCode, ownerCodeName = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	int numberAttemptLeft = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]

	if (usrReset == 'y')
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b79      	cmp	r3, #121	@ 0x79
 800080a:	d165      	bne.n	80008d8 <resetPassCode+0xe4>
	{
		for (int i = NUM_ATTEMPT; i > 0; i--)
 800080c:	2303      	movs	r3, #3
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	e030      	b.n	8000874 <resetPassCode+0x80>
			{
				printf("Please type in your UNIQUE passcode: \r\n");
 8000812:	4835      	ldr	r0, [pc, #212]	@ (80008e8 <resetPassCode+0xf4>)
 8000814:	f004 f8de 	bl	80049d4 <puts>
				scanf("%d", &usrUniqueCode);
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	4833      	ldr	r0, [pc, #204]	@ (80008ec <resetPassCode+0xf8>)
 8000820:	f004 f8e0 	bl	80049e4 <iscanf>
				if (checkPassCode(usrUniqueCode) == USERCODE_MATCH)
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	b29b      	uxth	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff2f 	bl	800068c <checkPassCode>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00a      	beq.n	800084a <resetPassCode+0x56>
				{
					printf("Access Granted\r\n");
 8000834:	482e      	ldr	r0, [pc, #184]	@ (80008f0 <resetPassCode+0xfc>)
 8000836:	f004 f8cd 	bl	80049d4 <puts>
					setLed(GREEN);
 800083a:	2002      	movs	r0, #2
 800083c:	f7ff ff7a 	bl	8000734 <setLed>
					playCorrectSound();
 8000840:	f7ff fedc 	bl	80005fc <playCorrectSound>
					numberAttemptLeft = 3;
 8000844:	2303      	movs	r3, #3
 8000846:	61fb      	str	r3, [r7, #28]
					break;
 8000848:	e017      	b.n	800087a <resetPassCode+0x86>
				}
				else
				{
					printf("Access Denied\r\n");
 800084a:	482a      	ldr	r0, [pc, #168]	@ (80008f4 <resetPassCode+0x100>)
 800084c:	f004 f8c2 	bl	80049d4 <puts>
					printf("You have %d attempt left \r\n", i - 1);
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	3b01      	subs	r3, #1
 8000854:	4619      	mov	r1, r3
 8000856:	4828      	ldr	r0, [pc, #160]	@ (80008f8 <resetPassCode+0x104>)
 8000858:	f004 f854 	bl	8004904 <iprintf>
					setLed(RED);
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff ff69 	bl	8000734 <setLed>
					playWrongSound();
 8000862:	f7ff feef 	bl	8000644 <playWrongSound>
					numberAttemptLeft = i - 1;
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	3b01      	subs	r3, #1
 800086a:	61fb      	str	r3, [r7, #28]
					continue;
 800086c:	bf00      	nop
		for (int i = NUM_ATTEMPT; i > 0; i--)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	3b01      	subs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	2b00      	cmp	r3, #0
 8000878:	dccb      	bgt.n	8000812 <resetPassCode+0x1e>
				}
			}

		// Zero attempt left for resetting pass code
		if (numberAttemptLeft == 0)
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d106      	bne.n	800088e <resetPassCode+0x9a>
		{
			printf("Please contact the owner for further assist\r\n");
 8000880:	481e      	ldr	r0, [pc, #120]	@ (80008fc <resetPassCode+0x108>)
 8000882:	f004 f8a7 	bl	80049d4 <puts>
			printf("~~~~~~~~~~~~~~~\r\n");
 8000886:	481e      	ldr	r0, [pc, #120]	@ (8000900 <resetPassCode+0x10c>)
 8000888:	f004 f8a4 	bl	80049d4 <puts>
			return;
 800088c:	e028      	b.n	80008e0 <resetPassCode+0xec>
		}

		// Resetting user passcode
		else
		{
			ownerCodeName = checkOwnerCode(usrUniqueCode); //Get Owner Name
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	b29b      	uxth	r3, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff24 	bl	80006e0 <checkOwnerCode>
 8000898:	4603      	mov	r3, r0
 800089a:	617b      	str	r3, [r7, #20]
			printf("Welcome Mrs %c\r\n", passCodeOwner[ownerCodeName]);
 800089c:	4a19      	ldr	r2, [pc, #100]	@ (8000904 <resetPassCode+0x110>)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	4818      	ldr	r0, [pc, #96]	@ (8000908 <resetPassCode+0x114>)
 80008a8:	f004 f82c 	bl	8004904 <iprintf>
			printf("Please type in your new code\r\n");
 80008ac:	4817      	ldr	r0, [pc, #92]	@ (800090c <resetPassCode+0x118>)
 80008ae:	f004 f891 	bl	80049d4 <puts>
			scanf("%d",&usrNewCode);
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4619      	mov	r1, r3
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <resetPassCode+0xf8>)
 80008ba:	f004 f893 	bl	80049e4 <iscanf>
			passCode[ownerCodeName] = usrNewCode;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	b299      	uxth	r1, r3
 80008c2:	4a13      	ldr	r2, [pc, #76]	@ (8000910 <resetPassCode+0x11c>)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			printf("Your new passcode have been saved, please log in again\r\n");
 80008ca:	4812      	ldr	r0, [pc, #72]	@ (8000914 <resetPassCode+0x120>)
 80008cc:	f004 f882 	bl	80049d4 <puts>
			printf("~~~~~~~~~~~~~~~\r\n");
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <resetPassCode+0x10c>)
 80008d2:	f004 f87f 	bl	80049d4 <puts>
			return;
 80008d6:	e003      	b.n	80008e0 <resetPassCode+0xec>
		}
	}
	else
	{
		printf("~~~~~~~~~~~~~~~\r\n");
 80008d8:	4809      	ldr	r0, [pc, #36]	@ (8000900 <resetPassCode+0x10c>)
 80008da:	f004 f87b 	bl	80049d4 <puts>
		return;
 80008de:	bf00      	nop
	}
}
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	0800621c 	.word	0x0800621c
 80008ec:	08006244 	.word	0x08006244
 80008f0:	08006248 	.word	0x08006248
 80008f4:	08006258 	.word	0x08006258
 80008f8:	08006268 	.word	0x08006268
 80008fc:	08006284 	.word	0x08006284
 8000900:	080062b4 	.word	0x080062b4
 8000904:	20000028 	.word	0x20000028
 8000908:	080062c8 	.word	0x080062c8
 800090c:	080062dc 	.word	0x080062dc
 8000910:	20000000 	.word	0x20000000
 8000914:	080062fc 	.word	0x080062fc

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t userCode = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	80fb      	strh	r3, [r7, #6]
	uint8_t numberAttemptLeft = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f000 fc28 	bl	800117a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 f881 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092e:	f000 f9bf 	bl	8000cb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000932:	f000 f98d 	bl	8000c50 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000936:	f000 f8df 	bl	8000af8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800093a:	2100      	movs	r1, #0
 800093c:	4831      	ldr	r0, [pc, #196]	@ (8000a04 <main+0xec>)
 800093e:	f002 f979 	bl	8002c34 <HAL_TIM_PWM_Start>
  turnOffSpeaker();
 8000942:	f7ff fe4b 	bl	80005dc <turnOffSpeaker>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Give user 3 attempts to type in their passcode
	  for (int i = NUM_ATTEMPT; i > 0; i--)
 8000946:	2303      	movs	r3, #3
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	e02f      	b.n	80009ac <main+0x94>
		{
			  printf("Please type in your passcode: \r\n");
 800094c:	482e      	ldr	r0, [pc, #184]	@ (8000a08 <main+0xf0>)
 800094e:	f004 f841 	bl	80049d4 <puts>
			  scanf("%hu", &userCode);
 8000952:	1dbb      	adds	r3, r7, #6
 8000954:	4619      	mov	r1, r3
 8000956:	482d      	ldr	r0, [pc, #180]	@ (8000a0c <main+0xf4>)
 8000958:	f004 f844 	bl	80049e4 <iscanf>

			  // When user pass code match with the system
			  if (checkPassCode(userCode) == USERCODE_MATCH)
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe94 	bl	800068c <checkPassCode>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00a      	beq.n	8000980 <main+0x68>
			  {
				  printf("Access Granted\r\n");
 800096a:	4829      	ldr	r0, [pc, #164]	@ (8000a10 <main+0xf8>)
 800096c:	f004 f832 	bl	80049d4 <puts>
				  setLed(GREEN);
 8000970:	2002      	movs	r0, #2
 8000972:	f7ff fedf 	bl	8000734 <setLed>
				  playCorrectSound();
 8000976:	f7ff fe41 	bl	80005fc <playCorrectSound>
				  numberAttemptLeft = 3;
 800097a:	2303      	movs	r3, #3
 800097c:	73fb      	strb	r3, [r7, #15]
				  break;
 800097e:	e018      	b.n	80009b2 <main+0x9a>
			  }

			  // When user pass code doesn't match with the system
			  else
			  {
				  printf("Access Denied\r\n");
 8000980:	4824      	ldr	r0, [pc, #144]	@ (8000a14 <main+0xfc>)
 8000982:	f004 f827 	bl	80049d4 <puts>
				  printf("You have %d attempt left \r\n", i - 1);
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	3b01      	subs	r3, #1
 800098a:	4619      	mov	r1, r3
 800098c:	4822      	ldr	r0, [pc, #136]	@ (8000a18 <main+0x100>)
 800098e:	f003 ffb9 	bl	8004904 <iprintf>
				  setLed(RED);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fece 	bl	8000734 <setLed>
				  playWrongSound();
 8000998:	f7ff fe54 	bl	8000644 <playWrongSound>
				  numberAttemptLeft = i - 1;
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	3b01      	subs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
				  continue;
 80009a4:	bf00      	nop
	  for (int i = NUM_ATTEMPT; i > 0; i--)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	dccc      	bgt.n	800094c <main+0x34>
			  }
		}

		// Reset Pass Code
		if (numberAttemptLeft == 0)
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d120      	bne.n	80009fa <main+0xe2>
		{
			do
			{
				printf("Do you want to reset your passcode? (Type y or n): \r\n");
 80009b8:	4818      	ldr	r0, [pc, #96]	@ (8000a1c <main+0x104>)
 80009ba:	f004 f80b 	bl	80049d4 <puts>
				scanf("%c",&usrReset);
 80009be:	1d7b      	adds	r3, r7, #5
 80009c0:	4619      	mov	r1, r3
 80009c2:	4817      	ldr	r0, [pc, #92]	@ (8000a20 <main+0x108>)
 80009c4:	f004 f80e 	bl	80049e4 <iscanf>
				printf("%c\r\n",usrReset);
 80009c8:	797b      	ldrb	r3, [r7, #5]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4815      	ldr	r0, [pc, #84]	@ (8000a24 <main+0x10c>)
 80009ce:	f003 ff99 	bl	8004904 <iprintf>
				if (usrReset != 'y' && usrReset != 'n')
 80009d2:	797b      	ldrb	r3, [r7, #5]
 80009d4:	2b79      	cmp	r3, #121	@ 0x79
 80009d6:	d005      	beq.n	80009e4 <main+0xcc>
 80009d8:	797b      	ldrb	r3, [r7, #5]
 80009da:	2b6e      	cmp	r3, #110	@ 0x6e
 80009dc:	d002      	beq.n	80009e4 <main+0xcc>
				{
					printf("Please type again\r\n");
 80009de:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <main+0x110>)
 80009e0:	f003 fff8 	bl	80049d4 <puts>
				}
			}
			while(usrReset != 'y' && usrReset != 'n');
 80009e4:	797b      	ldrb	r3, [r7, #5]
 80009e6:	2b79      	cmp	r3, #121	@ 0x79
 80009e8:	d002      	beq.n	80009f0 <main+0xd8>
 80009ea:	797b      	ldrb	r3, [r7, #5]
 80009ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80009ee:	d1e3      	bne.n	80009b8 <main+0xa0>

			//Resetting user code
			resetPassCode(usrReset);
 80009f0:	797b      	ldrb	r3, [r7, #5]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fefe 	bl	80007f4 <resetPassCode>
 80009f8:	e7a5      	b.n	8000946 <main+0x2e>
		}
		else
		{
			printf("~~~~~~~~~~~~~~~\r\n");
 80009fa:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <main+0x114>)
 80009fc:	f003 ffea 	bl	80049d4 <puts>
	  for (int i = NUM_ATTEMPT; i > 0; i--)
 8000a00:	e7a1      	b.n	8000946 <main+0x2e>
 8000a02:	bf00      	nop
 8000a04:	200000b8 	.word	0x200000b8
 8000a08:	08006334 	.word	0x08006334
 8000a0c:	08006354 	.word	0x08006354
 8000a10:	08006248 	.word	0x08006248
 8000a14:	08006258 	.word	0x08006258
 8000a18:	08006268 	.word	0x08006268
 8000a1c:	08006358 	.word	0x08006358
 8000a20:	08006390 	.word	0x08006390
 8000a24:	08006394 	.word	0x08006394
 8000a28:	0800639c 	.word	0x0800639c
 8000a2c:	080062b4 	.word	0x080062b4

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b096      	sub	sp, #88	@ 0x58
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2244      	movs	r2, #68	@ 0x44
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 f8ba 	bl	8004bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a56:	f000 feaf 	bl	80017b8 <HAL_PWREx_ControlVoltageScaling>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a60:	f000 f986 	bl	8000d70 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a64:	f000 fe8a 	bl	800177c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a68:	4b22      	ldr	r3, [pc, #136]	@ (8000af4 <SystemClock_Config+0xc4>)
 8000a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a6e:	4a21      	ldr	r2, [pc, #132]	@ (8000af4 <SystemClock_Config+0xc4>)
 8000a70:	f023 0318 	bic.w	r3, r3, #24
 8000a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a78:	2314      	movs	r3, #20
 8000a7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a88:	2360      	movs	r3, #96	@ 0x60
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a90:	2301      	movs	r3, #1
 8000a92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a94:	2301      	movs	r3, #1
 8000a96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fed9 	bl	8001864 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 f95a 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	230f      	movs	r3, #15
 8000abe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000acc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ad0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fad8 	bl	800208c <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ae2:	f000 f945 	bl	8000d70 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ae6:	f001 feeb 	bl	80028c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000aea:	bf00      	nop
 8000aec:	3758      	adds	r7, #88	@ 0x58
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09a      	sub	sp, #104	@ 0x68
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	222c      	movs	r2, #44	@ 0x2c
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 f840 	bl	8004bb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b38:	4b43      	ldr	r3, [pc, #268]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b3a:	4a44      	ldr	r2, [pc, #272]	@ (8000c4c <MX_TIM1_Init+0x154>)
 8000b3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000b3e:	4b42      	ldr	r3, [pc, #264]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b40:	2209      	movs	r2, #9
 8000b42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b40      	ldr	r3, [pc, #256]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b4c:	2227      	movs	r2, #39	@ 0x27
 8000b4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b3d      	ldr	r3, [pc, #244]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b56:	4b3c      	ldr	r3, [pc, #240]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b62:	4839      	ldr	r0, [pc, #228]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b64:	f001 ffae 	bl	8002ac4 <HAL_TIM_Base_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b6e:	f000 f8ff 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b76:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b78:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4832      	ldr	r0, [pc, #200]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b80:	f002 fad2 	bl	8003128 <HAL_TIM_ConfigClockSource>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b8a:	f000 f8f1 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b8e:	482e      	ldr	r0, [pc, #184]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000b90:	f001 ffef 	bl	8002b72 <HAL_TIM_PWM_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b9a:	f000 f8e9 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000baa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4825      	ldr	r0, [pc, #148]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000bb2:	f002 ff25 	bl	8003a00 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000bbc:	f000 f8d8 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 19;
 8000bc4:	2313      	movs	r3, #19
 8000bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bdc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000be6:	f002 f98b 	bl	8002f00 <HAL_TIM_PWM_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000bf0:	f000 f8be 	bl	8000d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4807      	ldr	r0, [pc, #28]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000c2a:	f002 ff4f 	bl	8003acc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000c34:	f000 f89c 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <MX_TIM1_Init+0x150>)
 8000c3a:	f000 f8e3 	bl	8000e04 <HAL_TIM_MspPostInit>

}
 8000c3e:	bf00      	nop
 8000c40:	3768      	adds	r7, #104	@ 0x68
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000b8 	.word	0x200000b8
 8000c4c:	40012c00 	.word	0x40012c00

08000c50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c56:	4a15      	ldr	r2, [pc, #84]	@ (8000cac <MX_USART2_UART_Init+0x5c>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_USART2_UART_Init+0x58>)
 8000c94:	f002 ff92 	bl	8003bbc <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c9e:	f000 f867 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000104 	.word	0x20000104
 8000cac:	40004400 	.word	0x40004400

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	4a27      	ldr	r2, [pc, #156]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd2:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	4a21      	ldr	r2, [pc, #132]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_GPIO_Init+0xb8>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|COMMON_Pin|GREEN_Pin|BLUE_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	21f0      	movs	r1, #240	@ 0xf0
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d16:	f000 fd19 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	4813      	ldr	r0, [pc, #76]	@ (8000d6c <MX_GPIO_Init+0xbc>)
 8000d20:	f000 fd14 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_Pin COMMON_Pin GREEN_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = RED_Pin|COMMON_Pin|GREEN_Pin|BLUE_Pin;
 8000d24:	23f0      	movs	r3, #240	@ 0xf0
 8000d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3e:	f000 fb9b 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d42:	2308      	movs	r3, #8
 8000d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	4619      	mov	r1, r3
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <MX_GPIO_Init+0xbc>)
 8000d5a:	f000 fb8d 	bl	8001478 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000400 	.word	0x48000400

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d86:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_TIM_Base_MspInit+0x38>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10b      	bne.n	8000dee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dda:	4a09      	ldr	r2, [pc, #36]	@ (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000ddc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40012c00 	.word	0x40012c00
 8000e00:	40021000 	.word	0x40021000

08000e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <HAL_TIM_MspPostInit+0x68>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d11d      	bne.n	8000e62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_TIM_MspPostInit+0x6c>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	4a11      	ldr	r2, [pc, #68]	@ (8000e70 <HAL_TIM_MspPostInit+0x6c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <HAL_TIM_MspPostInit+0x6c>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5e:	f000 fb0b 	bl	8001478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40012c00 	.word	0x40012c00
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b09e      	sub	sp, #120	@ 0x78
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	2254      	movs	r2, #84	@ 0x54
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fe8f 	bl	8004bb8 <memset>
  if(huart->Instance==USART2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a28      	ldr	r2, [pc, #160]	@ (8000f40 <HAL_UART_MspInit+0xcc>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d148      	bne.n	8000f36 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 fb0f 	bl	80024d4 <HAL_RCCEx_PeriphCLKConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ebc:	f7ff ff58 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec0:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <HAL_UART_MspInit+0xd0>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <HAL_UART_MspInit+0xd0>)
 8000ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <HAL_UART_MspInit+0xd0>)
 8000ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <HAL_UART_MspInit+0xd0>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	4a19      	ldr	r2, [pc, #100]	@ (8000f44 <HAL_UART_MspInit+0xd0>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <HAL_UART_MspInit+0xd0>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f00:	2307      	movs	r3, #7
 8000f02:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0e:	f000 fab3 	bl	8001478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f16:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f24:	2303      	movs	r3, #3
 8000f26:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f32:	f000 faa1 	bl	8001478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3778      	adds	r7, #120	@ 0x78
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40004400 	.word	0x40004400
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9e:	f000 f941 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
//  }
//
//  return len;
  extern UART_HandleTypeDef huart2;

  HAL_StatusTypeDef result = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]

  len = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	607b      	str	r3, [r7, #4]

  result = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	4808      	ldr	r0, [pc, #32]	@ (8000fe8 <_read+0x40>)
 8000fc8:	f002 fecf 	bl	8003d6a <HAL_UART_Receive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	75fb      	strb	r3, [r7, #23]
  if (result != HAL_OK)
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <_read+0x34>
  {
	  len = EOF;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	607b      	str	r3, [r7, #4]
  }
  return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000104 	.word	0x20000104

08000fec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
//  {
//    __io_putchar(*ptr++);
//  }
  extern UART_HandleTypeDef huart2;

  HAL_StatusTypeDef result = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]

  result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <_write+0x40>)
 8001008:	f002 fe26 	bl	8003c58 <HAL_UART_Transmit>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]
  if (result == HAL_ERROR || result == HAL_BUSY)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d002      	beq.n	800101c <_write+0x30>
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d101      	bne.n	8001020 <_write+0x34>
  {
	  Error_Handler();
 800101c:	f7ff fea8 	bl	8000d70 <Error_Handler>
  }
  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000104 	.word	0x20000104

08001030 <_close>:

int _close(int file)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001058:	605a      	str	r2, [r3, #4]
  return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_isatty>:

int _isatty(int file)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001070:	2301      	movs	r3, #1
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800107e:	b480      	push	{r7}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a0:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <_sbrk+0x5c>)
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <_sbrk+0x60>)
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <_sbrk+0x64>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <_sbrk+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d207      	bcs.n	80010d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c8:	f003 fdc4 	bl	8004c54 <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e009      	b.n	80010ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20010000 	.word	0x20010000
 80010f8:	00000400 	.word	0x00000400
 80010fc:	2000018c 	.word	0x2000018c
 8001100:	200002e0 	.word	0x200002e0

08001104 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001160 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800112c:	f7ff ffea 	bl	8001104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <LoopForever+0x6>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	@ (8001168 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <LoopForever+0xe>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	@ (8001174 <LoopForever+0x16>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f003 fd83 	bl	8004c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115a:	f7ff fbdd 	bl	8000918 <main>

0800115e <LoopForever>:

LoopForever:
    b LoopForever
 800115e:	e7fe      	b.n	800115e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001160:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800116c:	08006564 	.word	0x08006564
  ldr r2, =_sbss
 8001170:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001174:	200002e0 	.word	0x200002e0

08001178 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC1_IRQHandler>

0800117a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f943 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f80e 	bl	80011ac <HAL_InitTick>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	e001      	b.n	80011a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800119c:	f7ff fdee 	bl	8000d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <HAL_InitTick+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d023      	beq.n	8001208 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <HAL_InitTick+0x70>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_InitTick+0x6c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f941 	bl	800145e <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10f      	bne.n	8001202 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d809      	bhi.n	80011fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f919 	bl	8001426 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <HAL_InitTick+0x74>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e007      	b.n	800120c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e004      	b.n	800120c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	e001      	b.n	800120c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000003c 	.word	0x2000003c
 800121c:	20000034 	.word	0x20000034
 8001220:	20000038 	.word	0x20000038

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2000003c 	.word	0x2000003c
 8001248:	20000190 	.word	0x20000190

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000190 	.word	0x20000190

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffde 	bl	800124c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000003c 	.word	0x2000003c

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	@ (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	@ (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	@ 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	@ (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	@ (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff47 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff5c 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff8e 	bl	8001364 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffb0 	bl	80013cc <SysTick_Config>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001486:	e148      	b.n	800171a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 813a 	beq.w	8001714 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d005      	beq.n	80014b8 <HAL_GPIO_Init+0x40>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 0201 	and.w	r2, r3, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b03      	cmp	r3, #3
 8001524:	d017      	beq.n	8001556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d123      	bne.n	80015aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	6939      	ldr	r1, [r7, #16]
 80015a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0203 	and.w	r2, r3, #3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8094 	beq.w	8001714 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	4b52      	ldr	r3, [pc, #328]	@ (8001738 <HAL_GPIO_Init+0x2c0>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f0:	4a51      	ldr	r2, [pc, #324]	@ (8001738 <HAL_GPIO_Init+0x2c0>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001738 <HAL_GPIO_Init+0x2c0>)
 80015fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001604:	4a4d      	ldr	r2, [pc, #308]	@ (800173c <HAL_GPIO_Init+0x2c4>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800162e:	d00d      	beq.n	800164c <HAL_GPIO_Init+0x1d4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a43      	ldr	r2, [pc, #268]	@ (8001740 <HAL_GPIO_Init+0x2c8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d007      	beq.n	8001648 <HAL_GPIO_Init+0x1d0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a42      	ldr	r2, [pc, #264]	@ (8001744 <HAL_GPIO_Init+0x2cc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_GPIO_Init+0x1cc>
 8001640:	2302      	movs	r3, #2
 8001642:	e004      	b.n	800164e <HAL_GPIO_Init+0x1d6>
 8001644:	2307      	movs	r3, #7
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0x1d6>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_GPIO_Init+0x1d6>
 800164c:	2300      	movs	r3, #0
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	f002 0203 	and.w	r2, r2, #3
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	4093      	lsls	r3, r2
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800165e:	4937      	ldr	r1, [pc, #220]	@ (800173c <HAL_GPIO_Init+0x2c4>)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166c:	4b36      	ldr	r3, [pc, #216]	@ (8001748 <HAL_GPIO_Init+0x2d0>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001690:	4a2d      	ldr	r2, [pc, #180]	@ (8001748 <HAL_GPIO_Init+0x2d0>)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001696:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <HAL_GPIO_Init+0x2d0>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ba:	4a23      	ldr	r2, [pc, #140]	@ (8001748 <HAL_GPIO_Init+0x2d0>)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016c0:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <HAL_GPIO_Init+0x2d0>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e4:	4a18      	ldr	r2, [pc, #96]	@ (8001748 <HAL_GPIO_Init+0x2d0>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <HAL_GPIO_Init+0x2d0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170e:	4a0e      	ldr	r2, [pc, #56]	@ (8001748 <HAL_GPIO_Init+0x2d0>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f aeaf 	bne.w	8001488 <HAL_GPIO_Init+0x10>
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	48000400 	.word	0x48000400
 8001744:	48000800 	.word	0x48000800
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001768:	e002      	b.n	8001770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40007000 	.word	0x40007000

0800179c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017c6:	d130      	bne.n	800182a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c8:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017d4:	d038      	beq.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017de:	4a1e      	ldr	r2, [pc, #120]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2232      	movs	r2, #50	@ 0x32
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0c9b      	lsrs	r3, r3, #18
 80017f8:	3301      	adds	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017fc:	e002      	b.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3b01      	subs	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001810:	d102      	bne.n	8001818 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f2      	bne.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001824:	d110      	bne.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e00f      	b.n	800184a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001836:	d007      	beq.n	8001848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001838:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001840:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001846:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40007000 	.word	0x40007000
 800185c:	20000034 	.word	0x20000034
 8001860:	431bde83 	.word	0x431bde83

08001864 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	f000 bc02 	b.w	800207c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001878:	4b96      	ldr	r3, [pc, #600]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001882:	4b94      	ldr	r3, [pc, #592]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80e4 	beq.w	8001a62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4c>
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	f040 808b 	bne.w	80019be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	f040 8087 	bne.w	80019be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b0:	4b88      	ldr	r3, [pc, #544]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x64>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e3d9      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1a      	ldr	r2, [r3, #32]
 80018cc:	4b81      	ldr	r3, [pc, #516]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_RCC_OscConfig+0x7e>
 80018d8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018e0:	e005      	b.n	80018ee <HAL_RCC_OscConfig+0x8a>
 80018e2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d223      	bcs.n	800193a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fd8c 	bl	8002414 <RCC_SetFlashLatencyFromMSIRange>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e3ba      	b.n	800207c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001906:	4b73      	ldr	r3, [pc, #460]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a72      	ldr	r2, [pc, #456]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b70      	ldr	r3, [pc, #448]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	496d      	ldr	r1, [pc, #436]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001924:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	4968      	ldr	r1, [pc, #416]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	e025      	b.n	8001986 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193a:	4b66      	ldr	r3, [pc, #408]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a65      	ldr	r2, [pc, #404]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4960      	ldr	r1, [pc, #384]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001958:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	495b      	ldr	r1, [pc, #364]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fd4c 	bl	8002414 <RCC_SetFlashLatencyFromMSIRange>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e37a      	b.n	800207c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001986:	f000 fc81 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b51      	ldr	r3, [pc, #324]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4950      	ldr	r1, [pc, #320]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	4a4e      	ldr	r2, [pc, #312]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 80019a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019a6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae0 <HAL_RCC_OscConfig+0x27c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fbfe 	bl	80011ac <HAL_InitTick>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d052      	beq.n	8001a60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	e35e      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d032      	beq.n	8001a2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019c6:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a42      	ldr	r2, [pc, #264]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fc3b 	bl	800124c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019da:	f7ff fc37 	bl	800124c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e347      	b.n	800207c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ec:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f8:	4b36      	ldr	r3, [pc, #216]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a35      	ldr	r2, [pc, #212]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4930      	ldr	r1, [pc, #192]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a16:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	492b      	ldr	r1, [pc, #172]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
 8001a2a:	e01a      	b.n	8001a62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a28      	ldr	r2, [pc, #160]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fc08 	bl	800124c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a40:	f7ff fc04 	bl	800124c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e314      	b.n	800207c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x1dc>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d073      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x21c>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d10e      	bne.n	8001a98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d063      	beq.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d15f      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e2f1      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x24c>
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e025      	b.n	8001afc <HAL_RCC_OscConfig+0x298>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab8:	d114      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x280>
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a02      	ldr	r2, [pc, #8]	@ (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e013      	b.n	8001afc <HAL_RCC_OscConfig+0x298>
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	080063bc 	.word	0x080063bc
 8001adc:	20000034 	.word	0x20000034
 8001ae0:	20000038 	.word	0x20000038
 8001ae4:	4ba0      	ldr	r3, [pc, #640]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a9f      	ldr	r2, [pc, #636]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b9d      	ldr	r3, [pc, #628]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a9c      	ldr	r2, [pc, #624]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fba2 	bl	800124c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fb9e 	bl	800124c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	@ 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e2ae      	b.n	800207c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1e:	4b92      	ldr	r3, [pc, #584]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x2a8>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb8e 	bl	800124c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fb8a 	bl	800124c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	@ 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e29a      	b.n	800207c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b46:	4b88      	ldr	r3, [pc, #544]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2d0>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d060      	beq.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_OscConfig+0x310>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d116      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b74:	4b7c      	ldr	r3, [pc, #496]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_OscConfig+0x328>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e277      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b76      	ldr	r3, [pc, #472]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	4973      	ldr	r1, [pc, #460]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba0:	e040      	b.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d023      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001baa:	4b6f      	ldr	r3, [pc, #444]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6e      	ldr	r2, [pc, #440]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fb49 	bl	800124c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fb45 	bl	800124c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e255      	b.n	800207c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	4b65      	ldr	r3, [pc, #404]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b62      	ldr	r3, [pc, #392]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	495f      	ldr	r1, [pc, #380]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
 8001bf0:	e018      	b.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fb25 	bl	800124c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fb21 	bl	800124c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e231      	b.n	800207c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c18:	4b53      	ldr	r3, [pc, #332]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d03c      	beq.n	8001caa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01c      	beq.n	8001c72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c38:	4b4b      	ldr	r3, [pc, #300]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff fb00 	bl	800124c <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fafc 	bl	800124c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e20c      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c62:	4b41      	ldr	r3, [pc, #260]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ef      	beq.n	8001c50 <HAL_RCC_OscConfig+0x3ec>
 8001c70:	e01b      	b.n	8001caa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c72:	4b3d      	ldr	r3, [pc, #244]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c78:	4a3b      	ldr	r2, [pc, #236]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff fae3 	bl	800124c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fadf 	bl	800124c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1ef      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c9c:	4b32      	ldr	r3, [pc, #200]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ef      	bne.n	8001c8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80a6 	beq.w	8001e04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd4:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <HAL_RCC_OscConfig+0x508>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d118      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <HAL_RCC_OscConfig+0x508>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d6c <HAL_RCC_OscConfig+0x508>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff faa6 	bl	800124c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d04:	f7ff faa2 	bl	800124c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1b2      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <HAL_RCC_OscConfig+0x508>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4d8>
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d30:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d3a:	e029      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d115      	bne.n	8001d70 <HAL_RCC_OscConfig+0x50c>
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4a:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d5a:	4a03      	ldr	r2, [pc, #12]	@ (8001d68 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d64:	e014      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	4b9a      	ldr	r3, [pc, #616]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d76:	4a99      	ldr	r2, [pc, #612]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d80:	4b96      	ldr	r3, [pc, #600]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d86:	4a95      	ldr	r2, [pc, #596]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d016      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff fa58 	bl	800124c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7ff fa54 	bl	800124c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e162      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db6:	4b89      	ldr	r3, [pc, #548]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ed      	beq.n	8001da0 <HAL_RCC_OscConfig+0x53c>
 8001dc4:	e015      	b.n	8001df2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fa41 	bl	800124c <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7ff fa3d 	bl	800124c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e14b      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de4:	4b7d      	ldr	r3, [pc, #500]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ed      	bne.n	8001dce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df2:	7ffb      	ldrb	r3, [r7, #31]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4b78      	ldr	r3, [pc, #480]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfc:	4a77      	ldr	r2, [pc, #476]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001dfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d03c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01c      	beq.n	8001e52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e18:	4b70      	ldr	r3, [pc, #448]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff fa10 	bl	800124c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e30:	f7ff fa0c 	bl	800124c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e11c      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e42:	4b66      	ldr	r3, [pc, #408]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ef      	beq.n	8001e30 <HAL_RCC_OscConfig+0x5cc>
 8001e50:	e01b      	b.n	8001e8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e52:	4b62      	ldr	r3, [pc, #392]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e58:	4a60      	ldr	r2, [pc, #384]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff f9f3 	bl	800124c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6a:	f7ff f9ef 	bl	800124c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0ff      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e7c:	4b57      	ldr	r3, [pc, #348]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ef      	bne.n	8001e6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80f3 	beq.w	800207a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	f040 80c9 	bne.w	8002030 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0203 	and.w	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d12c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d123      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d11b      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ede:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d113      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d109      	bne.n	8001f0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	3b01      	subs	r3, #1
 8001f06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d06b      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d062      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f12:	4b32      	ldr	r3, [pc, #200]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0ac      	b.n	800207c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f22:	4b2e      	ldr	r3, [pc, #184]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2d      	ldr	r2, [pc, #180]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001f28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f2e:	f7ff f98d 	bl	800124c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff f989 	bl	800124c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e099      	b.n	800207c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f54:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_RCC_OscConfig+0x77c>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f64:	3a01      	subs	r2, #1
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f6e:	0212      	lsls	r2, r2, #8
 8001f70:	4311      	orrs	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f76:	0852      	lsrs	r2, r2, #1
 8001f78:	3a01      	subs	r2, #1
 8001f7a:	0552      	lsls	r2, r2, #21
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f82:	0852      	lsrs	r2, r2, #1
 8001f84:	3a01      	subs	r2, #1
 8001f86:	0652      	lsls	r2, r2, #25
 8001f88:	4311      	orrs	r1, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f8e:	06d2      	lsls	r2, r2, #27
 8001f90:	430a      	orrs	r2, r1
 8001f92:	4912      	ldr	r1, [pc, #72]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f98:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fb0:	f7ff f94c 	bl	800124c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f948 	bl	800124c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e058      	b.n	800207c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fca:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <HAL_RCC_OscConfig+0x778>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd6:	e050      	b.n	800207a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e04f      	b.n	800207c <HAL_RCC_OscConfig+0x818>
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe4:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d144      	bne.n	800207a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ff0:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a23      	ldr	r2, [pc, #140]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ffa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ffc:	4b21      	ldr	r3, [pc, #132]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a20      	ldr	r2, [pc, #128]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 8002002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002006:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002008:	f7ff f920 	bl	800124c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff f91c 	bl	800124c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e02c      	b.n	800207c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x7ac>
 800202e:	e024      	b.n	800207a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d01f      	beq.n	8002076 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 800203c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff f903 	bl	800124c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff f8ff 	bl	800124c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e00f      	b.n	800207c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	4905      	ldr	r1, [pc, #20]	@ (8002084 <HAL_RCC_OscConfig+0x820>)
 800206e:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_RCC_OscConfig+0x824>)
 8002070:	4013      	ands	r3, r2
 8002072:	60cb      	str	r3, [r1, #12]
 8002074:	e001      	b.n	800207a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	feeefffc 	.word	0xfeeefffc

0800208c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0e7      	b.n	8002270 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <HAL_RCC_ClockConfig+0x1ec>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d910      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <HAL_RCC_ClockConfig+0x1ec>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0207 	bic.w	r2, r3, #7
 80020b6:	4970      	ldr	r1, [pc, #448]	@ (8002278 <HAL_RCC_ClockConfig+0x1ec>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b6e      	ldr	r3, [pc, #440]	@ (8002278 <HAL_RCC_ClockConfig+0x1ec>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0cf      	b.n	8002270 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d010      	beq.n	80020fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b66      	ldr	r3, [pc, #408]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d908      	bls.n	80020fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b63      	ldr	r3, [pc, #396]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4960      	ldr	r1, [pc, #384]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d04c      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002112:	4b5a      	ldr	r3, [pc, #360]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d121      	bne.n	8002162 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0a6      	b.n	8002270 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212a:	4b54      	ldr	r3, [pc, #336]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d115      	bne.n	8002162 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e09a      	b.n	8002270 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002142:	4b4e      	ldr	r3, [pc, #312]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e08e      	b.n	8002270 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002152:	4b4a      	ldr	r3, [pc, #296]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e086      	b.n	8002270 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002162:	4b46      	ldr	r3, [pc, #280]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f023 0203 	bic.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4943      	ldr	r1, [pc, #268]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	4313      	orrs	r3, r2
 8002172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002174:	f7ff f86a 	bl	800124c <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7ff f866 	bl	800124c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e06e      	b.n	8002270 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b3a      	ldr	r3, [pc, #232]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 020c 	and.w	r2, r3, #12
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1eb      	bne.n	800217c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d010      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	4b31      	ldr	r3, [pc, #196]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021bc:	429a      	cmp	r2, r3
 80021be:	d208      	bcs.n	80021d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b2e      	ldr	r3, [pc, #184]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	492b      	ldr	r1, [pc, #172]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d2:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <HAL_RCC_ClockConfig+0x1ec>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d210      	bcs.n	8002202 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <HAL_RCC_ClockConfig+0x1ec>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 0207 	bic.w	r2, r3, #7
 80021e8:	4923      	ldr	r1, [pc, #140]	@ (8002278 <HAL_RCC_ClockConfig+0x1ec>)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f0:	4b21      	ldr	r3, [pc, #132]	@ (8002278 <HAL_RCC_ClockConfig+0x1ec>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e036      	b.n	8002270 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220e:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4918      	ldr	r1, [pc, #96]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d009      	beq.n	8002240 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222c:	4b13      	ldr	r3, [pc, #76]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4910      	ldr	r1, [pc, #64]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002240:	f000 f824 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	490b      	ldr	r1, [pc, #44]	@ (8002280 <HAL_RCC_ClockConfig+0x1f4>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <HAL_RCC_ClockConfig+0x1f8>)
 800225e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_RCC_ClockConfig+0x1fc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe ffa1 	bl	80011ac <HAL_InitTick>
 800226a:	4603      	mov	r3, r0
 800226c:	72fb      	strb	r3, [r7, #11]

  return status;
 800226e:	7afb      	ldrb	r3, [r7, #11]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
 8002280:	080063bc 	.word	0x080063bc
 8002284:	20000034 	.word	0x20000034
 8002288:	20000038 	.word	0x20000038

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	@ 0x24
 8002290:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229a:	4b3e      	ldr	r3, [pc, #248]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x108>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x34>
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d121      	bne.n	80022fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d11e      	bne.n	80022fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022c0:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022cc:	4b31      	ldr	r3, [pc, #196]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e005      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x108>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d102      	bne.n	800230a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002304:	4b25      	ldr	r3, [pc, #148]	@ (800239c <HAL_RCC_GetSysClockFreq+0x110>)
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	e004      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d101      	bne.n	8002314 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002310:	4b23      	ldr	r3, [pc, #140]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002312:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d134      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800231a:	4b1e      	ldr	r3, [pc, #120]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x108>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0xa6>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d003      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0xac>
 8002330:	e005      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002332:	4b1a      	ldr	r3, [pc, #104]	@ (800239c <HAL_RCC_GetSysClockFreq+0x110>)
 8002334:	617b      	str	r3, [r7, #20]
      break;
 8002336:	e005      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002338:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800233a:	617b      	str	r3, [r7, #20]
      break;
 800233c:	e002      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	617b      	str	r3, [r7, #20]
      break;
 8002342:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x108>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	3301      	adds	r3, #1
 8002350:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x108>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	fb03 f202 	mul.w	r2, r3, r2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800236a:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x108>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	0e5b      	lsrs	r3, r3, #25
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	3301      	adds	r3, #1
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002384:	69bb      	ldr	r3, [r7, #24]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	@ 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	080063d4 	.word	0x080063d4
 800239c:	00f42400 	.word	0x00f42400
 80023a0:	007a1200 	.word	0x007a1200

080023a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000034 	.word	0x20000034

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023c0:	f7ff fff0 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4904      	ldr	r1, [pc, #16]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	080063cc 	.word	0x080063cc

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023ec:	f7ff ffda 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0adb      	lsrs	r3, r3, #11
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4904      	ldr	r1, [pc, #16]	@ (8002410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	080063cc 	.word	0x080063cc

08002414 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002420:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800242c:	f7ff f9b6 	bl	800179c <HAL_PWREx_GetVoltageRange>
 8002430:	6178      	str	r0, [r7, #20]
 8002432:	e014      	b.n	800245e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002438:	4a24      	ldr	r2, [pc, #144]	@ (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002440:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800244c:	f7ff f9a6 	bl	800179c <HAL_PWREx_GetVoltageRange>
 8002450:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b1e      	ldr	r3, [pc, #120]	@ (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002456:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002464:	d10b      	bne.n	800247e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b80      	cmp	r3, #128	@ 0x80
 800246a:	d919      	bls.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002470:	d902      	bls.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002472:	2302      	movs	r3, #2
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	e013      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002478:	2301      	movs	r3, #1
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	e010      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b80      	cmp	r3, #128	@ 0x80
 8002482:	d902      	bls.n	800248a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002484:	2303      	movs	r3, #3
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	e00a      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b80      	cmp	r3, #128	@ 0x80
 800248e:	d102      	bne.n	8002496 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002490:	2302      	movs	r3, #2
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	e004      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b70      	cmp	r3, #112	@ 0x70
 800249a:	d101      	bne.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800249c:	2301      	movs	r3, #1
 800249e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 0207 	bic.w	r2, r3, #7
 80024a8:	4909      	ldr	r1, [pc, #36]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024b0:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d001      	beq.n	80024c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40022000 	.word	0x40022000

080024d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024dc:	2300      	movs	r3, #0
 80024de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e0:	2300      	movs	r3, #0
 80024e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d031      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024f8:	d01a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80024fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024fe:	d814      	bhi.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002504:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002508:	d10f      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800250a:	4b5d      	ldr	r3, [pc, #372]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	4a5c      	ldr	r2, [pc, #368]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002514:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002516:	e00c      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f9de 	bl	80028e0 <RCCEx_PLLSAI1_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002528:	e003      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	74fb      	strb	r3, [r7, #19]
      break;
 800252e:	e000      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10b      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002538:	4b51      	ldr	r3, [pc, #324]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002546:	494e      	ldr	r1, [pc, #312]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800254e:	e001      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 809e 	beq.w	800269e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002566:	4b46      	ldr	r3, [pc, #280]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4b40      	ldr	r3, [pc, #256]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	4a3f      	ldr	r2, [pc, #252]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002586:	6593      	str	r3, [r2, #88]	@ 0x58
 8002588:	4b3d      	ldr	r3, [pc, #244]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002594:	2301      	movs	r3, #1
 8002596:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002598:	4b3a      	ldr	r3, [pc, #232]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a39      	ldr	r2, [pc, #228]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fe52 	bl	800124c <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025aa:	e009      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ac:	f7fe fe4e 	bl	800124c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d902      	bls.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	74fb      	strb	r3, [r7, #19]
        break;
 80025be:	e005      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025c0:	4b30      	ldr	r3, [pc, #192]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ef      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d15a      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01e      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d019      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025ee:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025fa:	4b21      	ldr	r3, [pc, #132]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002600:	4a1f      	ldr	r2, [pc, #124]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002606:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002616:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800261a:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d016      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fe0e 	bl	800124c <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002632:	e00b      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe fe0a 	bl	800124c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d902      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	74fb      	strb	r3, [r7, #19]
            break;
 800264a:	e006      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264c:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0ec      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002660:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002666:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266e:	4904      	ldr	r1, [pc, #16]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002676:	e009      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
 800267c:	e006      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268c:	7c7b      	ldrb	r3, [r7, #17]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b8a      	ldr	r3, [pc, #552]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	4a89      	ldr	r2, [pc, #548]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800269c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026aa:	4b84      	ldr	r3, [pc, #528]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b0:	f023 0203 	bic.w	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4980      	ldr	r1, [pc, #512]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026cc:	4b7b      	ldr	r3, [pc, #492]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f023 020c 	bic.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	4978      	ldr	r1, [pc, #480]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ee:	4b73      	ldr	r3, [pc, #460]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fc:	496f      	ldr	r1, [pc, #444]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002710:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800271e:	4967      	ldr	r1, [pc, #412]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002732:	4b62      	ldr	r3, [pc, #392]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002738:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002740:	495e      	ldr	r1, [pc, #376]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002754:	4b59      	ldr	r3, [pc, #356]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	4956      	ldr	r1, [pc, #344]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002776:	4b51      	ldr	r3, [pc, #324]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	494d      	ldr	r1, [pc, #308]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d028      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002798:	4b48      	ldr	r3, [pc, #288]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4945      	ldr	r1, [pc, #276]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b8:	4b40      	ldr	r3, [pc, #256]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a3f      	ldr	r2, [pc, #252]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c2:	60d3      	str	r3, [r2, #12]
 80027c4:	e011      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ce:	d10c      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f882 	bl	80028e0 <RCCEx_PLLSAI1_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d028      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027f6:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	492d      	ldr	r1, [pc, #180]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002814:	d106      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002816:	4b29      	ldr	r3, [pc, #164]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a28      	ldr	r2, [pc, #160]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800281c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002820:	60d3      	str	r3, [r2, #12]
 8002822:	e011      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800282c:	d10c      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f853 	bl	80028e0 <RCCEx_PLLSAI1_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002854:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002862:	4916      	ldr	r1, [pc, #88]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002872:	d10c      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	2102      	movs	r1, #2
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f830 	bl	80028e0 <RCCEx_PLLSAI1_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800289a:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a8:	4904      	ldr	r1, [pc, #16]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000

080028e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ee:	4b74      	ldr	r3, [pc, #464]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d018      	beq.n	800292c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028fa:	4b71      	ldr	r3, [pc, #452]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0203 	and.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d10d      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
       ||
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002912:	4b6b      	ldr	r3, [pc, #428]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
       ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d047      	beq.n	80029b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
 800292a:	e044      	b.n	80029b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d018      	beq.n	8002966 <RCCEx_PLLSAI1_Config+0x86>
 8002934:	2b03      	cmp	r3, #3
 8002936:	d825      	bhi.n	8002984 <RCCEx_PLLSAI1_Config+0xa4>
 8002938:	2b01      	cmp	r3, #1
 800293a:	d002      	beq.n	8002942 <RCCEx_PLLSAI1_Config+0x62>
 800293c:	2b02      	cmp	r3, #2
 800293e:	d009      	beq.n	8002954 <RCCEx_PLLSAI1_Config+0x74>
 8002940:	e020      	b.n	8002984 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002942:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d11d      	bne.n	800298a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002952:	e01a      	b.n	800298a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002954:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d116      	bne.n	800298e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002964:	e013      	b.n	800298e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002966:	4b56      	ldr	r3, [pc, #344]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10f      	bne.n	8002992 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002972:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002982:	e006      	b.n	8002992 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      break;
 8002988:	e004      	b.n	8002994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800298a:	bf00      	nop
 800298c:	e002      	b.n	8002994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002992:	bf00      	nop
    }

    if(status == HAL_OK)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10d      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800299a:	4b49      	ldr	r3, [pc, #292]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	430b      	orrs	r3, r1
 80029b0:	4943      	ldr	r1, [pc, #268]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d17c      	bne.n	8002ab6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029bc:	4b40      	ldr	r3, [pc, #256]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c8:	f7fe fc40 	bl	800124c <HAL_GetTick>
 80029cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ce:	e009      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029d0:	f7fe fc3c 	bl	800124c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d902      	bls.n	80029e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	73fb      	strb	r3, [r7, #15]
        break;
 80029e2:	e005      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029e4:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ef      	bne.n	80029d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d15f      	bne.n	8002ab6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d110      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029fc:	4b30      	ldr	r3, [pc, #192]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002a04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6892      	ldr	r2, [r2, #8]
 8002a0c:	0211      	lsls	r1, r2, #8
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68d2      	ldr	r2, [r2, #12]
 8002a12:	06d2      	lsls	r2, r2, #27
 8002a14:	430a      	orrs	r2, r1
 8002a16:	492a      	ldr	r1, [pc, #168]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	610b      	str	r3, [r1, #16]
 8002a1c:	e027      	b.n	8002a6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d112      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a24:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6892      	ldr	r2, [r2, #8]
 8002a34:	0211      	lsls	r1, r2, #8
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6912      	ldr	r2, [r2, #16]
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0552      	lsls	r2, r2, #21
 8002a40:	430a      	orrs	r2, r1
 8002a42:	491f      	ldr	r1, [pc, #124]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	610b      	str	r3, [r1, #16]
 8002a48:	e011      	b.n	8002a6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	0211      	lsls	r1, r2, #8
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6952      	ldr	r2, [r2, #20]
 8002a60:	0852      	lsrs	r2, r2, #1
 8002a62:	3a01      	subs	r2, #1
 8002a64:	0652      	lsls	r2, r2, #25
 8002a66:	430a      	orrs	r2, r1
 8002a68:	4915      	ldr	r1, [pc, #84]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a6e:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a13      	ldr	r2, [pc, #76]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fbe7 	bl	800124c <HAL_GetTick>
 8002a7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a80:	e009      	b.n	8002a96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a82:	f7fe fbe3 	bl	800124c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d902      	bls.n	8002a96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	73fb      	strb	r3, [r7, #15]
          break;
 8002a94:	e005      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ef      	beq.n	8002a82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	4903      	ldr	r1, [pc, #12]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e049      	b.n	8002b6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe f96a 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f000 fbda 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e049      	b.n	8002c18 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d106      	bne.n	8002b9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f841 	bl	8002c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f000 fb83 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_TIM_PWM_Start+0x24>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e03c      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x9e>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d109      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x3e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	bf14      	ite	ne
 8002c6a:	2301      	movne	r3, #1
 8002c6c:	2300      	moveq	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	e02f      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x9e>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d109      	bne.n	8002c8c <HAL_TIM_PWM_Start+0x58>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e022      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x9e>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d109      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0x72>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e015      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x9e>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d109      	bne.n	8002cc0 <HAL_TIM_PWM_Start+0x8c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e008      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x9e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e07e      	b.n	8002dd8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_PWM_Start+0xb6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ce8:	e023      	b.n	8002d32 <HAL_TIM_PWM_Start+0xfe>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0xc6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cf8:	e01b      	b.n	8002d32 <HAL_TIM_PWM_Start+0xfe>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xd6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d08:	e013      	b.n	8002d32 <HAL_TIM_PWM_Start+0xfe>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start+0xe6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d18:	e00b      	b.n	8002d32 <HAL_TIM_PWM_Start+0xfe>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_PWM_Start+0xf6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d28:	e003      	b.n	8002d32 <HAL_TIM_PWM_Start+0xfe>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fe3a 	bl	80039b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a26      	ldr	r2, [pc, #152]	@ (8002de0 <HAL_TIM_PWM_Start+0x1ac>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x12a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a25      	ldr	r2, [pc, #148]	@ (8002de4 <HAL_TIM_PWM_Start+0x1b0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d004      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x12a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a23      	ldr	r2, [pc, #140]	@ (8002de8 <HAL_TIM_PWM_Start+0x1b4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x12e>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_TIM_PWM_Start+0x130>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a18      	ldr	r2, [pc, #96]	@ (8002de0 <HAL_TIM_PWM_Start+0x1ac>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_TIM_PWM_Start+0x162>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d8a:	d004      	beq.n	8002d96 <HAL_TIM_PWM_Start+0x162>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a14      	ldr	r2, [pc, #80]	@ (8002de4 <HAL_TIM_PWM_Start+0x1b0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d115      	bne.n	8002dc2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <HAL_TIM_PWM_Start+0x1b8>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d015      	beq.n	8002dd4 <HAL_TIM_PWM_Start+0x1a0>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dae:	d011      	beq.n	8002dd4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	e008      	b.n	8002dd4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e000      	b.n	8002dd6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400
 8002dec:	00010007 	.word	0x00010007

08002df0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	6839      	ldr	r1, [r7, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fdd6 	bl	80039b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a39      	ldr	r2, [pc, #228]	@ (8002ef4 <HAL_TIM_PWM_Stop+0x104>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_TIM_PWM_Stop+0x36>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a38      	ldr	r2, [pc, #224]	@ (8002ef8 <HAL_TIM_PWM_Stop+0x108>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_TIM_PWM_Stop+0x36>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a36      	ldr	r2, [pc, #216]	@ (8002efc <HAL_TIM_PWM_Stop+0x10c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_PWM_Stop+0x3a>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_TIM_PWM_Stop+0x3c>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d017      	beq.n	8002e60 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10f      	bne.n	8002e60 <HAL_TIM_PWM_Stop+0x70>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_PWM_Stop+0x70>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a1a      	ldr	r2, [r3, #32]
 8002e66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10f      	bne.n	8002e90 <HAL_TIM_PWM_Stop+0xa0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a1a      	ldr	r2, [r3, #32]
 8002e76:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_PWM_Stop+0xa0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <HAL_TIM_PWM_Stop+0xb0>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e9e:	e023      	b.n	8002ee8 <HAL_TIM_PWM_Stop+0xf8>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d104      	bne.n	8002eb0 <HAL_TIM_PWM_Stop+0xc0>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eae:	e01b      	b.n	8002ee8 <HAL_TIM_PWM_Stop+0xf8>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d104      	bne.n	8002ec0 <HAL_TIM_PWM_Stop+0xd0>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ebe:	e013      	b.n	8002ee8 <HAL_TIM_PWM_Stop+0xf8>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d104      	bne.n	8002ed0 <HAL_TIM_PWM_Stop+0xe0>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ece:	e00b      	b.n	8002ee8 <HAL_TIM_PWM_Stop+0xf8>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d104      	bne.n	8002ee0 <HAL_TIM_PWM_Stop+0xf0>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ede:	e003      	b.n	8002ee8 <HAL_TIM_PWM_Stop+0xf8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40014400 	.word	0x40014400

08002f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0ff      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b14      	cmp	r3, #20
 8002f2a:	f200 80f0 	bhi.w	800310e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f89 	.word	0x08002f89
 8002f38:	0800310f 	.word	0x0800310f
 8002f3c:	0800310f 	.word	0x0800310f
 8002f40:	0800310f 	.word	0x0800310f
 8002f44:	08002fc9 	.word	0x08002fc9
 8002f48:	0800310f 	.word	0x0800310f
 8002f4c:	0800310f 	.word	0x0800310f
 8002f50:	0800310f 	.word	0x0800310f
 8002f54:	0800300b 	.word	0x0800300b
 8002f58:	0800310f 	.word	0x0800310f
 8002f5c:	0800310f 	.word	0x0800310f
 8002f60:	0800310f 	.word	0x0800310f
 8002f64:	0800304b 	.word	0x0800304b
 8002f68:	0800310f 	.word	0x0800310f
 8002f6c:	0800310f 	.word	0x0800310f
 8002f70:	0800310f 	.word	0x0800310f
 8002f74:	0800308d 	.word	0x0800308d
 8002f78:	0800310f 	.word	0x0800310f
 8002f7c:	0800310f 	.word	0x0800310f
 8002f80:	0800310f 	.word	0x0800310f
 8002f84:	080030cd 	.word	0x080030cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f9f8 	bl	8003384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6999      	ldr	r1, [r3, #24]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	619a      	str	r2, [r3, #24]
      break;
 8002fc6:	e0a5      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fa54 	bl	800347c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	021a      	lsls	r2, r3, #8
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	619a      	str	r2, [r3, #24]
      break;
 8003008:	e084      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 faad 	bl	8003570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0208 	orr.w	r2, r2, #8
 8003024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0204 	bic.w	r2, r2, #4
 8003034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69d9      	ldr	r1, [r3, #28]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
      break;
 8003048:	e064      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fb05 	bl	8003660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	021a      	lsls	r2, r3, #8
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	61da      	str	r2, [r3, #28]
      break;
 800308a:	e043      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fb42 	bl	800371c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80030ca:	e023      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fb7a 	bl	80037cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	021a      	lsls	r2, r3, #8
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800310c:	e002      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
      break;
 8003112:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800311c:	7dfb      	ldrb	r3, [r7, #23]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIM_ConfigClockSource+0x1c>
 8003140:	2302      	movs	r3, #2
 8003142:	e0b6      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x18a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003162:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800316e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003180:	d03e      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0xd8>
 8003182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003186:	f200 8087 	bhi.w	8003298 <HAL_TIM_ConfigClockSource+0x170>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318e:	f000 8086 	beq.w	800329e <HAL_TIM_ConfigClockSource+0x176>
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003196:	d87f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 8003198:	2b70      	cmp	r3, #112	@ 0x70
 800319a:	d01a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0xaa>
 800319c:	2b70      	cmp	r3, #112	@ 0x70
 800319e:	d87b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031a0:	2b60      	cmp	r3, #96	@ 0x60
 80031a2:	d050      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x11e>
 80031a4:	2b60      	cmp	r3, #96	@ 0x60
 80031a6:	d877      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031a8:	2b50      	cmp	r3, #80	@ 0x50
 80031aa:	d03c      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0xfe>
 80031ac:	2b50      	cmp	r3, #80	@ 0x50
 80031ae:	d873      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031b0:	2b40      	cmp	r3, #64	@ 0x40
 80031b2:	d058      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x13e>
 80031b4:	2b40      	cmp	r3, #64	@ 0x40
 80031b6:	d86f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031b8:	2b30      	cmp	r3, #48	@ 0x30
 80031ba:	d064      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031bc:	2b30      	cmp	r3, #48	@ 0x30
 80031be:	d86b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d060      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d867      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05c      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d05a      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031d0:	e062      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e2:	f000 fbc7 	bl	8003974 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	609a      	str	r2, [r3, #8]
      break;
 80031fe:	e04f      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003210:	f000 fbb0 	bl	8003974 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003222:	609a      	str	r2, [r3, #8]
      break;
 8003224:	e03c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003232:	461a      	mov	r2, r3
 8003234:	f000 fb24 	bl	8003880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2150      	movs	r1, #80	@ 0x50
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fb7d 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 8003244:	e02c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003252:	461a      	mov	r2, r3
 8003254:	f000 fb43 	bl	80038de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2160      	movs	r1, #96	@ 0x60
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fb6d 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 8003264:	e01c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	461a      	mov	r2, r3
 8003274:	f000 fb04 	bl	8003880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2140      	movs	r1, #64	@ 0x40
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fb5d 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 8003284:	e00c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f000 fb54 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 8003296:	e003      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e000      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800329e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003378 <TIM_Base_SetConfig+0xbc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x20>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a21      	ldr	r2, [pc, #132]	@ (8003378 <TIM_Base_SetConfig+0xbc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00b      	beq.n	800330e <TIM_Base_SetConfig+0x52>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d007      	beq.n	800330e <TIM_Base_SetConfig+0x52>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1e      	ldr	r2, [pc, #120]	@ (800337c <TIM_Base_SetConfig+0xc0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_Base_SetConfig+0x52>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <TIM_Base_SetConfig+0xc4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a0c      	ldr	r2, [pc, #48]	@ (8003378 <TIM_Base_SetConfig+0xbc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <TIM_Base_SetConfig+0xa0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0b      	ldr	r2, [pc, #44]	@ (800337c <TIM_Base_SetConfig+0xc0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_Base_SetConfig+0xa0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0a      	ldr	r2, [pc, #40]	@ (8003380 <TIM_Base_SetConfig+0xc4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	615a      	str	r2, [r3, #20]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40014000 	.word	0x40014000
 8003380:	40014400 	.word	0x40014400

08003384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f023 0201 	bic.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 0302 	bic.w	r3, r3, #2
 80033d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a24      	ldr	r2, [pc, #144]	@ (8003470 <TIM_OC1_SetConfig+0xec>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_OC1_SetConfig+0x70>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a23      	ldr	r2, [pc, #140]	@ (8003474 <TIM_OC1_SetConfig+0xf0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_OC1_SetConfig+0x70>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a22      	ldr	r2, [pc, #136]	@ (8003478 <TIM_OC1_SetConfig+0xf4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10c      	bne.n	800340e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0308 	bic.w	r3, r3, #8
 80033fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a17      	ldr	r2, [pc, #92]	@ (8003470 <TIM_OC1_SetConfig+0xec>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <TIM_OC1_SetConfig+0xa2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a16      	ldr	r2, [pc, #88]	@ (8003474 <TIM_OC1_SetConfig+0xf0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_OC1_SetConfig+0xa2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a15      	ldr	r2, [pc, #84]	@ (8003478 <TIM_OC1_SetConfig+0xf4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d111      	bne.n	800344a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800342c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400

0800347c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f023 0210 	bic.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0320 	bic.w	r3, r3, #32
 80034ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a22      	ldr	r2, [pc, #136]	@ (8003564 <TIM_OC2_SetConfig+0xe8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10d      	bne.n	80034fc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a19      	ldr	r2, [pc, #100]	@ (8003564 <TIM_OC2_SetConfig+0xe8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <TIM_OC2_SetConfig+0x98>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a18      	ldr	r2, [pc, #96]	@ (8003568 <TIM_OC2_SetConfig+0xec>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_OC2_SetConfig+0x98>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a17      	ldr	r2, [pc, #92]	@ (800356c <TIM_OC2_SetConfig+0xf0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d113      	bne.n	800353c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800351a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	621a      	str	r2, [r3, #32]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40014000 	.word	0x40014000
 800356c:	40014400 	.word	0x40014400

08003570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a21      	ldr	r2, [pc, #132]	@ (8003654 <TIM_OC3_SetConfig+0xe4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10d      	bne.n	80035ee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a18      	ldr	r2, [pc, #96]	@ (8003654 <TIM_OC3_SetConfig+0xe4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_OC3_SetConfig+0x96>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <TIM_OC3_SetConfig+0xe8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_OC3_SetConfig+0x96>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a16      	ldr	r2, [pc, #88]	@ (800365c <TIM_OC3_SetConfig+0xec>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d113      	bne.n	800362e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800360c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	621a      	str	r2, [r3, #32]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40012c00 	.word	0x40012c00
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400

08003660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	031b      	lsls	r3, r3, #12
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a14      	ldr	r2, [pc, #80]	@ (8003710 <TIM_OC4_SetConfig+0xb0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_OC4_SetConfig+0x74>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a13      	ldr	r2, [pc, #76]	@ (8003714 <TIM_OC4_SetConfig+0xb4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC4_SetConfig+0x74>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a12      	ldr	r2, [pc, #72]	@ (8003718 <TIM_OC4_SetConfig+0xb8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d109      	bne.n	80036e8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400

0800371c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800374a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003760:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a13      	ldr	r2, [pc, #76]	@ (80037c0 <TIM_OC5_SetConfig+0xa4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d007      	beq.n	8003786 <TIM_OC5_SetConfig+0x6a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a12      	ldr	r2, [pc, #72]	@ (80037c4 <TIM_OC5_SetConfig+0xa8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_OC5_SetConfig+0x6a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a11      	ldr	r2, [pc, #68]	@ (80037c8 <TIM_OC5_SetConfig+0xac>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d109      	bne.n	800379a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	621a      	str	r2, [r3, #32]
}
 80037b4:	bf00      	nop
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400

080037cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	051b      	lsls	r3, r3, #20
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a14      	ldr	r2, [pc, #80]	@ (8003874 <TIM_OC6_SetConfig+0xa8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <TIM_OC6_SetConfig+0x6c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a13      	ldr	r2, [pc, #76]	@ (8003878 <TIM_OC6_SetConfig+0xac>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_OC6_SetConfig+0x6c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a12      	ldr	r2, [pc, #72]	@ (800387c <TIM_OC6_SetConfig+0xb0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d109      	bne.n	800384c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800383e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	029b      	lsls	r3, r3, #10
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40014000 	.word	0x40014000
 800387c:	40014400 	.word	0x40014400

08003880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f023 030a 	bic.w	r3, r3, #10
 80038bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038de:	b480      	push	{r7}
 80038e0:	b087      	sub	sp, #28
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f023 0210 	bic.w	r2, r3, #16
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800391a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	f043 0307 	orr.w	r3, r3, #7
 8003960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800398e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	431a      	orrs	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	2201      	movs	r2, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1a      	ldr	r2, [r3, #32]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e04f      	b.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a21      	ldr	r2, [pc, #132]	@ (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d108      	bne.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a14      	ldr	r2, [pc, #80]	@ (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d009      	beq.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d004      	beq.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a10      	ldr	r2, [pc, #64]	@ (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40014000 	.word	0x40014000

08003acc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e060      	b.n	8003baa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a14      	ldr	r2, [pc, #80]	@ (8003bb8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d115      	bne.n	8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	051b      	lsls	r3, r3, #20
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40012c00 	.word	0x40012c00

08003bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e040      	b.n	8003c50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd f948 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	@ 0x24
 8003be8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fba6 	bl	8004354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f977 	bl	8003efc <UART_SetConfig>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e01b      	b.n	8003c50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fc25 	bl	8004498 <UART_CheckIdleState>
 8003c4e:	4603      	mov	r3, r0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	@ 0x28
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d177      	bne.n	8003d60 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Transmit+0x24>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e070      	b.n	8003d62 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2221      	movs	r2, #33	@ 0x21
 8003c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8e:	f7fd fadd 	bl	800124c <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cac:	d108      	bne.n	8003cc0 <HAL_UART_Transmit+0x68>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e003      	b.n	8003cc8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cc8:	e02f      	b.n	8003d2a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	@ 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fc87 	bl	80045e8 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e03b      	b.n	8003d62 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	3302      	adds	r3, #2
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e007      	b.n	8003d18 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3301      	adds	r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1c9      	bne.n	8003cca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2140      	movs	r1, #64	@ 0x40
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fc51 	bl	80045e8 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e005      	b.n	8003d62 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b08a      	sub	sp, #40	@ 0x28
 8003d6e:	af02      	add	r7, sp, #8
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	4613      	mov	r3, r2
 8003d78:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	f040 80b6 	bne.w	8003ef2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_UART_Receive+0x28>
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e0ae      	b.n	8003ef4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2222      	movs	r2, #34	@ 0x22
 8003da2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dac:	f7fd fa4e 	bl	800124c <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	88fa      	ldrh	r2, [r7, #6]
 8003db6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	88fa      	ldrh	r2, [r7, #6]
 8003dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dca:	d10e      	bne.n	8003dea <HAL_UART_Receive+0x80>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_UART_Receive+0x76>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003dda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003dde:	e02d      	b.n	8003e3c <HAL_UART_Receive+0xd2>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	22ff      	movs	r2, #255	@ 0xff
 8003de4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003de8:	e028      	b.n	8003e3c <HAL_UART_Receive+0xd2>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <HAL_UART_Receive+0xa4>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <HAL_UART_Receive+0x9a>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	22ff      	movs	r2, #255	@ 0xff
 8003dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e02:	e01b      	b.n	8003e3c <HAL_UART_Receive+0xd2>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	227f      	movs	r2, #127	@ 0x7f
 8003e08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e0c:	e016      	b.n	8003e3c <HAL_UART_Receive+0xd2>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e16:	d10d      	bne.n	8003e34 <HAL_UART_Receive+0xca>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <HAL_UART_Receive+0xc0>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	227f      	movs	r2, #127	@ 0x7f
 8003e24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e28:	e008      	b.n	8003e3c <HAL_UART_Receive+0xd2>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	223f      	movs	r2, #63	@ 0x3f
 8003e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e32:	e003      	b.n	8003e3c <HAL_UART_Receive+0xd2>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e42:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4c:	d108      	bne.n	8003e60 <HAL_UART_Receive+0xf6>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d104      	bne.n	8003e60 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	e003      	b.n	8003e68 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003e68:	e037      	b.n	8003eda <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2120      	movs	r1, #32
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fbb7 	bl	80045e8 <UART_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e033      	b.n	8003ef4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10c      	bne.n	8003eac <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	8a7b      	ldrh	r3, [r7, #18]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e00d      	b.n	8003ec8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	8a7b      	ldrh	r3, [r7, #18]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	4013      	ands	r3, r2
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1c1      	bne.n	8003e6a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3720      	adds	r7, #32
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f00:	b08a      	sub	sp, #40	@ 0x28
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4bb4      	ldr	r3, [pc, #720]	@ (80041fc <UART_SetConfig+0x300>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4aa9      	ldr	r2, [pc, #676]	@ (8004200 <UART_SetConfig+0x304>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f64:	4313      	orrs	r3, r2
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4aa0      	ldr	r2, [pc, #640]	@ (8004204 <UART_SetConfig+0x308>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d126      	bne.n	8003fd4 <UART_SetConfig+0xd8>
 8003f86:	4ba0      	ldr	r3, [pc, #640]	@ (8004208 <UART_SetConfig+0x30c>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d81b      	bhi.n	8003fcc <UART_SetConfig+0xd0>
 8003f94:	a201      	add	r2, pc, #4	@ (adr r2, 8003f9c <UART_SetConfig+0xa0>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fbd 	.word	0x08003fbd
 8003fa4:	08003fb5 	.word	0x08003fb5
 8003fa8:	08003fc5 	.word	0x08003fc5
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb2:	e080      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fba:	e07c      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e078      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e074      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e070      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a8c      	ldr	r2, [pc, #560]	@ (800420c <UART_SetConfig+0x310>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d138      	bne.n	8004050 <UART_SetConfig+0x154>
 8003fde:	4b8a      	ldr	r3, [pc, #552]	@ (8004208 <UART_SetConfig+0x30c>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	d82d      	bhi.n	8004048 <UART_SetConfig+0x14c>
 8003fec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <UART_SetConfig+0xf8>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	08004049 	.word	0x08004049
 8003ffc:	08004049 	.word	0x08004049
 8004000:	08004049 	.word	0x08004049
 8004004:	08004039 	.word	0x08004039
 8004008:	08004049 	.word	0x08004049
 800400c:	08004049 	.word	0x08004049
 8004010:	08004049 	.word	0x08004049
 8004014:	08004031 	.word	0x08004031
 8004018:	08004049 	.word	0x08004049
 800401c:	08004049 	.word	0x08004049
 8004020:	08004049 	.word	0x08004049
 8004024:	08004041 	.word	0x08004041
 8004028:	2300      	movs	r3, #0
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402e:	e042      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8004030:	2302      	movs	r3, #2
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004036:	e03e      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8004038:	2304      	movs	r3, #4
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403e:	e03a      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8004040:	2308      	movs	r3, #8
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004046:	e036      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8004048:	2310      	movs	r3, #16
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404e:	e032      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a6a      	ldr	r2, [pc, #424]	@ (8004200 <UART_SetConfig+0x304>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d12a      	bne.n	80040b0 <UART_SetConfig+0x1b4>
 800405a:	4b6b      	ldr	r3, [pc, #428]	@ (8004208 <UART_SetConfig+0x30c>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004060:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004064:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004068:	d01a      	beq.n	80040a0 <UART_SetConfig+0x1a4>
 800406a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800406e:	d81b      	bhi.n	80040a8 <UART_SetConfig+0x1ac>
 8004070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004074:	d00c      	beq.n	8004090 <UART_SetConfig+0x194>
 8004076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800407a:	d815      	bhi.n	80040a8 <UART_SetConfig+0x1ac>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <UART_SetConfig+0x18c>
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004084:	d008      	beq.n	8004098 <UART_SetConfig+0x19c>
 8004086:	e00f      	b.n	80040a8 <UART_SetConfig+0x1ac>
 8004088:	2300      	movs	r3, #0
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408e:	e012      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8004090:	2302      	movs	r3, #2
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004096:	e00e      	b.n	80040b6 <UART_SetConfig+0x1ba>
 8004098:	2304      	movs	r3, #4
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409e:	e00a      	b.n	80040b6 <UART_SetConfig+0x1ba>
 80040a0:	2308      	movs	r3, #8
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a6:	e006      	b.n	80040b6 <UART_SetConfig+0x1ba>
 80040a8:	2310      	movs	r3, #16
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ae:	e002      	b.n	80040b6 <UART_SetConfig+0x1ba>
 80040b0:	2310      	movs	r3, #16
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a51      	ldr	r2, [pc, #324]	@ (8004200 <UART_SetConfig+0x304>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d17a      	bne.n	80041b6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d824      	bhi.n	8004112 <UART_SetConfig+0x216>
 80040c8:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <UART_SetConfig+0x1d4>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	08004113 	.word	0x08004113
 80040d8:	080040fd 	.word	0x080040fd
 80040dc:	08004113 	.word	0x08004113
 80040e0:	08004103 	.word	0x08004103
 80040e4:	08004113 	.word	0x08004113
 80040e8:	08004113 	.word	0x08004113
 80040ec:	08004113 	.word	0x08004113
 80040f0:	0800410b 	.word	0x0800410b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f4:	f7fe f962 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80040f8:	61f8      	str	r0, [r7, #28]
        break;
 80040fa:	e010      	b.n	800411e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040fc:	4b44      	ldr	r3, [pc, #272]	@ (8004210 <UART_SetConfig+0x314>)
 80040fe:	61fb      	str	r3, [r7, #28]
        break;
 8004100:	e00d      	b.n	800411e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004102:	f7fe f8c3 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8004106:	61f8      	str	r0, [r7, #28]
        break;
 8004108:	e009      	b.n	800411e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800410e:	61fb      	str	r3, [r7, #28]
        break;
 8004110:	e005      	b.n	800411e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800411c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8107 	beq.w	8004334 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	429a      	cmp	r2, r3
 8004134:	d305      	bcc.n	8004142 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	429a      	cmp	r2, r3
 8004140:	d903      	bls.n	800414a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004148:	e0f4      	b.n	8004334 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2200      	movs	r2, #0
 800414e:	461c      	mov	r4, r3
 8004150:	4615      	mov	r5, r2
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	022b      	lsls	r3, r5, #8
 800415c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004160:	0222      	lsls	r2, r4, #8
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	6849      	ldr	r1, [r1, #4]
 8004166:	0849      	lsrs	r1, r1, #1
 8004168:	2000      	movs	r0, #0
 800416a:	4688      	mov	r8, r1
 800416c:	4681      	mov	r9, r0
 800416e:	eb12 0a08 	adds.w	sl, r2, r8
 8004172:	eb43 0b09 	adc.w	fp, r3, r9
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004184:	4650      	mov	r0, sl
 8004186:	4659      	mov	r1, fp
 8004188:	f7fc f872 	bl	8000270 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4613      	mov	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800419a:	d308      	bcc.n	80041ae <UART_SetConfig+0x2b2>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041a2:	d204      	bcs.n	80041ae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	60da      	str	r2, [r3, #12]
 80041ac:	e0c2      	b.n	8004334 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041b4:	e0be      	b.n	8004334 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041be:	d16a      	bne.n	8004296 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80041c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d834      	bhi.n	8004232 <UART_SetConfig+0x336>
 80041c8:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <UART_SetConfig+0x2d4>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	08004215 	.word	0x08004215
 80041d8:	0800421d 	.word	0x0800421d
 80041dc:	08004233 	.word	0x08004233
 80041e0:	08004223 	.word	0x08004223
 80041e4:	08004233 	.word	0x08004233
 80041e8:	08004233 	.word	0x08004233
 80041ec:	08004233 	.word	0x08004233
 80041f0:	0800422b 	.word	0x0800422b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f4:	f7fe f8e2 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80041f8:	61f8      	str	r0, [r7, #28]
        break;
 80041fa:	e020      	b.n	800423e <UART_SetConfig+0x342>
 80041fc:	efff69f3 	.word	0xefff69f3
 8004200:	40008000 	.word	0x40008000
 8004204:	40013800 	.word	0x40013800
 8004208:	40021000 	.word	0x40021000
 800420c:	40004400 	.word	0x40004400
 8004210:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004214:	f7fe f8e8 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8004218:	61f8      	str	r0, [r7, #28]
        break;
 800421a:	e010      	b.n	800423e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800421c:	4b4c      	ldr	r3, [pc, #304]	@ (8004350 <UART_SetConfig+0x454>)
 800421e:	61fb      	str	r3, [r7, #28]
        break;
 8004220:	e00d      	b.n	800423e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004222:	f7fe f833 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8004226:	61f8      	str	r0, [r7, #28]
        break;
 8004228:	e009      	b.n	800423e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800422e:	61fb      	str	r3, [r7, #28]
        break;
 8004230:	e005      	b.n	800423e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800423c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d077      	beq.n	8004334 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	005a      	lsls	r2, r3, #1
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	441a      	add	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b0f      	cmp	r3, #15
 800425e:	d916      	bls.n	800428e <UART_SetConfig+0x392>
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004266:	d212      	bcs.n	800428e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f023 030f 	bic.w	r3, r3, #15
 8004270:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	b29b      	uxth	r3, r3
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	b29a      	uxth	r2, r3
 800427e:	8afb      	ldrh	r3, [r7, #22]
 8004280:	4313      	orrs	r3, r2
 8004282:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	8afa      	ldrh	r2, [r7, #22]
 800428a:	60da      	str	r2, [r3, #12]
 800428c:	e052      	b.n	8004334 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004294:	e04e      	b.n	8004334 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004296:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800429a:	2b08      	cmp	r3, #8
 800429c:	d827      	bhi.n	80042ee <UART_SetConfig+0x3f2>
 800429e:	a201      	add	r2, pc, #4	@ (adr r2, 80042a4 <UART_SetConfig+0x3a8>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042c9 	.word	0x080042c9
 80042a8:	080042d1 	.word	0x080042d1
 80042ac:	080042d9 	.word	0x080042d9
 80042b0:	080042ef 	.word	0x080042ef
 80042b4:	080042df 	.word	0x080042df
 80042b8:	080042ef 	.word	0x080042ef
 80042bc:	080042ef 	.word	0x080042ef
 80042c0:	080042ef 	.word	0x080042ef
 80042c4:	080042e7 	.word	0x080042e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7fe f878 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80042cc:	61f8      	str	r0, [r7, #28]
        break;
 80042ce:	e014      	b.n	80042fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d0:	f7fe f88a 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 80042d4:	61f8      	str	r0, [r7, #28]
        break;
 80042d6:	e010      	b.n	80042fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004350 <UART_SetConfig+0x454>)
 80042da:	61fb      	str	r3, [r7, #28]
        break;
 80042dc:	e00d      	b.n	80042fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042de:	f7fd ffd5 	bl	800228c <HAL_RCC_GetSysClockFreq>
 80042e2:	61f8      	str	r0, [r7, #28]
        break;
 80042e4:	e009      	b.n	80042fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ea:	61fb      	str	r3, [r7, #28]
        break;
 80042ec:	e005      	b.n	80042fa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042f8:	bf00      	nop
    }

    if (pclk != 0U)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d019      	beq.n	8004334 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	085a      	lsrs	r2, r3, #1
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	441a      	add	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b0f      	cmp	r3, #15
 8004318:	d909      	bls.n	800432e <UART_SetConfig+0x432>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004320:	d205      	bcs.n	800432e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60da      	str	r2, [r3, #12]
 800432c:	e002      	b.n	8004334 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004340:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004344:	4618      	mov	r0, r3
 8004346:	3728      	adds	r7, #40	@ 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434e:	bf00      	nop
 8004350:	00f42400 	.word	0x00f42400

08004354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01a      	beq.n	800446a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004452:	d10a      	bne.n	800446a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b098      	sub	sp, #96	@ 0x60
 800449c:	af02      	add	r7, sp, #8
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044a8:	f7fc fed0 	bl	800124c <HAL_GetTick>
 80044ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d12e      	bne.n	800451a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c4:	2200      	movs	r2, #0
 80044c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f88c 	bl	80045e8 <UART_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d021      	beq.n	800451a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e6      	bne.n	80044d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e062      	b.n	80045e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b04      	cmp	r3, #4
 8004526:	d149      	bne.n	80045bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004530:	2200      	movs	r2, #0
 8004532:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f856 	bl	80045e8 <UART_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d03c      	beq.n	80045bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	623b      	str	r3, [r7, #32]
   return(result);
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004560:	633b      	str	r3, [r7, #48]	@ 0x30
 8004562:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e6      	bne.n	8004542 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	60fb      	str	r3, [r7, #12]
   return(result);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3308      	adds	r3, #8
 8004592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004594:	61fa      	str	r2, [r7, #28]
 8004596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	617b      	str	r3, [r7, #20]
   return(result);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e5      	bne.n	8004574 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e011      	b.n	80045e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3758      	adds	r7, #88	@ 0x58
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f8:	e049      	b.n	800468e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d045      	beq.n	800468e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004602:	f7fc fe23 	bl	800124c <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	429a      	cmp	r2, r3
 8004610:	d302      	bcc.n	8004618 <UART_WaitOnFlagUntilTimeout+0x30>
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e048      	b.n	80046ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d031      	beq.n	800468e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b08      	cmp	r3, #8
 8004636:	d110      	bne.n	800465a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f838 	bl	80046b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2208      	movs	r2, #8
 800464a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e029      	b.n	80046ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004668:	d111      	bne.n	800468e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f81e 	bl	80046b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e00f      	b.n	80046ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4013      	ands	r3, r2
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	429a      	cmp	r2, r3
 800469c:	bf0c      	ite	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	2300      	movne	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d0a6      	beq.n	80045fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b095      	sub	sp, #84	@ 0x54
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e6      	bne.n	80046be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3308      	adds	r3, #8
 800470e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004710:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e5      	bne.n	80046f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004728:	2b01      	cmp	r3, #1
 800472a:	d118      	bne.n	800475e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	60bb      	str	r3, [r7, #8]
   return(result);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f023 0310 	bic.w	r3, r3, #16
 8004740:	647b      	str	r3, [r7, #68]	@ 0x44
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6979      	ldr	r1, [r7, #20]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	613b      	str	r3, [r7, #16]
   return(result);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e6      	bne.n	800472c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004772:	bf00      	nop
 8004774:	3754      	adds	r7, #84	@ 0x54
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <std>:
 8004780:	2300      	movs	r3, #0
 8004782:	b510      	push	{r4, lr}
 8004784:	4604      	mov	r4, r0
 8004786:	e9c0 3300 	strd	r3, r3, [r0]
 800478a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800478e:	6083      	str	r3, [r0, #8]
 8004790:	8181      	strh	r1, [r0, #12]
 8004792:	6643      	str	r3, [r0, #100]	@ 0x64
 8004794:	81c2      	strh	r2, [r0, #14]
 8004796:	6183      	str	r3, [r0, #24]
 8004798:	4619      	mov	r1, r3
 800479a:	2208      	movs	r2, #8
 800479c:	305c      	adds	r0, #92	@ 0x5c
 800479e:	f000 fa0b 	bl	8004bb8 <memset>
 80047a2:	4b0d      	ldr	r3, [pc, #52]	@ (80047d8 <std+0x58>)
 80047a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80047a6:	4b0d      	ldr	r3, [pc, #52]	@ (80047dc <std+0x5c>)
 80047a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047aa:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <std+0x60>)
 80047ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <std+0x64>)
 80047b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <std+0x68>)
 80047b4:	6224      	str	r4, [r4, #32]
 80047b6:	429c      	cmp	r4, r3
 80047b8:	d006      	beq.n	80047c8 <std+0x48>
 80047ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047be:	4294      	cmp	r4, r2
 80047c0:	d002      	beq.n	80047c8 <std+0x48>
 80047c2:	33d0      	adds	r3, #208	@ 0xd0
 80047c4:	429c      	cmp	r4, r3
 80047c6:	d105      	bne.n	80047d4 <std+0x54>
 80047c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d0:	f000 ba6a 	b.w	8004ca8 <__retarget_lock_init_recursive>
 80047d4:	bd10      	pop	{r4, pc}
 80047d6:	bf00      	nop
 80047d8:	08004a09 	.word	0x08004a09
 80047dc:	08004a2b 	.word	0x08004a2b
 80047e0:	08004a63 	.word	0x08004a63
 80047e4:	08004a87 	.word	0x08004a87
 80047e8:	20000194 	.word	0x20000194

080047ec <stdio_exit_handler>:
 80047ec:	4a02      	ldr	r2, [pc, #8]	@ (80047f8 <stdio_exit_handler+0xc>)
 80047ee:	4903      	ldr	r1, [pc, #12]	@ (80047fc <stdio_exit_handler+0x10>)
 80047f0:	4803      	ldr	r0, [pc, #12]	@ (8004800 <stdio_exit_handler+0x14>)
 80047f2:	f000 b869 	b.w	80048c8 <_fwalk_sglue>
 80047f6:	bf00      	nop
 80047f8:	20000040 	.word	0x20000040
 80047fc:	08005b45 	.word	0x08005b45
 8004800:	20000050 	.word	0x20000050

08004804 <cleanup_stdio>:
 8004804:	6841      	ldr	r1, [r0, #4]
 8004806:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <cleanup_stdio+0x34>)
 8004808:	4299      	cmp	r1, r3
 800480a:	b510      	push	{r4, lr}
 800480c:	4604      	mov	r4, r0
 800480e:	d001      	beq.n	8004814 <cleanup_stdio+0x10>
 8004810:	f001 f998 	bl	8005b44 <_fflush_r>
 8004814:	68a1      	ldr	r1, [r4, #8]
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <cleanup_stdio+0x38>)
 8004818:	4299      	cmp	r1, r3
 800481a:	d002      	beq.n	8004822 <cleanup_stdio+0x1e>
 800481c:	4620      	mov	r0, r4
 800481e:	f001 f991 	bl	8005b44 <_fflush_r>
 8004822:	68e1      	ldr	r1, [r4, #12]
 8004824:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <cleanup_stdio+0x3c>)
 8004826:	4299      	cmp	r1, r3
 8004828:	d004      	beq.n	8004834 <cleanup_stdio+0x30>
 800482a:	4620      	mov	r0, r4
 800482c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004830:	f001 b988 	b.w	8005b44 <_fflush_r>
 8004834:	bd10      	pop	{r4, pc}
 8004836:	bf00      	nop
 8004838:	20000194 	.word	0x20000194
 800483c:	200001fc 	.word	0x200001fc
 8004840:	20000264 	.word	0x20000264

08004844 <global_stdio_init.part.0>:
 8004844:	b510      	push	{r4, lr}
 8004846:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <global_stdio_init.part.0+0x30>)
 8004848:	4c0b      	ldr	r4, [pc, #44]	@ (8004878 <global_stdio_init.part.0+0x34>)
 800484a:	4a0c      	ldr	r2, [pc, #48]	@ (800487c <global_stdio_init.part.0+0x38>)
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	4620      	mov	r0, r4
 8004850:	2200      	movs	r2, #0
 8004852:	2104      	movs	r1, #4
 8004854:	f7ff ff94 	bl	8004780 <std>
 8004858:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800485c:	2201      	movs	r2, #1
 800485e:	2109      	movs	r1, #9
 8004860:	f7ff ff8e 	bl	8004780 <std>
 8004864:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004868:	2202      	movs	r2, #2
 800486a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800486e:	2112      	movs	r1, #18
 8004870:	f7ff bf86 	b.w	8004780 <std>
 8004874:	200002cc 	.word	0x200002cc
 8004878:	20000194 	.word	0x20000194
 800487c:	080047ed 	.word	0x080047ed

08004880 <__sfp_lock_acquire>:
 8004880:	4801      	ldr	r0, [pc, #4]	@ (8004888 <__sfp_lock_acquire+0x8>)
 8004882:	f000 ba12 	b.w	8004caa <__retarget_lock_acquire_recursive>
 8004886:	bf00      	nop
 8004888:	200002d5 	.word	0x200002d5

0800488c <__sfp_lock_release>:
 800488c:	4801      	ldr	r0, [pc, #4]	@ (8004894 <__sfp_lock_release+0x8>)
 800488e:	f000 ba0d 	b.w	8004cac <__retarget_lock_release_recursive>
 8004892:	bf00      	nop
 8004894:	200002d5 	.word	0x200002d5

08004898 <__sinit>:
 8004898:	b510      	push	{r4, lr}
 800489a:	4604      	mov	r4, r0
 800489c:	f7ff fff0 	bl	8004880 <__sfp_lock_acquire>
 80048a0:	6a23      	ldr	r3, [r4, #32]
 80048a2:	b11b      	cbz	r3, 80048ac <__sinit+0x14>
 80048a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a8:	f7ff bff0 	b.w	800488c <__sfp_lock_release>
 80048ac:	4b04      	ldr	r3, [pc, #16]	@ (80048c0 <__sinit+0x28>)
 80048ae:	6223      	str	r3, [r4, #32]
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <__sinit+0x2c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f5      	bne.n	80048a4 <__sinit+0xc>
 80048b8:	f7ff ffc4 	bl	8004844 <global_stdio_init.part.0>
 80048bc:	e7f2      	b.n	80048a4 <__sinit+0xc>
 80048be:	bf00      	nop
 80048c0:	08004805 	.word	0x08004805
 80048c4:	200002cc 	.word	0x200002cc

080048c8 <_fwalk_sglue>:
 80048c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048cc:	4607      	mov	r7, r0
 80048ce:	4688      	mov	r8, r1
 80048d0:	4614      	mov	r4, r2
 80048d2:	2600      	movs	r6, #0
 80048d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048d8:	f1b9 0901 	subs.w	r9, r9, #1
 80048dc:	d505      	bpl.n	80048ea <_fwalk_sglue+0x22>
 80048de:	6824      	ldr	r4, [r4, #0]
 80048e0:	2c00      	cmp	r4, #0
 80048e2:	d1f7      	bne.n	80048d4 <_fwalk_sglue+0xc>
 80048e4:	4630      	mov	r0, r6
 80048e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ea:	89ab      	ldrh	r3, [r5, #12]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d907      	bls.n	8004900 <_fwalk_sglue+0x38>
 80048f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048f4:	3301      	adds	r3, #1
 80048f6:	d003      	beq.n	8004900 <_fwalk_sglue+0x38>
 80048f8:	4629      	mov	r1, r5
 80048fa:	4638      	mov	r0, r7
 80048fc:	47c0      	blx	r8
 80048fe:	4306      	orrs	r6, r0
 8004900:	3568      	adds	r5, #104	@ 0x68
 8004902:	e7e9      	b.n	80048d8 <_fwalk_sglue+0x10>

08004904 <iprintf>:
 8004904:	b40f      	push	{r0, r1, r2, r3}
 8004906:	b507      	push	{r0, r1, r2, lr}
 8004908:	4906      	ldr	r1, [pc, #24]	@ (8004924 <iprintf+0x20>)
 800490a:	ab04      	add	r3, sp, #16
 800490c:	6808      	ldr	r0, [r1, #0]
 800490e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004912:	6881      	ldr	r1, [r0, #8]
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	f000 faed 	bl	8004ef4 <_vfiprintf_r>
 800491a:	b003      	add	sp, #12
 800491c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004920:	b004      	add	sp, #16
 8004922:	4770      	bx	lr
 8004924:	2000004c 	.word	0x2000004c

08004928 <_puts_r>:
 8004928:	6a03      	ldr	r3, [r0, #32]
 800492a:	b570      	push	{r4, r5, r6, lr}
 800492c:	6884      	ldr	r4, [r0, #8]
 800492e:	4605      	mov	r5, r0
 8004930:	460e      	mov	r6, r1
 8004932:	b90b      	cbnz	r3, 8004938 <_puts_r+0x10>
 8004934:	f7ff ffb0 	bl	8004898 <__sinit>
 8004938:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800493a:	07db      	lsls	r3, r3, #31
 800493c:	d405      	bmi.n	800494a <_puts_r+0x22>
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	0598      	lsls	r0, r3, #22
 8004942:	d402      	bmi.n	800494a <_puts_r+0x22>
 8004944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004946:	f000 f9b0 	bl	8004caa <__retarget_lock_acquire_recursive>
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	0719      	lsls	r1, r3, #28
 800494e:	d502      	bpl.n	8004956 <_puts_r+0x2e>
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d135      	bne.n	80049c2 <_puts_r+0x9a>
 8004956:	4621      	mov	r1, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 f8d7 	bl	8004b0c <__swsetup_r>
 800495e:	b380      	cbz	r0, 80049c2 <_puts_r+0x9a>
 8004960:	f04f 35ff 	mov.w	r5, #4294967295
 8004964:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004966:	07da      	lsls	r2, r3, #31
 8004968:	d405      	bmi.n	8004976 <_puts_r+0x4e>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	059b      	lsls	r3, r3, #22
 800496e:	d402      	bmi.n	8004976 <_puts_r+0x4e>
 8004970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004972:	f000 f99b 	bl	8004cac <__retarget_lock_release_recursive>
 8004976:	4628      	mov	r0, r5
 8004978:	bd70      	pop	{r4, r5, r6, pc}
 800497a:	2b00      	cmp	r3, #0
 800497c:	da04      	bge.n	8004988 <_puts_r+0x60>
 800497e:	69a2      	ldr	r2, [r4, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	dc17      	bgt.n	80049b4 <_puts_r+0x8c>
 8004984:	290a      	cmp	r1, #10
 8004986:	d015      	beq.n	80049b4 <_puts_r+0x8c>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	6022      	str	r2, [r4, #0]
 800498e:	7019      	strb	r1, [r3, #0]
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004996:	3b01      	subs	r3, #1
 8004998:	60a3      	str	r3, [r4, #8]
 800499a:	2900      	cmp	r1, #0
 800499c:	d1ed      	bne.n	800497a <_puts_r+0x52>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da11      	bge.n	80049c6 <_puts_r+0x9e>
 80049a2:	4622      	mov	r2, r4
 80049a4:	210a      	movs	r1, #10
 80049a6:	4628      	mov	r0, r5
 80049a8:	f000 f871 	bl	8004a8e <__swbuf_r>
 80049ac:	3001      	adds	r0, #1
 80049ae:	d0d7      	beq.n	8004960 <_puts_r+0x38>
 80049b0:	250a      	movs	r5, #10
 80049b2:	e7d7      	b.n	8004964 <_puts_r+0x3c>
 80049b4:	4622      	mov	r2, r4
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 f869 	bl	8004a8e <__swbuf_r>
 80049bc:	3001      	adds	r0, #1
 80049be:	d1e7      	bne.n	8004990 <_puts_r+0x68>
 80049c0:	e7ce      	b.n	8004960 <_puts_r+0x38>
 80049c2:	3e01      	subs	r6, #1
 80049c4:	e7e4      	b.n	8004990 <_puts_r+0x68>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	6022      	str	r2, [r4, #0]
 80049cc:	220a      	movs	r2, #10
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e7ee      	b.n	80049b0 <_puts_r+0x88>
	...

080049d4 <puts>:
 80049d4:	4b02      	ldr	r3, [pc, #8]	@ (80049e0 <puts+0xc>)
 80049d6:	4601      	mov	r1, r0
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f7ff bfa5 	b.w	8004928 <_puts_r>
 80049de:	bf00      	nop
 80049e0:	2000004c 	.word	0x2000004c

080049e4 <iscanf>:
 80049e4:	b40f      	push	{r0, r1, r2, r3}
 80049e6:	b507      	push	{r0, r1, r2, lr}
 80049e8:	4906      	ldr	r1, [pc, #24]	@ (8004a04 <iscanf+0x20>)
 80049ea:	ab04      	add	r3, sp, #16
 80049ec:	6808      	ldr	r0, [r1, #0]
 80049ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f2:	6841      	ldr	r1, [r0, #4]
 80049f4:	9301      	str	r3, [sp, #4]
 80049f6:	f000 febf 	bl	8005778 <_vfiscanf_r>
 80049fa:	b003      	add	sp, #12
 80049fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a00:	b004      	add	sp, #16
 8004a02:	4770      	bx	lr
 8004a04:	2000004c 	.word	0x2000004c

08004a08 <__sread>:
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a10:	f000 f8fc 	bl	8004c0c <_read_r>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	bfab      	itete	ge
 8004a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a1c:	181b      	addge	r3, r3, r0
 8004a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a22:	bfac      	ite	ge
 8004a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a26:	81a3      	strhlt	r3, [r4, #12]
 8004a28:	bd10      	pop	{r4, pc}

08004a2a <__swrite>:
 8004a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2e:	461f      	mov	r7, r3
 8004a30:	898b      	ldrh	r3, [r1, #12]
 8004a32:	05db      	lsls	r3, r3, #23
 8004a34:	4605      	mov	r5, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	4616      	mov	r6, r2
 8004a3a:	d505      	bpl.n	8004a48 <__swrite+0x1e>
 8004a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a40:	2302      	movs	r3, #2
 8004a42:	2200      	movs	r2, #0
 8004a44:	f000 f8d0 	bl	8004be8 <_lseek_r>
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	4632      	mov	r2, r6
 8004a56:	463b      	mov	r3, r7
 8004a58:	4628      	mov	r0, r5
 8004a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5e:	f000 b8e7 	b.w	8004c30 <_write_r>

08004a62 <__sseek>:
 8004a62:	b510      	push	{r4, lr}
 8004a64:	460c      	mov	r4, r1
 8004a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6a:	f000 f8bd 	bl	8004be8 <_lseek_r>
 8004a6e:	1c43      	adds	r3, r0, #1
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	bf15      	itete	ne
 8004a74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a7e:	81a3      	strheq	r3, [r4, #12]
 8004a80:	bf18      	it	ne
 8004a82:	81a3      	strhne	r3, [r4, #12]
 8004a84:	bd10      	pop	{r4, pc}

08004a86 <__sclose>:
 8004a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8a:	f000 b89d 	b.w	8004bc8 <_close_r>

08004a8e <__swbuf_r>:
 8004a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a90:	460e      	mov	r6, r1
 8004a92:	4614      	mov	r4, r2
 8004a94:	4605      	mov	r5, r0
 8004a96:	b118      	cbz	r0, 8004aa0 <__swbuf_r+0x12>
 8004a98:	6a03      	ldr	r3, [r0, #32]
 8004a9a:	b90b      	cbnz	r3, 8004aa0 <__swbuf_r+0x12>
 8004a9c:	f7ff fefc 	bl	8004898 <__sinit>
 8004aa0:	69a3      	ldr	r3, [r4, #24]
 8004aa2:	60a3      	str	r3, [r4, #8]
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	071a      	lsls	r2, r3, #28
 8004aa8:	d501      	bpl.n	8004aae <__swbuf_r+0x20>
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	b943      	cbnz	r3, 8004ac0 <__swbuf_r+0x32>
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f000 f82b 	bl	8004b0c <__swsetup_r>
 8004ab6:	b118      	cbz	r0, 8004ac0 <__swbuf_r+0x32>
 8004ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8004abc:	4638      	mov	r0, r7
 8004abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	6922      	ldr	r2, [r4, #16]
 8004ac4:	1a98      	subs	r0, r3, r2
 8004ac6:	6963      	ldr	r3, [r4, #20]
 8004ac8:	b2f6      	uxtb	r6, r6
 8004aca:	4283      	cmp	r3, r0
 8004acc:	4637      	mov	r7, r6
 8004ace:	dc05      	bgt.n	8004adc <__swbuf_r+0x4e>
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f001 f836 	bl	8005b44 <_fflush_r>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d1ed      	bne.n	8004ab8 <__swbuf_r+0x2a>
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	60a3      	str	r3, [r4, #8]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	701e      	strb	r6, [r3, #0]
 8004aea:	6962      	ldr	r2, [r4, #20]
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d004      	beq.n	8004afc <__swbuf_r+0x6e>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	07db      	lsls	r3, r3, #31
 8004af6:	d5e1      	bpl.n	8004abc <__swbuf_r+0x2e>
 8004af8:	2e0a      	cmp	r6, #10
 8004afa:	d1df      	bne.n	8004abc <__swbuf_r+0x2e>
 8004afc:	4621      	mov	r1, r4
 8004afe:	4628      	mov	r0, r5
 8004b00:	f001 f820 	bl	8005b44 <_fflush_r>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d0d9      	beq.n	8004abc <__swbuf_r+0x2e>
 8004b08:	e7d6      	b.n	8004ab8 <__swbuf_r+0x2a>
	...

08004b0c <__swsetup_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	4b29      	ldr	r3, [pc, #164]	@ (8004bb4 <__swsetup_r+0xa8>)
 8004b10:	4605      	mov	r5, r0
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	460c      	mov	r4, r1
 8004b16:	b118      	cbz	r0, 8004b20 <__swsetup_r+0x14>
 8004b18:	6a03      	ldr	r3, [r0, #32]
 8004b1a:	b90b      	cbnz	r3, 8004b20 <__swsetup_r+0x14>
 8004b1c:	f7ff febc 	bl	8004898 <__sinit>
 8004b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b24:	0719      	lsls	r1, r3, #28
 8004b26:	d422      	bmi.n	8004b6e <__swsetup_r+0x62>
 8004b28:	06da      	lsls	r2, r3, #27
 8004b2a:	d407      	bmi.n	8004b3c <__swsetup_r+0x30>
 8004b2c:	2209      	movs	r2, #9
 8004b2e:	602a      	str	r2, [r5, #0]
 8004b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b34:	81a3      	strh	r3, [r4, #12]
 8004b36:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3a:	e033      	b.n	8004ba4 <__swsetup_r+0x98>
 8004b3c:	0758      	lsls	r0, r3, #29
 8004b3e:	d512      	bpl.n	8004b66 <__swsetup_r+0x5a>
 8004b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b42:	b141      	cbz	r1, 8004b56 <__swsetup_r+0x4a>
 8004b44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b48:	4299      	cmp	r1, r3
 8004b4a:	d002      	beq.n	8004b52 <__swsetup_r+0x46>
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f000 f8af 	bl	8004cb0 <_free_r>
 8004b52:	2300      	movs	r3, #0
 8004b54:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6063      	str	r3, [r4, #4]
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f043 0308 	orr.w	r3, r3, #8
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	b94b      	cbnz	r3, 8004b86 <__swsetup_r+0x7a>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b7c:	d003      	beq.n	8004b86 <__swsetup_r+0x7a>
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4628      	mov	r0, r5
 8004b82:	f001 f82d 	bl	8005be0 <__smakebuf_r>
 8004b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b8a:	f013 0201 	ands.w	r2, r3, #1
 8004b8e:	d00a      	beq.n	8004ba6 <__swsetup_r+0x9a>
 8004b90:	2200      	movs	r2, #0
 8004b92:	60a2      	str	r2, [r4, #8]
 8004b94:	6962      	ldr	r2, [r4, #20]
 8004b96:	4252      	negs	r2, r2
 8004b98:	61a2      	str	r2, [r4, #24]
 8004b9a:	6922      	ldr	r2, [r4, #16]
 8004b9c:	b942      	cbnz	r2, 8004bb0 <__swsetup_r+0xa4>
 8004b9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ba2:	d1c5      	bne.n	8004b30 <__swsetup_r+0x24>
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
 8004ba6:	0799      	lsls	r1, r3, #30
 8004ba8:	bf58      	it	pl
 8004baa:	6962      	ldrpl	r2, [r4, #20]
 8004bac:	60a2      	str	r2, [r4, #8]
 8004bae:	e7f4      	b.n	8004b9a <__swsetup_r+0x8e>
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	e7f7      	b.n	8004ba4 <__swsetup_r+0x98>
 8004bb4:	2000004c 	.word	0x2000004c

08004bb8 <memset>:
 8004bb8:	4402      	add	r2, r0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d100      	bne.n	8004bc2 <memset+0xa>
 8004bc0:	4770      	bx	lr
 8004bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc6:	e7f9      	b.n	8004bbc <memset+0x4>

08004bc8 <_close_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d06      	ldr	r5, [pc, #24]	@ (8004be4 <_close_r+0x1c>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	f7fc fa2c 	bl	8001030 <_close>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_close_r+0x1a>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_close_r+0x1a>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	200002d0 	.word	0x200002d0

08004be8 <_lseek_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4d07      	ldr	r5, [pc, #28]	@ (8004c08 <_lseek_r+0x20>)
 8004bec:	4604      	mov	r4, r0
 8004bee:	4608      	mov	r0, r1
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	602a      	str	r2, [r5, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f7fc fa41 	bl	800107e <_lseek>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d102      	bne.n	8004c06 <_lseek_r+0x1e>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	b103      	cbz	r3, 8004c06 <_lseek_r+0x1e>
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	200002d0 	.word	0x200002d0

08004c0c <_read_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4d07      	ldr	r5, [pc, #28]	@ (8004c2c <_read_r+0x20>)
 8004c10:	4604      	mov	r4, r0
 8004c12:	4608      	mov	r0, r1
 8004c14:	4611      	mov	r1, r2
 8004c16:	2200      	movs	r2, #0
 8004c18:	602a      	str	r2, [r5, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f7fc f9c4 	bl	8000fa8 <_read>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d102      	bne.n	8004c2a <_read_r+0x1e>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	b103      	cbz	r3, 8004c2a <_read_r+0x1e>
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	200002d0 	.word	0x200002d0

08004c30 <_write_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	@ (8004c50 <_write_r+0x20>)
 8004c34:	4604      	mov	r4, r0
 8004c36:	4608      	mov	r0, r1
 8004c38:	4611      	mov	r1, r2
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	602a      	str	r2, [r5, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f7fc f9d4 	bl	8000fec <_write>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_write_r+0x1e>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_write_r+0x1e>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	200002d0 	.word	0x200002d0

08004c54 <__errno>:
 8004c54:	4b01      	ldr	r3, [pc, #4]	@ (8004c5c <__errno+0x8>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2000004c 	.word	0x2000004c

08004c60 <__libc_init_array>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	4d0d      	ldr	r5, [pc, #52]	@ (8004c98 <__libc_init_array+0x38>)
 8004c64:	4c0d      	ldr	r4, [pc, #52]	@ (8004c9c <__libc_init_array+0x3c>)
 8004c66:	1b64      	subs	r4, r4, r5
 8004c68:	10a4      	asrs	r4, r4, #2
 8004c6a:	2600      	movs	r6, #0
 8004c6c:	42a6      	cmp	r6, r4
 8004c6e:	d109      	bne.n	8004c84 <__libc_init_array+0x24>
 8004c70:	4d0b      	ldr	r5, [pc, #44]	@ (8004ca0 <__libc_init_array+0x40>)
 8004c72:	4c0c      	ldr	r4, [pc, #48]	@ (8004ca4 <__libc_init_array+0x44>)
 8004c74:	f001 fac6 	bl	8006204 <_init>
 8004c78:	1b64      	subs	r4, r4, r5
 8004c7a:	10a4      	asrs	r4, r4, #2
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	42a6      	cmp	r6, r4
 8004c80:	d105      	bne.n	8004c8e <__libc_init_array+0x2e>
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c88:	4798      	blx	r3
 8004c8a:	3601      	adds	r6, #1
 8004c8c:	e7ee      	b.n	8004c6c <__libc_init_array+0xc>
 8004c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c92:	4798      	blx	r3
 8004c94:	3601      	adds	r6, #1
 8004c96:	e7f2      	b.n	8004c7e <__libc_init_array+0x1e>
 8004c98:	0800655c 	.word	0x0800655c
 8004c9c:	0800655c 	.word	0x0800655c
 8004ca0:	0800655c 	.word	0x0800655c
 8004ca4:	08006560 	.word	0x08006560

08004ca8 <__retarget_lock_init_recursive>:
 8004ca8:	4770      	bx	lr

08004caa <__retarget_lock_acquire_recursive>:
 8004caa:	4770      	bx	lr

08004cac <__retarget_lock_release_recursive>:
 8004cac:	4770      	bx	lr
	...

08004cb0 <_free_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d041      	beq.n	8004d3c <_free_r+0x8c>
 8004cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cbc:	1f0c      	subs	r4, r1, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bfb8      	it	lt
 8004cc2:	18e4      	addlt	r4, r4, r3
 8004cc4:	f000 f8e0 	bl	8004e88 <__malloc_lock>
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d40 <_free_r+0x90>)
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	b933      	cbnz	r3, 8004cdc <_free_r+0x2c>
 8004cce:	6063      	str	r3, [r4, #4]
 8004cd0:	6014      	str	r4, [r2, #0]
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cd8:	f000 b8dc 	b.w	8004e94 <__malloc_unlock>
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	d908      	bls.n	8004cf2 <_free_r+0x42>
 8004ce0:	6820      	ldr	r0, [r4, #0]
 8004ce2:	1821      	adds	r1, r4, r0
 8004ce4:	428b      	cmp	r3, r1
 8004ce6:	bf01      	itttt	eq
 8004ce8:	6819      	ldreq	r1, [r3, #0]
 8004cea:	685b      	ldreq	r3, [r3, #4]
 8004cec:	1809      	addeq	r1, r1, r0
 8004cee:	6021      	streq	r1, [r4, #0]
 8004cf0:	e7ed      	b.n	8004cce <_free_r+0x1e>
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	b10b      	cbz	r3, 8004cfc <_free_r+0x4c>
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	d9fa      	bls.n	8004cf2 <_free_r+0x42>
 8004cfc:	6811      	ldr	r1, [r2, #0]
 8004cfe:	1850      	adds	r0, r2, r1
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d10b      	bne.n	8004d1c <_free_r+0x6c>
 8004d04:	6820      	ldr	r0, [r4, #0]
 8004d06:	4401      	add	r1, r0
 8004d08:	1850      	adds	r0, r2, r1
 8004d0a:	4283      	cmp	r3, r0
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	d1e0      	bne.n	8004cd2 <_free_r+0x22>
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	6053      	str	r3, [r2, #4]
 8004d16:	4408      	add	r0, r1
 8004d18:	6010      	str	r0, [r2, #0]
 8004d1a:	e7da      	b.n	8004cd2 <_free_r+0x22>
 8004d1c:	d902      	bls.n	8004d24 <_free_r+0x74>
 8004d1e:	230c      	movs	r3, #12
 8004d20:	602b      	str	r3, [r5, #0]
 8004d22:	e7d6      	b.n	8004cd2 <_free_r+0x22>
 8004d24:	6820      	ldr	r0, [r4, #0]
 8004d26:	1821      	adds	r1, r4, r0
 8004d28:	428b      	cmp	r3, r1
 8004d2a:	bf04      	itt	eq
 8004d2c:	6819      	ldreq	r1, [r3, #0]
 8004d2e:	685b      	ldreq	r3, [r3, #4]
 8004d30:	6063      	str	r3, [r4, #4]
 8004d32:	bf04      	itt	eq
 8004d34:	1809      	addeq	r1, r1, r0
 8004d36:	6021      	streq	r1, [r4, #0]
 8004d38:	6054      	str	r4, [r2, #4]
 8004d3a:	e7ca      	b.n	8004cd2 <_free_r+0x22>
 8004d3c:	bd38      	pop	{r3, r4, r5, pc}
 8004d3e:	bf00      	nop
 8004d40:	200002dc 	.word	0x200002dc

08004d44 <sbrk_aligned>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	4e0f      	ldr	r6, [pc, #60]	@ (8004d84 <sbrk_aligned+0x40>)
 8004d48:	460c      	mov	r4, r1
 8004d4a:	6831      	ldr	r1, [r6, #0]
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	b911      	cbnz	r1, 8004d56 <sbrk_aligned+0x12>
 8004d50:	f001 f918 	bl	8005f84 <_sbrk_r>
 8004d54:	6030      	str	r0, [r6, #0]
 8004d56:	4621      	mov	r1, r4
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f001 f913 	bl	8005f84 <_sbrk_r>
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	d103      	bne.n	8004d6a <sbrk_aligned+0x26>
 8004d62:	f04f 34ff 	mov.w	r4, #4294967295
 8004d66:	4620      	mov	r0, r4
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	1cc4      	adds	r4, r0, #3
 8004d6c:	f024 0403 	bic.w	r4, r4, #3
 8004d70:	42a0      	cmp	r0, r4
 8004d72:	d0f8      	beq.n	8004d66 <sbrk_aligned+0x22>
 8004d74:	1a21      	subs	r1, r4, r0
 8004d76:	4628      	mov	r0, r5
 8004d78:	f001 f904 	bl	8005f84 <_sbrk_r>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d1f2      	bne.n	8004d66 <sbrk_aligned+0x22>
 8004d80:	e7ef      	b.n	8004d62 <sbrk_aligned+0x1e>
 8004d82:	bf00      	nop
 8004d84:	200002d8 	.word	0x200002d8

08004d88 <_malloc_r>:
 8004d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d8c:	1ccd      	adds	r5, r1, #3
 8004d8e:	f025 0503 	bic.w	r5, r5, #3
 8004d92:	3508      	adds	r5, #8
 8004d94:	2d0c      	cmp	r5, #12
 8004d96:	bf38      	it	cc
 8004d98:	250c      	movcc	r5, #12
 8004d9a:	2d00      	cmp	r5, #0
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	db01      	blt.n	8004da4 <_malloc_r+0x1c>
 8004da0:	42a9      	cmp	r1, r5
 8004da2:	d904      	bls.n	8004dae <_malloc_r+0x26>
 8004da4:	230c      	movs	r3, #12
 8004da6:	6033      	str	r3, [r6, #0]
 8004da8:	2000      	movs	r0, #0
 8004daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e84 <_malloc_r+0xfc>
 8004db2:	f000 f869 	bl	8004e88 <__malloc_lock>
 8004db6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dba:	461c      	mov	r4, r3
 8004dbc:	bb44      	cbnz	r4, 8004e10 <_malloc_r+0x88>
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f7ff ffbf 	bl	8004d44 <sbrk_aligned>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	4604      	mov	r4, r0
 8004dca:	d158      	bne.n	8004e7e <_malloc_r+0xf6>
 8004dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8004dd0:	4627      	mov	r7, r4
 8004dd2:	2f00      	cmp	r7, #0
 8004dd4:	d143      	bne.n	8004e5e <_malloc_r+0xd6>
 8004dd6:	2c00      	cmp	r4, #0
 8004dd8:	d04b      	beq.n	8004e72 <_malloc_r+0xea>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	4639      	mov	r1, r7
 8004dde:	4630      	mov	r0, r6
 8004de0:	eb04 0903 	add.w	r9, r4, r3
 8004de4:	f001 f8ce 	bl	8005f84 <_sbrk_r>
 8004de8:	4581      	cmp	r9, r0
 8004dea:	d142      	bne.n	8004e72 <_malloc_r+0xea>
 8004dec:	6821      	ldr	r1, [r4, #0]
 8004dee:	1a6d      	subs	r5, r5, r1
 8004df0:	4629      	mov	r1, r5
 8004df2:	4630      	mov	r0, r6
 8004df4:	f7ff ffa6 	bl	8004d44 <sbrk_aligned>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d03a      	beq.n	8004e72 <_malloc_r+0xea>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	442b      	add	r3, r5
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	f8d8 3000 	ldr.w	r3, [r8]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	bb62      	cbnz	r2, 8004e64 <_malloc_r+0xdc>
 8004e0a:	f8c8 7000 	str.w	r7, [r8]
 8004e0e:	e00f      	b.n	8004e30 <_malloc_r+0xa8>
 8004e10:	6822      	ldr	r2, [r4, #0]
 8004e12:	1b52      	subs	r2, r2, r5
 8004e14:	d420      	bmi.n	8004e58 <_malloc_r+0xd0>
 8004e16:	2a0b      	cmp	r2, #11
 8004e18:	d917      	bls.n	8004e4a <_malloc_r+0xc2>
 8004e1a:	1961      	adds	r1, r4, r5
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	6025      	str	r5, [r4, #0]
 8004e20:	bf18      	it	ne
 8004e22:	6059      	strne	r1, [r3, #4]
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	bf08      	it	eq
 8004e28:	f8c8 1000 	streq.w	r1, [r8]
 8004e2c:	5162      	str	r2, [r4, r5]
 8004e2e:	604b      	str	r3, [r1, #4]
 8004e30:	4630      	mov	r0, r6
 8004e32:	f000 f82f 	bl	8004e94 <__malloc_unlock>
 8004e36:	f104 000b 	add.w	r0, r4, #11
 8004e3a:	1d23      	adds	r3, r4, #4
 8004e3c:	f020 0007 	bic.w	r0, r0, #7
 8004e40:	1ac2      	subs	r2, r0, r3
 8004e42:	bf1c      	itt	ne
 8004e44:	1a1b      	subne	r3, r3, r0
 8004e46:	50a3      	strne	r3, [r4, r2]
 8004e48:	e7af      	b.n	8004daa <_malloc_r+0x22>
 8004e4a:	6862      	ldr	r2, [r4, #4]
 8004e4c:	42a3      	cmp	r3, r4
 8004e4e:	bf0c      	ite	eq
 8004e50:	f8c8 2000 	streq.w	r2, [r8]
 8004e54:	605a      	strne	r2, [r3, #4]
 8004e56:	e7eb      	b.n	8004e30 <_malloc_r+0xa8>
 8004e58:	4623      	mov	r3, r4
 8004e5a:	6864      	ldr	r4, [r4, #4]
 8004e5c:	e7ae      	b.n	8004dbc <_malloc_r+0x34>
 8004e5e:	463c      	mov	r4, r7
 8004e60:	687f      	ldr	r7, [r7, #4]
 8004e62:	e7b6      	b.n	8004dd2 <_malloc_r+0x4a>
 8004e64:	461a      	mov	r2, r3
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	d1fb      	bne.n	8004e64 <_malloc_r+0xdc>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	6053      	str	r3, [r2, #4]
 8004e70:	e7de      	b.n	8004e30 <_malloc_r+0xa8>
 8004e72:	230c      	movs	r3, #12
 8004e74:	6033      	str	r3, [r6, #0]
 8004e76:	4630      	mov	r0, r6
 8004e78:	f000 f80c 	bl	8004e94 <__malloc_unlock>
 8004e7c:	e794      	b.n	8004da8 <_malloc_r+0x20>
 8004e7e:	6005      	str	r5, [r0, #0]
 8004e80:	e7d6      	b.n	8004e30 <_malloc_r+0xa8>
 8004e82:	bf00      	nop
 8004e84:	200002dc 	.word	0x200002dc

08004e88 <__malloc_lock>:
 8004e88:	4801      	ldr	r0, [pc, #4]	@ (8004e90 <__malloc_lock+0x8>)
 8004e8a:	f7ff bf0e 	b.w	8004caa <__retarget_lock_acquire_recursive>
 8004e8e:	bf00      	nop
 8004e90:	200002d4 	.word	0x200002d4

08004e94 <__malloc_unlock>:
 8004e94:	4801      	ldr	r0, [pc, #4]	@ (8004e9c <__malloc_unlock+0x8>)
 8004e96:	f7ff bf09 	b.w	8004cac <__retarget_lock_release_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	200002d4 	.word	0x200002d4

08004ea0 <__sfputc_r>:
 8004ea0:	6893      	ldr	r3, [r2, #8]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	b410      	push	{r4}
 8004ea8:	6093      	str	r3, [r2, #8]
 8004eaa:	da08      	bge.n	8004ebe <__sfputc_r+0x1e>
 8004eac:	6994      	ldr	r4, [r2, #24]
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	db01      	blt.n	8004eb6 <__sfputc_r+0x16>
 8004eb2:	290a      	cmp	r1, #10
 8004eb4:	d103      	bne.n	8004ebe <__sfputc_r+0x1e>
 8004eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eba:	f7ff bde8 	b.w	8004a8e <__swbuf_r>
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	1c58      	adds	r0, r3, #1
 8004ec2:	6010      	str	r0, [r2, #0]
 8004ec4:	7019      	strb	r1, [r3, #0]
 8004ec6:	4608      	mov	r0, r1
 8004ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <__sfputs_r>:
 8004ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	460f      	mov	r7, r1
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	18d5      	adds	r5, r2, r3
 8004ed8:	42ac      	cmp	r4, r5
 8004eda:	d101      	bne.n	8004ee0 <__sfputs_r+0x12>
 8004edc:	2000      	movs	r0, #0
 8004ede:	e007      	b.n	8004ef0 <__sfputs_r+0x22>
 8004ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee4:	463a      	mov	r2, r7
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f7ff ffda 	bl	8004ea0 <__sfputc_r>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d1f3      	bne.n	8004ed8 <__sfputs_r+0xa>
 8004ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ef4 <_vfiprintf_r>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	460d      	mov	r5, r1
 8004efa:	b09d      	sub	sp, #116	@ 0x74
 8004efc:	4614      	mov	r4, r2
 8004efe:	4698      	mov	r8, r3
 8004f00:	4606      	mov	r6, r0
 8004f02:	b118      	cbz	r0, 8004f0c <_vfiprintf_r+0x18>
 8004f04:	6a03      	ldr	r3, [r0, #32]
 8004f06:	b90b      	cbnz	r3, 8004f0c <_vfiprintf_r+0x18>
 8004f08:	f7ff fcc6 	bl	8004898 <__sinit>
 8004f0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f0e:	07d9      	lsls	r1, r3, #31
 8004f10:	d405      	bmi.n	8004f1e <_vfiprintf_r+0x2a>
 8004f12:	89ab      	ldrh	r3, [r5, #12]
 8004f14:	059a      	lsls	r2, r3, #22
 8004f16:	d402      	bmi.n	8004f1e <_vfiprintf_r+0x2a>
 8004f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f1a:	f7ff fec6 	bl	8004caa <__retarget_lock_acquire_recursive>
 8004f1e:	89ab      	ldrh	r3, [r5, #12]
 8004f20:	071b      	lsls	r3, r3, #28
 8004f22:	d501      	bpl.n	8004f28 <_vfiprintf_r+0x34>
 8004f24:	692b      	ldr	r3, [r5, #16]
 8004f26:	b99b      	cbnz	r3, 8004f50 <_vfiprintf_r+0x5c>
 8004f28:	4629      	mov	r1, r5
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f7ff fdee 	bl	8004b0c <__swsetup_r>
 8004f30:	b170      	cbz	r0, 8004f50 <_vfiprintf_r+0x5c>
 8004f32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f34:	07dc      	lsls	r4, r3, #31
 8004f36:	d504      	bpl.n	8004f42 <_vfiprintf_r+0x4e>
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	b01d      	add	sp, #116	@ 0x74
 8004f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	0598      	lsls	r0, r3, #22
 8004f46:	d4f7      	bmi.n	8004f38 <_vfiprintf_r+0x44>
 8004f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f4a:	f7ff feaf 	bl	8004cac <__retarget_lock_release_recursive>
 8004f4e:	e7f3      	b.n	8004f38 <_vfiprintf_r+0x44>
 8004f50:	2300      	movs	r3, #0
 8004f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f54:	2320      	movs	r3, #32
 8004f56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f5e:	2330      	movs	r3, #48	@ 0x30
 8004f60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005110 <_vfiprintf_r+0x21c>
 8004f64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f68:	f04f 0901 	mov.w	r9, #1
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	469a      	mov	sl, r3
 8004f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f74:	b10a      	cbz	r2, 8004f7a <_vfiprintf_r+0x86>
 8004f76:	2a25      	cmp	r2, #37	@ 0x25
 8004f78:	d1f9      	bne.n	8004f6e <_vfiprintf_r+0x7a>
 8004f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f7e:	d00b      	beq.n	8004f98 <_vfiprintf_r+0xa4>
 8004f80:	465b      	mov	r3, fp
 8004f82:	4622      	mov	r2, r4
 8004f84:	4629      	mov	r1, r5
 8004f86:	4630      	mov	r0, r6
 8004f88:	f7ff ffa1 	bl	8004ece <__sfputs_r>
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	f000 80a7 	beq.w	80050e0 <_vfiprintf_r+0x1ec>
 8004f92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f94:	445a      	add	r2, fp
 8004f96:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f98:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 809f 	beq.w	80050e0 <_vfiprintf_r+0x1ec>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fac:	f10a 0a01 	add.w	sl, sl, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	9307      	str	r3, [sp, #28]
 8004fb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fba:	4654      	mov	r4, sl
 8004fbc:	2205      	movs	r2, #5
 8004fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc2:	4853      	ldr	r0, [pc, #332]	@ (8005110 <_vfiprintf_r+0x21c>)
 8004fc4:	f7fb f904 	bl	80001d0 <memchr>
 8004fc8:	9a04      	ldr	r2, [sp, #16]
 8004fca:	b9d8      	cbnz	r0, 8005004 <_vfiprintf_r+0x110>
 8004fcc:	06d1      	lsls	r1, r2, #27
 8004fce:	bf44      	itt	mi
 8004fd0:	2320      	movmi	r3, #32
 8004fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd6:	0713      	lsls	r3, r2, #28
 8004fd8:	bf44      	itt	mi
 8004fda:	232b      	movmi	r3, #43	@ 0x2b
 8004fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe6:	d015      	beq.n	8005014 <_vfiprintf_r+0x120>
 8004fe8:	9a07      	ldr	r2, [sp, #28]
 8004fea:	4654      	mov	r4, sl
 8004fec:	2000      	movs	r0, #0
 8004fee:	f04f 0c0a 	mov.w	ip, #10
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff8:	3b30      	subs	r3, #48	@ 0x30
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	d94b      	bls.n	8005096 <_vfiprintf_r+0x1a2>
 8004ffe:	b1b0      	cbz	r0, 800502e <_vfiprintf_r+0x13a>
 8005000:	9207      	str	r2, [sp, #28]
 8005002:	e014      	b.n	800502e <_vfiprintf_r+0x13a>
 8005004:	eba0 0308 	sub.w	r3, r0, r8
 8005008:	fa09 f303 	lsl.w	r3, r9, r3
 800500c:	4313      	orrs	r3, r2
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	46a2      	mov	sl, r4
 8005012:	e7d2      	b.n	8004fba <_vfiprintf_r+0xc6>
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	1d19      	adds	r1, r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	9103      	str	r1, [sp, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	bfbb      	ittet	lt
 8005020:	425b      	neglt	r3, r3
 8005022:	f042 0202 	orrlt.w	r2, r2, #2
 8005026:	9307      	strge	r3, [sp, #28]
 8005028:	9307      	strlt	r3, [sp, #28]
 800502a:	bfb8      	it	lt
 800502c:	9204      	strlt	r2, [sp, #16]
 800502e:	7823      	ldrb	r3, [r4, #0]
 8005030:	2b2e      	cmp	r3, #46	@ 0x2e
 8005032:	d10a      	bne.n	800504a <_vfiprintf_r+0x156>
 8005034:	7863      	ldrb	r3, [r4, #1]
 8005036:	2b2a      	cmp	r3, #42	@ 0x2a
 8005038:	d132      	bne.n	80050a0 <_vfiprintf_r+0x1ac>
 800503a:	9b03      	ldr	r3, [sp, #12]
 800503c:	1d1a      	adds	r2, r3, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	9203      	str	r2, [sp, #12]
 8005042:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005046:	3402      	adds	r4, #2
 8005048:	9305      	str	r3, [sp, #20]
 800504a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005120 <_vfiprintf_r+0x22c>
 800504e:	7821      	ldrb	r1, [r4, #0]
 8005050:	2203      	movs	r2, #3
 8005052:	4650      	mov	r0, sl
 8005054:	f7fb f8bc 	bl	80001d0 <memchr>
 8005058:	b138      	cbz	r0, 800506a <_vfiprintf_r+0x176>
 800505a:	9b04      	ldr	r3, [sp, #16]
 800505c:	eba0 000a 	sub.w	r0, r0, sl
 8005060:	2240      	movs	r2, #64	@ 0x40
 8005062:	4082      	lsls	r2, r0
 8005064:	4313      	orrs	r3, r2
 8005066:	3401      	adds	r4, #1
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506e:	4829      	ldr	r0, [pc, #164]	@ (8005114 <_vfiprintf_r+0x220>)
 8005070:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005074:	2206      	movs	r2, #6
 8005076:	f7fb f8ab 	bl	80001d0 <memchr>
 800507a:	2800      	cmp	r0, #0
 800507c:	d03f      	beq.n	80050fe <_vfiprintf_r+0x20a>
 800507e:	4b26      	ldr	r3, [pc, #152]	@ (8005118 <_vfiprintf_r+0x224>)
 8005080:	bb1b      	cbnz	r3, 80050ca <_vfiprintf_r+0x1d6>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	3307      	adds	r3, #7
 8005086:	f023 0307 	bic.w	r3, r3, #7
 800508a:	3308      	adds	r3, #8
 800508c:	9303      	str	r3, [sp, #12]
 800508e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005090:	443b      	add	r3, r7
 8005092:	9309      	str	r3, [sp, #36]	@ 0x24
 8005094:	e76a      	b.n	8004f6c <_vfiprintf_r+0x78>
 8005096:	fb0c 3202 	mla	r2, ip, r2, r3
 800509a:	460c      	mov	r4, r1
 800509c:	2001      	movs	r0, #1
 800509e:	e7a8      	b.n	8004ff2 <_vfiprintf_r+0xfe>
 80050a0:	2300      	movs	r3, #0
 80050a2:	3401      	adds	r4, #1
 80050a4:	9305      	str	r3, [sp, #20]
 80050a6:	4619      	mov	r1, r3
 80050a8:	f04f 0c0a 	mov.w	ip, #10
 80050ac:	4620      	mov	r0, r4
 80050ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b2:	3a30      	subs	r2, #48	@ 0x30
 80050b4:	2a09      	cmp	r2, #9
 80050b6:	d903      	bls.n	80050c0 <_vfiprintf_r+0x1cc>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0c6      	beq.n	800504a <_vfiprintf_r+0x156>
 80050bc:	9105      	str	r1, [sp, #20]
 80050be:	e7c4      	b.n	800504a <_vfiprintf_r+0x156>
 80050c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c4:	4604      	mov	r4, r0
 80050c6:	2301      	movs	r3, #1
 80050c8:	e7f0      	b.n	80050ac <_vfiprintf_r+0x1b8>
 80050ca:	ab03      	add	r3, sp, #12
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	462a      	mov	r2, r5
 80050d0:	4b12      	ldr	r3, [pc, #72]	@ (800511c <_vfiprintf_r+0x228>)
 80050d2:	a904      	add	r1, sp, #16
 80050d4:	4630      	mov	r0, r6
 80050d6:	f3af 8000 	nop.w
 80050da:	4607      	mov	r7, r0
 80050dc:	1c78      	adds	r0, r7, #1
 80050de:	d1d6      	bne.n	800508e <_vfiprintf_r+0x19a>
 80050e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050e2:	07d9      	lsls	r1, r3, #31
 80050e4:	d405      	bmi.n	80050f2 <_vfiprintf_r+0x1fe>
 80050e6:	89ab      	ldrh	r3, [r5, #12]
 80050e8:	059a      	lsls	r2, r3, #22
 80050ea:	d402      	bmi.n	80050f2 <_vfiprintf_r+0x1fe>
 80050ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050ee:	f7ff fddd 	bl	8004cac <__retarget_lock_release_recursive>
 80050f2:	89ab      	ldrh	r3, [r5, #12]
 80050f4:	065b      	lsls	r3, r3, #25
 80050f6:	f53f af1f 	bmi.w	8004f38 <_vfiprintf_r+0x44>
 80050fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050fc:	e71e      	b.n	8004f3c <_vfiprintf_r+0x48>
 80050fe:	ab03      	add	r3, sp, #12
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	462a      	mov	r2, r5
 8005104:	4b05      	ldr	r3, [pc, #20]	@ (800511c <_vfiprintf_r+0x228>)
 8005106:	a904      	add	r1, sp, #16
 8005108:	4630      	mov	r0, r6
 800510a:	f000 f879 	bl	8005200 <_printf_i>
 800510e:	e7e4      	b.n	80050da <_vfiprintf_r+0x1e6>
 8005110:	08006404 	.word	0x08006404
 8005114:	0800640e 	.word	0x0800640e
 8005118:	00000000 	.word	0x00000000
 800511c:	08004ecf 	.word	0x08004ecf
 8005120:	0800640a 	.word	0x0800640a

08005124 <_printf_common>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	4616      	mov	r6, r2
 800512a:	4698      	mov	r8, r3
 800512c:	688a      	ldr	r2, [r1, #8]
 800512e:	690b      	ldr	r3, [r1, #16]
 8005130:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005134:	4293      	cmp	r3, r2
 8005136:	bfb8      	it	lt
 8005138:	4613      	movlt	r3, r2
 800513a:	6033      	str	r3, [r6, #0]
 800513c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005140:	4607      	mov	r7, r0
 8005142:	460c      	mov	r4, r1
 8005144:	b10a      	cbz	r2, 800514a <_printf_common+0x26>
 8005146:	3301      	adds	r3, #1
 8005148:	6033      	str	r3, [r6, #0]
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	0699      	lsls	r1, r3, #26
 800514e:	bf42      	ittt	mi
 8005150:	6833      	ldrmi	r3, [r6, #0]
 8005152:	3302      	addmi	r3, #2
 8005154:	6033      	strmi	r3, [r6, #0]
 8005156:	6825      	ldr	r5, [r4, #0]
 8005158:	f015 0506 	ands.w	r5, r5, #6
 800515c:	d106      	bne.n	800516c <_printf_common+0x48>
 800515e:	f104 0a19 	add.w	sl, r4, #25
 8005162:	68e3      	ldr	r3, [r4, #12]
 8005164:	6832      	ldr	r2, [r6, #0]
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	42ab      	cmp	r3, r5
 800516a:	dc26      	bgt.n	80051ba <_printf_common+0x96>
 800516c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005170:	6822      	ldr	r2, [r4, #0]
 8005172:	3b00      	subs	r3, #0
 8005174:	bf18      	it	ne
 8005176:	2301      	movne	r3, #1
 8005178:	0692      	lsls	r2, r2, #26
 800517a:	d42b      	bmi.n	80051d4 <_printf_common+0xb0>
 800517c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005180:	4641      	mov	r1, r8
 8005182:	4638      	mov	r0, r7
 8005184:	47c8      	blx	r9
 8005186:	3001      	adds	r0, #1
 8005188:	d01e      	beq.n	80051c8 <_printf_common+0xa4>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	6922      	ldr	r2, [r4, #16]
 800518e:	f003 0306 	and.w	r3, r3, #6
 8005192:	2b04      	cmp	r3, #4
 8005194:	bf02      	ittt	eq
 8005196:	68e5      	ldreq	r5, [r4, #12]
 8005198:	6833      	ldreq	r3, [r6, #0]
 800519a:	1aed      	subeq	r5, r5, r3
 800519c:	68a3      	ldr	r3, [r4, #8]
 800519e:	bf0c      	ite	eq
 80051a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a4:	2500      	movne	r5, #0
 80051a6:	4293      	cmp	r3, r2
 80051a8:	bfc4      	itt	gt
 80051aa:	1a9b      	subgt	r3, r3, r2
 80051ac:	18ed      	addgt	r5, r5, r3
 80051ae:	2600      	movs	r6, #0
 80051b0:	341a      	adds	r4, #26
 80051b2:	42b5      	cmp	r5, r6
 80051b4:	d11a      	bne.n	80051ec <_printf_common+0xc8>
 80051b6:	2000      	movs	r0, #0
 80051b8:	e008      	b.n	80051cc <_printf_common+0xa8>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4652      	mov	r2, sl
 80051be:	4641      	mov	r1, r8
 80051c0:	4638      	mov	r0, r7
 80051c2:	47c8      	blx	r9
 80051c4:	3001      	adds	r0, #1
 80051c6:	d103      	bne.n	80051d0 <_printf_common+0xac>
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d0:	3501      	adds	r5, #1
 80051d2:	e7c6      	b.n	8005162 <_printf_common+0x3e>
 80051d4:	18e1      	adds	r1, r4, r3
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	2030      	movs	r0, #48	@ 0x30
 80051da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051de:	4422      	add	r2, r4
 80051e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051e8:	3302      	adds	r3, #2
 80051ea:	e7c7      	b.n	800517c <_printf_common+0x58>
 80051ec:	2301      	movs	r3, #1
 80051ee:	4622      	mov	r2, r4
 80051f0:	4641      	mov	r1, r8
 80051f2:	4638      	mov	r0, r7
 80051f4:	47c8      	blx	r9
 80051f6:	3001      	adds	r0, #1
 80051f8:	d0e6      	beq.n	80051c8 <_printf_common+0xa4>
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7d9      	b.n	80051b2 <_printf_common+0x8e>
	...

08005200 <_printf_i>:
 8005200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	7e0f      	ldrb	r7, [r1, #24]
 8005206:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005208:	2f78      	cmp	r7, #120	@ 0x78
 800520a:	4691      	mov	r9, r2
 800520c:	4680      	mov	r8, r0
 800520e:	460c      	mov	r4, r1
 8005210:	469a      	mov	sl, r3
 8005212:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005216:	d807      	bhi.n	8005228 <_printf_i+0x28>
 8005218:	2f62      	cmp	r7, #98	@ 0x62
 800521a:	d80a      	bhi.n	8005232 <_printf_i+0x32>
 800521c:	2f00      	cmp	r7, #0
 800521e:	f000 80d2 	beq.w	80053c6 <_printf_i+0x1c6>
 8005222:	2f58      	cmp	r7, #88	@ 0x58
 8005224:	f000 80b9 	beq.w	800539a <_printf_i+0x19a>
 8005228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800522c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005230:	e03a      	b.n	80052a8 <_printf_i+0xa8>
 8005232:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005236:	2b15      	cmp	r3, #21
 8005238:	d8f6      	bhi.n	8005228 <_printf_i+0x28>
 800523a:	a101      	add	r1, pc, #4	@ (adr r1, 8005240 <_printf_i+0x40>)
 800523c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005240:	08005299 	.word	0x08005299
 8005244:	080052ad 	.word	0x080052ad
 8005248:	08005229 	.word	0x08005229
 800524c:	08005229 	.word	0x08005229
 8005250:	08005229 	.word	0x08005229
 8005254:	08005229 	.word	0x08005229
 8005258:	080052ad 	.word	0x080052ad
 800525c:	08005229 	.word	0x08005229
 8005260:	08005229 	.word	0x08005229
 8005264:	08005229 	.word	0x08005229
 8005268:	08005229 	.word	0x08005229
 800526c:	080053ad 	.word	0x080053ad
 8005270:	080052d7 	.word	0x080052d7
 8005274:	08005367 	.word	0x08005367
 8005278:	08005229 	.word	0x08005229
 800527c:	08005229 	.word	0x08005229
 8005280:	080053cf 	.word	0x080053cf
 8005284:	08005229 	.word	0x08005229
 8005288:	080052d7 	.word	0x080052d7
 800528c:	08005229 	.word	0x08005229
 8005290:	08005229 	.word	0x08005229
 8005294:	0800536f 	.word	0x0800536f
 8005298:	6833      	ldr	r3, [r6, #0]
 800529a:	1d1a      	adds	r2, r3, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6032      	str	r2, [r6, #0]
 80052a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052a8:	2301      	movs	r3, #1
 80052aa:	e09d      	b.n	80053e8 <_printf_i+0x1e8>
 80052ac:	6833      	ldr	r3, [r6, #0]
 80052ae:	6820      	ldr	r0, [r4, #0]
 80052b0:	1d19      	adds	r1, r3, #4
 80052b2:	6031      	str	r1, [r6, #0]
 80052b4:	0606      	lsls	r6, r0, #24
 80052b6:	d501      	bpl.n	80052bc <_printf_i+0xbc>
 80052b8:	681d      	ldr	r5, [r3, #0]
 80052ba:	e003      	b.n	80052c4 <_printf_i+0xc4>
 80052bc:	0645      	lsls	r5, r0, #25
 80052be:	d5fb      	bpl.n	80052b8 <_printf_i+0xb8>
 80052c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	da03      	bge.n	80052d0 <_printf_i+0xd0>
 80052c8:	232d      	movs	r3, #45	@ 0x2d
 80052ca:	426d      	negs	r5, r5
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d0:	4859      	ldr	r0, [pc, #356]	@ (8005438 <_printf_i+0x238>)
 80052d2:	230a      	movs	r3, #10
 80052d4:	e011      	b.n	80052fa <_printf_i+0xfa>
 80052d6:	6821      	ldr	r1, [r4, #0]
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	0608      	lsls	r0, r1, #24
 80052dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80052e0:	d402      	bmi.n	80052e8 <_printf_i+0xe8>
 80052e2:	0649      	lsls	r1, r1, #25
 80052e4:	bf48      	it	mi
 80052e6:	b2ad      	uxthmi	r5, r5
 80052e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ea:	4853      	ldr	r0, [pc, #332]	@ (8005438 <_printf_i+0x238>)
 80052ec:	6033      	str	r3, [r6, #0]
 80052ee:	bf14      	ite	ne
 80052f0:	230a      	movne	r3, #10
 80052f2:	2308      	moveq	r3, #8
 80052f4:	2100      	movs	r1, #0
 80052f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052fa:	6866      	ldr	r6, [r4, #4]
 80052fc:	60a6      	str	r6, [r4, #8]
 80052fe:	2e00      	cmp	r6, #0
 8005300:	bfa2      	ittt	ge
 8005302:	6821      	ldrge	r1, [r4, #0]
 8005304:	f021 0104 	bicge.w	r1, r1, #4
 8005308:	6021      	strge	r1, [r4, #0]
 800530a:	b90d      	cbnz	r5, 8005310 <_printf_i+0x110>
 800530c:	2e00      	cmp	r6, #0
 800530e:	d04b      	beq.n	80053a8 <_printf_i+0x1a8>
 8005310:	4616      	mov	r6, r2
 8005312:	fbb5 f1f3 	udiv	r1, r5, r3
 8005316:	fb03 5711 	mls	r7, r3, r1, r5
 800531a:	5dc7      	ldrb	r7, [r0, r7]
 800531c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005320:	462f      	mov	r7, r5
 8005322:	42bb      	cmp	r3, r7
 8005324:	460d      	mov	r5, r1
 8005326:	d9f4      	bls.n	8005312 <_printf_i+0x112>
 8005328:	2b08      	cmp	r3, #8
 800532a:	d10b      	bne.n	8005344 <_printf_i+0x144>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	07df      	lsls	r7, r3, #31
 8005330:	d508      	bpl.n	8005344 <_printf_i+0x144>
 8005332:	6923      	ldr	r3, [r4, #16]
 8005334:	6861      	ldr	r1, [r4, #4]
 8005336:	4299      	cmp	r1, r3
 8005338:	bfde      	ittt	le
 800533a:	2330      	movle	r3, #48	@ 0x30
 800533c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005340:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005344:	1b92      	subs	r2, r2, r6
 8005346:	6122      	str	r2, [r4, #16]
 8005348:	f8cd a000 	str.w	sl, [sp]
 800534c:	464b      	mov	r3, r9
 800534e:	aa03      	add	r2, sp, #12
 8005350:	4621      	mov	r1, r4
 8005352:	4640      	mov	r0, r8
 8005354:	f7ff fee6 	bl	8005124 <_printf_common>
 8005358:	3001      	adds	r0, #1
 800535a:	d14a      	bne.n	80053f2 <_printf_i+0x1f2>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	b004      	add	sp, #16
 8005362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	f043 0320 	orr.w	r3, r3, #32
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	4833      	ldr	r0, [pc, #204]	@ (800543c <_printf_i+0x23c>)
 8005370:	2778      	movs	r7, #120	@ 0x78
 8005372:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	6831      	ldr	r1, [r6, #0]
 800537a:	061f      	lsls	r7, r3, #24
 800537c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005380:	d402      	bmi.n	8005388 <_printf_i+0x188>
 8005382:	065f      	lsls	r7, r3, #25
 8005384:	bf48      	it	mi
 8005386:	b2ad      	uxthmi	r5, r5
 8005388:	6031      	str	r1, [r6, #0]
 800538a:	07d9      	lsls	r1, r3, #31
 800538c:	bf44      	itt	mi
 800538e:	f043 0320 	orrmi.w	r3, r3, #32
 8005392:	6023      	strmi	r3, [r4, #0]
 8005394:	b11d      	cbz	r5, 800539e <_printf_i+0x19e>
 8005396:	2310      	movs	r3, #16
 8005398:	e7ac      	b.n	80052f4 <_printf_i+0xf4>
 800539a:	4827      	ldr	r0, [pc, #156]	@ (8005438 <_printf_i+0x238>)
 800539c:	e7e9      	b.n	8005372 <_printf_i+0x172>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f023 0320 	bic.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	e7f6      	b.n	8005396 <_printf_i+0x196>
 80053a8:	4616      	mov	r6, r2
 80053aa:	e7bd      	b.n	8005328 <_printf_i+0x128>
 80053ac:	6833      	ldr	r3, [r6, #0]
 80053ae:	6825      	ldr	r5, [r4, #0]
 80053b0:	6961      	ldr	r1, [r4, #20]
 80053b2:	1d18      	adds	r0, r3, #4
 80053b4:	6030      	str	r0, [r6, #0]
 80053b6:	062e      	lsls	r6, r5, #24
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	d501      	bpl.n	80053c0 <_printf_i+0x1c0>
 80053bc:	6019      	str	r1, [r3, #0]
 80053be:	e002      	b.n	80053c6 <_printf_i+0x1c6>
 80053c0:	0668      	lsls	r0, r5, #25
 80053c2:	d5fb      	bpl.n	80053bc <_printf_i+0x1bc>
 80053c4:	8019      	strh	r1, [r3, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	4616      	mov	r6, r2
 80053cc:	e7bc      	b.n	8005348 <_printf_i+0x148>
 80053ce:	6833      	ldr	r3, [r6, #0]
 80053d0:	1d1a      	adds	r2, r3, #4
 80053d2:	6032      	str	r2, [r6, #0]
 80053d4:	681e      	ldr	r6, [r3, #0]
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	2100      	movs	r1, #0
 80053da:	4630      	mov	r0, r6
 80053dc:	f7fa fef8 	bl	80001d0 <memchr>
 80053e0:	b108      	cbz	r0, 80053e6 <_printf_i+0x1e6>
 80053e2:	1b80      	subs	r0, r0, r6
 80053e4:	6060      	str	r0, [r4, #4]
 80053e6:	6863      	ldr	r3, [r4, #4]
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	2300      	movs	r3, #0
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f0:	e7aa      	b.n	8005348 <_printf_i+0x148>
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	47d0      	blx	sl
 80053fc:	3001      	adds	r0, #1
 80053fe:	d0ad      	beq.n	800535c <_printf_i+0x15c>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	079b      	lsls	r3, r3, #30
 8005404:	d413      	bmi.n	800542e <_printf_i+0x22e>
 8005406:	68e0      	ldr	r0, [r4, #12]
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	4298      	cmp	r0, r3
 800540c:	bfb8      	it	lt
 800540e:	4618      	movlt	r0, r3
 8005410:	e7a6      	b.n	8005360 <_printf_i+0x160>
 8005412:	2301      	movs	r3, #1
 8005414:	4632      	mov	r2, r6
 8005416:	4649      	mov	r1, r9
 8005418:	4640      	mov	r0, r8
 800541a:	47d0      	blx	sl
 800541c:	3001      	adds	r0, #1
 800541e:	d09d      	beq.n	800535c <_printf_i+0x15c>
 8005420:	3501      	adds	r5, #1
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	9903      	ldr	r1, [sp, #12]
 8005426:	1a5b      	subs	r3, r3, r1
 8005428:	42ab      	cmp	r3, r5
 800542a:	dcf2      	bgt.n	8005412 <_printf_i+0x212>
 800542c:	e7eb      	b.n	8005406 <_printf_i+0x206>
 800542e:	2500      	movs	r5, #0
 8005430:	f104 0619 	add.w	r6, r4, #25
 8005434:	e7f5      	b.n	8005422 <_printf_i+0x222>
 8005436:	bf00      	nop
 8005438:	08006415 	.word	0x08006415
 800543c:	08006426 	.word	0x08006426

08005440 <__svfiscanf_r>:
 8005440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	461d      	mov	r5, r3
 8005446:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8005448:	07df      	lsls	r7, r3, #31
 800544a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800544e:	4606      	mov	r6, r0
 8005450:	460c      	mov	r4, r1
 8005452:	4691      	mov	r9, r2
 8005454:	d405      	bmi.n	8005462 <__svfiscanf_r+0x22>
 8005456:	898b      	ldrh	r3, [r1, #12]
 8005458:	0598      	lsls	r0, r3, #22
 800545a:	d402      	bmi.n	8005462 <__svfiscanf_r+0x22>
 800545c:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800545e:	f7ff fc24 	bl	8004caa <__retarget_lock_acquire_recursive>
 8005462:	2300      	movs	r3, #0
 8005464:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8005468:	4ba7      	ldr	r3, [pc, #668]	@ (8005708 <__svfiscanf_r+0x2c8>)
 800546a:	93a0      	str	r3, [sp, #640]	@ 0x280
 800546c:	f10d 0804 	add.w	r8, sp, #4
 8005470:	4ba6      	ldr	r3, [pc, #664]	@ (800570c <__svfiscanf_r+0x2cc>)
 8005472:	4fa7      	ldr	r7, [pc, #668]	@ (8005710 <__svfiscanf_r+0x2d0>)
 8005474:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005478:	93a1      	str	r3, [sp, #644]	@ 0x284
 800547a:	9500      	str	r5, [sp, #0]
 800547c:	f899 3000 	ldrb.w	r3, [r9]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 816c 	beq.w	800575e <__svfiscanf_r+0x31e>
 8005486:	5cf9      	ldrb	r1, [r7, r3]
 8005488:	f011 0108 	ands.w	r1, r1, #8
 800548c:	f109 0501 	add.w	r5, r9, #1
 8005490:	d019      	beq.n	80054c6 <__svfiscanf_r+0x86>
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	dd0f      	ble.n	80054b8 <__svfiscanf_r+0x78>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	5cba      	ldrb	r2, [r7, r2]
 800549e:	0711      	lsls	r1, r2, #28
 80054a0:	d401      	bmi.n	80054a6 <__svfiscanf_r+0x66>
 80054a2:	46a9      	mov	r9, r5
 80054a4:	e7ea      	b.n	800547c <__svfiscanf_r+0x3c>
 80054a6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80054a8:	3201      	adds	r2, #1
 80054aa:	9245      	str	r2, [sp, #276]	@ 0x114
 80054ac:	6862      	ldr	r2, [r4, #4]
 80054ae:	3301      	adds	r3, #1
 80054b0:	3a01      	subs	r2, #1
 80054b2:	6062      	str	r2, [r4, #4]
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	e7ec      	b.n	8005492 <__svfiscanf_r+0x52>
 80054b8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80054ba:	4621      	mov	r1, r4
 80054bc:	4630      	mov	r0, r6
 80054be:	4798      	blx	r3
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d0e9      	beq.n	8005498 <__svfiscanf_r+0x58>
 80054c4:	e7ed      	b.n	80054a2 <__svfiscanf_r+0x62>
 80054c6:	2b25      	cmp	r3, #37	@ 0x25
 80054c8:	d012      	beq.n	80054f0 <__svfiscanf_r+0xb0>
 80054ca:	4699      	mov	r9, r3
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f340 8095 	ble.w	80055fe <__svfiscanf_r+0x1be>
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	7813      	ldrb	r3, [r2, #0]
 80054d8:	454b      	cmp	r3, r9
 80054da:	f040 8140 	bne.w	800575e <__svfiscanf_r+0x31e>
 80054de:	6863      	ldr	r3, [r4, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	6063      	str	r3, [r4, #4]
 80054e4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80054e6:	3201      	adds	r2, #1
 80054e8:	3301      	adds	r3, #1
 80054ea:	6022      	str	r2, [r4, #0]
 80054ec:	9345      	str	r3, [sp, #276]	@ 0x114
 80054ee:	e7d8      	b.n	80054a2 <__svfiscanf_r+0x62>
 80054f0:	9141      	str	r1, [sp, #260]	@ 0x104
 80054f2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80054f4:	f899 3001 	ldrb.w	r3, [r9, #1]
 80054f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80054fa:	bf02      	ittt	eq
 80054fc:	2310      	moveq	r3, #16
 80054fe:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005500:	f109 0502 	addeq.w	r5, r9, #2
 8005504:	220a      	movs	r2, #10
 8005506:	46a9      	mov	r9, r5
 8005508:	f819 1b01 	ldrb.w	r1, [r9], #1
 800550c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005510:	2b09      	cmp	r3, #9
 8005512:	d91f      	bls.n	8005554 <__svfiscanf_r+0x114>
 8005514:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8005714 <__svfiscanf_r+0x2d4>
 8005518:	2203      	movs	r2, #3
 800551a:	4650      	mov	r0, sl
 800551c:	f7fa fe58 	bl	80001d0 <memchr>
 8005520:	b138      	cbz	r0, 8005532 <__svfiscanf_r+0xf2>
 8005522:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005524:	eba0 000a 	sub.w	r0, r0, sl
 8005528:	2301      	movs	r3, #1
 800552a:	4083      	lsls	r3, r0
 800552c:	4313      	orrs	r3, r2
 800552e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005530:	464d      	mov	r5, r9
 8005532:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005536:	2b78      	cmp	r3, #120	@ 0x78
 8005538:	d807      	bhi.n	800554a <__svfiscanf_r+0x10a>
 800553a:	2b57      	cmp	r3, #87	@ 0x57
 800553c:	d811      	bhi.n	8005562 <__svfiscanf_r+0x122>
 800553e:	2b25      	cmp	r3, #37	@ 0x25
 8005540:	d0c3      	beq.n	80054ca <__svfiscanf_r+0x8a>
 8005542:	d857      	bhi.n	80055f4 <__svfiscanf_r+0x1b4>
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80c1 	beq.w	80056cc <__svfiscanf_r+0x28c>
 800554a:	2303      	movs	r3, #3
 800554c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800554e:	230a      	movs	r3, #10
 8005550:	9342      	str	r3, [sp, #264]	@ 0x108
 8005552:	e07e      	b.n	8005652 <__svfiscanf_r+0x212>
 8005554:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005556:	fb02 1103 	mla	r1, r2, r3, r1
 800555a:	3930      	subs	r1, #48	@ 0x30
 800555c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800555e:	464d      	mov	r5, r9
 8005560:	e7d1      	b.n	8005506 <__svfiscanf_r+0xc6>
 8005562:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005566:	2a20      	cmp	r2, #32
 8005568:	d8ef      	bhi.n	800554a <__svfiscanf_r+0x10a>
 800556a:	a101      	add	r1, pc, #4	@ (adr r1, 8005570 <__svfiscanf_r+0x130>)
 800556c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005570:	08005631 	.word	0x08005631
 8005574:	0800554b 	.word	0x0800554b
 8005578:	0800554b 	.word	0x0800554b
 800557c:	0800568b 	.word	0x0800568b
 8005580:	0800554b 	.word	0x0800554b
 8005584:	0800554b 	.word	0x0800554b
 8005588:	0800554b 	.word	0x0800554b
 800558c:	0800554b 	.word	0x0800554b
 8005590:	0800554b 	.word	0x0800554b
 8005594:	0800554b 	.word	0x0800554b
 8005598:	0800554b 	.word	0x0800554b
 800559c:	080056a1 	.word	0x080056a1
 80055a0:	08005687 	.word	0x08005687
 80055a4:	080055fb 	.word	0x080055fb
 80055a8:	080055fb 	.word	0x080055fb
 80055ac:	080055fb 	.word	0x080055fb
 80055b0:	0800554b 	.word	0x0800554b
 80055b4:	08005643 	.word	0x08005643
 80055b8:	0800554b 	.word	0x0800554b
 80055bc:	0800554b 	.word	0x0800554b
 80055c0:	0800554b 	.word	0x0800554b
 80055c4:	0800554b 	.word	0x0800554b
 80055c8:	080056b1 	.word	0x080056b1
 80055cc:	0800564b 	.word	0x0800564b
 80055d0:	08005629 	.word	0x08005629
 80055d4:	0800554b 	.word	0x0800554b
 80055d8:	0800554b 	.word	0x0800554b
 80055dc:	080056ad 	.word	0x080056ad
 80055e0:	0800554b 	.word	0x0800554b
 80055e4:	08005687 	.word	0x08005687
 80055e8:	0800554b 	.word	0x0800554b
 80055ec:	0800554b 	.word	0x0800554b
 80055f0:	08005631 	.word	0x08005631
 80055f4:	3b45      	subs	r3, #69	@ 0x45
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d8a7      	bhi.n	800554a <__svfiscanf_r+0x10a>
 80055fa:	2305      	movs	r3, #5
 80055fc:	e028      	b.n	8005650 <__svfiscanf_r+0x210>
 80055fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005600:	4621      	mov	r1, r4
 8005602:	4630      	mov	r0, r6
 8005604:	4798      	blx	r3
 8005606:	2800      	cmp	r0, #0
 8005608:	f43f af64 	beq.w	80054d4 <__svfiscanf_r+0x94>
 800560c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800560e:	07da      	lsls	r2, r3, #31
 8005610:	f140 809d 	bpl.w	800574e <__svfiscanf_r+0x30e>
 8005614:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005616:	2800      	cmp	r0, #0
 8005618:	d061      	beq.n	80056de <__svfiscanf_r+0x29e>
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	0659      	lsls	r1, r3, #25
 800561e:	d45e      	bmi.n	80056de <__svfiscanf_r+0x29e>
 8005620:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005628:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800562a:	f042 0220 	orr.w	r2, r2, #32
 800562e:	9241      	str	r2, [sp, #260]	@ 0x104
 8005630:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005636:	9241      	str	r2, [sp, #260]	@ 0x104
 8005638:	2210      	movs	r2, #16
 800563a:	2b6e      	cmp	r3, #110	@ 0x6e
 800563c:	9242      	str	r2, [sp, #264]	@ 0x108
 800563e:	d902      	bls.n	8005646 <__svfiscanf_r+0x206>
 8005640:	e005      	b.n	800564e <__svfiscanf_r+0x20e>
 8005642:	2300      	movs	r3, #0
 8005644:	9342      	str	r3, [sp, #264]	@ 0x108
 8005646:	2303      	movs	r3, #3
 8005648:	e002      	b.n	8005650 <__svfiscanf_r+0x210>
 800564a:	2308      	movs	r3, #8
 800564c:	9342      	str	r3, [sp, #264]	@ 0x108
 800564e:	2304      	movs	r3, #4
 8005650:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005652:	6863      	ldr	r3, [r4, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	dd45      	ble.n	80056e4 <__svfiscanf_r+0x2a4>
 8005658:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800565a:	0659      	lsls	r1, r3, #25
 800565c:	d404      	bmi.n	8005668 <__svfiscanf_r+0x228>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	5cba      	ldrb	r2, [r7, r2]
 8005664:	0712      	lsls	r2, r2, #28
 8005666:	d444      	bmi.n	80056f2 <__svfiscanf_r+0x2b2>
 8005668:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800566a:	2b02      	cmp	r3, #2
 800566c:	dc5b      	bgt.n	8005726 <__svfiscanf_r+0x2e6>
 800566e:	466b      	mov	r3, sp
 8005670:	4622      	mov	r2, r4
 8005672:	a941      	add	r1, sp, #260	@ 0x104
 8005674:	4630      	mov	r0, r6
 8005676:	f000 f893 	bl	80057a0 <_scanf_chars>
 800567a:	2801      	cmp	r0, #1
 800567c:	d06f      	beq.n	800575e <__svfiscanf_r+0x31e>
 800567e:	2802      	cmp	r0, #2
 8005680:	f47f af0f 	bne.w	80054a2 <__svfiscanf_r+0x62>
 8005684:	e7c2      	b.n	800560c <__svfiscanf_r+0x1cc>
 8005686:	220a      	movs	r2, #10
 8005688:	e7d7      	b.n	800563a <__svfiscanf_r+0x1fa>
 800568a:	4629      	mov	r1, r5
 800568c:	4640      	mov	r0, r8
 800568e:	f000 fb65 	bl	8005d5c <__sccl>
 8005692:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005698:	9341      	str	r3, [sp, #260]	@ 0x104
 800569a:	4605      	mov	r5, r0
 800569c:	2301      	movs	r3, #1
 800569e:	e7d7      	b.n	8005650 <__svfiscanf_r+0x210>
 80056a0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80056a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056a6:	9341      	str	r3, [sp, #260]	@ 0x104
 80056a8:	2300      	movs	r3, #0
 80056aa:	e7d1      	b.n	8005650 <__svfiscanf_r+0x210>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e7cf      	b.n	8005650 <__svfiscanf_r+0x210>
 80056b0:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80056b2:	06c3      	lsls	r3, r0, #27
 80056b4:	f53f aef5 	bmi.w	80054a2 <__svfiscanf_r+0x62>
 80056b8:	9b00      	ldr	r3, [sp, #0]
 80056ba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80056bc:	1d19      	adds	r1, r3, #4
 80056be:	9100      	str	r1, [sp, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	07c0      	lsls	r0, r0, #31
 80056c4:	bf4c      	ite	mi
 80056c6:	801a      	strhmi	r2, [r3, #0]
 80056c8:	601a      	strpl	r2, [r3, #0]
 80056ca:	e6ea      	b.n	80054a2 <__svfiscanf_r+0x62>
 80056cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056ce:	07de      	lsls	r6, r3, #31
 80056d0:	d405      	bmi.n	80056de <__svfiscanf_r+0x29e>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	059d      	lsls	r5, r3, #22
 80056d6:	d402      	bmi.n	80056de <__svfiscanf_r+0x29e>
 80056d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056da:	f7ff fae7 	bl	8004cac <__retarget_lock_release_recursive>
 80056de:	f04f 30ff 	mov.w	r0, #4294967295
 80056e2:	e79d      	b.n	8005620 <__svfiscanf_r+0x1e0>
 80056e4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80056e6:	4621      	mov	r1, r4
 80056e8:	4630      	mov	r0, r6
 80056ea:	4798      	blx	r3
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d0b3      	beq.n	8005658 <__svfiscanf_r+0x218>
 80056f0:	e78c      	b.n	800560c <__svfiscanf_r+0x1cc>
 80056f2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80056f4:	3201      	adds	r2, #1
 80056f6:	9245      	str	r2, [sp, #276]	@ 0x114
 80056f8:	6862      	ldr	r2, [r4, #4]
 80056fa:	3a01      	subs	r2, #1
 80056fc:	2a00      	cmp	r2, #0
 80056fe:	6062      	str	r2, [r4, #4]
 8005700:	dd0a      	ble.n	8005718 <__svfiscanf_r+0x2d8>
 8005702:	3301      	adds	r3, #1
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	e7aa      	b.n	800565e <__svfiscanf_r+0x21e>
 8005708:	08005e43 	.word	0x08005e43
 800570c:	08005c75 	.word	0x08005c75
 8005710:	08006453 	.word	0x08006453
 8005714:	0800640a 	.word	0x0800640a
 8005718:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800571a:	4621      	mov	r1, r4
 800571c:	4630      	mov	r0, r6
 800571e:	4798      	blx	r3
 8005720:	2800      	cmp	r0, #0
 8005722:	d09c      	beq.n	800565e <__svfiscanf_r+0x21e>
 8005724:	e772      	b.n	800560c <__svfiscanf_r+0x1cc>
 8005726:	2b04      	cmp	r3, #4
 8005728:	dc06      	bgt.n	8005738 <__svfiscanf_r+0x2f8>
 800572a:	466b      	mov	r3, sp
 800572c:	4622      	mov	r2, r4
 800572e:	a941      	add	r1, sp, #260	@ 0x104
 8005730:	4630      	mov	r0, r6
 8005732:	f000 f88f 	bl	8005854 <_scanf_i>
 8005736:	e7a0      	b.n	800567a <__svfiscanf_r+0x23a>
 8005738:	4b0e      	ldr	r3, [pc, #56]	@ (8005774 <__svfiscanf_r+0x334>)
 800573a:	2b00      	cmp	r3, #0
 800573c:	f43f aeb1 	beq.w	80054a2 <__svfiscanf_r+0x62>
 8005740:	466b      	mov	r3, sp
 8005742:	4622      	mov	r2, r4
 8005744:	a941      	add	r1, sp, #260	@ 0x104
 8005746:	4630      	mov	r0, r6
 8005748:	f3af 8000 	nop.w
 800574c:	e795      	b.n	800567a <__svfiscanf_r+0x23a>
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	0598      	lsls	r0, r3, #22
 8005752:	f53f af5f 	bmi.w	8005614 <__svfiscanf_r+0x1d4>
 8005756:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005758:	f7ff faa8 	bl	8004cac <__retarget_lock_release_recursive>
 800575c:	e75a      	b.n	8005614 <__svfiscanf_r+0x1d4>
 800575e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005760:	07da      	lsls	r2, r3, #31
 8005762:	d405      	bmi.n	8005770 <__svfiscanf_r+0x330>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	059b      	lsls	r3, r3, #22
 8005768:	d402      	bmi.n	8005770 <__svfiscanf_r+0x330>
 800576a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800576c:	f7ff fa9e 	bl	8004cac <__retarget_lock_release_recursive>
 8005770:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005772:	e755      	b.n	8005620 <__svfiscanf_r+0x1e0>
 8005774:	00000000 	.word	0x00000000

08005778 <_vfiscanf_r>:
 8005778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577c:	460d      	mov	r5, r1
 800577e:	4616      	mov	r6, r2
 8005780:	461f      	mov	r7, r3
 8005782:	4604      	mov	r4, r0
 8005784:	b118      	cbz	r0, 800578e <_vfiscanf_r+0x16>
 8005786:	6a03      	ldr	r3, [r0, #32]
 8005788:	b90b      	cbnz	r3, 800578e <_vfiscanf_r+0x16>
 800578a:	f7ff f885 	bl	8004898 <__sinit>
 800578e:	463b      	mov	r3, r7
 8005790:	4632      	mov	r2, r6
 8005792:	4629      	mov	r1, r5
 8005794:	4620      	mov	r0, r4
 8005796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800579a:	f7ff be51 	b.w	8005440 <__svfiscanf_r>
	...

080057a0 <_scanf_chars>:
 80057a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a4:	4615      	mov	r5, r2
 80057a6:	688a      	ldr	r2, [r1, #8]
 80057a8:	4680      	mov	r8, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	b932      	cbnz	r2, 80057bc <_scanf_chars+0x1c>
 80057ae:	698a      	ldr	r2, [r1, #24]
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	bf14      	ite	ne
 80057b4:	f04f 32ff 	movne.w	r2, #4294967295
 80057b8:	2201      	moveq	r2, #1
 80057ba:	608a      	str	r2, [r1, #8]
 80057bc:	6822      	ldr	r2, [r4, #0]
 80057be:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005850 <_scanf_chars+0xb0>
 80057c2:	06d1      	lsls	r1, r2, #27
 80057c4:	bf5f      	itttt	pl
 80057c6:	681a      	ldrpl	r2, [r3, #0]
 80057c8:	1d11      	addpl	r1, r2, #4
 80057ca:	6019      	strpl	r1, [r3, #0]
 80057cc:	6816      	ldrpl	r6, [r2, #0]
 80057ce:	2700      	movs	r7, #0
 80057d0:	69a0      	ldr	r0, [r4, #24]
 80057d2:	b188      	cbz	r0, 80057f8 <_scanf_chars+0x58>
 80057d4:	2801      	cmp	r0, #1
 80057d6:	d107      	bne.n	80057e8 <_scanf_chars+0x48>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	781a      	ldrb	r2, [r3, #0]
 80057dc:	6963      	ldr	r3, [r4, #20]
 80057de:	5c9b      	ldrb	r3, [r3, r2]
 80057e0:	b953      	cbnz	r3, 80057f8 <_scanf_chars+0x58>
 80057e2:	2f00      	cmp	r7, #0
 80057e4:	d031      	beq.n	800584a <_scanf_chars+0xaa>
 80057e6:	e022      	b.n	800582e <_scanf_chars+0x8e>
 80057e8:	2802      	cmp	r0, #2
 80057ea:	d120      	bne.n	800582e <_scanf_chars+0x8e>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80057f4:	071b      	lsls	r3, r3, #28
 80057f6:	d41a      	bmi.n	800582e <_scanf_chars+0x8e>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	06da      	lsls	r2, r3, #27
 80057fc:	bf5e      	ittt	pl
 80057fe:	682b      	ldrpl	r3, [r5, #0]
 8005800:	781b      	ldrbpl	r3, [r3, #0]
 8005802:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005806:	682a      	ldr	r2, [r5, #0]
 8005808:	686b      	ldr	r3, [r5, #4]
 800580a:	3201      	adds	r2, #1
 800580c:	602a      	str	r2, [r5, #0]
 800580e:	68a2      	ldr	r2, [r4, #8]
 8005810:	3b01      	subs	r3, #1
 8005812:	3a01      	subs	r2, #1
 8005814:	606b      	str	r3, [r5, #4]
 8005816:	3701      	adds	r7, #1
 8005818:	60a2      	str	r2, [r4, #8]
 800581a:	b142      	cbz	r2, 800582e <_scanf_chars+0x8e>
 800581c:	2b00      	cmp	r3, #0
 800581e:	dcd7      	bgt.n	80057d0 <_scanf_chars+0x30>
 8005820:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005824:	4629      	mov	r1, r5
 8005826:	4640      	mov	r0, r8
 8005828:	4798      	blx	r3
 800582a:	2800      	cmp	r0, #0
 800582c:	d0d0      	beq.n	80057d0 <_scanf_chars+0x30>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	f013 0310 	ands.w	r3, r3, #16
 8005834:	d105      	bne.n	8005842 <_scanf_chars+0xa2>
 8005836:	68e2      	ldr	r2, [r4, #12]
 8005838:	3201      	adds	r2, #1
 800583a:	60e2      	str	r2, [r4, #12]
 800583c:	69a2      	ldr	r2, [r4, #24]
 800583e:	b102      	cbz	r2, 8005842 <_scanf_chars+0xa2>
 8005840:	7033      	strb	r3, [r6, #0]
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	443b      	add	r3, r7
 8005846:	6123      	str	r3, [r4, #16]
 8005848:	2000      	movs	r0, #0
 800584a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800584e:	bf00      	nop
 8005850:	08006453 	.word	0x08006453

08005854 <_scanf_i>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	4698      	mov	r8, r3
 800585a:	4b74      	ldr	r3, [pc, #464]	@ (8005a2c <_scanf_i+0x1d8>)
 800585c:	460c      	mov	r4, r1
 800585e:	4682      	mov	sl, r0
 8005860:	4616      	mov	r6, r2
 8005862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005866:	b087      	sub	sp, #28
 8005868:	ab03      	add	r3, sp, #12
 800586a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800586e:	4b70      	ldr	r3, [pc, #448]	@ (8005a30 <_scanf_i+0x1dc>)
 8005870:	69a1      	ldr	r1, [r4, #24]
 8005872:	4a70      	ldr	r2, [pc, #448]	@ (8005a34 <_scanf_i+0x1e0>)
 8005874:	2903      	cmp	r1, #3
 8005876:	bf08      	it	eq
 8005878:	461a      	moveq	r2, r3
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	9201      	str	r2, [sp, #4]
 800587e:	1e5a      	subs	r2, r3, #1
 8005880:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005884:	bf88      	it	hi
 8005886:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800588a:	4627      	mov	r7, r4
 800588c:	bf82      	ittt	hi
 800588e:	eb03 0905 	addhi.w	r9, r3, r5
 8005892:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005896:	60a3      	strhi	r3, [r4, #8]
 8005898:	f857 3b1c 	ldr.w	r3, [r7], #28
 800589c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80058a0:	bf98      	it	ls
 80058a2:	f04f 0900 	movls.w	r9, #0
 80058a6:	6023      	str	r3, [r4, #0]
 80058a8:	463d      	mov	r5, r7
 80058aa:	f04f 0b00 	mov.w	fp, #0
 80058ae:	6831      	ldr	r1, [r6, #0]
 80058b0:	ab03      	add	r3, sp, #12
 80058b2:	7809      	ldrb	r1, [r1, #0]
 80058b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f7fa fc89 	bl	80001d0 <memchr>
 80058be:	b328      	cbz	r0, 800590c <_scanf_i+0xb8>
 80058c0:	f1bb 0f01 	cmp.w	fp, #1
 80058c4:	d159      	bne.n	800597a <_scanf_i+0x126>
 80058c6:	6862      	ldr	r2, [r4, #4]
 80058c8:	b92a      	cbnz	r2, 80058d6 <_scanf_i+0x82>
 80058ca:	6822      	ldr	r2, [r4, #0]
 80058cc:	2108      	movs	r1, #8
 80058ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d2:	6061      	str	r1, [r4, #4]
 80058d4:	6022      	str	r2, [r4, #0]
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80058dc:	6022      	str	r2, [r4, #0]
 80058de:	68a2      	ldr	r2, [r4, #8]
 80058e0:	1e51      	subs	r1, r2, #1
 80058e2:	60a1      	str	r1, [r4, #8]
 80058e4:	b192      	cbz	r2, 800590c <_scanf_i+0xb8>
 80058e6:	6832      	ldr	r2, [r6, #0]
 80058e8:	1c51      	adds	r1, r2, #1
 80058ea:	6031      	str	r1, [r6, #0]
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	f805 2b01 	strb.w	r2, [r5], #1
 80058f2:	6872      	ldr	r2, [r6, #4]
 80058f4:	3a01      	subs	r2, #1
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	6072      	str	r2, [r6, #4]
 80058fa:	dc07      	bgt.n	800590c <_scanf_i+0xb8>
 80058fc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005900:	4631      	mov	r1, r6
 8005902:	4650      	mov	r0, sl
 8005904:	4790      	blx	r2
 8005906:	2800      	cmp	r0, #0
 8005908:	f040 8085 	bne.w	8005a16 <_scanf_i+0x1c2>
 800590c:	f10b 0b01 	add.w	fp, fp, #1
 8005910:	f1bb 0f03 	cmp.w	fp, #3
 8005914:	d1cb      	bne.n	80058ae <_scanf_i+0x5a>
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	b90b      	cbnz	r3, 800591e <_scanf_i+0xca>
 800591a:	230a      	movs	r3, #10
 800591c:	6063      	str	r3, [r4, #4]
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	4945      	ldr	r1, [pc, #276]	@ (8005a38 <_scanf_i+0x1e4>)
 8005922:	6960      	ldr	r0, [r4, #20]
 8005924:	1ac9      	subs	r1, r1, r3
 8005926:	f000 fa19 	bl	8005d5c <__sccl>
 800592a:	f04f 0b00 	mov.w	fp, #0
 800592e:	68a3      	ldr	r3, [r4, #8]
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d03d      	beq.n	80059b2 <_scanf_i+0x15e>
 8005936:	6831      	ldr	r1, [r6, #0]
 8005938:	6960      	ldr	r0, [r4, #20]
 800593a:	f891 c000 	ldrb.w	ip, [r1]
 800593e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005942:	2800      	cmp	r0, #0
 8005944:	d035      	beq.n	80059b2 <_scanf_i+0x15e>
 8005946:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800594a:	d124      	bne.n	8005996 <_scanf_i+0x142>
 800594c:	0510      	lsls	r0, r2, #20
 800594e:	d522      	bpl.n	8005996 <_scanf_i+0x142>
 8005950:	f10b 0b01 	add.w	fp, fp, #1
 8005954:	f1b9 0f00 	cmp.w	r9, #0
 8005958:	d003      	beq.n	8005962 <_scanf_i+0x10e>
 800595a:	3301      	adds	r3, #1
 800595c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005960:	60a3      	str	r3, [r4, #8]
 8005962:	6873      	ldr	r3, [r6, #4]
 8005964:	3b01      	subs	r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	6073      	str	r3, [r6, #4]
 800596a:	dd1b      	ble.n	80059a4 <_scanf_i+0x150>
 800596c:	6833      	ldr	r3, [r6, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	6033      	str	r3, [r6, #0]
 8005972:	68a3      	ldr	r3, [r4, #8]
 8005974:	3b01      	subs	r3, #1
 8005976:	60a3      	str	r3, [r4, #8]
 8005978:	e7d9      	b.n	800592e <_scanf_i+0xda>
 800597a:	f1bb 0f02 	cmp.w	fp, #2
 800597e:	d1ae      	bne.n	80058de <_scanf_i+0x8a>
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005986:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800598a:	d1bf      	bne.n	800590c <_scanf_i+0xb8>
 800598c:	2110      	movs	r1, #16
 800598e:	6061      	str	r1, [r4, #4]
 8005990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005994:	e7a2      	b.n	80058dc <_scanf_i+0x88>
 8005996:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800599a:	6022      	str	r2, [r4, #0]
 800599c:	780b      	ldrb	r3, [r1, #0]
 800599e:	f805 3b01 	strb.w	r3, [r5], #1
 80059a2:	e7de      	b.n	8005962 <_scanf_i+0x10e>
 80059a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80059a8:	4631      	mov	r1, r6
 80059aa:	4650      	mov	r0, sl
 80059ac:	4798      	blx	r3
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d0df      	beq.n	8005972 <_scanf_i+0x11e>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	05d9      	lsls	r1, r3, #23
 80059b6:	d50d      	bpl.n	80059d4 <_scanf_i+0x180>
 80059b8:	42bd      	cmp	r5, r7
 80059ba:	d909      	bls.n	80059d0 <_scanf_i+0x17c>
 80059bc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80059c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059c4:	4632      	mov	r2, r6
 80059c6:	4650      	mov	r0, sl
 80059c8:	4798      	blx	r3
 80059ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80059ce:	464d      	mov	r5, r9
 80059d0:	42bd      	cmp	r5, r7
 80059d2:	d028      	beq.n	8005a26 <_scanf_i+0x1d2>
 80059d4:	6822      	ldr	r2, [r4, #0]
 80059d6:	f012 0210 	ands.w	r2, r2, #16
 80059da:	d113      	bne.n	8005a04 <_scanf_i+0x1b0>
 80059dc:	702a      	strb	r2, [r5, #0]
 80059de:	6863      	ldr	r3, [r4, #4]
 80059e0:	9e01      	ldr	r6, [sp, #4]
 80059e2:	4639      	mov	r1, r7
 80059e4:	4650      	mov	r0, sl
 80059e6:	47b0      	blx	r6
 80059e8:	f8d8 3000 	ldr.w	r3, [r8]
 80059ec:	6821      	ldr	r1, [r4, #0]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	f8c8 2000 	str.w	r2, [r8]
 80059f4:	f011 0f20 	tst.w	r1, #32
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	d00f      	beq.n	8005a1c <_scanf_i+0x1c8>
 80059fc:	6018      	str	r0, [r3, #0]
 80059fe:	68e3      	ldr	r3, [r4, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60e3      	str	r3, [r4, #12]
 8005a04:	6923      	ldr	r3, [r4, #16]
 8005a06:	1bed      	subs	r5, r5, r7
 8005a08:	445d      	add	r5, fp
 8005a0a:	442b      	add	r3, r5
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	2000      	movs	r0, #0
 8005a10:	b007      	add	sp, #28
 8005a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a16:	f04f 0b00 	mov.w	fp, #0
 8005a1a:	e7ca      	b.n	80059b2 <_scanf_i+0x15e>
 8005a1c:	07ca      	lsls	r2, r1, #31
 8005a1e:	bf4c      	ite	mi
 8005a20:	8018      	strhmi	r0, [r3, #0]
 8005a22:	6018      	strpl	r0, [r3, #0]
 8005a24:	e7eb      	b.n	80059fe <_scanf_i+0x1aa>
 8005a26:	2001      	movs	r0, #1
 8005a28:	e7f2      	b.n	8005a10 <_scanf_i+0x1bc>
 8005a2a:	bf00      	nop
 8005a2c:	080063b0 	.word	0x080063b0
 8005a30:	08006111 	.word	0x08006111
 8005a34:	080061f1 	.word	0x080061f1
 8005a38:	08006447 	.word	0x08006447

08005a3c <__sflush_r>:
 8005a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	0716      	lsls	r6, r2, #28
 8005a46:	4605      	mov	r5, r0
 8005a48:	460c      	mov	r4, r1
 8005a4a:	d454      	bmi.n	8005af6 <__sflush_r+0xba>
 8005a4c:	684b      	ldr	r3, [r1, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dc02      	bgt.n	8005a58 <__sflush_r+0x1c>
 8005a52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dd48      	ble.n	8005aea <__sflush_r+0xae>
 8005a58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a5a:	2e00      	cmp	r6, #0
 8005a5c:	d045      	beq.n	8005aea <__sflush_r+0xae>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a64:	682f      	ldr	r7, [r5, #0]
 8005a66:	6a21      	ldr	r1, [r4, #32]
 8005a68:	602b      	str	r3, [r5, #0]
 8005a6a:	d030      	beq.n	8005ace <__sflush_r+0x92>
 8005a6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	0759      	lsls	r1, r3, #29
 8005a72:	d505      	bpl.n	8005a80 <__sflush_r+0x44>
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	1ad2      	subs	r2, r2, r3
 8005a78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a7a:	b10b      	cbz	r3, 8005a80 <__sflush_r+0x44>
 8005a7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	2300      	movs	r3, #0
 8005a82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a84:	6a21      	ldr	r1, [r4, #32]
 8005a86:	4628      	mov	r0, r5
 8005a88:	47b0      	blx	r6
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	d106      	bne.n	8005a9e <__sflush_r+0x62>
 8005a90:	6829      	ldr	r1, [r5, #0]
 8005a92:	291d      	cmp	r1, #29
 8005a94:	d82b      	bhi.n	8005aee <__sflush_r+0xb2>
 8005a96:	4a2a      	ldr	r2, [pc, #168]	@ (8005b40 <__sflush_r+0x104>)
 8005a98:	410a      	asrs	r2, r1
 8005a9a:	07d6      	lsls	r6, r2, #31
 8005a9c:	d427      	bmi.n	8005aee <__sflush_r+0xb2>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	6062      	str	r2, [r4, #4]
 8005aa2:	04d9      	lsls	r1, r3, #19
 8005aa4:	6922      	ldr	r2, [r4, #16]
 8005aa6:	6022      	str	r2, [r4, #0]
 8005aa8:	d504      	bpl.n	8005ab4 <__sflush_r+0x78>
 8005aaa:	1c42      	adds	r2, r0, #1
 8005aac:	d101      	bne.n	8005ab2 <__sflush_r+0x76>
 8005aae:	682b      	ldr	r3, [r5, #0]
 8005ab0:	b903      	cbnz	r3, 8005ab4 <__sflush_r+0x78>
 8005ab2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ab6:	602f      	str	r7, [r5, #0]
 8005ab8:	b1b9      	cbz	r1, 8005aea <__sflush_r+0xae>
 8005aba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005abe:	4299      	cmp	r1, r3
 8005ac0:	d002      	beq.n	8005ac8 <__sflush_r+0x8c>
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f7ff f8f4 	bl	8004cb0 <_free_r>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	6363      	str	r3, [r4, #52]	@ 0x34
 8005acc:	e00d      	b.n	8005aea <__sflush_r+0xae>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b0      	blx	r6
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	1c50      	adds	r0, r2, #1
 8005ad8:	d1c9      	bne.n	8005a6e <__sflush_r+0x32>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0c6      	beq.n	8005a6e <__sflush_r+0x32>
 8005ae0:	2b1d      	cmp	r3, #29
 8005ae2:	d001      	beq.n	8005ae8 <__sflush_r+0xac>
 8005ae4:	2b16      	cmp	r3, #22
 8005ae6:	d11e      	bne.n	8005b26 <__sflush_r+0xea>
 8005ae8:	602f      	str	r7, [r5, #0]
 8005aea:	2000      	movs	r0, #0
 8005aec:	e022      	b.n	8005b34 <__sflush_r+0xf8>
 8005aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005af2:	b21b      	sxth	r3, r3
 8005af4:	e01b      	b.n	8005b2e <__sflush_r+0xf2>
 8005af6:	690f      	ldr	r7, [r1, #16]
 8005af8:	2f00      	cmp	r7, #0
 8005afa:	d0f6      	beq.n	8005aea <__sflush_r+0xae>
 8005afc:	0793      	lsls	r3, r2, #30
 8005afe:	680e      	ldr	r6, [r1, #0]
 8005b00:	bf08      	it	eq
 8005b02:	694b      	ldreq	r3, [r1, #20]
 8005b04:	600f      	str	r7, [r1, #0]
 8005b06:	bf18      	it	ne
 8005b08:	2300      	movne	r3, #0
 8005b0a:	eba6 0807 	sub.w	r8, r6, r7
 8005b0e:	608b      	str	r3, [r1, #8]
 8005b10:	f1b8 0f00 	cmp.w	r8, #0
 8005b14:	dde9      	ble.n	8005aea <__sflush_r+0xae>
 8005b16:	6a21      	ldr	r1, [r4, #32]
 8005b18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b1a:	4643      	mov	r3, r8
 8005b1c:	463a      	mov	r2, r7
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b0      	blx	r6
 8005b22:	2800      	cmp	r0, #0
 8005b24:	dc08      	bgt.n	8005b38 <__sflush_r+0xfc>
 8005b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b38:	4407      	add	r7, r0
 8005b3a:	eba8 0800 	sub.w	r8, r8, r0
 8005b3e:	e7e7      	b.n	8005b10 <__sflush_r+0xd4>
 8005b40:	dfbffffe 	.word	0xdfbffffe

08005b44 <_fflush_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	690b      	ldr	r3, [r1, #16]
 8005b48:	4605      	mov	r5, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	b913      	cbnz	r3, 8005b54 <_fflush_r+0x10>
 8005b4e:	2500      	movs	r5, #0
 8005b50:	4628      	mov	r0, r5
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	b118      	cbz	r0, 8005b5e <_fflush_r+0x1a>
 8005b56:	6a03      	ldr	r3, [r0, #32]
 8005b58:	b90b      	cbnz	r3, 8005b5e <_fflush_r+0x1a>
 8005b5a:	f7fe fe9d 	bl	8004898 <__sinit>
 8005b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0f3      	beq.n	8005b4e <_fflush_r+0xa>
 8005b66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b68:	07d0      	lsls	r0, r2, #31
 8005b6a:	d404      	bmi.n	8005b76 <_fflush_r+0x32>
 8005b6c:	0599      	lsls	r1, r3, #22
 8005b6e:	d402      	bmi.n	8005b76 <_fflush_r+0x32>
 8005b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b72:	f7ff f89a 	bl	8004caa <__retarget_lock_acquire_recursive>
 8005b76:	4628      	mov	r0, r5
 8005b78:	4621      	mov	r1, r4
 8005b7a:	f7ff ff5f 	bl	8005a3c <__sflush_r>
 8005b7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b80:	07da      	lsls	r2, r3, #31
 8005b82:	4605      	mov	r5, r0
 8005b84:	d4e4      	bmi.n	8005b50 <_fflush_r+0xc>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	059b      	lsls	r3, r3, #22
 8005b8a:	d4e1      	bmi.n	8005b50 <_fflush_r+0xc>
 8005b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b8e:	f7ff f88d 	bl	8004cac <__retarget_lock_release_recursive>
 8005b92:	e7dd      	b.n	8005b50 <_fflush_r+0xc>

08005b94 <__swhatbuf_r>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	460c      	mov	r4, r1
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	b096      	sub	sp, #88	@ 0x58
 8005ba0:	4615      	mov	r5, r2
 8005ba2:	461e      	mov	r6, r3
 8005ba4:	da0d      	bge.n	8005bc2 <__swhatbuf_r+0x2e>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bac:	f04f 0100 	mov.w	r1, #0
 8005bb0:	bf14      	ite	ne
 8005bb2:	2340      	movne	r3, #64	@ 0x40
 8005bb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bb8:	2000      	movs	r0, #0
 8005bba:	6031      	str	r1, [r6, #0]
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	b016      	add	sp, #88	@ 0x58
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}
 8005bc2:	466a      	mov	r2, sp
 8005bc4:	f000 f9bc 	bl	8005f40 <_fstat_r>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	dbec      	blt.n	8005ba6 <__swhatbuf_r+0x12>
 8005bcc:	9901      	ldr	r1, [sp, #4]
 8005bce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005bd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005bd6:	4259      	negs	r1, r3
 8005bd8:	4159      	adcs	r1, r3
 8005bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bde:	e7eb      	b.n	8005bb8 <__swhatbuf_r+0x24>

08005be0 <__smakebuf_r>:
 8005be0:	898b      	ldrh	r3, [r1, #12]
 8005be2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005be4:	079d      	lsls	r5, r3, #30
 8005be6:	4606      	mov	r6, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	d507      	bpl.n	8005bfc <__smakebuf_r+0x1c>
 8005bec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	6163      	str	r3, [r4, #20]
 8005bf8:	b003      	add	sp, #12
 8005bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfc:	ab01      	add	r3, sp, #4
 8005bfe:	466a      	mov	r2, sp
 8005c00:	f7ff ffc8 	bl	8005b94 <__swhatbuf_r>
 8005c04:	9f00      	ldr	r7, [sp, #0]
 8005c06:	4605      	mov	r5, r0
 8005c08:	4639      	mov	r1, r7
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7ff f8bc 	bl	8004d88 <_malloc_r>
 8005c10:	b948      	cbnz	r0, 8005c26 <__smakebuf_r+0x46>
 8005c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c16:	059a      	lsls	r2, r3, #22
 8005c18:	d4ee      	bmi.n	8005bf8 <__smakebuf_r+0x18>
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	f043 0302 	orr.w	r3, r3, #2
 8005c22:	81a3      	strh	r3, [r4, #12]
 8005c24:	e7e2      	b.n	8005bec <__smakebuf_r+0xc>
 8005c26:	89a3      	ldrh	r3, [r4, #12]
 8005c28:	6020      	str	r0, [r4, #0]
 8005c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	9b01      	ldr	r3, [sp, #4]
 8005c32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c36:	b15b      	cbz	r3, 8005c50 <__smakebuf_r+0x70>
 8005c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f991 	bl	8005f64 <_isatty_r>
 8005c42:	b128      	cbz	r0, 8005c50 <__smakebuf_r+0x70>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f023 0303 	bic.w	r3, r3, #3
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	431d      	orrs	r5, r3
 8005c54:	81a5      	strh	r5, [r4, #12]
 8005c56:	e7cf      	b.n	8005bf8 <__smakebuf_r+0x18>

08005c58 <lflush>:
 8005c58:	898b      	ldrh	r3, [r1, #12]
 8005c5a:	f003 0309 	and.w	r3, r3, #9
 8005c5e:	2b09      	cmp	r3, #9
 8005c60:	d103      	bne.n	8005c6a <lflush+0x12>
 8005c62:	4b03      	ldr	r3, [pc, #12]	@ (8005c70 <lflush+0x18>)
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	f7ff bf6d 	b.w	8005b44 <_fflush_r>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	2000004c 	.word	0x2000004c

08005c74 <__srefill_r>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	460c      	mov	r4, r1
 8005c78:	4605      	mov	r5, r0
 8005c7a:	b118      	cbz	r0, 8005c84 <__srefill_r+0x10>
 8005c7c:	6a03      	ldr	r3, [r0, #32]
 8005c7e:	b90b      	cbnz	r3, 8005c84 <__srefill_r+0x10>
 8005c80:	f7fe fe0a 	bl	8004898 <__sinit>
 8005c84:	2300      	movs	r3, #0
 8005c86:	6063      	str	r3, [r4, #4]
 8005c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c8c:	069e      	lsls	r6, r3, #26
 8005c8e:	d408      	bmi.n	8005ca2 <__srefill_r+0x2e>
 8005c90:	0758      	lsls	r0, r3, #29
 8005c92:	d445      	bmi.n	8005d20 <__srefill_r+0xac>
 8005c94:	06d9      	lsls	r1, r3, #27
 8005c96:	d407      	bmi.n	8005ca8 <__srefill_r+0x34>
 8005c98:	2209      	movs	r2, #9
 8005c9a:	602a      	str	r2, [r5, #0]
 8005c9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ca0:	81a3      	strh	r3, [r4, #12]
 8005ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
 8005ca8:	071a      	lsls	r2, r3, #28
 8005caa:	d50b      	bpl.n	8005cc4 <__srefill_r+0x50>
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f7ff ff48 	bl	8005b44 <_fflush_r>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d1f4      	bne.n	8005ca2 <__srefill_r+0x2e>
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	60a0      	str	r0, [r4, #8]
 8005cbc:	f023 0308 	bic.w	r3, r3, #8
 8005cc0:	81a3      	strh	r3, [r4, #12]
 8005cc2:	61a0      	str	r0, [r4, #24]
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f043 0304 	orr.w	r3, r3, #4
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	6923      	ldr	r3, [r4, #16]
 8005cce:	b91b      	cbnz	r3, 8005cd8 <__srefill_r+0x64>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f7ff ff84 	bl	8005be0 <__smakebuf_r>
 8005cd8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8005cdc:	07b3      	lsls	r3, r6, #30
 8005cde:	d00f      	beq.n	8005d00 <__srefill_r+0x8c>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d50 <__srefill_r+0xdc>)
 8005ce4:	491b      	ldr	r1, [pc, #108]	@ (8005d54 <__srefill_r+0xe0>)
 8005ce6:	481c      	ldr	r0, [pc, #112]	@ (8005d58 <__srefill_r+0xe4>)
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	f7fe fded 	bl	80048c8 <_fwalk_sglue>
 8005cee:	81a6      	strh	r6, [r4, #12]
 8005cf0:	f006 0609 	and.w	r6, r6, #9
 8005cf4:	2e09      	cmp	r6, #9
 8005cf6:	d103      	bne.n	8005d00 <__srefill_r+0x8c>
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f7ff fe9e 	bl	8005a3c <__sflush_r>
 8005d00:	6922      	ldr	r2, [r4, #16]
 8005d02:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005d04:	6963      	ldr	r3, [r4, #20]
 8005d06:	6a21      	ldr	r1, [r4, #32]
 8005d08:	6022      	str	r2, [r4, #0]
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b0      	blx	r6
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	6060      	str	r0, [r4, #4]
 8005d12:	dc17      	bgt.n	8005d44 <__srefill_r+0xd0>
 8005d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d18:	d116      	bne.n	8005d48 <__srefill_r+0xd4>
 8005d1a:	f043 0320 	orr.w	r3, r3, #32
 8005d1e:	e7bf      	b.n	8005ca0 <__srefill_r+0x2c>
 8005d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d22:	2900      	cmp	r1, #0
 8005d24:	d0d2      	beq.n	8005ccc <__srefill_r+0x58>
 8005d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	d002      	beq.n	8005d34 <__srefill_r+0xc0>
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f7fe ffbe 	bl	8004cb0 <_free_r>
 8005d34:	2300      	movs	r3, #0
 8005d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d3a:	6063      	str	r3, [r4, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0c5      	beq.n	8005ccc <__srefill_r+0x58>
 8005d40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	2000      	movs	r0, #0
 8005d46:	e7ae      	b.n	8005ca6 <__srefill_r+0x32>
 8005d48:	2200      	movs	r2, #0
 8005d4a:	6062      	str	r2, [r4, #4]
 8005d4c:	e7a6      	b.n	8005c9c <__srefill_r+0x28>
 8005d4e:	bf00      	nop
 8005d50:	20000040 	.word	0x20000040
 8005d54:	08005c59 	.word	0x08005c59
 8005d58:	20000050 	.word	0x20000050

08005d5c <__sccl>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	780b      	ldrb	r3, [r1, #0]
 8005d60:	4604      	mov	r4, r0
 8005d62:	2b5e      	cmp	r3, #94	@ 0x5e
 8005d64:	bf0b      	itete	eq
 8005d66:	784b      	ldrbeq	r3, [r1, #1]
 8005d68:	1c4a      	addne	r2, r1, #1
 8005d6a:	1c8a      	addeq	r2, r1, #2
 8005d6c:	2100      	movne	r1, #0
 8005d6e:	bf08      	it	eq
 8005d70:	2101      	moveq	r1, #1
 8005d72:	3801      	subs	r0, #1
 8005d74:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005d78:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005d7c:	42a8      	cmp	r0, r5
 8005d7e:	d1fb      	bne.n	8005d78 <__sccl+0x1c>
 8005d80:	b90b      	cbnz	r3, 8005d86 <__sccl+0x2a>
 8005d82:	1e50      	subs	r0, r2, #1
 8005d84:	bd70      	pop	{r4, r5, r6, pc}
 8005d86:	f081 0101 	eor.w	r1, r1, #1
 8005d8a:	54e1      	strb	r1, [r4, r3]
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4602      	mov	r2, r0
 8005d90:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005d94:	2d2d      	cmp	r5, #45	@ 0x2d
 8005d96:	d005      	beq.n	8005da4 <__sccl+0x48>
 8005d98:	2d5d      	cmp	r5, #93	@ 0x5d
 8005d9a:	d016      	beq.n	8005dca <__sccl+0x6e>
 8005d9c:	2d00      	cmp	r5, #0
 8005d9e:	d0f1      	beq.n	8005d84 <__sccl+0x28>
 8005da0:	462b      	mov	r3, r5
 8005da2:	e7f2      	b.n	8005d8a <__sccl+0x2e>
 8005da4:	7846      	ldrb	r6, [r0, #1]
 8005da6:	2e5d      	cmp	r6, #93	@ 0x5d
 8005da8:	d0fa      	beq.n	8005da0 <__sccl+0x44>
 8005daa:	42b3      	cmp	r3, r6
 8005dac:	dcf8      	bgt.n	8005da0 <__sccl+0x44>
 8005dae:	3002      	adds	r0, #2
 8005db0:	461a      	mov	r2, r3
 8005db2:	3201      	adds	r2, #1
 8005db4:	4296      	cmp	r6, r2
 8005db6:	54a1      	strb	r1, [r4, r2]
 8005db8:	dcfb      	bgt.n	8005db2 <__sccl+0x56>
 8005dba:	1af2      	subs	r2, r6, r3
 8005dbc:	3a01      	subs	r2, #1
 8005dbe:	1c5d      	adds	r5, r3, #1
 8005dc0:	42b3      	cmp	r3, r6
 8005dc2:	bfa8      	it	ge
 8005dc4:	2200      	movge	r2, #0
 8005dc6:	18ab      	adds	r3, r5, r2
 8005dc8:	e7e1      	b.n	8005d8e <__sccl+0x32>
 8005dca:	4610      	mov	r0, r2
 8005dcc:	e7da      	b.n	8005d84 <__sccl+0x28>

08005dce <__submore>:
 8005dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005dd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dda:	4299      	cmp	r1, r3
 8005ddc:	d11d      	bne.n	8005e1a <__submore+0x4c>
 8005dde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005de2:	f7fe ffd1 	bl	8004d88 <_malloc_r>
 8005de6:	b918      	cbnz	r0, 8005df0 <__submore+0x22>
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005df4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005df6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005dfa:	6360      	str	r0, [r4, #52]	@ 0x34
 8005dfc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005e00:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005e04:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005e08:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005e0c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005e10:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005e14:	6020      	str	r0, [r4, #0]
 8005e16:	2000      	movs	r0, #0
 8005e18:	e7e8      	b.n	8005dec <__submore+0x1e>
 8005e1a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005e1c:	0077      	lsls	r7, r6, #1
 8005e1e:	463a      	mov	r2, r7
 8005e20:	f000 f8ce 	bl	8005fc0 <_realloc_r>
 8005e24:	4605      	mov	r5, r0
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d0de      	beq.n	8005de8 <__submore+0x1a>
 8005e2a:	eb00 0806 	add.w	r8, r0, r6
 8005e2e:	4601      	mov	r1, r0
 8005e30:	4632      	mov	r2, r6
 8005e32:	4640      	mov	r0, r8
 8005e34:	f000 f8b6 	bl	8005fa4 <memcpy>
 8005e38:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005e3c:	f8c4 8000 	str.w	r8, [r4]
 8005e40:	e7e9      	b.n	8005e16 <__submore+0x48>

08005e42 <_ungetc_r>:
 8005e42:	b570      	push	{r4, r5, r6, lr}
 8005e44:	460d      	mov	r5, r1
 8005e46:	1c69      	adds	r1, r5, #1
 8005e48:	4606      	mov	r6, r0
 8005e4a:	4614      	mov	r4, r2
 8005e4c:	d01e      	beq.n	8005e8c <_ungetc_r+0x4a>
 8005e4e:	b118      	cbz	r0, 8005e58 <_ungetc_r+0x16>
 8005e50:	6a03      	ldr	r3, [r0, #32]
 8005e52:	b90b      	cbnz	r3, 8005e58 <_ungetc_r+0x16>
 8005e54:	f7fe fd20 	bl	8004898 <__sinit>
 8005e58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e5a:	07da      	lsls	r2, r3, #31
 8005e5c:	d405      	bmi.n	8005e6a <_ungetc_r+0x28>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	059b      	lsls	r3, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_ungetc_r+0x28>
 8005e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e66:	f7fe ff20 	bl	8004caa <__retarget_lock_acquire_recursive>
 8005e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e6e:	f023 0220 	bic.w	r2, r3, #32
 8005e72:	0758      	lsls	r0, r3, #29
 8005e74:	81a2      	strh	r2, [r4, #12]
 8005e76:	d422      	bmi.n	8005ebe <_ungetc_r+0x7c>
 8005e78:	06d9      	lsls	r1, r3, #27
 8005e7a:	d40a      	bmi.n	8005e92 <_ungetc_r+0x50>
 8005e7c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e7e:	07d2      	lsls	r2, r2, #31
 8005e80:	d404      	bmi.n	8005e8c <_ungetc_r+0x4a>
 8005e82:	0599      	lsls	r1, r3, #22
 8005e84:	d402      	bmi.n	8005e8c <_ungetc_r+0x4a>
 8005e86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e88:	f7fe ff10 	bl	8004cac <__retarget_lock_release_recursive>
 8005e8c:	f04f 35ff 	mov.w	r5, #4294967295
 8005e90:	e046      	b.n	8005f20 <_ungetc_r+0xde>
 8005e92:	071b      	lsls	r3, r3, #28
 8005e94:	d50f      	bpl.n	8005eb6 <_ungetc_r+0x74>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f7ff fe53 	bl	8005b44 <_fflush_r>
 8005e9e:	b120      	cbz	r0, 8005eaa <_ungetc_r+0x68>
 8005ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ea2:	07d8      	lsls	r0, r3, #31
 8005ea4:	d4f2      	bmi.n	8005e8c <_ungetc_r+0x4a>
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	e7eb      	b.n	8005e82 <_ungetc_r+0x40>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	60a0      	str	r0, [r4, #8]
 8005eae:	f023 0308 	bic.w	r3, r3, #8
 8005eb2:	81a3      	strh	r3, [r4, #12]
 8005eb4:	61a0      	str	r0, [r4, #24]
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	f043 0304 	orr.w	r3, r3, #4
 8005ebc:	81a3      	strh	r3, [r4, #12]
 8005ebe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ec0:	6862      	ldr	r2, [r4, #4]
 8005ec2:	b2ed      	uxtb	r5, r5
 8005ec4:	b1d3      	cbz	r3, 8005efc <_ungetc_r+0xba>
 8005ec6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	dc05      	bgt.n	8005ed8 <_ungetc_r+0x96>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f7ff ff7d 	bl	8005dce <__submore>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d1e3      	bne.n	8005ea0 <_ungetc_r+0x5e>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	1e5a      	subs	r2, r3, #1
 8005edc:	6022      	str	r2, [r4, #0]
 8005ede:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	6063      	str	r3, [r4, #4]
 8005ee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eea:	07da      	lsls	r2, r3, #31
 8005eec:	d418      	bmi.n	8005f20 <_ungetc_r+0xde>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	059b      	lsls	r3, r3, #22
 8005ef2:	d415      	bmi.n	8005f20 <_ungetc_r+0xde>
 8005ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ef6:	f7fe fed9 	bl	8004cac <__retarget_lock_release_recursive>
 8005efa:	e011      	b.n	8005f20 <_ungetc_r+0xde>
 8005efc:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8005efe:	6920      	ldr	r0, [r4, #16]
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	f001 0101 	and.w	r1, r1, #1
 8005f06:	b168      	cbz	r0, 8005f24 <_ungetc_r+0xe2>
 8005f08:	4298      	cmp	r0, r3
 8005f0a:	d20b      	bcs.n	8005f24 <_ungetc_r+0xe2>
 8005f0c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005f10:	42a8      	cmp	r0, r5
 8005f12:	d107      	bne.n	8005f24 <_ungetc_r+0xe2>
 8005f14:	3b01      	subs	r3, #1
 8005f16:	3201      	adds	r2, #1
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	6062      	str	r2, [r4, #4]
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	d0e6      	beq.n	8005eee <_ungetc_r+0xac>
 8005f20:	4628      	mov	r0, r5
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8005f28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f2e:	2303      	movs	r3, #3
 8005f30:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005f32:	4623      	mov	r3, r4
 8005f34:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	6063      	str	r3, [r4, #4]
 8005f3e:	e7ed      	b.n	8005f1c <_ungetc_r+0xda>

08005f40 <_fstat_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d07      	ldr	r5, [pc, #28]	@ (8005f60 <_fstat_r+0x20>)
 8005f44:	2300      	movs	r3, #0
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	602b      	str	r3, [r5, #0]
 8005f4e:	f7fb f87b 	bl	8001048 <_fstat>
 8005f52:	1c43      	adds	r3, r0, #1
 8005f54:	d102      	bne.n	8005f5c <_fstat_r+0x1c>
 8005f56:	682b      	ldr	r3, [r5, #0]
 8005f58:	b103      	cbz	r3, 8005f5c <_fstat_r+0x1c>
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
 8005f5e:	bf00      	nop
 8005f60:	200002d0 	.word	0x200002d0

08005f64 <_isatty_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d06      	ldr	r5, [pc, #24]	@ (8005f80 <_isatty_r+0x1c>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	f7fb f87a 	bl	8001068 <_isatty>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_isatty_r+0x1a>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_isatty_r+0x1a>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	200002d0 	.word	0x200002d0

08005f84 <_sbrk_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d06      	ldr	r5, [pc, #24]	@ (8005fa0 <_sbrk_r+0x1c>)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	f7fb f882 	bl	8001098 <_sbrk>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_sbrk_r+0x1a>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_sbrk_r+0x1a>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	200002d0 	.word	0x200002d0

08005fa4 <memcpy>:
 8005fa4:	440a      	add	r2, r1
 8005fa6:	4291      	cmp	r1, r2
 8005fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fac:	d100      	bne.n	8005fb0 <memcpy+0xc>
 8005fae:	4770      	bx	lr
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	d1f9      	bne.n	8005fb2 <memcpy+0xe>
 8005fbe:	bd10      	pop	{r4, pc}

08005fc0 <_realloc_r>:
 8005fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc4:	4680      	mov	r8, r0
 8005fc6:	4615      	mov	r5, r2
 8005fc8:	460c      	mov	r4, r1
 8005fca:	b921      	cbnz	r1, 8005fd6 <_realloc_r+0x16>
 8005fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	f7fe bed9 	b.w	8004d88 <_malloc_r>
 8005fd6:	b92a      	cbnz	r2, 8005fe4 <_realloc_r+0x24>
 8005fd8:	f7fe fe6a 	bl	8004cb0 <_free_r>
 8005fdc:	2400      	movs	r4, #0
 8005fde:	4620      	mov	r0, r4
 8005fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe4:	f000 f906 	bl	80061f4 <_malloc_usable_size_r>
 8005fe8:	4285      	cmp	r5, r0
 8005fea:	4606      	mov	r6, r0
 8005fec:	d802      	bhi.n	8005ff4 <_realloc_r+0x34>
 8005fee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ff2:	d8f4      	bhi.n	8005fde <_realloc_r+0x1e>
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f7fe fec6 	bl	8004d88 <_malloc_r>
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d0ec      	beq.n	8005fdc <_realloc_r+0x1c>
 8006002:	42b5      	cmp	r5, r6
 8006004:	462a      	mov	r2, r5
 8006006:	4621      	mov	r1, r4
 8006008:	bf28      	it	cs
 800600a:	4632      	movcs	r2, r6
 800600c:	f7ff ffca 	bl	8005fa4 <memcpy>
 8006010:	4621      	mov	r1, r4
 8006012:	4640      	mov	r0, r8
 8006014:	f7fe fe4c 	bl	8004cb0 <_free_r>
 8006018:	463c      	mov	r4, r7
 800601a:	e7e0      	b.n	8005fde <_realloc_r+0x1e>

0800601c <_strtol_l.constprop.0>:
 800601c:	2b24      	cmp	r3, #36	@ 0x24
 800601e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006022:	4686      	mov	lr, r0
 8006024:	4690      	mov	r8, r2
 8006026:	d801      	bhi.n	800602c <_strtol_l.constprop.0+0x10>
 8006028:	2b01      	cmp	r3, #1
 800602a:	d106      	bne.n	800603a <_strtol_l.constprop.0+0x1e>
 800602c:	f7fe fe12 	bl	8004c54 <__errno>
 8006030:	2316      	movs	r3, #22
 8006032:	6003      	str	r3, [r0, #0]
 8006034:	2000      	movs	r0, #0
 8006036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603a:	4834      	ldr	r0, [pc, #208]	@ (800610c <_strtol_l.constprop.0+0xf0>)
 800603c:	460d      	mov	r5, r1
 800603e:	462a      	mov	r2, r5
 8006040:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006044:	5d06      	ldrb	r6, [r0, r4]
 8006046:	f016 0608 	ands.w	r6, r6, #8
 800604a:	d1f8      	bne.n	800603e <_strtol_l.constprop.0+0x22>
 800604c:	2c2d      	cmp	r4, #45	@ 0x2d
 800604e:	d12d      	bne.n	80060ac <_strtol_l.constprop.0+0x90>
 8006050:	782c      	ldrb	r4, [r5, #0]
 8006052:	2601      	movs	r6, #1
 8006054:	1c95      	adds	r5, r2, #2
 8006056:	f033 0210 	bics.w	r2, r3, #16
 800605a:	d109      	bne.n	8006070 <_strtol_l.constprop.0+0x54>
 800605c:	2c30      	cmp	r4, #48	@ 0x30
 800605e:	d12a      	bne.n	80060b6 <_strtol_l.constprop.0+0x9a>
 8006060:	782a      	ldrb	r2, [r5, #0]
 8006062:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006066:	2a58      	cmp	r2, #88	@ 0x58
 8006068:	d125      	bne.n	80060b6 <_strtol_l.constprop.0+0x9a>
 800606a:	786c      	ldrb	r4, [r5, #1]
 800606c:	2310      	movs	r3, #16
 800606e:	3502      	adds	r5, #2
 8006070:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006074:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006078:	2200      	movs	r2, #0
 800607a:	fbbc f9f3 	udiv	r9, ip, r3
 800607e:	4610      	mov	r0, r2
 8006080:	fb03 ca19 	mls	sl, r3, r9, ip
 8006084:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006088:	2f09      	cmp	r7, #9
 800608a:	d81b      	bhi.n	80060c4 <_strtol_l.constprop.0+0xa8>
 800608c:	463c      	mov	r4, r7
 800608e:	42a3      	cmp	r3, r4
 8006090:	dd27      	ble.n	80060e2 <_strtol_l.constprop.0+0xc6>
 8006092:	1c57      	adds	r7, r2, #1
 8006094:	d007      	beq.n	80060a6 <_strtol_l.constprop.0+0x8a>
 8006096:	4581      	cmp	r9, r0
 8006098:	d320      	bcc.n	80060dc <_strtol_l.constprop.0+0xc0>
 800609a:	d101      	bne.n	80060a0 <_strtol_l.constprop.0+0x84>
 800609c:	45a2      	cmp	sl, r4
 800609e:	db1d      	blt.n	80060dc <_strtol_l.constprop.0+0xc0>
 80060a0:	fb00 4003 	mla	r0, r0, r3, r4
 80060a4:	2201      	movs	r2, #1
 80060a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060aa:	e7eb      	b.n	8006084 <_strtol_l.constprop.0+0x68>
 80060ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80060ae:	bf04      	itt	eq
 80060b0:	782c      	ldrbeq	r4, [r5, #0]
 80060b2:	1c95      	addeq	r5, r2, #2
 80060b4:	e7cf      	b.n	8006056 <_strtol_l.constprop.0+0x3a>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1da      	bne.n	8006070 <_strtol_l.constprop.0+0x54>
 80060ba:	2c30      	cmp	r4, #48	@ 0x30
 80060bc:	bf0c      	ite	eq
 80060be:	2308      	moveq	r3, #8
 80060c0:	230a      	movne	r3, #10
 80060c2:	e7d5      	b.n	8006070 <_strtol_l.constprop.0+0x54>
 80060c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80060c8:	2f19      	cmp	r7, #25
 80060ca:	d801      	bhi.n	80060d0 <_strtol_l.constprop.0+0xb4>
 80060cc:	3c37      	subs	r4, #55	@ 0x37
 80060ce:	e7de      	b.n	800608e <_strtol_l.constprop.0+0x72>
 80060d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80060d4:	2f19      	cmp	r7, #25
 80060d6:	d804      	bhi.n	80060e2 <_strtol_l.constprop.0+0xc6>
 80060d8:	3c57      	subs	r4, #87	@ 0x57
 80060da:	e7d8      	b.n	800608e <_strtol_l.constprop.0+0x72>
 80060dc:	f04f 32ff 	mov.w	r2, #4294967295
 80060e0:	e7e1      	b.n	80060a6 <_strtol_l.constprop.0+0x8a>
 80060e2:	1c53      	adds	r3, r2, #1
 80060e4:	d108      	bne.n	80060f8 <_strtol_l.constprop.0+0xdc>
 80060e6:	2322      	movs	r3, #34	@ 0x22
 80060e8:	f8ce 3000 	str.w	r3, [lr]
 80060ec:	4660      	mov	r0, ip
 80060ee:	f1b8 0f00 	cmp.w	r8, #0
 80060f2:	d0a0      	beq.n	8006036 <_strtol_l.constprop.0+0x1a>
 80060f4:	1e69      	subs	r1, r5, #1
 80060f6:	e006      	b.n	8006106 <_strtol_l.constprop.0+0xea>
 80060f8:	b106      	cbz	r6, 80060fc <_strtol_l.constprop.0+0xe0>
 80060fa:	4240      	negs	r0, r0
 80060fc:	f1b8 0f00 	cmp.w	r8, #0
 8006100:	d099      	beq.n	8006036 <_strtol_l.constprop.0+0x1a>
 8006102:	2a00      	cmp	r2, #0
 8006104:	d1f6      	bne.n	80060f4 <_strtol_l.constprop.0+0xd8>
 8006106:	f8c8 1000 	str.w	r1, [r8]
 800610a:	e794      	b.n	8006036 <_strtol_l.constprop.0+0x1a>
 800610c:	08006453 	.word	0x08006453

08006110 <_strtol_r>:
 8006110:	f7ff bf84 	b.w	800601c <_strtol_l.constprop.0>

08006114 <_strtoul_l.constprop.0>:
 8006114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006118:	4e34      	ldr	r6, [pc, #208]	@ (80061ec <_strtoul_l.constprop.0+0xd8>)
 800611a:	4686      	mov	lr, r0
 800611c:	460d      	mov	r5, r1
 800611e:	4628      	mov	r0, r5
 8006120:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006124:	5d37      	ldrb	r7, [r6, r4]
 8006126:	f017 0708 	ands.w	r7, r7, #8
 800612a:	d1f8      	bne.n	800611e <_strtoul_l.constprop.0+0xa>
 800612c:	2c2d      	cmp	r4, #45	@ 0x2d
 800612e:	d12f      	bne.n	8006190 <_strtoul_l.constprop.0+0x7c>
 8006130:	782c      	ldrb	r4, [r5, #0]
 8006132:	2701      	movs	r7, #1
 8006134:	1c85      	adds	r5, r0, #2
 8006136:	f033 0010 	bics.w	r0, r3, #16
 800613a:	d109      	bne.n	8006150 <_strtoul_l.constprop.0+0x3c>
 800613c:	2c30      	cmp	r4, #48	@ 0x30
 800613e:	d12c      	bne.n	800619a <_strtoul_l.constprop.0+0x86>
 8006140:	7828      	ldrb	r0, [r5, #0]
 8006142:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006146:	2858      	cmp	r0, #88	@ 0x58
 8006148:	d127      	bne.n	800619a <_strtoul_l.constprop.0+0x86>
 800614a:	786c      	ldrb	r4, [r5, #1]
 800614c:	2310      	movs	r3, #16
 800614e:	3502      	adds	r5, #2
 8006150:	f04f 38ff 	mov.w	r8, #4294967295
 8006154:	2600      	movs	r6, #0
 8006156:	fbb8 f8f3 	udiv	r8, r8, r3
 800615a:	fb03 f908 	mul.w	r9, r3, r8
 800615e:	ea6f 0909 	mvn.w	r9, r9
 8006162:	4630      	mov	r0, r6
 8006164:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006168:	f1bc 0f09 	cmp.w	ip, #9
 800616c:	d81c      	bhi.n	80061a8 <_strtoul_l.constprop.0+0x94>
 800616e:	4664      	mov	r4, ip
 8006170:	42a3      	cmp	r3, r4
 8006172:	dd2a      	ble.n	80061ca <_strtoul_l.constprop.0+0xb6>
 8006174:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006178:	d007      	beq.n	800618a <_strtoul_l.constprop.0+0x76>
 800617a:	4580      	cmp	r8, r0
 800617c:	d322      	bcc.n	80061c4 <_strtoul_l.constprop.0+0xb0>
 800617e:	d101      	bne.n	8006184 <_strtoul_l.constprop.0+0x70>
 8006180:	45a1      	cmp	r9, r4
 8006182:	db1f      	blt.n	80061c4 <_strtoul_l.constprop.0+0xb0>
 8006184:	fb00 4003 	mla	r0, r0, r3, r4
 8006188:	2601      	movs	r6, #1
 800618a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800618e:	e7e9      	b.n	8006164 <_strtoul_l.constprop.0+0x50>
 8006190:	2c2b      	cmp	r4, #43	@ 0x2b
 8006192:	bf04      	itt	eq
 8006194:	782c      	ldrbeq	r4, [r5, #0]
 8006196:	1c85      	addeq	r5, r0, #2
 8006198:	e7cd      	b.n	8006136 <_strtoul_l.constprop.0+0x22>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1d8      	bne.n	8006150 <_strtoul_l.constprop.0+0x3c>
 800619e:	2c30      	cmp	r4, #48	@ 0x30
 80061a0:	bf0c      	ite	eq
 80061a2:	2308      	moveq	r3, #8
 80061a4:	230a      	movne	r3, #10
 80061a6:	e7d3      	b.n	8006150 <_strtoul_l.constprop.0+0x3c>
 80061a8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80061ac:	f1bc 0f19 	cmp.w	ip, #25
 80061b0:	d801      	bhi.n	80061b6 <_strtoul_l.constprop.0+0xa2>
 80061b2:	3c37      	subs	r4, #55	@ 0x37
 80061b4:	e7dc      	b.n	8006170 <_strtoul_l.constprop.0+0x5c>
 80061b6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80061ba:	f1bc 0f19 	cmp.w	ip, #25
 80061be:	d804      	bhi.n	80061ca <_strtoul_l.constprop.0+0xb6>
 80061c0:	3c57      	subs	r4, #87	@ 0x57
 80061c2:	e7d5      	b.n	8006170 <_strtoul_l.constprop.0+0x5c>
 80061c4:	f04f 36ff 	mov.w	r6, #4294967295
 80061c8:	e7df      	b.n	800618a <_strtoul_l.constprop.0+0x76>
 80061ca:	1c73      	adds	r3, r6, #1
 80061cc:	d106      	bne.n	80061dc <_strtoul_l.constprop.0+0xc8>
 80061ce:	2322      	movs	r3, #34	@ 0x22
 80061d0:	f8ce 3000 	str.w	r3, [lr]
 80061d4:	4630      	mov	r0, r6
 80061d6:	b932      	cbnz	r2, 80061e6 <_strtoul_l.constprop.0+0xd2>
 80061d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061dc:	b107      	cbz	r7, 80061e0 <_strtoul_l.constprop.0+0xcc>
 80061de:	4240      	negs	r0, r0
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d0f9      	beq.n	80061d8 <_strtoul_l.constprop.0+0xc4>
 80061e4:	b106      	cbz	r6, 80061e8 <_strtoul_l.constprop.0+0xd4>
 80061e6:	1e69      	subs	r1, r5, #1
 80061e8:	6011      	str	r1, [r2, #0]
 80061ea:	e7f5      	b.n	80061d8 <_strtoul_l.constprop.0+0xc4>
 80061ec:	08006453 	.word	0x08006453

080061f0 <_strtoul_r>:
 80061f0:	f7ff bf90 	b.w	8006114 <_strtoul_l.constprop.0>

080061f4 <_malloc_usable_size_r>:
 80061f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f8:	1f18      	subs	r0, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfbc      	itt	lt
 80061fe:	580b      	ldrlt	r3, [r1, r0]
 8006200:	18c0      	addlt	r0, r0, r3
 8006202:	4770      	bx	lr

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
