
MTran_Assignment4_Embedded_DebtMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b528  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000106c  0800b6b8  0800b6b8  0000c6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c724  0800c724  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c724  0800c724  0000d724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c72c  0800c72c  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c72c  0800c72c  0000d72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c730  0800c730  0000d730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c734  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d4  0800c908  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800c908  0000e4c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d72  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002966  00000000  00000000  00021f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  000248e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022e18  00000000  00000000  00025b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001599a  00000000  00000000  000489a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d08cf  00000000  00000000  0005e33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0012ec09  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000e7a  00000000  00000000  0012ec4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000671c  00000000  00000000  0012fac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001361e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b6a0 	.word	0x0800b6a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b6a0 	.word	0x0800b6a0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <checkIfAmountRec>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float checkIfAmountRec()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	float debitAmount = 0;
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	603b      	str	r3, [r7, #0]

	int16_t result = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	80fb      	strh	r3, [r7, #6]

	printf("waiting for debitAmount to be received on serial port\r\n"); //}
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <checkIfAmountRec+0x44>)
 8001016:	f006 f9c5 	bl	80073a4 <puts>
	result = scanf("%f", &debitAmount);
 800101a:	463b      	mov	r3, r7
 800101c:	4619      	mov	r1, r3
 800101e:	480b      	ldr	r0, [pc, #44]	@ (800104c <checkIfAmountRec+0x48>)
 8001020:	f006 f9c8 	bl	80073b4 <iscanf>
 8001024:	4603      	mov	r3, r0
 8001026:	80fb      	strh	r3, [r7, #6]
	if (result == 0)		//then somehow non-float chars were entered
 8001028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <checkIfAmountRec+0x32>
	{						//and nothing was assigned to %f
		return 0;
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e000      	b.n	8001038 <checkIfAmountRec+0x34>
	}
	return debitAmount;
 8001036:	683b      	ldr	r3, [r7, #0]
}
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb0 0a67 	vmov.f32	s0, s15
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	0800b6b8 	.word	0x0800b6b8
 800104c:	0800b6f0 	.word	0x0800b6f0

08001050 <displayWelcome>:

void displayWelcome(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af02      	add	r7, sp, #8
	char strBuffer[16] = { 0 };
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]

	ssd1331_clear_screen(BLACK);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 feca 	bl	8001dfe <ssd1331_clear_screen>
	snprintf(strBuffer, 16, "Welcome");
 800106a:	463b      	mov	r3, r7
 800106c:	4a08      	ldr	r2, [pc, #32]	@ (8001090 <displayWelcome+0x40>)
 800106e:	2110      	movs	r1, #16
 8001070:	4618      	mov	r0, r3
 8001072:	f006 f9b1 	bl	80073d8 <sniprintf>
	ssd1331_display_string(0, 0, strBuffer, FONT_1206, WHITE);
 8001076:	463a      	mov	r2, r7
 8001078:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	230c      	movs	r3, #12
 8001080:	2100      	movs	r1, #0
 8001082:	2000      	movs	r0, #0
 8001084:	f000 fe72 	bl	8001d6c <ssd1331_display_string>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	0800b6f4 	.word	0x0800b6f4

08001094 <displayAmount>:

void displayAmount(float amount)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af02      	add	r7, sp, #8
 800109a:	ed87 0a01 	vstr	s0, [r7, #4]
	char strBuffer[16];

	ssd1331_clear_screen(BLACK);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 fead 	bl	8001dfe <ssd1331_clear_screen>
	sprintf(strBuffer, "$%.2f", amount);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fa5f 	bl	8000568 <__aeabi_f2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	f107 0008 	add.w	r0, r7, #8
 80010b2:	4908      	ldr	r1, [pc, #32]	@ (80010d4 <displayAmount+0x40>)
 80010b4:	f006 f9c4 	bl	8007440 <siprintf>
	ssd1331_display_string(0, 0, strBuffer, FONT_1206, WHITE);
 80010b8:	f107 0208 	add.w	r2, r7, #8
 80010bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	230c      	movs	r3, #12
 80010c4:	2100      	movs	r1, #0
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 fe50 	bl	8001d6c <ssd1331_display_string>
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	0800b6fc 	.word	0x0800b6fc

080010d8 <displayEnterPin>:

void displayEnterPin(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
	char strBuffer[16];
	ssd1331_clear_screen(BLACK);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 fe8d 	bl	8001dfe <ssd1331_clear_screen>
	snprintf(strBuffer, 16, "Enter PIN");
 80010e4:	463b      	mov	r3, r7
 80010e6:	4a09      	ldr	r2, [pc, #36]	@ (800110c <displayEnterPin+0x34>)
 80010e8:	2110      	movs	r1, #16
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 f974 	bl	80073d8 <sniprintf>
	ssd1331_display_string(0, 0, strBuffer, FONT_1206, WHITE);
 80010f0:	463a      	mov	r2, r7
 80010f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	230c      	movs	r3, #12
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 fe35 	bl	8001d6c <ssd1331_display_string>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	0800b704 	.word	0x0800b704

08001110 <displayIncorrectPin>:

void displayIncorrectPin(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
	char strBuffer[16];
	snprintf(strBuffer, 16, "Incorrect PIN");
 8001116:	463b      	mov	r3, r7
 8001118:	4a08      	ldr	r2, [pc, #32]	@ (800113c <displayIncorrectPin+0x2c>)
 800111a:	2110      	movs	r1, #16
 800111c:	4618      	mov	r0, r3
 800111e:	f006 f95b 	bl	80073d8 <sniprintf>
	ssd1331_display_string(0, 10, strBuffer, FONT_1206, WHITE);
 8001122:	463a      	mov	r2, r7
 8001124:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	230c      	movs	r3, #12
 800112c:	210a      	movs	r1, #10
 800112e:	2000      	movs	r0, #0
 8001130:	f000 fe1c 	bl	8001d6c <ssd1331_display_string>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800b710 	.word	0x0800b710

08001140 <printReceipt>:

void printReceipt(float amount)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	@ 0x30
 8001144:	af02      	add	r7, sp, #8
 8001146:	ed87 0a01 	vstr	s0, [r7, #4]
	char strBuffer[16];
	char amountstr[9];
	ssd1331_clear_screen(BLACK);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 fe57 	bl	8001dfe <ssd1331_clear_screen>
	snprintf(strBuffer, 16, "Success");
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4a1a      	ldr	r2, [pc, #104]	@ (80011c0 <printReceipt+0x80>)
 8001156:	2110      	movs	r1, #16
 8001158:	4618      	mov	r0, r3
 800115a:	f006 f93d 	bl	80073d8 <sniprintf>
	ssd1331_display_string(0, 10, strBuffer, FONT_1206, WHITE);
 800115e:	f107 0218 	add.w	r2, r7, #24
 8001162:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	230c      	movs	r3, #12
 800116a:	210a      	movs	r1, #10
 800116c:	2000      	movs	r0, #0
 800116e:	f000 fdfd 	bl	8001d6c <ssd1331_display_string>

	sprintf(amountstr,"%.1f",amount);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff f9f8 	bl	8000568 <__aeabi_f2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	f107 000c 	add.w	r0, r7, #12
 8001180:	4910      	ldr	r1, [pc, #64]	@ (80011c4 <printReceipt+0x84>)
 8001182:	f006 f95d 	bl	8007440 <siprintf>
	snprintf(strBuffer, 7, "Total: ");
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	4a0f      	ldr	r2, [pc, #60]	@ (80011c8 <printReceipt+0x88>)
 800118c:	2107      	movs	r1, #7
 800118e:	4618      	mov	r0, r3
 8001190:	f006 f922 	bl	80073d8 <sniprintf>
	strcat(strBuffer,amountstr);
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f006 fa4e 	bl	8007640 <strcat>
	ssd1331_display_string(0, 20, strBuffer, FONT_1206, WHITE);
 80011a4:	f107 0218 	add.w	r2, r7, #24
 80011a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	230c      	movs	r3, #12
 80011b0:	2114      	movs	r1, #20
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 fdda 	bl	8001d6c <ssd1331_display_string>
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	@ 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	0800b720 	.word	0x0800b720
 80011c4:	0800b728 	.word	0x0800b728
 80011c8:	0800b730 	.word	0x0800b730

080011cc <displayWaitingBankReply>:

void displayWaitingBankReply(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af02      	add	r7, sp, #8
	char strBuffer[16];

	snprintf(strBuffer, 16, "PIN is correct");
 80011d2:	463b      	mov	r3, r7
 80011d4:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <displayWaitingBankReply+0x4c>)
 80011d6:	2110      	movs	r1, #16
 80011d8:	4618      	mov	r0, r3
 80011da:	f006 f8fd 	bl	80073d8 <sniprintf>
	ssd1331_display_string(0, 10, strBuffer, FONT_1206, WHITE);
 80011de:	463a      	mov	r2, r7
 80011e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	230c      	movs	r3, #12
 80011e8:	210a      	movs	r1, #10
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 fdbe 	bl	8001d6c <ssd1331_display_string>

	snprintf(strBuffer, 16, "Waiting for Bank");
 80011f0:	463b      	mov	r3, r7
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <displayWaitingBankReply+0x50>)
 80011f4:	2110      	movs	r1, #16
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 f8ee 	bl	80073d8 <sniprintf>
	ssd1331_display_string(0, 20, strBuffer, FONT_1206, WHITE);
 80011fc:	463a      	mov	r2, r7
 80011fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	230c      	movs	r3, #12
 8001206:	2114      	movs	r1, #20
 8001208:	2000      	movs	r0, #0
 800120a:	f000 fdaf 	bl	8001d6c <ssd1331_display_string>
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	0800b738 	.word	0x0800b738
 800121c:	0800b748 	.word	0x0800b748

08001220 <displayTransactionCancle>:

void displayTransactionCancle(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
	char strBuffer[16];

	snprintf(strBuffer, 16, "Transaction Err");
 8001226:	463b      	mov	r3, r7
 8001228:	4a10      	ldr	r2, [pc, #64]	@ (800126c <displayTransactionCancle+0x4c>)
 800122a:	2110      	movs	r1, #16
 800122c:	4618      	mov	r0, r3
 800122e:	f006 f8d3 	bl	80073d8 <sniprintf>
	ssd1331_display_string(0, 10, strBuffer, FONT_1206, WHITE);
 8001232:	463a      	mov	r2, r7
 8001234:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	230c      	movs	r3, #12
 800123c:	210a      	movs	r1, #10
 800123e:	2000      	movs	r0, #0
 8001240:	f000 fd94 	bl	8001d6c <ssd1331_display_string>

	snprintf(strBuffer, 16, "Cancle");
 8001244:	463b      	mov	r3, r7
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <displayTransactionCancle+0x50>)
 8001248:	2110      	movs	r1, #16
 800124a:	4618      	mov	r0, r3
 800124c:	f006 f8c4 	bl	80073d8 <sniprintf>
	ssd1331_display_string(0, 20, strBuffer, FONT_1206, WHITE);
 8001250:	463a      	mov	r2, r7
 8001252:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	230c      	movs	r3, #12
 800125a:	2114      	movs	r1, #20
 800125c:	2000      	movs	r0, #0
 800125e:	f000 fd85 	bl	8001d6c <ssd1331_display_string>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	0800b75c 	.word	0x0800b75c
 8001270:	0800b76c 	.word	0x0800b76c

08001274 <displayOkCancel>:
/* FUNCTION     : displayOkOrCancel()
* DESCRIPTION   : displays "OK or Cancel?" on line 2 of OLED
* PARAMETERS    : none
* RETURNS       : nothing.
*/
void displayOkCancel(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af02      	add	r7, sp, #8
	char strBuffer[16];
	sprintf(strBuffer, "OK or Cancel?");
 800127a:	463b      	mov	r3, r7
 800127c:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <displayOkCancel+0x2c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f006 f8de 	bl	8007440 <siprintf>
	ssd1331_display_string(0, 10, strBuffer, FONT_1206, WHITE);
 8001284:	463a      	mov	r2, r7
 8001286:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	230c      	movs	r3, #12
 800128e:	210a      	movs	r1, #10
 8001290:	2000      	movs	r0, #0
 8001292:	f000 fd6b 	bl	8001d6c <ssd1331_display_string>
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	0800b774 	.word	0x0800b774

080012a4 <displayCheuqingOrSaving>:
/* FUNCTION     : displayCheuqingOrSaving()
* DESCRIPTION   : displays "Chequing or Saving?" on line 2 of OLED
* PARAMETERS    : none
* RETURNS       : nothing.
*/
void displayCheuqingOrSaving(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
	char strBuffer[16];
	ssd1331_clear_screen(BLACK);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 fda7 	bl	8001dfe <ssd1331_clear_screen>
	sprintf(strBuffer, "Chequing or Saving?");
 80012b0:	463b      	mov	r3, r7
 80012b2:	4908      	ldr	r1, [pc, #32]	@ (80012d4 <displayCheuqingOrSaving+0x30>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f006 f8c3 	bl	8007440 <siprintf>
	ssd1331_display_string(0, 10, strBuffer, FONT_1206, WHITE);
 80012ba:	463a      	mov	r2, r7
 80012bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	230c      	movs	r3, #12
 80012c4:	210a      	movs	r1, #10
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 fd50 	bl	8001d6c <ssd1331_display_string>
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	0800b798 	.word	0x0800b798

080012d8 <getUserPin>:

uint16_t getUserPin(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint16_t usrPin = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	80bb      	strh	r3, [r7, #4]
	int16_t  result = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	80fb      	strh	r3, [r7, #6]

	printf("waiting for PIN to be received on serial port\r\n"); //}
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <getUserPin+0x28>)
 80012e8:	f006 f85c 	bl	80073a4 <puts>
	scanf("%d", &usrPin);
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <getUserPin+0x2c>)
 80012f2:	f006 f85f 	bl	80073b4 <iscanf>

	return usrPin;
 80012f6:	88bb      	ldrh	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0800b7ac 	.word	0x0800b7ac
 8001304:	0800b7dc 	.word	0x0800b7dc

08001308 <checkPin>:

bool checkPin(uint16_t usrPin)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
	if (usrPin == PIN)
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <checkPin+0x18>
	{
		return MATCH;
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <checkPin+0x1a>
	}
	else
	{
		return NOT_MATCH;
 8001320:	2300      	movs	r3, #0
	}
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <checkBankApprove>:

bool checkBankApprove(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
	char str[16];
	scanf("%s", &str);
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4809      	ldr	r0, [pc, #36]	@ (8001360 <checkBankApprove+0x30>)
 800133c:	f006 f83a 	bl	80073b4 <iscanf>
	if (strcmp(str, "OK") == 0)
 8001340:	463b      	mov	r3, r7
 8001342:	4908      	ldr	r1, [pc, #32]	@ (8001364 <checkBankApprove+0x34>)
 8001344:	4618      	mov	r0, r3
 8001346:	f7fe ff43 	bl	80001d0 <strcmp>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <checkBankApprove+0x24>
	{
		return BANK_OK;
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <checkBankApprove+0x26>
	}
	else
	{
		return BANK_NOT_OK;
 8001354:	2300      	movs	r3, #0
	}
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	0800b7e0 	.word	0x0800b7e0
 8001364:	0800b7e4 	.word	0x0800b7e4

08001368 <HAL_GPIO_EXTI_Callback>:
*
* RETURNS : VOID
*
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
	pinPressed = GPIO_Pin;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <HAL_GPIO_EXTI_Callback+0x20>)
 8001378:	701a      	strb	r2, [r3, #0]

	// Start a timer to handle debounce
    HAL_TIM_Base_Start_IT(&htim2);
 800137a:	4804      	ldr	r0, [pc, #16]	@ (800138c <HAL_GPIO_EXTI_Callback+0x24>)
 800137c:	f003 f97c 	bl	8004678 <HAL_TIM_Base_Start_IT>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000370 	.word	0x20000370
 800138c:	200002a0 	.word	0x200002a0

08001390 <HAL_TIM_PeriodElapsedCallback>:
*
* RETURNS : VOID
*
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013a0:	d155      	bne.n	800144e <HAL_TIM_PeriodElapsedCallback+0xbe>
    {
        // Stop the timer
        HAL_TIM_Base_Stop_IT(&htim2);
 80013a2:	482d      	ldr	r0, [pc, #180]	@ (8001458 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80013a4:	f003 f9bc 	bl	8004720 <HAL_TIM_Base_Stop_IT>

        // Check the button state after debounce time
        if (pinPressed = OK_PIN && HAL_GPIO_ReadPin(GPIOA,OK_PIN) == GPIO_PIN_RESET)
 80013a8:	2102      	movs	r1, #2
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ae:	f001 fba9 	bl	8002b04 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	4b26      	ldr	r3, [pc, #152]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80013c2:	4611      	mov	r1, r2
 80013c4:	7019      	strb	r1, [r3, #0]
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x42>
        {
        	// Button is still pressed, call the callback function
        	btnState = OK;
 80013ca:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
        else if (pinPressed = SAVING_PIN && HAL_GPIO_ReadPin(GPIOA,SAVING_PIN) == GPIO_PIN_RESET)
        {
        	btnState = SAVING;
        }
    }
}
 80013d0:	e03d      	b.n	800144e <HAL_TIM_PeriodElapsedCallback+0xbe>
        else if (pinPressed = CANCLE_PIN && HAL_GPIO_ReadPin(GPIOA,CANCLE_PIN) == GPIO_PIN_RESET)
 80013d2:	2108      	movs	r1, #8
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d8:	f001 fb94 	bl	8002b04 <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80013ec:	4611      	mov	r1, r2
 80013ee:	7019      	strb	r1, [r3, #0]
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d003      	beq.n	80013fc <HAL_TIM_PeriodElapsedCallback+0x6c>
        	btnState = CANCLE;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	701a      	strb	r2, [r3, #0]
}
 80013fa:	e028      	b.n	800144e <HAL_TIM_PeriodElapsedCallback+0xbe>
        else if (pinPressed = CHEQUE_PIN && HAL_GPIO_ReadPin(GPIOA,CHEQUE_PIN) == GPIO_PIN_RESET)
 80013fc:	2110      	movs	r1, #16
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f001 fb7f 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001416:	4611      	mov	r1, r2
 8001418:	7019      	strb	r1, [r3, #0]
 800141a:	2a00      	cmp	r2, #0
 800141c:	d003      	beq.n	8001426 <HAL_TIM_PeriodElapsedCallback+0x96>
            btnState = CHEQUE;
 800141e:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001420:	2203      	movs	r2, #3
 8001422:	701a      	strb	r2, [r3, #0]
}
 8001424:	e013      	b.n	800144e <HAL_TIM_PeriodElapsedCallback+0xbe>
        else if (pinPressed = SAVING_PIN && HAL_GPIO_ReadPin(GPIOA,SAVING_PIN) == GPIO_PIN_RESET)
 8001426:	2140      	movs	r1, #64	@ 0x40
 8001428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142c:	f001 fb6a 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001440:	4611      	mov	r1, r2
 8001442:	7019      	strb	r1, [r3, #0]
 8001444:	2a00      	cmp	r2, #0
 8001446:	d002      	beq.n	800144e <HAL_TIM_PeriodElapsedCallback+0xbe>
        	btnState = SAVING;
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800144a:	2204      	movs	r2, #4
 800144c:	701a      	strb	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002a0 	.word	0x200002a0
 800145c:	20000370 	.word	0x20000370
 8001460:	20000371 	.word	0x20000371

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int transactionState = 1;
 800146a:	2301      	movs	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
	float amount     = 0;
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
	uint16_t usrPin   = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	80bb      	strh	r3, [r7, #4]
	uint8_t attempt   = 3;
 8001478:	2303      	movs	r3, #3
 800147a:	71fb      	strb	r3, [r7, #7]

	bool correctPin  = false;
 800147c:	2300      	movs	r3, #0
 800147e:	70fb      	strb	r3, [r7, #3]
	bool bankApprove = false;
 8001480:	2300      	movs	r3, #0
 8001482:	70bb      	strb	r3, [r7, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001484:	f001 f829 	bl	80024da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001488:	f000 f904 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148c:	f000 fb0a 	bl	8001aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001490:	f000 fad8 	bl	8001a44 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001494:	f000 f960 	bl	8001758 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001498:	f000 f99c 	bl	80017d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800149c:	f000 fa5e 	bl	800195c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Start timer 1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014a0:	2100      	movs	r1, #0
 80014a2:	4876      	ldr	r0, [pc, #472]	@ (800167c <main+0x218>)
 80014a4:	f003 f9cc 	bl	8004840 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014a8:	2104      	movs	r1, #4
 80014aa:	4874      	ldr	r0, [pc, #464]	@ (800167c <main+0x218>)
 80014ac:	f003 f9c8 	bl	8004840 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014b0:	2108      	movs	r1, #8
 80014b2:	4872      	ldr	r0, [pc, #456]	@ (800167c <main+0x218>)
 80014b4:	f003 f9c4 	bl	8004840 <HAL_TIM_PWM_Start>

  // Start OLed and Display a green rectangle
  ssd1331_init();
 80014b8:	f000 fcc6 	bl	8001e48 <ssd1331_init>
  ssd1331_clear_screen(BLACK);
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 fc9e 	bl	8001dfe <ssd1331_clear_screen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(transactionState)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	f200 80cb 	bhi.w	8001662 <main+0x1fe>
 80014cc:	a201      	add	r2, pc, #4	@ (adr r2, 80014d4 <main+0x70>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014f1 	.word	0x080014f1
 80014d8:	0800151f 	.word	0x0800151f
 80014dc:	0800155b 	.word	0x0800155b
 80014e0:	080015a9 	.word	0x080015a9
 80014e4:	080015ed 	.word	0x080015ed
 80014e8:	08001627 	.word	0x08001627
 80014ec:	08001651 	.word	0x08001651
	  {
		  case 1:  // Display Welcome and user Balance
			  displayWelcome();
 80014f0:	f7ff fdae 	bl	8001050 <displayWelcome>
			  // Receive balance from Putty/Tera Term
			  amount = checkIfAmountRec();
 80014f4:	f7ff fd86 	bl	8001004 <checkIfAmountRec>
 80014f8:	ed87 0a02 	vstr	s0, [r7, #8]

			  if (amount != 0)
 80014fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001500:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	f000 80ad 	beq.w	8001666 <main+0x202>
			  {
				  displayAmount(amount);
 800150c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001510:	f7ff fdc0 	bl	8001094 <displayAmount>
				  displayOkCancel();
 8001514:	f7ff feae 	bl	8001274 <displayOkCancel>
				  transactionState = 2;
 8001518:	2302      	movs	r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
			  }
			  break;
 800151c:	e0a3      	b.n	8001666 <main+0x202>
		  case 2: // Check OK or Cancle?
			  if (btnState != NOTHING)
 800151e:	4b58      	ldr	r3, [pc, #352]	@ (8001680 <main+0x21c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d018      	beq.n	800155a <main+0xf6>
			  {
				  if (btnState == CANCLE)
 8001528:	4b55      	ldr	r3, [pc, #340]	@ (8001680 <main+0x21c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d105      	bne.n	800153e <main+0xda>
				  {
					  //then cancel was pressed.
					  printf("Cancel Pressed\r\n");
 8001532:	4854      	ldr	r0, [pc, #336]	@ (8001684 <main+0x220>)
 8001534:	f005 ff36 	bl	80073a4 <puts>
					  transactionState = 7;
 8001538:	2307      	movs	r3, #7
 800153a:	60fb      	str	r3, [r7, #12]
					  break;
 800153c:	e09c      	b.n	8001678 <main+0x214>
				  }
				  else if (btnState == OK)
 800153e:	4b50      	ldr	r3, [pc, #320]	@ (8001680 <main+0x21c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	f040 8090 	bne.w	800166a <main+0x206>
				  {
					  //then ok pressed
					  printf("OK Pressed\r\n");
 800154a:	484f      	ldr	r0, [pc, #316]	@ (8001688 <main+0x224>)
 800154c:	f005 ff2a 	bl	80073a4 <puts>
					  displayCheuqingOrSaving();
 8001550:	f7ff fea8 	bl	80012a4 <displayCheuqingOrSaving>
					  transactionState = 3;
 8001554:	2303      	movs	r3, #3
 8001556:	60fb      	str	r3, [r7, #12]
					  break;
 8001558:	e08e      	b.n	8001678 <main+0x214>
				  }
				  break;
			  }

		  case 3: //Check Chequings or Savings
			  if (btnState != NOTHING)
 800155a:	4b49      	ldr	r3, [pc, #292]	@ (8001680 <main+0x21c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 8084 	beq.w	800166e <main+0x20a>
			  {
				  if (btnState == CANCLE)
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <main+0x21c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d105      	bne.n	800157c <main+0x118>
				  {
					  //then cancel was pressed.
					  printf("Cancel Pressed\r\n");
 8001570:	4844      	ldr	r0, [pc, #272]	@ (8001684 <main+0x220>)
 8001572:	f005 ff17 	bl	80073a4 <puts>
					  transactionState = 7;
 8001576:	2307      	movs	r3, #7
 8001578:	60fb      	str	r3, [r7, #12]
					  //then ok pressed
					  printf("Saving Pressed\r\n");
					  transactionState = 4;
				  }
			  }
			  break;
 800157a:	e078      	b.n	800166e <main+0x20a>
				  else if (btnState == CHEQUE)
 800157c:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <main+0x21c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b03      	cmp	r3, #3
 8001584:	d105      	bne.n	8001592 <main+0x12e>
					  printf("Cheque Pressed\r\n");
 8001586:	4841      	ldr	r0, [pc, #260]	@ (800168c <main+0x228>)
 8001588:	f005 ff0c 	bl	80073a4 <puts>
					  transactionState = 4;
 800158c:	2304      	movs	r3, #4
 800158e:	60fb      	str	r3, [r7, #12]
			  break;
 8001590:	e06d      	b.n	800166e <main+0x20a>
				  else if (btnState == SAVING)
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <main+0x21c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b04      	cmp	r3, #4
 800159a:	d168      	bne.n	800166e <main+0x20a>
					  printf("Saving Pressed\r\n");
 800159c:	483c      	ldr	r0, [pc, #240]	@ (8001690 <main+0x22c>)
 800159e:	f005 ff01 	bl	80073a4 <puts>
					  transactionState = 4;
 80015a2:	2304      	movs	r3, #4
 80015a4:	60fb      	str	r3, [r7, #12]
			  break;
 80015a6:	e062      	b.n	800166e <main+0x20a>
		  case 4: // User enter PIN

			  displayEnterPin();
 80015a8:	f7ff fd96 	bl	80010d8 <displayEnterPin>
			  usrPin = getUserPin();
 80015ac:	f7ff fe94 	bl	80012d8 <getUserPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	80bb      	strh	r3, [r7, #4]
			  displayOkCancel();
 80015b4:	f7ff fe5e 	bl	8001274 <displayOkCancel>
			  correctPin = checkPin(attempt);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fea3 	bl	8001308 <checkPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	70fb      	strb	r3, [r7, #3]
			  if (correctPin)
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <main+0x16e>
			  {
				  transactionState = 5;
 80015cc:	2305      	movs	r3, #5
 80015ce:	60fb      	str	r3, [r7, #12]
				  break;
 80015d0:	e052      	b.n	8001678 <main+0x214>
			  }
			  else
			  {
				  usrPin = NULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	80bb      	strh	r3, [r7, #4]
				  displayIncorrectPin();
 80015d6:	f7ff fd9b 	bl	8001110 <displayIncorrectPin>
				  attempt--;
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	3b01      	subs	r3, #1
 80015de:	71fb      	strb	r3, [r7, #7]
			  }

			  // No Attempt left
			  if (attempt == 0)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d145      	bne.n	8001672 <main+0x20e>
			  {
				  transactionState = 7;
 80015e6:	2307      	movs	r3, #7
 80015e8:	60fb      	str	r3, [r7, #12]
			  }
			  break;
 80015ea:	e042      	b.n	8001672 <main+0x20e>
		  case 5:  //Check OK or Cancle
			  if (btnState != NOTHING)
 80015ec:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <main+0x21c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d03f      	beq.n	8001676 <main+0x212>
			  {
				  if (btnState == CANCLE)
 80015f6:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <main+0x21c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d105      	bne.n	800160c <main+0x1a8>
				  {
					  //then cancel was pressed.
					  printf("Cancel Pressed\r\n");
 8001600:	4820      	ldr	r0, [pc, #128]	@ (8001684 <main+0x220>)
 8001602:	f005 fecf 	bl	80073a4 <puts>
					  transactionState = 7;
 8001606:	2307      	movs	r3, #7
 8001608:	60fb      	str	r3, [r7, #12]
					  printf("OK Pressed\r\n");
					  displayWaitingBankReply();
					  transactionState = 6;
				  }
			  }
			  break;
 800160a:	e034      	b.n	8001676 <main+0x212>
				  else if (btnState == OK)
 800160c:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <main+0x21c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d12f      	bne.n	8001676 <main+0x212>
					  printf("OK Pressed\r\n");
 8001616:	481c      	ldr	r0, [pc, #112]	@ (8001688 <main+0x224>)
 8001618:	f005 fec4 	bl	80073a4 <puts>
					  displayWaitingBankReply();
 800161c:	f7ff fdd6 	bl	80011cc <displayWaitingBankReply>
					  transactionState = 6;
 8001620:	2306      	movs	r3, #6
 8001622:	60fb      	str	r3, [r7, #12]
			  break;
 8001624:	e027      	b.n	8001676 <main+0x212>

		  case 6: // Send transaction detail to the bank
			  bankApprove = checkBankApprove();
 8001626:	f7ff fe83 	bl	8001330 <checkBankApprove>
 800162a:	4603      	mov	r3, r0
 800162c:	70bb      	strb	r3, [r7, #2]
			  if (bankApprove)
 800162e:	78bb      	ldrb	r3, [r7, #2]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00a      	beq.n	800164a <main+0x1e6>
			  {
				  printReceipt(amount);
 8001634:	ed97 0a02 	vldr	s0, [r7, #8]
 8001638:	f7ff fd82 	bl	8001140 <printReceipt>
				  HAL_Delay(3000);
 800163c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001640:	f000 ffc0 	bl	80025c4 <HAL_Delay>
				  transactionState = 1;
 8001644:	2301      	movs	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
			  }
			  else
			  {
				  transactionState = 6;
			  }
			  break;
 8001648:	e016      	b.n	8001678 <main+0x214>
				  transactionState = 6;
 800164a:	2306      	movs	r3, #6
 800164c:	60fb      	str	r3, [r7, #12]
			  break;
 800164e:	e013      	b.n	8001678 <main+0x214>
		  case 7:
			  displayTransactionCancle();
 8001650:	f7ff fde6 	bl	8001220 <displayTransactionCancle>
			  HAL_Delay(2000); // Delay 2s
 8001654:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001658:	f000 ffb4 	bl	80025c4 <HAL_Delay>
			  transactionState = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
			  break;
 8001660:	e00a      	b.n	8001678 <main+0x214>
		  default:
			  break;
 8001662:	bf00      	nop
 8001664:	e72d      	b.n	80014c2 <main+0x5e>
			  break;
 8001666:	bf00      	nop
 8001668:	e72b      	b.n	80014c2 <main+0x5e>
				  break;
 800166a:	bf00      	nop
 800166c:	e729      	b.n	80014c2 <main+0x5e>
			  break;
 800166e:	bf00      	nop
 8001670:	e727      	b.n	80014c2 <main+0x5e>
			  break;
 8001672:	bf00      	nop
 8001674:	e725      	b.n	80014c2 <main+0x5e>
			  break;
 8001676:	bf00      	nop
	  switch(transactionState)
 8001678:	e723      	b.n	80014c2 <main+0x5e>
 800167a:	bf00      	nop
 800167c:	20000254 	.word	0x20000254
 8001680:	20000371 	.word	0x20000371
 8001684:	0800b7e8 	.word	0x0800b7e8
 8001688:	0800b7f8 	.word	0x0800b7f8
 800168c:	0800b804 	.word	0x0800b804
 8001690:	0800b814 	.word	0x0800b814

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b096      	sub	sp, #88	@ 0x58
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	2244      	movs	r2, #68	@ 0x44
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 ffc4 	bl	8007630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016ba:	f001 fa89 	bl	8002bd0 <HAL_PWREx_ControlVoltageScaling>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016c4:	f000 fa66 	bl	8001b94 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016c8:	f001 fa64 	bl	8002b94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016cc:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <SystemClock_Config+0xc0>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d2:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <SystemClock_Config+0xc0>)
 80016d4:	f023 0318 	bic.w	r3, r3, #24
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016dc:	2314      	movs	r3, #20
 80016de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016e4:	2301      	movs	r3, #1
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016ec:	2360      	movs	r3, #96	@ 0x60
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f0:	2302      	movs	r3, #2
 80016f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016f4:	2301      	movs	r3, #1
 80016f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80016fc:	2310      	movs	r3, #16
 80016fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001700:	2307      	movs	r3, #7
 8001702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001704:	2302      	movs	r3, #2
 8001706:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001708:	2302      	movs	r3, #2
 800170a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fab3 	bl	8002c7c <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800171c:	f000 fa3a 	bl	8001b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2303      	movs	r3, #3
 8001726:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	2101      	movs	r1, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f001 feb3 	bl	80034a4 <HAL_RCC_ClockConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001744:	f000 fa26 	bl	8001b94 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001748:	f002 fac6 	bl	8003cd8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800174c:	bf00      	nop
 800174e:	3758      	adds	r7, #88	@ 0x58
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000

08001758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <MX_SPI1_Init+0x74>)
 800175e:	4a1c      	ldr	r2, [pc, #112]	@ (80017d0 <MX_SPI1_Init+0x78>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <MX_SPI1_Init+0x74>)
 8001764:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800176a:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <MX_SPI1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001770:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <MX_SPI1_Init+0x74>)
 8001772:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001776:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_SPI1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_SPI1_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_SPI1_Init+0x74>)
 8001786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800178a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_SPI1_Init+0x74>)
 800178e:	2210      	movs	r2, #16
 8001790:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_SPI1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_SPI1_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_SPI1_Init+0x74>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_SPI1_Init+0x74>)
 80017a6:	2207      	movs	r2, #7
 80017a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_SPI1_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_SPI1_Init+0x74>)
 80017b2:	2208      	movs	r2, #8
 80017b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_SPI1_Init+0x74>)
 80017b8:	f002 fb90 	bl	8003edc <HAL_SPI_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017c2:	f000 f9e7 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200001f0 	.word	0x200001f0
 80017d0:	40013000 	.word	0x40013000

080017d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b09a      	sub	sp, #104	@ 0x68
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	222c      	movs	r2, #44	@ 0x2c
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f005 ff0e 	bl	8007630 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001814:	4b4f      	ldr	r3, [pc, #316]	@ (8001954 <MX_TIM1_Init+0x180>)
 8001816:	4a50      	ldr	r2, [pc, #320]	@ (8001958 <MX_TIM1_Init+0x184>)
 8001818:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12;
 800181a:	4b4e      	ldr	r3, [pc, #312]	@ (8001954 <MX_TIM1_Init+0x180>)
 800181c:	220c      	movs	r2, #12
 800181e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b4c      	ldr	r3, [pc, #304]	@ (8001954 <MX_TIM1_Init+0x180>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001826:	4b4b      	ldr	r3, [pc, #300]	@ (8001954 <MX_TIM1_Init+0x180>)
 8001828:	22ff      	movs	r2, #255	@ 0xff
 800182a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182c:	4b49      	ldr	r3, [pc, #292]	@ (8001954 <MX_TIM1_Init+0x180>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001832:	4b48      	ldr	r3, [pc, #288]	@ (8001954 <MX_TIM1_Init+0x180>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001838:	4b46      	ldr	r3, [pc, #280]	@ (8001954 <MX_TIM1_Init+0x180>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800183e:	4845      	ldr	r0, [pc, #276]	@ (8001954 <MX_TIM1_Init+0x180>)
 8001840:	f002 fec2 	bl	80045c8 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800184a:	f000 f9a3 	bl	8001b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001852:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001854:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001858:	4619      	mov	r1, r3
 800185a:	483e      	ldr	r0, [pc, #248]	@ (8001954 <MX_TIM1_Init+0x180>)
 800185c:	f003 fb02 	bl	8004e64 <HAL_TIM_ConfigClockSource>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001866:	f000 f995 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800186a:	483a      	ldr	r0, [pc, #232]	@ (8001954 <MX_TIM1_Init+0x180>)
 800186c:	f002 ff87 	bl	800477e <HAL_TIM_PWM_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001876:	f000 f98d 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001886:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800188a:	4619      	mov	r1, r3
 800188c:	4831      	ldr	r0, [pc, #196]	@ (8001954 <MX_TIM1_Init+0x180>)
 800188e:	f003 ff7d 	bl	800578c <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001898:	f000 f97c 	bl	8001b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189c:	2360      	movs	r3, #96	@ 0x60
 800189e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	4824      	ldr	r0, [pc, #144]	@ (8001954 <MX_TIM1_Init+0x180>)
 80018c2:	f003 f9bb 	bl	8004c3c <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80018cc:	f000 f962 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d4:	2204      	movs	r2, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	481e      	ldr	r0, [pc, #120]	@ (8001954 <MX_TIM1_Init+0x180>)
 80018da:	f003 f9af 	bl	8004c3c <HAL_TIM_PWM_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80018e4:	f000 f956 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ec:	2208      	movs	r2, #8
 80018ee:	4619      	mov	r1, r3
 80018f0:	4818      	ldr	r0, [pc, #96]	@ (8001954 <MX_TIM1_Init+0x180>)
 80018f2:	f003 f9a3 	bl	8004c3c <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80018fc:	f000 f94a 	bl	8001b94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001918:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001922:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4619      	mov	r1, r3
 8001934:	4807      	ldr	r0, [pc, #28]	@ (8001954 <MX_TIM1_Init+0x180>)
 8001936:	f003 ff8f 	bl	8005858 <HAL_TIMEx_ConfigBreakDeadTime>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001940:	f000 f928 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001944:	4803      	ldr	r0, [pc, #12]	@ (8001954 <MX_TIM1_Init+0x180>)
 8001946:	f000 fbcb 	bl	80020e0 <HAL_TIM_MspPostInit>

}
 800194a:	bf00      	nop
 800194c:	3768      	adds	r7, #104	@ 0x68
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000254 	.word	0x20000254
 8001958:	40012c00 	.word	0x40012c00

0800195c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08e      	sub	sp, #56	@ 0x38
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197c:	463b      	mov	r3, r7
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800198e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 8001990:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001994:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8001996:	4b2a      	ldr	r3, [pc, #168]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 8001998:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800199c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b28      	ldr	r3, [pc, #160]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80019a4:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 80019a6:	2213      	movs	r2, #19
 80019a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019b6:	4822      	ldr	r0, [pc, #136]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 80019b8:	f002 fe06 	bl	80045c8 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019c2:	f000 f8e7 	bl	8001b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d0:	4619      	mov	r1, r3
 80019d2:	481b      	ldr	r0, [pc, #108]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 80019d4:	f003 fa46 	bl	8004e64 <HAL_TIM_ConfigClockSource>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019de:	f000 f8d9 	bl	8001b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019e2:	4817      	ldr	r0, [pc, #92]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 80019e4:	f002 fecb 	bl	800477e <HAL_TIM_PWM_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019ee:	f000 f8d1 	bl	8001b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	480f      	ldr	r0, [pc, #60]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 8001a02:	f003 fec3 	bl	800578c <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a0c:	f000 f8c2 	bl	8001b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a10:	2360      	movs	r3, #96	@ 0x60
 8001a12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <MX_TIM2_Init+0xe4>)
 8001a28:	f003 f908 	bl	8004c3c <HAL_TIM_PWM_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a32:	f000 f8af 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3738      	adds	r7, #56	@ 0x38
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002a0 	.word	0x200002a0

08001a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a4a:	4a15      	ldr	r2, [pc, #84]	@ (8001aa0 <MX_USART2_UART_Init+0x5c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <MX_USART2_UART_Init+0x58>)
 8001a88:	f003 ff7c 	bl	8005984 <HAL_UART_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a92:	f000 f87f 	bl	8001b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200002ec 	.word	0x200002ec
 8001aa0:	40004400 	.word	0x40004400

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	4b34      	ldr	r3, [pc, #208]	@ (8001b8c <MX_GPIO_Init+0xe8>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	4a33      	ldr	r2, [pc, #204]	@ (8001b8c <MX_GPIO_Init+0xe8>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac6:	4b31      	ldr	r3, [pc, #196]	@ (8001b8c <MX_GPIO_Init+0xe8>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b8c <MX_GPIO_Init+0xe8>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8001b8c <MX_GPIO_Init+0xe8>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ade:	4b2b      	ldr	r3, [pc, #172]	@ (8001b8c <MX_GPIO_Init+0xe8>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b28      	ldr	r3, [pc, #160]	@ (8001b8c <MX_GPIO_Init+0xe8>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a27      	ldr	r2, [pc, #156]	@ (8001b8c <MX_GPIO_Init+0xe8>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <MX_GPIO_Init+0xe8>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2178      	movs	r1, #120	@ 0x78
 8001b06:	4822      	ldr	r0, [pc, #136]	@ (8001b90 <MX_GPIO_Init+0xec>)
 8001b08:	f001 f814 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8001b0c:	235a      	movs	r3, #90	@ 0x5a
 8001b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b10:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b24:	f000 fe84 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 8001b28:	2378      	movs	r3, #120	@ 0x78
 8001b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4814      	ldr	r0, [pc, #80]	@ (8001b90 <MX_GPIO_Init+0xec>)
 8001b40:	f000 fe76 	bl	8002830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2007      	movs	r0, #7
 8001b4a:	f000 fe3a 	bl	80027c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b4e:	2007      	movs	r0, #7
 8001b50:	f000 fe53 	bl	80027fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2009      	movs	r0, #9
 8001b5a:	f000 fe32 	bl	80027c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b5e:	2009      	movs	r0, #9
 8001b60:	f000 fe4b 	bl	80027fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	200a      	movs	r0, #10
 8001b6a:	f000 fe2a 	bl	80027c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f000 fe43 	bl	80027fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2017      	movs	r0, #23
 8001b7a:	f000 fe22 	bl	80027c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b7e:	2017      	movs	r0, #23
 8001b80:	f000 fe3b 	bl	80027fa <HAL_NVIC_EnableIRQ>

}
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	48000400 	.word	0x48000400

08001b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b98:	b672      	cpsid	i
}
 8001b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <Error_Handler+0x8>
	...

08001ba0 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460a      	mov	r2, r1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4613      	mov	r3, r2
 8001bae:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2120      	movs	r1, #32
 8001bba:	4811      	ldr	r0, [pc, #68]	@ (8001c00 <ssd1331_write_byte+0x60>)
 8001bbc:	f000 ffba 	bl	8002b34 <HAL_GPIO_WritePin>
 8001bc0:	e004      	b.n	8001bcc <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2120      	movs	r1, #32
 8001bc6:	480e      	ldr	r0, [pc, #56]	@ (8001c00 <ssd1331_write_byte+0x60>)
 8001bc8:	f000 ffb4 	bl	8002b34 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2110      	movs	r1, #16
 8001bd0:	480b      	ldr	r0, [pc, #44]	@ (8001c00 <ssd1331_write_byte+0x60>)
 8001bd2:	f000 ffaf 	bl	8002b34 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001bd6:	1df9      	adds	r1, r7, #7
 8001bd8:	2364      	movs	r3, #100	@ 0x64
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4809      	ldr	r0, [pc, #36]	@ (8001c04 <ssd1331_write_byte+0x64>)
 8001bde:	f002 fa20 	bl	8004022 <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8001be2:	2201      	movs	r2, #1
 8001be4:	2110      	movs	r1, #16
 8001be6:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <ssd1331_write_byte+0x60>)
 8001be8:	f000 ffa4 	bl	8002b34 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001bec:	2201      	movs	r2, #1
 8001bee:	2120      	movs	r1, #32
 8001bf0:	4803      	ldr	r0, [pc, #12]	@ (8001c00 <ssd1331_write_byte+0x60>)
 8001bf2:	f000 ff9f 	bl	8002b34 <HAL_GPIO_WritePin>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	48000400 	.word	0x48000400
 8001c04:	200001f0 	.word	0x200001f0

08001c08 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
 8001c12:	460b      	mov	r3, r1
 8001c14:	71bb      	strb	r3, [r7, #6]
 8001c16:	4613      	mov	r3, r2
 8001c18:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b5f      	cmp	r3, #95	@ 0x5f
 8001c1e:	d82b      	bhi.n	8001c78 <ssd1331_draw_point+0x70>
 8001c20:	79bb      	ldrb	r3, [r7, #6]
 8001c22:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c24:	d828      	bhi.n	8001c78 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8001c26:	2100      	movs	r1, #0
 8001c28:	2015      	movs	r0, #21
 8001c2a:	f7ff ffb9 	bl	8001ba0 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ffb4 	bl	8001ba0 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	205f      	movs	r0, #95	@ 0x5f
 8001c3c:	f7ff ffb0 	bl	8001ba0 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001c40:	2100      	movs	r1, #0
 8001c42:	2075      	movs	r0, #117	@ 0x75
 8001c44:	f7ff ffac 	bl	8001ba0 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffa7 	bl	8001ba0 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001c52:	2100      	movs	r1, #0
 8001c54:	203f      	movs	r0, #63	@ 0x3f
 8001c56:	f7ff ffa3 	bl	8001ba0 <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8001c5a:	88bb      	ldrh	r3, [r7, #4]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2101      	movs	r1, #1
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff9b 	bl	8001ba0 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8001c6a:	88bb      	ldrh	r3, [r7, #4]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff95 	bl	8001ba0 <ssd1331_write_byte>
 8001c76:	e000      	b.n	8001c7a <ssd1331_draw_point+0x72>
		return;
 8001c78:	bf00      	nop
}
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4604      	mov	r4, r0
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4623      	mov	r3, r4
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	4603      	mov	r3, r0
 8001c94:	71bb      	strb	r3, [r7, #6]
 8001c96:	460b      	mov	r3, r1
 8001c98:	717b      	strb	r3, [r7, #5]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b5f      	cmp	r3, #95	@ 0x5f
 8001caa:	d857      	bhi.n	8001d5c <ssd1331_display_char+0xdc>
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cb0:	d854      	bhi.n	8001d5c <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e04c      	b.n	8001d52 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001cb8:	793b      	ldrb	r3, [r7, #4]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d10d      	bne.n	8001cda <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8001cbe:	797b      	ldrb	r3, [r7, #5]
 8001cc0:	f1a3 0220 	sub.w	r2, r3, #32
 8001cc4:	7bf9      	ldrb	r1, [r7, #15]
 8001cc6:	4827      	ldr	r0, [pc, #156]	@ (8001d64 <ssd1331_display_char+0xe4>)
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4403      	add	r3, r0
 8001cd2:	440b      	add	r3, r1
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	737b      	strb	r3, [r7, #13]
 8001cd8:	e00c      	b.n	8001cf4 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8001cda:	793b      	ldrb	r3, [r7, #4]
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d109      	bne.n	8001cf4 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001ce0:	797b      	ldrb	r3, [r7, #5]
 8001ce2:	f1a3 0220 	sub.w	r2, r3, #32
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	491f      	ldr	r1, [pc, #124]	@ (8001d68 <ssd1331_display_char+0xe8>)
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	440a      	add	r2, r1
 8001cee:	4413      	add	r3, r2
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73bb      	strb	r3, [r7, #14]
 8001cf8:	e025      	b.n	8001d46 <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001cfa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da06      	bge.n	8001d10 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001d02:	8c3a      	ldrh	r2, [r7, #32]
 8001d04:	79b9      	ldrb	r1, [r7, #6]
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff7d 	bl	8001c08 <ssd1331_draw_point>
 8001d0e:	e005      	b.n	8001d1c <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001d10:	79b9      	ldrb	r1, [r7, #6]
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2200      	movs	r2, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff76 	bl	8001c08 <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8001d1c:	7b7b      	ldrb	r3, [r7, #13]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001d22:	79bb      	ldrb	r3, [r7, #6]
 8001d24:	3301      	adds	r3, #1
 8001d26:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8001d28:	79ba      	ldrb	r2, [r7, #6]
 8001d2a:	7b3b      	ldrb	r3, [r7, #12]
 8001d2c:	1ad2      	subs	r2, r2, r3
 8001d2e:	793b      	ldrb	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d105      	bne.n	8001d40 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001d34:	7b3b      	ldrb	r3, [r7, #12]
 8001d36:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	71fb      	strb	r3, [r7, #7]
				break;
 8001d3e:	e005      	b.n	8001d4c <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	3301      	adds	r3, #1
 8001d44:	73bb      	strb	r3, [r7, #14]
 8001d46:	7bbb      	ldrb	r3, [r7, #14]
 8001d48:	2b07      	cmp	r3, #7
 8001d4a:	d9d6      	bls.n	8001cfa <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	793b      	ldrb	r3, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3ae      	bcc.n	8001cb8 <ssd1331_display_char+0x38>
 8001d5a:	e000      	b.n	8001d5e <ssd1331_display_char+0xde>
		return;
 8001d5c:	bf00      	nop
			}
		}
    }
}
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd90      	pop	{r4, r7, pc}
 8001d64:	0800b830 	.word	0x0800b830
 8001d68:	0800bca4 	.word	0x0800bca4

08001d6c <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	603a      	str	r2, [r7, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	71bb      	strb	r3, [r7, #6]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b5f      	cmp	r3, #95	@ 0x5f
 8001d86:	d836      	bhi.n	8001df6 <ssd1331_display_string+0x8a>
 8001d88:	79bb      	ldrb	r3, [r7, #6]
 8001d8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d8c:	d833      	bhi.n	8001df6 <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8001d8e:	e02d      	b.n	8001dec <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8001d90:	79fa      	ldrb	r2, [r7, #7]
 8001d92:	797b      	ldrb	r3, [r7, #5]
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f1c3 0360 	rsb	r3, r3, #96	@ 0x60
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dd12      	ble.n	8001dc6 <ssd1331_display_string+0x5a>
			chXpos = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001da4:	79ba      	ldrb	r2, [r7, #6]
 8001da6:	797b      	ldrb	r3, [r7, #5]
 8001da8:	4413      	add	r3, r2
 8001daa:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8001dac:	79ba      	ldrb	r2, [r7, #6]
 8001dae:	797b      	ldrb	r3, [r7, #5]
 8001db0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dd06      	ble.n	8001dc6 <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	71fb      	strb	r3, [r7, #7]
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 f81c 	bl	8001dfe <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	797c      	ldrb	r4, [r7, #5]
 8001dcc:	79b9      	ldrb	r1, [r7, #6]
 8001dce:	79f8      	ldrb	r0, [r7, #7]
 8001dd0:	8b3b      	ldrh	r3, [r7, #24]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	f7ff ff53 	bl	8001c80 <ssd1331_display_char>
        chXpos += chSize / 2;
 8001dda:	797b      	ldrb	r3, [r7, #5]
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4413      	add	r3, r2
 8001de4:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1cd      	bne.n	8001d90 <ssd1331_display_string+0x24>
 8001df4:	e000      	b.n	8001df8 <ssd1331_display_string+0x8c>
		return;
 8001df6:	bf00      	nop
    }
}
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}

08001dfe <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8001e08:	2300      	movs	r3, #0
 8001e0a:	81fb      	strh	r3, [r7, #14]
 8001e0c:	e013      	b.n	8001e36 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001e0e:	2300      	movs	r3, #0
 8001e10:	81bb      	strh	r3, [r7, #12]
 8001e12:	e00a      	b.n	8001e2a <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001e14:	89bb      	ldrh	r3, [r7, #12]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	89fa      	ldrh	r2, [r7, #14]
 8001e1a:	b2d1      	uxtb	r1, r2
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fef2 	bl	8001c08 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001e24:	89bb      	ldrh	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	81bb      	strh	r3, [r7, #12]
 8001e2a:	89bb      	ldrh	r3, [r7, #12]
 8001e2c:	2b5f      	cmp	r3, #95	@ 0x5f
 8001e2e:	d9f1      	bls.n	8001e14 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	3301      	adds	r3, #1
 8001e34:	81fb      	strh	r3, [r7, #14]
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e3a:	d9e8      	bls.n	8001e0e <ssd1331_clear_screen+0x10>
		}
	}
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <ssd1331_init>:


void ssd1331_init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2140      	movs	r1, #64	@ 0x40
 8001e50:	4852      	ldr	r0, [pc, #328]	@ (8001f9c <ssd1331_init+0x154>)
 8001e52:	f000 fe6f 	bl	8002b34 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8001e56:	2201      	movs	r2, #1
 8001e58:	2110      	movs	r1, #16
 8001e5a:	4850      	ldr	r0, [pc, #320]	@ (8001f9c <ssd1331_init+0x154>)
 8001e5c:	f000 fe6a 	bl	8002b34 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001e60:	2100      	movs	r1, #0
 8001e62:	20ae      	movs	r0, #174	@ 0xae
 8001e64:	f7ff fe9c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2081      	movs	r0, #129	@ 0x81
 8001e6c:	f7ff fe98 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001e70:	2100      	movs	r1, #0
 8001e72:	20ff      	movs	r0, #255	@ 0xff
 8001e74:	f7ff fe94 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2082      	movs	r0, #130	@ 0x82
 8001e7c:	f7ff fe90 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001e80:	2100      	movs	r1, #0
 8001e82:	20ff      	movs	r0, #255	@ 0xff
 8001e84:	f7ff fe8c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2083      	movs	r0, #131	@ 0x83
 8001e8c:	f7ff fe88 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001e90:	2100      	movs	r1, #0
 8001e92:	20ff      	movs	r0, #255	@ 0xff
 8001e94:	f7ff fe84 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2087      	movs	r0, #135	@ 0x87
 8001e9c:	f7ff fe80 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2006      	movs	r0, #6
 8001ea4:	f7ff fe7c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	208a      	movs	r0, #138	@ 0x8a
 8001eac:	f7ff fe78 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2064      	movs	r0, #100	@ 0x64
 8001eb4:	f7ff fe74 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001eb8:	2100      	movs	r1, #0
 8001eba:	208b      	movs	r0, #139	@ 0x8b
 8001ebc:	f7ff fe70 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2078      	movs	r0, #120	@ 0x78
 8001ec4:	f7ff fe6c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001ec8:	2100      	movs	r1, #0
 8001eca:	208c      	movs	r0, #140	@ 0x8c
 8001ecc:	f7ff fe68 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2064      	movs	r0, #100	@ 0x64
 8001ed4:	f7ff fe64 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001ed8:	2100      	movs	r1, #0
 8001eda:	20a0      	movs	r0, #160	@ 0xa0
 8001edc:	f7ff fe60 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2072      	movs	r0, #114	@ 0x72
 8001ee4:	f7ff fe5c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001ee8:	2100      	movs	r1, #0
 8001eea:	20a1      	movs	r0, #161	@ 0xa1
 8001eec:	f7ff fe58 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fe54 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001ef8:	2100      	movs	r1, #0
 8001efa:	20a2      	movs	r0, #162	@ 0xa2
 8001efc:	f7ff fe50 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001f00:	2100      	movs	r1, #0
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fe4c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8001f08:	2100      	movs	r1, #0
 8001f0a:	20a4      	movs	r0, #164	@ 0xa4
 8001f0c:	f7ff fe48 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001f10:	2100      	movs	r1, #0
 8001f12:	20a8      	movs	r0, #168	@ 0xa8
 8001f14:	f7ff fe44 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8001f18:	2100      	movs	r1, #0
 8001f1a:	203f      	movs	r0, #63	@ 0x3f
 8001f1c:	f7ff fe40 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001f20:	2100      	movs	r1, #0
 8001f22:	20ad      	movs	r0, #173	@ 0xad
 8001f24:	f7ff fe3c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	208e      	movs	r0, #142	@ 0x8e
 8001f2c:	f7ff fe38 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001f30:	2100      	movs	r1, #0
 8001f32:	20b0      	movs	r0, #176	@ 0xb0
 8001f34:	f7ff fe34 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fe30 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001f40:	2100      	movs	r1, #0
 8001f42:	20b1      	movs	r0, #177	@ 0xb1
 8001f44:	f7ff fe2c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2031      	movs	r0, #49	@ 0x31
 8001f4c:	f7ff fe28 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001f50:	2100      	movs	r1, #0
 8001f52:	20b3      	movs	r0, #179	@ 0xb3
 8001f54:	f7ff fe24 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	20f0      	movs	r0, #240	@ 0xf0
 8001f5c:	f7ff fe20 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001f60:	2100      	movs	r1, #0
 8001f62:	20bb      	movs	r0, #187	@ 0xbb
 8001f64:	f7ff fe1c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	203a      	movs	r0, #58	@ 0x3a
 8001f6c:	f7ff fe18 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8001f70:	2100      	movs	r1, #0
 8001f72:	20be      	movs	r0, #190	@ 0xbe
 8001f74:	f7ff fe14 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	203e      	movs	r0, #62	@ 0x3e
 8001f7c:	f7ff fe10 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8001f80:	2100      	movs	r1, #0
 8001f82:	202e      	movs	r0, #46	@ 0x2e
 8001f84:	f7ff fe0c 	bl	8001ba0 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8001f88:	2100      	movs	r1, #0
 8001f8a:	20af      	movs	r0, #175	@ 0xaf
 8001f8c:	f7ff fe08 	bl	8001ba0 <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff ff34 	bl	8001dfe <ssd1331_clear_screen>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	48000400 	.word	0x48000400

08001fa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <HAL_MspInit+0x44>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001faa:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe4 <HAL_MspInit+0x44>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <HAL_MspInit+0x44>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_MspInit+0x44>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	4a08      	ldr	r2, [pc, #32]	@ (8001fe4 <HAL_MspInit+0x44>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_MspInit+0x44>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_SPI_MspInit+0x80>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d129      	bne.n	800205e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800200a:	4b18      	ldr	r3, [pc, #96]	@ (800206c <HAL_SPI_MspInit+0x84>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200e:	4a17      	ldr	r2, [pc, #92]	@ (800206c <HAL_SPI_MspInit+0x84>)
 8002010:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002014:	6613      	str	r3, [r2, #96]	@ 0x60
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_SPI_MspInit+0x84>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_SPI_MspInit+0x84>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	4a11      	ldr	r2, [pc, #68]	@ (800206c <HAL_SPI_MspInit+0x84>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202e:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <HAL_SPI_MspInit+0x84>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 800203a:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800203e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800204c:	2305      	movs	r3, #5
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4619      	mov	r1, r3
 8002056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205a:	f000 fbe9 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	@ 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40013000 	.word	0x40013000
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <HAL_TIM_Base_MspInit+0x68>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10c      	bne.n	800209c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002082:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <HAL_TIM_Base_MspInit+0x6c>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002086:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <HAL_TIM_Base_MspInit+0x6c>)
 8002088:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800208c:	6613      	str	r3, [r2, #96]	@ 0x60
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <HAL_TIM_Base_MspInit+0x6c>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800209a:	e018      	b.n	80020ce <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a4:	d113      	bne.n	80020ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <HAL_TIM_Base_MspInit+0x6c>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	4a0c      	ldr	r2, [pc, #48]	@ (80020dc <HAL_TIM_Base_MspInit+0x6c>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_TIM_Base_MspInit+0x6c>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	201c      	movs	r0, #28
 80020c4:	f000 fb7d 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020c8:	201c      	movs	r0, #28
 80020ca:	f000 fb96 	bl	80027fa <HAL_NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40021000 	.word	0x40021000

080020e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <HAL_TIM_MspPostInit+0x68>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d11d      	bne.n	800213e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_TIM_MspPostInit+0x6c>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	4a11      	ldr	r2, [pc, #68]	@ (800214c <HAL_TIM_MspPostInit+0x6c>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210e:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <HAL_TIM_MspPostInit+0x6c>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800211a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800211e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800212c:	2301      	movs	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	4619      	mov	r1, r3
 8002136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213a:	f000 fb79 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40021000 	.word	0x40021000

08002150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b09e      	sub	sp, #120	@ 0x78
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2254      	movs	r2, #84	@ 0x54
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f005 fa5d 	bl	8007630 <memset>
  if(huart->Instance==USART2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a28      	ldr	r2, [pc, #160]	@ (800221c <HAL_UART_MspInit+0xcc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d148      	bne.n	8002212 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002180:	2302      	movs	r3, #2
 8002182:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002184:	2300      	movs	r3, #0
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4618      	mov	r0, r3
 800218e:	f001 fbad 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002198:	f7ff fcfc 	bl	8001b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800219c:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <HAL_UART_MspInit+0xd0>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <HAL_UART_MspInit+0xd0>)
 80021a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <HAL_UART_MspInit+0xd0>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <HAL_UART_MspInit+0xd0>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b8:	4a19      	ldr	r2, [pc, #100]	@ (8002220 <HAL_UART_MspInit+0xd0>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021c0:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <HAL_UART_MspInit+0xd0>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80021cc:	2304      	movs	r3, #4
 80021ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021dc:	2307      	movs	r3, #7
 80021de:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80021e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ea:	f000 fb21 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80021ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002200:	2303      	movs	r3, #3
 8002202:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002208:	4619      	mov	r1, r3
 800220a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800220e:	f000 fb0f 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3778      	adds	r7, #120	@ 0x78
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40004400 	.word	0x40004400
 8002220:	40021000 	.word	0x40021000

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002270:	f000 f988 	bl	8002584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800227c:	2002      	movs	r0, #2
 800227e:	f000 fc71 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}

08002286 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800228a:	2008      	movs	r0, #8
 800228c:	f000 fc6a 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002298:	2010      	movs	r0, #16
 800229a:	f000 fc63 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80022a6:	2040      	movs	r0, #64	@ 0x40
 80022a8:	f000 fc5c 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <TIM2_IRQHandler+0x10>)
 80022b6:	f002 fba1 	bl	80049fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200002a0 	.word	0x200002a0

080022c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return 1;
 80022c8:	2301      	movs	r3, #1
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_kill>:

int _kill(int pid, int sig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022de:	f005 fa09 	bl	80076f4 <__errno>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2216      	movs	r2, #22
 80022e6:	601a      	str	r2, [r3, #0]
  return -1;
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_exit>:

void _exit (int status)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ffe7 	bl	80022d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002306:	e7fe      	b.n	8002306 <_exit+0x12>

08002308 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
//  }
//
//  return len;
  extern UART_HandleTypeDef huart2;

  HAL_StatusTypeDef result = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	75fb      	strb	r3, [r7, #23]

  len = 1;
 8002318:	2301      	movs	r3, #1
 800231a:	607b      	str	r3, [r7, #4]

  result = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	b29a      	uxth	r2, r3
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4808      	ldr	r0, [pc, #32]	@ (8002348 <_read+0x40>)
 8002328:	f003 fc0d 	bl	8005b46 <HAL_UART_Receive>
 800232c:	4603      	mov	r3, r0
 800232e:	75fb      	strb	r3, [r7, #23]
  if (result != HAL_OK)
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <_read+0x34>
  {
	  len = EOF;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	607b      	str	r3, [r7, #4]
  }
  return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200002ec 	.word	0x200002ec

0800234c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
//  {
//    __io_putchar(*ptr++);
//  }
  extern UART_HandleTypeDef huart2;

  HAL_StatusTypeDef result = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	75fb      	strb	r3, [r7, #23]

  result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	b29a      	uxth	r2, r3
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	4809      	ldr	r0, [pc, #36]	@ (800238c <_write+0x40>)
 8002368:	f003 fb5a 	bl	8005a20 <HAL_UART_Transmit>
 800236c:	4603      	mov	r3, r0
 800236e:	75fb      	strb	r3, [r7, #23]
  if (result == HAL_ERROR || result == HAL_BUSY)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d002      	beq.n	800237c <_write+0x30>
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d101      	bne.n	8002380 <_write+0x34>
  {
	  Error_Handler();
 800237c:	f7ff fc0a 	bl	8001b94 <Error_Handler>
  }
  return len;
 8002380:	687b      	ldr	r3, [r7, #4]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200002ec 	.word	0x200002ec

08002390 <_close>:

int _close(int file)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023b8:	605a      	str	r2, [r3, #4]
  return 0;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_isatty>:

int _isatty(int file)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002400:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <_sbrk+0x5c>)
 8002402:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <_sbrk+0x60>)
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800240c:	4b13      	ldr	r3, [pc, #76]	@ (800245c <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <_sbrk+0x64>)
 8002416:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <_sbrk+0x68>)
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d207      	bcs.n	8002438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002428:	f005 f964 	bl	80076f4 <__errno>
 800242c:	4603      	mov	r3, r0
 800242e:	220c      	movs	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e009      	b.n	800244c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243e:	4b07      	ldr	r3, [pc, #28]	@ (800245c <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	4a05      	ldr	r2, [pc, #20]	@ (800245c <_sbrk+0x64>)
 8002448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20010000 	.word	0x20010000
 8002458:	00000400 	.word	0x00000400
 800245c:	20000374 	.word	0x20000374
 8002460:	200004c8 	.word	0x200004c8

08002464 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <SystemInit+0x20>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	4a05      	ldr	r2, [pc, #20]	@ (8002484 <SystemInit+0x20>)
 8002470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800248c:	f7ff ffea 	bl	8002464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002490:	480c      	ldr	r0, [pc, #48]	@ (80024c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002492:	490d      	ldr	r1, [pc, #52]	@ (80024c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002494:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <LoopForever+0xe>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002498:	e002      	b.n	80024a0 <LoopCopyDataInit>

0800249a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800249c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249e:	3304      	adds	r3, #4

080024a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a4:	d3f9      	bcc.n	800249a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a6:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024a8:	4c0a      	ldr	r4, [pc, #40]	@ (80024d4 <LoopForever+0x16>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024ac:	e001      	b.n	80024b2 <LoopFillZerobss>

080024ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b0:	3204      	adds	r2, #4

080024b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b4:	d3fb      	bcc.n	80024ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024b6:	f005 f923 	bl	8007700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ba:	f7fe ffd3 	bl	8001464 <main>

080024be <LoopForever>:

LoopForever:
    b LoopForever
 80024be:	e7fe      	b.n	80024be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80024cc:	0800c734 	.word	0x0800c734
  ldr r2, =_sbss
 80024d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80024d4:	200004c8 	.word	0x200004c8

080024d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024d8:	e7fe      	b.n	80024d8 <ADC1_IRQHandler>

080024da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e4:	2003      	movs	r0, #3
 80024e6:	f000 f961 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ea:	2000      	movs	r0, #0
 80024ec:	f000 f80e 	bl	800250c <HAL_InitTick>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	71fb      	strb	r3, [r7, #7]
 80024fa:	e001      	b.n	8002500 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024fc:	f7ff fd50 	bl	8001fa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002500:	79fb      	ldrb	r3, [r7, #7]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <HAL_InitTick+0x6c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d023      	beq.n	8002568 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <HAL_InitTick+0x70>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <HAL_InitTick+0x6c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f96d 	bl	8002816 <HAL_SYSTICK_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d809      	bhi.n	800255c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f000 f937 	bl	80027c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002554:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <HAL_InitTick+0x74>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e007      	b.n	800256c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e004      	b.n	800256c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e001      	b.n	800256c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000008 	.word	0x20000008
 800257c:	20000000 	.word	0x20000000
 8002580:	20000004 	.word	0x20000004

08002584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_IncTick+0x20>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_IncTick+0x24>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_IncTick+0x24>)
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000008 	.word	0x20000008
 80025a8:	20000378 	.word	0x20000378

080025ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return uwTick;
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_GetTick+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000378 	.word	0x20000378

080025c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff ffee 	bl	80025ac <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d005      	beq.n	80025ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_Delay+0x44>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ea:	bf00      	nop
 80025ec:	f7ff ffde 	bl	80025ac <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d8f7      	bhi.n	80025ec <HAL_Delay+0x28>
  {
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000008 	.word	0x20000008

0800260c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800261c:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263e:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60d3      	str	r3, [r2, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002658:	4b04      	ldr	r3, [pc, #16]	@ (800266c <__NVIC_GetPriorityGrouping+0x18>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0307 	and.w	r3, r3, #7
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	db0b      	blt.n	800269a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4907      	ldr	r1, [pc, #28]	@ (80026a8 <__NVIC_EnableIRQ+0x38>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2001      	movs	r0, #1
 8002692:	fa00 f202 	lsl.w	r2, r0, r2
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000e100 	.word	0xe000e100

080026ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	@ (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	@ (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	@ 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
         );
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	@ 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f7ff ff8e 	bl	80026ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff29 	bl	800260c <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff3e 	bl	8002654 <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff8e 	bl	8002700 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5d 	bl	80026ac <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff31 	bl	8002670 <__NVIC_EnableIRQ>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ffa2 	bl	8002768 <SysTick_Config>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283e:	e148      	b.n	8002ad2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 813a 	beq.w	8002acc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d005      	beq.n	8002870 <HAL_GPIO_Init+0x40>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d130      	bne.n	80028d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028a6:	2201      	movs	r2, #1
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 0201 	and.w	r2, r3, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d017      	beq.n	800290e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d123      	bne.n	8002962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	08da      	lsrs	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	6939      	ldr	r1, [r7, #16]
 800295e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0203 	and.w	r2, r3, #3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8094 	beq.w	8002acc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a4:	4b52      	ldr	r3, [pc, #328]	@ (8002af0 <HAL_GPIO_Init+0x2c0>)
 80029a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a8:	4a51      	ldr	r2, [pc, #324]	@ (8002af0 <HAL_GPIO_Init+0x2c0>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80029b0:	4b4f      	ldr	r3, [pc, #316]	@ (8002af0 <HAL_GPIO_Init+0x2c0>)
 80029b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029bc:	4a4d      	ldr	r2, [pc, #308]	@ (8002af4 <HAL_GPIO_Init+0x2c4>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029e6:	d00d      	beq.n	8002a04 <HAL_GPIO_Init+0x1d4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a43      	ldr	r2, [pc, #268]	@ (8002af8 <HAL_GPIO_Init+0x2c8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <HAL_GPIO_Init+0x1d0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a42      	ldr	r2, [pc, #264]	@ (8002afc <HAL_GPIO_Init+0x2cc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_GPIO_Init+0x1cc>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e004      	b.n	8002a06 <HAL_GPIO_Init+0x1d6>
 80029fc:	2307      	movs	r3, #7
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x1d6>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_GPIO_Init+0x1d6>
 8002a04:	2300      	movs	r3, #0
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	f002 0203 	and.w	r2, r2, #3
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	4093      	lsls	r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a16:	4937      	ldr	r1, [pc, #220]	@ (8002af4 <HAL_GPIO_Init+0x2c4>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a24:	4b36      	ldr	r3, [pc, #216]	@ (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a48:	4a2d      	ldr	r2, [pc, #180]	@ (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a72:	4a23      	ldr	r2, [pc, #140]	@ (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a78:	4b21      	ldr	r3, [pc, #132]	@ (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a9c:	4a18      	ldr	r2, [pc, #96]	@ (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002aa2:	4b17      	ldr	r3, [pc, #92]	@ (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8002b00 <HAL_GPIO_Init+0x2d0>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f aeaf 	bne.w	8002840 <HAL_GPIO_Init+0x10>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	40010400 	.word	0x40010400

08002b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e001      	b.n	8002b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b50:	e002      	b.n	8002b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b6e:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b7a:	4a05      	ldr	r2, [pc, #20]	@ (8002b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fbf0 	bl	8001368 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40010400 	.word	0x40010400

08002b94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a04      	ldr	r2, [pc, #16]	@ (8002bb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba2:	6013      	str	r3, [r2, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40007000 	.word	0x40007000

08002bb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bb8:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <HAL_PWREx_GetVoltageRange+0x18>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40007000 	.word	0x40007000

08002bd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bde:	d130      	bne.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002be0:	4b23      	ldr	r3, [pc, #140]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bec:	d038      	beq.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bee:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2232      	movs	r2, #50	@ 0x32
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	4a1b      	ldr	r2, [pc, #108]	@ (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0c9b      	lsrs	r3, r3, #18
 8002c10:	3301      	adds	r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c14:	e002      	b.n	8002c1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1c:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c28:	d102      	bne.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f2      	bne.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c30:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3c:	d110      	bne.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e00f      	b.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c42:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c4e:	d007      	beq.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c50:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c58:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40007000 	.word	0x40007000
 8002c74:	20000000 	.word	0x20000000
 8002c78:	431bde83 	.word	0x431bde83

08002c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f000 bc02 	b.w	8003494 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c90:	4b96      	ldr	r3, [pc, #600]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c9a:	4b94      	ldr	r3, [pc, #592]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80e4 	beq.w	8002e7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4c>
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	f040 808b 	bne.w	8002dd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	f040 8087 	bne.w	8002dd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc8:	4b88      	ldr	r3, [pc, #544]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x64>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e3d9      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1a      	ldr	r2, [r3, #32]
 8002ce4:	4b81      	ldr	r3, [pc, #516]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_RCC_OscConfig+0x7e>
 8002cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cf8:	e005      	b.n	8002d06 <HAL_RCC_OscConfig+0x8a>
 8002cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d223      	bcs.n	8002d52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fd8c 	bl	800382c <RCC_SetFlashLatencyFromMSIRange>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e3ba      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d1e:	4b73      	ldr	r3, [pc, #460]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a72      	ldr	r2, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d24:	f043 0308 	orr.w	r3, r3, #8
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b70      	ldr	r3, [pc, #448]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	496d      	ldr	r1, [pc, #436]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	4968      	ldr	r1, [pc, #416]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
 8002d50:	e025      	b.n	8002d9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d52:	4b66      	ldr	r3, [pc, #408]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a65      	ldr	r2, [pc, #404]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b63      	ldr	r3, [pc, #396]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4960      	ldr	r1, [pc, #384]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d70:	4b5e      	ldr	r3, [pc, #376]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	495b      	ldr	r1, [pc, #364]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fd4c 	bl	800382c <RCC_SetFlashLatencyFromMSIRange>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e37a      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d9e:	f000 fc81 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b51      	ldr	r3, [pc, #324]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	4950      	ldr	r1, [pc, #320]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a4e      	ldr	r2, [pc, #312]	@ (8002ef4 <HAL_RCC_OscConfig+0x278>)
 8002dbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8002ef8 <HAL_RCC_OscConfig+0x27c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fba2 	bl	800250c <HAL_InitTick>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d052      	beq.n	8002e78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	e35e      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d032      	beq.n	8002e44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dde:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a42      	ldr	r2, [pc, #264]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dea:	f7ff fbdf 	bl	80025ac <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002df2:	f7ff fbdb 	bl	80025ac <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e347      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e04:	4b39      	ldr	r3, [pc, #228]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e10:	4b36      	ldr	r3, [pc, #216]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a35      	ldr	r2, [pc, #212]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e16:	f043 0308 	orr.w	r3, r3, #8
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4930      	ldr	r1, [pc, #192]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	492b      	ldr	r1, [pc, #172]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
 8002e42:	e01a      	b.n	8002e7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a28      	ldr	r2, [pc, #160]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e50:	f7ff fbac 	bl	80025ac <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e58:	f7ff fba8 	bl	80025ac <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e314      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e6a:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x1dc>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d073      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_OscConfig+0x21c>
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d10e      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d063      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2f0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d15f      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e2f1      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x24c>
 8002eba:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e025      	b.n	8002f14 <HAL_RCC_OscConfig+0x298>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ed0:	d114      	bne.n	8002efc <HAL_RCC_OscConfig+0x280>
 8002ed2:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b03      	ldr	r3, [pc, #12]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a02      	ldr	r2, [pc, #8]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e013      	b.n	8002f14 <HAL_RCC_OscConfig+0x298>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	0800c294 	.word	0x0800c294
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	4ba0      	ldr	r3, [pc, #640]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a9f      	ldr	r2, [pc, #636]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b9d      	ldr	r3, [pc, #628]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a9c      	ldr	r2, [pc, #624]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7ff fb46 	bl	80025ac <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f24:	f7ff fb42 	bl	80025ac <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	@ 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e2ae      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f36:	4b92      	ldr	r3, [pc, #584]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x2a8>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7ff fb32 	bl	80025ac <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7ff fb2e 	bl	80025ac <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	@ 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e29a      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5e:	4b88      	ldr	r3, [pc, #544]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x2d0>
 8002f6a:	e000      	b.n	8002f6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d060      	beq.n	800303c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_OscConfig+0x310>
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d119      	bne.n	8002fba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d116      	bne.n	8002fba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f8c:	4b7c      	ldr	r3, [pc, #496]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x328>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e277      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa4:	4b76      	ldr	r3, [pc, #472]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	4973      	ldr	r1, [pc, #460]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb8:	e040      	b.n	800303c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d023      	beq.n	800300a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7ff faed 	bl	80025ac <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7ff fae9 	bl	80025ac <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e255      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe8:	4b65      	ldr	r3, [pc, #404]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b62      	ldr	r3, [pc, #392]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	495f      	ldr	r1, [pc, #380]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
 8003008:	e018      	b.n	800303c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300a:	4b5d      	ldr	r3, [pc, #372]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a5c      	ldr	r2, [pc, #368]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8003010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7ff fac9 	bl	80025ac <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301e:	f7ff fac5 	bl	80025ac <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e231      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003030:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d03c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01c      	beq.n	800308a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003050:	4b4b      	ldr	r3, [pc, #300]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8003052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003056:	4a4a      	ldr	r2, [pc, #296]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7ff faa4 	bl	80025ac <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003068:	f7ff faa0 	bl	80025ac <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e20c      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800307a:	4b41      	ldr	r3, [pc, #260]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 800307c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ef      	beq.n	8003068 <HAL_RCC_OscConfig+0x3ec>
 8003088:	e01b      	b.n	80030c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308a:	4b3d      	ldr	r3, [pc, #244]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 800308c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003090:	4a3b      	ldr	r2, [pc, #236]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7ff fa87 	bl	80025ac <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a2:	f7ff fa83 	bl	80025ac <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1ef      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b4:	4b32      	ldr	r3, [pc, #200]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1ef      	bne.n	80030a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80a6 	beq.w	800321c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b27      	ldr	r3, [pc, #156]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	4a26      	ldr	r2, [pc, #152]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ec:	4b24      	ldr	r3, [pc, #144]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f8:	2301      	movs	r3, #1
 80030fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fc:	4b21      	ldr	r3, [pc, #132]	@ (8003184 <HAL_RCC_OscConfig+0x508>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d118      	bne.n	800313a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003108:	4b1e      	ldr	r3, [pc, #120]	@ (8003184 <HAL_RCC_OscConfig+0x508>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1d      	ldr	r2, [pc, #116]	@ (8003184 <HAL_RCC_OscConfig+0x508>)
 800310e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003112:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003114:	f7ff fa4a 	bl	80025ac <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311c:	f7ff fa46 	bl	80025ac <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e1b2      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312e:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <HAL_RCC_OscConfig+0x508>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d108      	bne.n	8003154 <HAL_RCC_OscConfig+0x4d8>
 8003142:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003148:	4a0d      	ldr	r2, [pc, #52]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003152:	e029      	b.n	80031a8 <HAL_RCC_OscConfig+0x52c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b05      	cmp	r3, #5
 800315a:	d115      	bne.n	8003188 <HAL_RCC_OscConfig+0x50c>
 800315c:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003162:	4a07      	ldr	r2, [pc, #28]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800316c:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003172:	4a03      	ldr	r2, [pc, #12]	@ (8003180 <HAL_RCC_OscConfig+0x504>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800317c:	e014      	b.n	80031a8 <HAL_RCC_OscConfig+0x52c>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	40007000 	.word	0x40007000
 8003188:	4b9a      	ldr	r3, [pc, #616]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	4a99      	ldr	r2, [pc, #612]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003198:	4b96      	ldr	r3, [pc, #600]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319e:	4a95      	ldr	r2, [pc, #596]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80031a0:	f023 0304 	bic.w	r3, r3, #4
 80031a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d016      	beq.n	80031de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7ff f9fc 	bl	80025ac <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7ff f9f8 	bl	80025ac <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e162      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ce:	4b89      	ldr	r3, [pc, #548]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ed      	beq.n	80031b8 <HAL_RCC_OscConfig+0x53c>
 80031dc:	e015      	b.n	800320a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7ff f9e5 	bl	80025ac <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7ff f9e1 	bl	80025ac <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e14b      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031fc:	4b7d      	ldr	r3, [pc, #500]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ed      	bne.n	80031e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320a:	7ffb      	ldrb	r3, [r7, #31]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d105      	bne.n	800321c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003210:	4b78      	ldr	r3, [pc, #480]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	4a77      	ldr	r2, [pc, #476]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800321a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d03c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01c      	beq.n	800326a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003230:	4b70      	ldr	r3, [pc, #448]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003236:	4a6f      	ldr	r2, [pc, #444]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7ff f9b4 	bl	80025ac <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003248:	f7ff f9b0 	bl	80025ac <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e11c      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800325a:	4b66      	ldr	r3, [pc, #408]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 800325c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ef      	beq.n	8003248 <HAL_RCC_OscConfig+0x5cc>
 8003268:	e01b      	b.n	80032a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800326a:	4b62      	ldr	r3, [pc, #392]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 800326c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003270:	4a60      	ldr	r2, [pc, #384]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7ff f997 	bl	80025ac <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003282:	f7ff f993 	bl	80025ac <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0ff      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003294:	4b57      	ldr	r3, [pc, #348]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003296:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1ef      	bne.n	8003282 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80f3 	beq.w	8003492 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	f040 80c9 	bne.w	8003448 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032b6:	4b4f      	ldr	r3, [pc, #316]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 0203 	and.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d12c      	bne.n	8003324 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	3b01      	subs	r3, #1
 80032d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d123      	bne.n	8003324 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d11b      	bne.n	8003324 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d113      	bne.n	8003324 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	3b01      	subs	r3, #1
 800330a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d109      	bne.n	8003324 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d06b      	beq.n	80033fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d062      	beq.n	80033f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800332a:	4b32      	ldr	r3, [pc, #200]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0ac      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800333a:	4b2e      	ldr	r3, [pc, #184]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2d      	ldr	r2, [pc, #180]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003340:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003344:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003346:	f7ff f931 	bl	80025ac <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7ff f92d 	bl	80025ac <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e099      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003360:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800336c:	4b21      	ldr	r3, [pc, #132]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	4b21      	ldr	r3, [pc, #132]	@ (80033f8 <HAL_RCC_OscConfig+0x77c>)
 8003372:	4013      	ands	r3, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800337c:	3a01      	subs	r2, #1
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	4311      	orrs	r1, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003386:	0212      	lsls	r2, r2, #8
 8003388:	4311      	orrs	r1, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800338e:	0852      	lsrs	r2, r2, #1
 8003390:	3a01      	subs	r2, #1
 8003392:	0552      	lsls	r2, r2, #21
 8003394:	4311      	orrs	r1, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800339a:	0852      	lsrs	r2, r2, #1
 800339c:	3a01      	subs	r2, #1
 800339e:	0652      	lsls	r2, r2, #25
 80033a0:	4311      	orrs	r1, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033a6:	06d2      	lsls	r2, r2, #27
 80033a8:	430a      	orrs	r2, r1
 80033aa:	4912      	ldr	r1, [pc, #72]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033b0:	4b10      	ldr	r3, [pc, #64]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0f      	ldr	r2, [pc, #60]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80033b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033bc:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4a0c      	ldr	r2, [pc, #48]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80033c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033c8:	f7ff f8f0 	bl	80025ac <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7ff f8ec 	bl	80025ac <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e058      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <HAL_RCC_OscConfig+0x778>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ee:	e050      	b.n	8003492 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e04f      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
 80033f4:	40021000 	.word	0x40021000
 80033f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fc:	4b27      	ldr	r3, [pc, #156]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d144      	bne.n	8003492 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003408:	4b24      	ldr	r3, [pc, #144]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a23      	ldr	r2, [pc, #140]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 800340e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003412:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003414:	4b21      	ldr	r3, [pc, #132]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a20      	ldr	r2, [pc, #128]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 800341a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800341e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003420:	f7ff f8c4 	bl	80025ac <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003428:	f7ff f8c0 	bl	80025ac <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e02c      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343a:	4b18      	ldr	r3, [pc, #96]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x7ac>
 8003446:	e024      	b.n	8003492 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b0c      	cmp	r3, #12
 800344c:	d01f      	beq.n	800348e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b13      	ldr	r3, [pc, #76]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a12      	ldr	r2, [pc, #72]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 8003454:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7ff f8a7 	bl	80025ac <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7ff f8a3 	bl	80025ac <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e00f      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003474:	4b09      	ldr	r3, [pc, #36]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003480:	4b06      	ldr	r3, [pc, #24]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	4905      	ldr	r1, [pc, #20]	@ (800349c <HAL_RCC_OscConfig+0x820>)
 8003486:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <HAL_RCC_OscConfig+0x824>)
 8003488:	4013      	ands	r3, r2
 800348a:	60cb      	str	r3, [r1, #12]
 800348c:	e001      	b.n	8003492 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	feeefffc 	.word	0xfeeefffc

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0e7      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b75      	ldr	r3, [pc, #468]	@ (8003690 <HAL_RCC_ClockConfig+0x1ec>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d910      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b72      	ldr	r3, [pc, #456]	@ (8003690 <HAL_RCC_ClockConfig+0x1ec>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 0207 	bic.w	r2, r3, #7
 80034ce:	4970      	ldr	r1, [pc, #448]	@ (8003690 <HAL_RCC_ClockConfig+0x1ec>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003690 <HAL_RCC_ClockConfig+0x1ec>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0cf      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4b66      	ldr	r3, [pc, #408]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003500:	429a      	cmp	r2, r3
 8003502:	d908      	bls.n	8003516 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b63      	ldr	r3, [pc, #396]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4960      	ldr	r1, [pc, #384]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d04c      	beq.n	80035bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b03      	cmp	r3, #3
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352a:	4b5a      	ldr	r3, [pc, #360]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d121      	bne.n	800357a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0a6      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003542:	4b54      	ldr	r3, [pc, #336]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d115      	bne.n	800357a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e09a      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800355a:	4b4e      	ldr	r3, [pc, #312]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e08e      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800356a:	4b4a      	ldr	r3, [pc, #296]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e086      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b46      	ldr	r3, [pc, #280]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4943      	ldr	r1, [pc, #268]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358c:	f7ff f80e 	bl	80025ac <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7ff f80a 	bl	80025ac <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e06e      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d208      	bcs.n	80035ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	492b      	ldr	r1, [pc, #172]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ea:	4b29      	ldr	r3, [pc, #164]	@ (8003690 <HAL_RCC_ClockConfig+0x1ec>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d210      	bcs.n	800361a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f8:	4b25      	ldr	r3, [pc, #148]	@ (8003690 <HAL_RCC_ClockConfig+0x1ec>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 0207 	bic.w	r2, r3, #7
 8003600:	4923      	ldr	r1, [pc, #140]	@ (8003690 <HAL_RCC_ClockConfig+0x1ec>)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003608:	4b21      	ldr	r3, [pc, #132]	@ (8003690 <HAL_RCC_ClockConfig+0x1ec>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d001      	beq.n	800361a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e036      	b.n	8003688 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003626:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4918      	ldr	r1, [pc, #96]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4910      	ldr	r1, [pc, #64]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003658:	f000 f824 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	490b      	ldr	r1, [pc, #44]	@ (8003698 <HAL_RCC_ClockConfig+0x1f4>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
 8003674:	4a09      	ldr	r2, [pc, #36]	@ (800369c <HAL_RCC_ClockConfig+0x1f8>)
 8003676:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003678:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <HAL_RCC_ClockConfig+0x1fc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fe ff45 	bl	800250c <HAL_InitTick>
 8003682:	4603      	mov	r3, r0
 8003684:	72fb      	strb	r3, [r7, #11]

  return status;
 8003686:	7afb      	ldrb	r3, [r7, #11]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40022000 	.word	0x40022000
 8003694:	40021000 	.word	0x40021000
 8003698:	0800c294 	.word	0x0800c294
 800369c:	20000000 	.word	0x20000000
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b089      	sub	sp, #36	@ 0x24
 80036a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b2:	4b3e      	ldr	r3, [pc, #248]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x108>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036bc:	4b3b      	ldr	r3, [pc, #236]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x108>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x34>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d121      	bne.n	8003716 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d11e      	bne.n	8003716 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036d8:	4b34      	ldr	r3, [pc, #208]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x108>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036e4:	4b31      	ldr	r3, [pc, #196]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x108>)
 80036e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e005      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036f4:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x108>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003700:	4a2b      	ldr	r2, [pc, #172]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10d      	bne.n	800372c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003714:	e00a      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d102      	bne.n	8003722 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800371c:	4b25      	ldr	r3, [pc, #148]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	e004      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d101      	bne.n	800372c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003728:	4b23      	ldr	r3, [pc, #140]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800372a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d134      	bne.n	800379c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d003      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0xa6>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d003      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0xac>
 8003748:	e005      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800374a:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800374c:	617b      	str	r3, [r7, #20]
      break;
 800374e:	e005      	b.n	800375c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003750:	4b19      	ldr	r3, [pc, #100]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003752:	617b      	str	r3, [r7, #20]
      break;
 8003754:	e002      	b.n	800375c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	617b      	str	r3, [r7, #20]
      break;
 800375a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800375c:	4b13      	ldr	r3, [pc, #76]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x108>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	3301      	adds	r3, #1
 8003768:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800376a:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x108>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	fb03 f202 	mul.w	r2, r3, r2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003782:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	0e5b      	lsrs	r3, r3, #25
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	3301      	adds	r3, #1
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	fbb2 f3f3 	udiv	r3, r2, r3
 800379a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800379c:	69bb      	ldr	r3, [r7, #24]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3724      	adds	r7, #36	@ 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	0800c2ac 	.word	0x0800c2ac
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	007a1200 	.word	0x007a1200

080037bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000000 	.word	0x20000000

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037d8:	f7ff fff0 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4904      	ldr	r1, [pc, #16]	@ (80037fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000
 80037fc:	0800c2a4 	.word	0x0800c2a4

08003800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003804:	f7ff ffda 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	0adb      	lsrs	r3, r3, #11
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4904      	ldr	r1, [pc, #16]	@ (8003828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	0800c2a4 	.word	0x0800c2a4

0800382c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003838:	4b2a      	ldr	r3, [pc, #168]	@ (80038e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003844:	f7ff f9b6 	bl	8002bb4 <HAL_PWREx_GetVoltageRange>
 8003848:	6178      	str	r0, [r7, #20]
 800384a:	e014      	b.n	8003876 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800384c:	4b25      	ldr	r3, [pc, #148]	@ (80038e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003850:	4a24      	ldr	r2, [pc, #144]	@ (80038e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003856:	6593      	str	r3, [r2, #88]	@ 0x58
 8003858:	4b22      	ldr	r3, [pc, #136]	@ (80038e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003864:	f7ff f9a6 	bl	8002bb4 <HAL_PWREx_GetVoltageRange>
 8003868:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800386a:	4b1e      	ldr	r3, [pc, #120]	@ (80038e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	4a1d      	ldr	r2, [pc, #116]	@ (80038e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003870:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003874:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800387c:	d10b      	bne.n	8003896 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b80      	cmp	r3, #128	@ 0x80
 8003882:	d919      	bls.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2ba0      	cmp	r3, #160	@ 0xa0
 8003888:	d902      	bls.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800388a:	2302      	movs	r3, #2
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	e013      	b.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003890:	2301      	movs	r3, #1
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	e010      	b.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b80      	cmp	r3, #128	@ 0x80
 800389a:	d902      	bls.n	80038a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800389c:	2303      	movs	r3, #3
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	e00a      	b.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b80      	cmp	r3, #128	@ 0x80
 80038a6:	d102      	bne.n	80038ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038a8:	2302      	movs	r3, #2
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	e004      	b.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b70      	cmp	r3, #112	@ 0x70
 80038b2:	d101      	bne.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038b4:	2301      	movs	r3, #1
 80038b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038b8:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 0207 	bic.w	r2, r3, #7
 80038c0:	4909      	ldr	r1, [pc, #36]	@ (80038e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038c8:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d001      	beq.n	80038da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40022000 	.word	0x40022000

080038ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038f4:	2300      	movs	r3, #0
 80038f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f8:	2300      	movs	r3, #0
 80038fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003904:	2b00      	cmp	r3, #0
 8003906:	d031      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003910:	d01a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003912:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003916:	d814      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800391c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003920:	d10f      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003922:	4b5d      	ldr	r3, [pc, #372]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4a5c      	ldr	r2, [pc, #368]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800392e:	e00c      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f9de 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	74fb      	strb	r3, [r7, #19]
      break;
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003950:	4b51      	ldr	r3, [pc, #324]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003956:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395e:	494e      	ldr	r1, [pc, #312]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003966:	e001      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 809e 	beq.w	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800397e:	4b46      	ldr	r3, [pc, #280]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800398e:	2300      	movs	r3, #0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003994:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	4a3f      	ldr	r2, [pc, #252]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800399e:	6593      	str	r3, [r2, #88]	@ 0x58
 80039a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ac:	2301      	movs	r3, #1
 80039ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b0:	4b3a      	ldr	r3, [pc, #232]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a39      	ldr	r2, [pc, #228]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039bc:	f7fe fdf6 	bl	80025ac <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039c2:	e009      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c4:	f7fe fdf2 	bl	80025ac <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d902      	bls.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	74fb      	strb	r3, [r7, #19]
        break;
 80039d6:	e005      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039d8:	4b30      	ldr	r3, [pc, #192]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ef      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d15a      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01e      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d019      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a06:	4b24      	ldr	r3, [pc, #144]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a10:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a12:	4b21      	ldr	r3, [pc, #132]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	4a1f      	ldr	r2, [pc, #124]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a22:	4b1d      	ldr	r3, [pc, #116]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a28:	4a1b      	ldr	r2, [pc, #108]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a32:	4a19      	ldr	r2, [pc, #100]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe fdb2 	bl	80025ac <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4c:	f7fe fdae 	bl	80025ac <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d902      	bls.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	74fb      	strb	r3, [r7, #19]
            break;
 8003a62:	e006      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0ec      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10b      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a78:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a86:	4904      	ldr	r1, [pc, #16]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a8e:	e009      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	74bb      	strb	r3, [r7, #18]
 8003a94:	e006      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa4:	7c7b      	ldrb	r3, [r7, #17]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4b8a      	ldr	r3, [pc, #552]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aae:	4a89      	ldr	r2, [pc, #548]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ac2:	4b84      	ldr	r3, [pc, #528]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac8:	f023 0203 	bic.w	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	4980      	ldr	r1, [pc, #512]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae4:	4b7b      	ldr	r3, [pc, #492]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	f023 020c 	bic.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	4978      	ldr	r1, [pc, #480]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b06:	4b73      	ldr	r3, [pc, #460]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b14:	496f      	ldr	r1, [pc, #444]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b28:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b36:	4967      	ldr	r1, [pc, #412]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b4a:	4b62      	ldr	r3, [pc, #392]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	495e      	ldr	r1, [pc, #376]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b6c:	4b59      	ldr	r3, [pc, #356]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7a:	4956      	ldr	r1, [pc, #344]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b8e:	4b51      	ldr	r3, [pc, #324]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	494d      	ldr	r1, [pc, #308]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d028      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb0:	4b48      	ldr	r3, [pc, #288]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	4945      	ldr	r1, [pc, #276]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bce:	d106      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd0:	4b40      	ldr	r3, [pc, #256]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bda:	60d3      	str	r3, [r2, #12]
 8003bdc:	e011      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003be6:	d10c      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f882 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c0e:	4b31      	ldr	r3, [pc, #196]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c14:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1c:	492d      	ldr	r1, [pc, #180]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c2e:	4b29      	ldr	r3, [pc, #164]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4a28      	ldr	r2, [pc, #160]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c38:	60d3      	str	r3, [r2, #12]
 8003c3a:	e011      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f853 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01c      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c6c:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c72:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7a:	4916      	ldr	r1, [pc, #88]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	2102      	movs	r1, #2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f830 	bl	8003cf8 <RCCEx_PLLSAI1_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cb2:	4b08      	ldr	r3, [pc, #32]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc0:	4904      	ldr	r1, [pc, #16]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000

08003cd8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003cdc:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	@ (8003cf4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ce2:	f043 0304 	orr.w	r3, r3, #4
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d06:	4b74      	ldr	r3, [pc, #464]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d018      	beq.n	8003d44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d12:	4b71      	ldr	r3, [pc, #452]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0203 	and.w	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d10d      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
       ||
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d2a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
       ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d047      	beq.n	8003dce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
 8003d42:	e044      	b.n	8003dce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d018      	beq.n	8003d7e <RCCEx_PLLSAI1_Config+0x86>
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d825      	bhi.n	8003d9c <RCCEx_PLLSAI1_Config+0xa4>
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d002      	beq.n	8003d5a <RCCEx_PLLSAI1_Config+0x62>
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d009      	beq.n	8003d6c <RCCEx_PLLSAI1_Config+0x74>
 8003d58:	e020      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11d      	bne.n	8003da2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6a:	e01a      	b.n	8003da2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d116      	bne.n	8003da6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7c:	e013      	b.n	8003da6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d7e:	4b56      	ldr	r3, [pc, #344]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10f      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d8a:	4b53      	ldr	r3, [pc, #332]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d9a:	e006      	b.n	8003daa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003da0:	e004      	b.n	8003dac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003da2:	bf00      	nop
 8003da4:	e002      	b.n	8003dac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003da6:	bf00      	nop
 8003da8:	e000      	b.n	8003dac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003daa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003db2:	4b49      	ldr	r3, [pc, #292]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	4943      	ldr	r1, [pc, #268]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d17c      	bne.n	8003ece <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dd4:	4b40      	ldr	r3, [pc, #256]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de0:	f7fe fbe4 	bl	80025ac <HAL_GetTick>
 8003de4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003de6:	e009      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003de8:	f7fe fbe0 	bl	80025ac <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d902      	bls.n	8003dfc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	73fb      	strb	r3, [r7, #15]
        break;
 8003dfa:	e005      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dfc:	4b36      	ldr	r3, [pc, #216]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ef      	bne.n	8003de8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d15f      	bne.n	8003ece <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d110      	bne.n	8003e36 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e14:	4b30      	ldr	r3, [pc, #192]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003e1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6892      	ldr	r2, [r2, #8]
 8003e24:	0211      	lsls	r1, r2, #8
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68d2      	ldr	r2, [r2, #12]
 8003e2a:	06d2      	lsls	r2, r2, #27
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	492a      	ldr	r1, [pc, #168]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	610b      	str	r3, [r1, #16]
 8003e34:	e027      	b.n	8003e86 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d112      	bne.n	8003e62 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e3c:	4b26      	ldr	r3, [pc, #152]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003e44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6892      	ldr	r2, [r2, #8]
 8003e4c:	0211      	lsls	r1, r2, #8
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6912      	ldr	r2, [r2, #16]
 8003e52:	0852      	lsrs	r2, r2, #1
 8003e54:	3a01      	subs	r2, #1
 8003e56:	0552      	lsls	r2, r2, #21
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	491f      	ldr	r1, [pc, #124]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	610b      	str	r3, [r1, #16]
 8003e60:	e011      	b.n	8003e86 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e62:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6892      	ldr	r2, [r2, #8]
 8003e72:	0211      	lsls	r1, r2, #8
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6952      	ldr	r2, [r2, #20]
 8003e78:	0852      	lsrs	r2, r2, #1
 8003e7a:	3a01      	subs	r2, #1
 8003e7c:	0652      	lsls	r2, r2, #25
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	4915      	ldr	r1, [pc, #84]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e86:	4b14      	ldr	r3, [pc, #80]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a13      	ldr	r2, [pc, #76]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fe fb8b 	bl	80025ac <HAL_GetTick>
 8003e96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e98:	e009      	b.n	8003eae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e9a:	f7fe fb87 	bl	80025ac <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d902      	bls.n	8003eae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	73fb      	strb	r3, [r7, #15]
          break;
 8003eac:	e005      	b.n	8003eba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eae:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ef      	beq.n	8003e9a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4903      	ldr	r1, [pc, #12]	@ (8003ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000

08003edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e095      	b.n	800401a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d108      	bne.n	8003f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003efe:	d009      	beq.n	8003f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	61da      	str	r2, [r3, #28]
 8003f06:	e005      	b.n	8003f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fe f85a 	bl	8001fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f54:	d902      	bls.n	8003f5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e002      	b.n	8003f62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f6a:	d007      	beq.n	8003f7c <HAL_SPI_Init+0xa0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f74:	d002      	beq.n	8003f7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fbe:	ea42 0103 	orr.w	r1, r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	0c1b      	lsrs	r3, r3, #16
 8003fd8:	f003 0204 	and.w	r2, r3, #4
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ff8:	ea42 0103 	orr.w	r1, r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b088      	sub	sp, #32
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_SPI_Transmit+0x22>
 8004040:	2302      	movs	r3, #2
 8004042:	e158      	b.n	80042f6 <HAL_SPI_Transmit+0x2d4>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800404c:	f7fe faae 	bl	80025ac <HAL_GetTick>
 8004050:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004062:	2302      	movs	r3, #2
 8004064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004066:	e13d      	b.n	80042e4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_SPI_Transmit+0x52>
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004078:	e134      	b.n	80042e4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2203      	movs	r2, #3
 800407e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c4:	d10f      	bne.n	80040e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f0:	2b40      	cmp	r3, #64	@ 0x40
 80040f2:	d007      	beq.n	8004104 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004102:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800410c:	d94b      	bls.n	80041a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_SPI_Transmit+0xfa>
 8004116:	8afb      	ldrh	r3, [r7, #22]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d13e      	bne.n	800419a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	881a      	ldrh	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004140:	e02b      	b.n	800419a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b02      	cmp	r3, #2
 800414e:	d112      	bne.n	8004176 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	881a      	ldrh	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	1c9a      	adds	r2, r3, #2
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004174:	e011      	b.n	800419a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004176:	f7fe fa19 	bl	80025ac <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d803      	bhi.n	800418e <HAL_SPI_Transmit+0x16c>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d102      	bne.n	8004194 <HAL_SPI_Transmit+0x172>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004198:	e0a4      	b.n	80042e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ce      	bne.n	8004142 <HAL_SPI_Transmit+0x120>
 80041a4:	e07c      	b.n	80042a0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_SPI_Transmit+0x192>
 80041ae:	8afb      	ldrh	r3, [r7, #22]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d170      	bne.n	8004296 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d912      	bls.n	80041e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c2:	881a      	ldrh	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b02      	subs	r3, #2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041e2:	e058      	b.n	8004296 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	7812      	ldrb	r2, [r2, #0]
 80041f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800420a:	e044      	b.n	8004296 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d12b      	bne.n	8004272 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d912      	bls.n	800424a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	881a      	ldrh	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	1c9a      	adds	r2, r3, #2
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b02      	subs	r3, #2
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004248:	e025      	b.n	8004296 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004270:	e011      	b.n	8004296 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004272:	f7fe f99b 	bl	80025ac <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d803      	bhi.n	800428a <HAL_SPI_Transmit+0x268>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d102      	bne.n	8004290 <HAL_SPI_Transmit+0x26e>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004294:	e026      	b.n	80042e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1b5      	bne.n	800420c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f949 	bl	800453c <SPI_EndRxTxTransaction>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e000      	b.n	80042e4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80042e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80042f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004310:	f7fe f94c 	bl	80025ac <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	4413      	add	r3, r2
 800431e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004320:	f7fe f944 	bl	80025ac <HAL_GetTick>
 8004324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004326:	4b39      	ldr	r3, [pc, #228]	@ (800440c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	015b      	lsls	r3, r3, #5
 800432c:	0d1b      	lsrs	r3, r3, #20
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	fb02 f303 	mul.w	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004336:	e054      	b.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d050      	beq.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004340:	f7fe f934 	bl	80025ac <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	429a      	cmp	r2, r3
 800434e:	d902      	bls.n	8004356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d13d      	bne.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800436e:	d111      	bne.n	8004394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004378:	d004      	beq.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004382:	d107      	bne.n	8004394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439c:	d10f      	bne.n	80043be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e017      	b.n	8004402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3b01      	subs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4013      	ands	r3, r2
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	bf0c      	ite	eq
 80043f2:	2301      	moveq	r3, #1
 80043f4:	2300      	movne	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	461a      	mov	r2, r3
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d19b      	bne.n	8004338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000000 	.word	0x20000000

08004410 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	@ 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004422:	f7fe f8c3 	bl	80025ac <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	4413      	add	r3, r2
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004432:	f7fe f8bb 	bl	80025ac <HAL_GetTick>
 8004436:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004440:	4b3d      	ldr	r3, [pc, #244]	@ (8004538 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00da      	lsls	r2, r3, #3
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	0d1b      	lsrs	r3, r3, #20
 8004450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004458:	e060      	b.n	800451c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004460:	d107      	bne.n	8004472 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004470:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d050      	beq.n	800451c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800447a:	f7fe f897 	bl	80025ac <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004486:	429a      	cmp	r2, r3
 8004488:	d902      	bls.n	8004490 <SPI_WaitFifoStateUntilTimeout+0x80>
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	2b00      	cmp	r3, #0
 800448e:	d13d      	bne.n	800450c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800449e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044a8:	d111      	bne.n	80044ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b2:	d004      	beq.n	80044be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044bc:	d107      	bne.n	80044ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d6:	d10f      	bne.n	80044f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e010      	b.n	800452e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	3b01      	subs	r3, #1
 800451a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	d196      	bne.n	800445a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3728      	adds	r7, #40	@ 0x28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2200      	movs	r2, #0
 8004550:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff ff5b 	bl	8004410 <SPI_WaitFifoStateUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e027      	b.n	80045c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2200      	movs	r2, #0
 8004578:	2180      	movs	r1, #128	@ 0x80
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fec0 	bl	8004300 <SPI_WaitFlagStateUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e014      	b.n	80045c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff ff34 	bl	8004410 <SPI_WaitFifoStateUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e000      	b.n	80045c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e049      	b.n	800466e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fd fd3e 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f000 fd1e 	bl	8005048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e03b      	b.n	8004708 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a19      	ldr	r2, [pc, #100]	@ (8004714 <HAL_TIM_Base_Start_IT+0x9c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIM_Base_Start_IT+0x4e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ba:	d004      	beq.n	80046c6 <HAL_TIM_Base_Start_IT+0x4e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a15      	ldr	r2, [pc, #84]	@ (8004718 <HAL_TIM_Base_Start_IT+0xa0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d115      	bne.n	80046f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	4b13      	ldr	r3, [pc, #76]	@ (800471c <HAL_TIM_Base_Start_IT+0xa4>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b06      	cmp	r3, #6
 80046d6:	d015      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x8c>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046de:	d011      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f0:	e008      	b.n	8004704 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e000      	b.n	8004706 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40014000 	.word	0x40014000
 800471c:	00010007 	.word	0x00010007

08004720 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10f      	bne.n	8004768 <HAL_TIM_Base_Stop_IT+0x48>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a1a      	ldr	r2, [r3, #32]
 800474e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_TIM_Base_Stop_IT+0x48>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e049      	b.n	8004824 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f841 	bl	800482c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f000 fc43 	bl	8005048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <HAL_TIM_PWM_Start+0x24>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	bf14      	ite	ne
 800485c:	2301      	movne	r3, #1
 800485e:	2300      	moveq	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e03c      	b.n	80048de <HAL_TIM_PWM_Start+0x9e>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b04      	cmp	r3, #4
 8004868:	d109      	bne.n	800487e <HAL_TIM_PWM_Start+0x3e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	bf14      	ite	ne
 8004876:	2301      	movne	r3, #1
 8004878:	2300      	moveq	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e02f      	b.n	80048de <HAL_TIM_PWM_Start+0x9e>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d109      	bne.n	8004898 <HAL_TIM_PWM_Start+0x58>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf14      	ite	ne
 8004890:	2301      	movne	r3, #1
 8004892:	2300      	moveq	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e022      	b.n	80048de <HAL_TIM_PWM_Start+0x9e>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b0c      	cmp	r3, #12
 800489c:	d109      	bne.n	80048b2 <HAL_TIM_PWM_Start+0x72>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e015      	b.n	80048de <HAL_TIM_PWM_Start+0x9e>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d109      	bne.n	80048cc <HAL_TIM_PWM_Start+0x8c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e008      	b.n	80048de <HAL_TIM_PWM_Start+0x9e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e07e      	b.n	80049e4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_PWM_Start+0xb6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f4:	e023      	b.n	800493e <HAL_TIM_PWM_Start+0xfe>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0xc6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004904:	e01b      	b.n	800493e <HAL_TIM_PWM_Start+0xfe>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0xd6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004914:	e013      	b.n	800493e <HAL_TIM_PWM_Start+0xfe>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0xe6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004924:	e00b      	b.n	800493e <HAL_TIM_PWM_Start+0xfe>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b10      	cmp	r3, #16
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0xf6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004934:	e003      	b.n	800493e <HAL_TIM_PWM_Start+0xfe>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2201      	movs	r2, #1
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fefa 	bl	8005740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a26      	ldr	r2, [pc, #152]	@ (80049ec <HAL_TIM_PWM_Start+0x1ac>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_TIM_PWM_Start+0x12a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a25      	ldr	r2, [pc, #148]	@ (80049f0 <HAL_TIM_PWM_Start+0x1b0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_TIM_PWM_Start+0x12a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a23      	ldr	r2, [pc, #140]	@ (80049f4 <HAL_TIM_PWM_Start+0x1b4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_TIM_PWM_Start+0x12e>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_TIM_PWM_Start+0x130>
 800496e:	2300      	movs	r3, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004982:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a18      	ldr	r2, [pc, #96]	@ (80049ec <HAL_TIM_PWM_Start+0x1ac>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x162>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004996:	d004      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x162>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a14      	ldr	r2, [pc, #80]	@ (80049f0 <HAL_TIM_PWM_Start+0x1b0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d115      	bne.n	80049ce <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <HAL_TIM_PWM_Start+0x1b8>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b06      	cmp	r3, #6
 80049b2:	d015      	beq.n	80049e0 <HAL_TIM_PWM_Start+0x1a0>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ba:	d011      	beq.n	80049e0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049cc:	e008      	b.n	80049e0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e000      	b.n	80049e2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40014400 	.word	0x40014400
 80049f8:	00010007 	.word	0x00010007

080049fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0202 	mvn.w	r2, #2
 8004a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fae3 	bl	800500a <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fad5 	bl	8004ff6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fae6 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0204 	mvn.w	r2, #4
 8004a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fab9 	bl	800500a <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 faab 	bl	8004ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fabc 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0208 	mvn.w	r2, #8
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa8f 	bl	800500a <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa81 	bl	8004ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa92 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d122      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d11b      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0210 	mvn.w	r2, #16
 8004b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2208      	movs	r2, #8
 8004b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa65 	bl	800500a <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fa57 	bl	8004ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fa68 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d10e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d107      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0201 	mvn.w	r2, #1
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fc08 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8a:	2b80      	cmp	r3, #128	@ 0x80
 8004b8c:	d10e      	bne.n	8004bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b98:	2b80      	cmp	r3, #128	@ 0x80
 8004b9a:	d107      	bne.n	8004bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fed8 	bl	800595c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bba:	d10e      	bne.n	8004bda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fecb 	bl	8005970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be4:	2b40      	cmp	r3, #64	@ 0x40
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf2:	2b40      	cmp	r3, #64	@ 0x40
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fa16 	bl	8005032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d10e      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d107      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f06f 0220 	mvn.w	r2, #32
 8004c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fe8b 	bl	8005948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e0ff      	b.n	8004e5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b14      	cmp	r3, #20
 8004c66:	f200 80f0 	bhi.w	8004e4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004e4b 	.word	0x08004e4b
 8004c78:	08004e4b 	.word	0x08004e4b
 8004c7c:	08004e4b 	.word	0x08004e4b
 8004c80:	08004d05 	.word	0x08004d05
 8004c84:	08004e4b 	.word	0x08004e4b
 8004c88:	08004e4b 	.word	0x08004e4b
 8004c8c:	08004e4b 	.word	0x08004e4b
 8004c90:	08004d47 	.word	0x08004d47
 8004c94:	08004e4b 	.word	0x08004e4b
 8004c98:	08004e4b 	.word	0x08004e4b
 8004c9c:	08004e4b 	.word	0x08004e4b
 8004ca0:	08004d87 	.word	0x08004d87
 8004ca4:	08004e4b 	.word	0x08004e4b
 8004ca8:	08004e4b 	.word	0x08004e4b
 8004cac:	08004e4b 	.word	0x08004e4b
 8004cb0:	08004dc9 	.word	0x08004dc9
 8004cb4:	08004e4b 	.word	0x08004e4b
 8004cb8:	08004e4b 	.word	0x08004e4b
 8004cbc:	08004e4b 	.word	0x08004e4b
 8004cc0:	08004e09 	.word	0x08004e09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fa20 	bl	8005110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0208 	orr.w	r2, r2, #8
 8004cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0204 	bic.w	r2, r2, #4
 8004cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	619a      	str	r2, [r3, #24]
      break;
 8004d02:	e0a5      	b.n	8004e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fa7c 	bl	8005208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6999      	ldr	r1, [r3, #24]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	021a      	lsls	r2, r3, #8
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	619a      	str	r2, [r3, #24]
      break;
 8004d44:	e084      	b.n	8004e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fad5 	bl	80052fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0208 	orr.w	r2, r2, #8
 8004d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0204 	bic.w	r2, r2, #4
 8004d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69d9      	ldr	r1, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	61da      	str	r2, [r3, #28]
      break;
 8004d84:	e064      	b.n	8004e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fb2d 	bl	80053ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69d9      	ldr	r1, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	021a      	lsls	r2, r3, #8
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	61da      	str	r2, [r3, #28]
      break;
 8004dc6:	e043      	b.n	8004e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fb6a 	bl	80054a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0208 	orr.w	r2, r2, #8
 8004de2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0204 	bic.w	r2, r2, #4
 8004df2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e06:	e023      	b.n	8004e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fba2 	bl	8005558 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	021a      	lsls	r2, r3, #8
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e48:	e002      	b.n	8004e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop

08004e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIM_ConfigClockSource+0x1c>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e0b6      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x18a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ebc:	d03e      	beq.n	8004f3c <HAL_TIM_ConfigClockSource+0xd8>
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec2:	f200 8087 	bhi.w	8004fd4 <HAL_TIM_ConfigClockSource+0x170>
 8004ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eca:	f000 8086 	beq.w	8004fda <HAL_TIM_ConfigClockSource+0x176>
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed2:	d87f      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x170>
 8004ed4:	2b70      	cmp	r3, #112	@ 0x70
 8004ed6:	d01a      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0xaa>
 8004ed8:	2b70      	cmp	r3, #112	@ 0x70
 8004eda:	d87b      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x170>
 8004edc:	2b60      	cmp	r3, #96	@ 0x60
 8004ede:	d050      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x11e>
 8004ee0:	2b60      	cmp	r3, #96	@ 0x60
 8004ee2:	d877      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x170>
 8004ee4:	2b50      	cmp	r3, #80	@ 0x50
 8004ee6:	d03c      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0xfe>
 8004ee8:	2b50      	cmp	r3, #80	@ 0x50
 8004eea:	d873      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x170>
 8004eec:	2b40      	cmp	r3, #64	@ 0x40
 8004eee:	d058      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x13e>
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d86f      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x170>
 8004ef4:	2b30      	cmp	r3, #48	@ 0x30
 8004ef6:	d064      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004ef8:	2b30      	cmp	r3, #48	@ 0x30
 8004efa:	d86b      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x170>
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d060      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d867      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x170>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d05c      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d05a      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004f0c:	e062      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f1e:	f000 fbef 	bl	8005700 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	609a      	str	r2, [r3, #8]
      break;
 8004f3a:	e04f      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f4c:	f000 fbd8 	bl	8005700 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f5e:	609a      	str	r2, [r3, #8]
      break;
 8004f60:	e03c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f000 fb4c 	bl	800560c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2150      	movs	r1, #80	@ 0x50
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fba5 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 8004f80:	e02c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f000 fb6b 	bl	800566a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2160      	movs	r1, #96	@ 0x60
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fb95 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e01c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 fb2c 	bl	800560c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2140      	movs	r1, #64	@ 0x40
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fb85 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e00c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f000 fb7c 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 8004fd2:	e003      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e000      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a2a      	ldr	r2, [pc, #168]	@ (8005104 <TIM_Base_SetConfig+0xbc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x20>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005066:	d108      	bne.n	800507a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a21      	ldr	r2, [pc, #132]	@ (8005104 <TIM_Base_SetConfig+0xbc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00b      	beq.n	800509a <TIM_Base_SetConfig+0x52>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005088:	d007      	beq.n	800509a <TIM_Base_SetConfig+0x52>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1e      	ldr	r2, [pc, #120]	@ (8005108 <TIM_Base_SetConfig+0xc0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_Base_SetConfig+0x52>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1d      	ldr	r2, [pc, #116]	@ (800510c <TIM_Base_SetConfig+0xc4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d108      	bne.n	80050ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005104 <TIM_Base_SetConfig+0xbc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d007      	beq.n	80050e8 <TIM_Base_SetConfig+0xa0>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a0b      	ldr	r2, [pc, #44]	@ (8005108 <TIM_Base_SetConfig+0xc0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_Base_SetConfig+0xa0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a0a      	ldr	r2, [pc, #40]	@ (800510c <TIM_Base_SetConfig+0xc4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d103      	bne.n	80050f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	615a      	str	r2, [r3, #20]
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400

08005110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0201 	bic.w	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800513e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f023 0302 	bic.w	r3, r3, #2
 800515c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a24      	ldr	r2, [pc, #144]	@ (80051fc <TIM_OC1_SetConfig+0xec>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_OC1_SetConfig+0x70>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a23      	ldr	r2, [pc, #140]	@ (8005200 <TIM_OC1_SetConfig+0xf0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_OC1_SetConfig+0x70>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a22      	ldr	r2, [pc, #136]	@ (8005204 <TIM_OC1_SetConfig+0xf4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10c      	bne.n	800519a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0308 	bic.w	r3, r3, #8
 8005186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 0304 	bic.w	r3, r3, #4
 8005198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a17      	ldr	r2, [pc, #92]	@ (80051fc <TIM_OC1_SetConfig+0xec>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC1_SetConfig+0xa2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a16      	ldr	r2, [pc, #88]	@ (8005200 <TIM_OC1_SetConfig+0xf0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC1_SetConfig+0xa2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a15      	ldr	r2, [pc, #84]	@ (8005204 <TIM_OC1_SetConfig+0xf4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d111      	bne.n	80051d6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400

08005208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0210 	bic.w	r2, r3, #16
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0320 	bic.w	r3, r3, #32
 8005256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a22      	ldr	r2, [pc, #136]	@ (80052f0 <TIM_OC2_SetConfig+0xe8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10d      	bne.n	8005288 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005286:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a19      	ldr	r2, [pc, #100]	@ (80052f0 <TIM_OC2_SetConfig+0xe8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d007      	beq.n	80052a0 <TIM_OC2_SetConfig+0x98>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a18      	ldr	r2, [pc, #96]	@ (80052f4 <TIM_OC2_SetConfig+0xec>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_OC2_SetConfig+0x98>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a17      	ldr	r2, [pc, #92]	@ (80052f8 <TIM_OC2_SetConfig+0xf0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d113      	bne.n	80052c8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400

080052fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a21      	ldr	r2, [pc, #132]	@ (80053e0 <TIM_OC3_SetConfig+0xe4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10d      	bne.n	800537a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <TIM_OC3_SetConfig+0xe4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_OC3_SetConfig+0x96>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a17      	ldr	r2, [pc, #92]	@ (80053e4 <TIM_OC3_SetConfig+0xe8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_OC3_SetConfig+0x96>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <TIM_OC3_SetConfig+0xec>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d113      	bne.n	80053ba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	621a      	str	r2, [r3, #32]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400

080053ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800541a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800543a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	031b      	lsls	r3, r3, #12
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a14      	ldr	r2, [pc, #80]	@ (800549c <TIM_OC4_SetConfig+0xb0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d007      	beq.n	8005460 <TIM_OC4_SetConfig+0x74>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a13      	ldr	r2, [pc, #76]	@ (80054a0 <TIM_OC4_SetConfig+0xb4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_OC4_SetConfig+0x74>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a12      	ldr	r2, [pc, #72]	@ (80054a4 <TIM_OC4_SetConfig+0xb8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d109      	bne.n	8005474 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	019b      	lsls	r3, r3, #6
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40014400 	.word	0x40014400

080054a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80054ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a13      	ldr	r2, [pc, #76]	@ (800554c <TIM_OC5_SetConfig+0xa4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d007      	beq.n	8005512 <TIM_OC5_SetConfig+0x6a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a12      	ldr	r2, [pc, #72]	@ (8005550 <TIM_OC5_SetConfig+0xa8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d003      	beq.n	8005512 <TIM_OC5_SetConfig+0x6a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a11      	ldr	r2, [pc, #68]	@ (8005554 <TIM_OC5_SetConfig+0xac>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d109      	bne.n	8005526 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005518:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	621a      	str	r2, [r3, #32]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400

08005558 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800558a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800559e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	051b      	lsls	r3, r3, #20
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a14      	ldr	r2, [pc, #80]	@ (8005600 <TIM_OC6_SetConfig+0xa8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d007      	beq.n	80055c4 <TIM_OC6_SetConfig+0x6c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a13      	ldr	r2, [pc, #76]	@ (8005604 <TIM_OC6_SetConfig+0xac>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_OC6_SetConfig+0x6c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a12      	ldr	r2, [pc, #72]	@ (8005608 <TIM_OC6_SetConfig+0xb0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d109      	bne.n	80055d8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	029b      	lsls	r3, r3, #10
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40014000 	.word	0x40014000
 8005608:	40014400 	.word	0x40014400

0800560c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0201 	bic.w	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f023 030a 	bic.w	r3, r3, #10
 8005648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566a:	b480      	push	{r7}
 800566c:	b087      	sub	sp, #28
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0210 	bic.w	r2, r3, #16
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	031b      	lsls	r3, r3, #12
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f043 0307 	orr.w	r3, r3, #7
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800571a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	021a      	lsls	r2, r3, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	431a      	orrs	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2201      	movs	r2, #1
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	43db      	mvns	r3, r3
 8005762:	401a      	ands	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1a      	ldr	r2, [r3, #32]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 031f 	and.w	r3, r3, #31
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	431a      	orrs	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e04f      	b.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a21      	ldr	r2, [pc, #132]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d108      	bne.n	80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80057d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a14      	ldr	r2, [pc, #80]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d009      	beq.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800580c:	d004      	beq.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a10      	ldr	r2, [pc, #64]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10c      	bne.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800581e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40014000 	.word	0x40014000

08005858 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005870:	2302      	movs	r3, #2
 8005872:	e060      	b.n	8005936 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	041b      	lsls	r3, r3, #16
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a14      	ldr	r2, [pc, #80]	@ (8005944 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d115      	bne.n	8005924 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005902:	051b      	lsls	r3, r3, #20
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40012c00 	.word	0x40012c00

08005948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e040      	b.n	8005a18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fc fbd2 	bl	8002150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	@ 0x24
 80059b0:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f990 	bl	8005ce8 <UART_SetConfig>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e022      	b.n	8005a18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fbb0 	bl	8006140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fc37 	bl	8006284 <UART_CheckIdleState>
 8005a16:	4603      	mov	r3, r0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	@ 0x28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	f040 8081 	bne.w	8005b3c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_UART_Transmit+0x26>
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e079      	b.n	8005b3e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_UART_Transmit+0x38>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e072      	b.n	8005b3e <HAL_UART_Transmit+0x11e>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2221      	movs	r2, #33	@ 0x21
 8005a6c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a6e:	f7fc fd9d 	bl	80025ac <HAL_GetTick>
 8005a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	88fa      	ldrh	r2, [r7, #6]
 8005a78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8c:	d108      	bne.n	8005aa0 <HAL_UART_Transmit+0x80>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e003      	b.n	8005aa8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 8005ab0:	e02c      	b.n	8005b0c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2180      	movs	r1, #128	@ 0x80
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fc2a 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e038      	b.n	8005b3e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	881a      	ldrh	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	e007      	b.n	8005afa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1cc      	bne.n	8005ab2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2140      	movs	r1, #64	@ 0x40
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fbf7 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e005      	b.n	8005b3e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e000      	b.n	8005b3e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005b3c:	2302      	movs	r3, #2
  }
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b08a      	sub	sp, #40	@ 0x28
 8005b4a:	af02      	add	r7, sp, #8
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	f040 80bf 	bne.w	8005cde <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_UART_Receive+0x26>
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0b7      	b.n	8005ce0 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_UART_Receive+0x38>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e0b0      	b.n	8005ce0 <HAL_UART_Receive+0x19a>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2222      	movs	r2, #34	@ 0x22
 8005b92:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b9a:	f7fc fd07 	bl	80025ac <HAL_GetTick>
 8005b9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	88fa      	ldrh	r2, [r7, #6]
 8005bac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb8:	d10e      	bne.n	8005bd8 <HAL_UART_Receive+0x92>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <HAL_UART_Receive+0x88>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bcc:	e02d      	b.n	8005c2a <HAL_UART_Receive+0xe4>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	22ff      	movs	r2, #255	@ 0xff
 8005bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bd6:	e028      	b.n	8005c2a <HAL_UART_Receive+0xe4>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <HAL_UART_Receive+0xb6>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <HAL_UART_Receive+0xac>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	22ff      	movs	r2, #255	@ 0xff
 8005bec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bf0:	e01b      	b.n	8005c2a <HAL_UART_Receive+0xe4>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	227f      	movs	r2, #127	@ 0x7f
 8005bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bfa:	e016      	b.n	8005c2a <HAL_UART_Receive+0xe4>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c04:	d10d      	bne.n	8005c22 <HAL_UART_Receive+0xdc>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <HAL_UART_Receive+0xd2>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	227f      	movs	r2, #127	@ 0x7f
 8005c12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c16:	e008      	b.n	8005c2a <HAL_UART_Receive+0xe4>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	223f      	movs	r2, #63	@ 0x3f
 8005c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005c20:	e003      	b.n	8005c2a <HAL_UART_Receive+0xe4>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c30:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3a:	d108      	bne.n	8005c4e <HAL_UART_Receive+0x108>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	e003      	b.n	8005c56 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c5e:	e033      	b.n	8005cc8 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2200      	movs	r2, #0
 8005c68:	2120      	movs	r1, #32
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fb53 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e032      	b.n	8005ce0 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10c      	bne.n	8005c9a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	8a7b      	ldrh	r3, [r7, #18]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	3302      	adds	r3, #2
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e00d      	b.n	8005cb6 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	8a7b      	ldrh	r3, [r7, #18]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	4013      	ands	r3, r2
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1c5      	bne.n	8005c60 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e000      	b.n	8005ce0 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005cde:	2302      	movs	r3, #2
  }
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3720      	adds	r7, #32
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cec:	b08a      	sub	sp, #40	@ 0x28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4bb4      	ldr	r3, [pc, #720]	@ (8005fe8 <UART_SetConfig+0x300>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d20:	430b      	orrs	r3, r1
 8005d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4aa9      	ldr	r2, [pc, #676]	@ (8005fec <UART_SetConfig+0x304>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d50:	4313      	orrs	r3, r2
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d64:	430a      	orrs	r2, r1
 8005d66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4aa0      	ldr	r2, [pc, #640]	@ (8005ff0 <UART_SetConfig+0x308>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d126      	bne.n	8005dc0 <UART_SetConfig+0xd8>
 8005d72:	4ba0      	ldr	r3, [pc, #640]	@ (8005ff4 <UART_SetConfig+0x30c>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d81b      	bhi.n	8005db8 <UART_SetConfig+0xd0>
 8005d80:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <UART_SetConfig+0xa0>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005d99 	.word	0x08005d99
 8005d8c:	08005da9 	.word	0x08005da9
 8005d90:	08005da1 	.word	0x08005da1
 8005d94:	08005db1 	.word	0x08005db1
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9e:	e080      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005da0:	2302      	movs	r3, #2
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da6:	e07c      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005da8:	2304      	movs	r3, #4
 8005daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dae:	e078      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005db0:	2308      	movs	r3, #8
 8005db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db6:	e074      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005db8:	2310      	movs	r3, #16
 8005dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dbe:	e070      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a8c      	ldr	r2, [pc, #560]	@ (8005ff8 <UART_SetConfig+0x310>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d138      	bne.n	8005e3c <UART_SetConfig+0x154>
 8005dca:	4b8a      	ldr	r3, [pc, #552]	@ (8005ff4 <UART_SetConfig+0x30c>)
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd0:	f003 030c 	and.w	r3, r3, #12
 8005dd4:	2b0c      	cmp	r3, #12
 8005dd6:	d82d      	bhi.n	8005e34 <UART_SetConfig+0x14c>
 8005dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005de0 <UART_SetConfig+0xf8>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e15 	.word	0x08005e15
 8005de4:	08005e35 	.word	0x08005e35
 8005de8:	08005e35 	.word	0x08005e35
 8005dec:	08005e35 	.word	0x08005e35
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08005e35 	.word	0x08005e35
 8005df8:	08005e35 	.word	0x08005e35
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	08005e35 	.word	0x08005e35
 8005e08:	08005e35 	.word	0x08005e35
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e2d 	.word	0x08005e2d
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1a:	e042      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e22:	e03e      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e24:	2304      	movs	r3, #4
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e2a:	e03a      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e32:	e036      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e34:	2310      	movs	r3, #16
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e3a:	e032      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6a      	ldr	r2, [pc, #424]	@ (8005fec <UART_SetConfig+0x304>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d12a      	bne.n	8005e9c <UART_SetConfig+0x1b4>
 8005e46:	4b6b      	ldr	r3, [pc, #428]	@ (8005ff4 <UART_SetConfig+0x30c>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e54:	d01a      	beq.n	8005e8c <UART_SetConfig+0x1a4>
 8005e56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e5a:	d81b      	bhi.n	8005e94 <UART_SetConfig+0x1ac>
 8005e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e60:	d00c      	beq.n	8005e7c <UART_SetConfig+0x194>
 8005e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e66:	d815      	bhi.n	8005e94 <UART_SetConfig+0x1ac>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <UART_SetConfig+0x18c>
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e70:	d008      	beq.n	8005e84 <UART_SetConfig+0x19c>
 8005e72:	e00f      	b.n	8005e94 <UART_SetConfig+0x1ac>
 8005e74:	2300      	movs	r3, #0
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7a:	e012      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e82:	e00e      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8a:	e00a      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e92:	e006      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9a:	e002      	b.n	8005ea2 <UART_SetConfig+0x1ba>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a51      	ldr	r2, [pc, #324]	@ (8005fec <UART_SetConfig+0x304>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d17a      	bne.n	8005fa2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d824      	bhi.n	8005efe <UART_SetConfig+0x216>
 8005eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ebc <UART_SetConfig+0x1d4>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005eff 	.word	0x08005eff
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005eff 	.word	0x08005eff
 8005ecc:	08005eef 	.word	0x08005eef
 8005ed0:	08005eff 	.word	0x08005eff
 8005ed4:	08005eff 	.word	0x08005eff
 8005ed8:	08005eff 	.word	0x08005eff
 8005edc:	08005ef7 	.word	0x08005ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f7fd fc78 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005ee4:	61f8      	str	r0, [r7, #28]
        break;
 8005ee6:	e010      	b.n	8005f0a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee8:	4b44      	ldr	r3, [pc, #272]	@ (8005ffc <UART_SetConfig+0x314>)
 8005eea:	61fb      	str	r3, [r7, #28]
        break;
 8005eec:	e00d      	b.n	8005f0a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eee:	f7fd fbd9 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8005ef2:	61f8      	str	r0, [r7, #28]
        break;
 8005ef4:	e009      	b.n	8005f0a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005efa:	61fb      	str	r3, [r7, #28]
        break;
 8005efc:	e005      	b.n	8005f0a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8107 	beq.w	8006120 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d305      	bcc.n	8005f2e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d903      	bls.n	8005f36 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f34:	e0f4      	b.n	8006120 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	461c      	mov	r4, r3
 8005f3c:	4615      	mov	r5, r2
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	022b      	lsls	r3, r5, #8
 8005f48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f4c:	0222      	lsls	r2, r4, #8
 8005f4e:	68f9      	ldr	r1, [r7, #12]
 8005f50:	6849      	ldr	r1, [r1, #4]
 8005f52:	0849      	lsrs	r1, r1, #1
 8005f54:	2000      	movs	r0, #0
 8005f56:	4688      	mov	r8, r1
 8005f58:	4681      	mov	r9, r0
 8005f5a:	eb12 0a08 	adds.w	sl, r2, r8
 8005f5e:	eb43 0b09 	adc.w	fp, r3, r9
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f70:	4650      	mov	r0, sl
 8005f72:	4659      	mov	r1, fp
 8005f74:	f7fa fe98 	bl	8000ca8 <__aeabi_uldivmod>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f86:	d308      	bcc.n	8005f9a <UART_SetConfig+0x2b2>
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f8e:	d204      	bcs.n	8005f9a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	60da      	str	r2, [r3, #12]
 8005f98:	e0c2      	b.n	8006120 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fa0:	e0be      	b.n	8006120 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005faa:	d16a      	bne.n	8006082 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005fac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d834      	bhi.n	800601e <UART_SetConfig+0x336>
 8005fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <UART_SetConfig+0x2d4>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	08005fe1 	.word	0x08005fe1
 8005fc0:	08006001 	.word	0x08006001
 8005fc4:	08006009 	.word	0x08006009
 8005fc8:	0800601f 	.word	0x0800601f
 8005fcc:	0800600f 	.word	0x0800600f
 8005fd0:	0800601f 	.word	0x0800601f
 8005fd4:	0800601f 	.word	0x0800601f
 8005fd8:	0800601f 	.word	0x0800601f
 8005fdc:	08006017 	.word	0x08006017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe0:	f7fd fbf8 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005fe4:	61f8      	str	r0, [r7, #28]
        break;
 8005fe6:	e020      	b.n	800602a <UART_SetConfig+0x342>
 8005fe8:	efff69f3 	.word	0xefff69f3
 8005fec:	40008000 	.word	0x40008000
 8005ff0:	40013800 	.word	0x40013800
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40004400 	.word	0x40004400
 8005ffc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006000:	f7fd fbfe 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 8006004:	61f8      	str	r0, [r7, #28]
        break;
 8006006:	e010      	b.n	800602a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006008:	4b4c      	ldr	r3, [pc, #304]	@ (800613c <UART_SetConfig+0x454>)
 800600a:	61fb      	str	r3, [r7, #28]
        break;
 800600c:	e00d      	b.n	800602a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800600e:	f7fd fb49 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8006012:	61f8      	str	r0, [r7, #28]
        break;
 8006014:	e009      	b.n	800602a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800601a:	61fb      	str	r3, [r7, #28]
        break;
 800601c:	e005      	b.n	800602a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d077      	beq.n	8006120 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	005a      	lsls	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	441a      	add	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b0f      	cmp	r3, #15
 800604a:	d916      	bls.n	800607a <UART_SetConfig+0x392>
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006052:	d212      	bcs.n	800607a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f023 030f 	bic.w	r3, r3, #15
 800605c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	b29b      	uxth	r3, r3
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	b29a      	uxth	r2, r3
 800606a:	8afb      	ldrh	r3, [r7, #22]
 800606c:	4313      	orrs	r3, r2
 800606e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	8afa      	ldrh	r2, [r7, #22]
 8006076:	60da      	str	r2, [r3, #12]
 8006078:	e052      	b.n	8006120 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006080:	e04e      	b.n	8006120 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006082:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006086:	2b08      	cmp	r3, #8
 8006088:	d827      	bhi.n	80060da <UART_SetConfig+0x3f2>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <UART_SetConfig+0x3a8>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060c5 	.word	0x080060c5
 800609c:	080060db 	.word	0x080060db
 80060a0:	080060cb 	.word	0x080060cb
 80060a4:	080060db 	.word	0x080060db
 80060a8:	080060db 	.word	0x080060db
 80060ac:	080060db 	.word	0x080060db
 80060b0:	080060d3 	.word	0x080060d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b4:	f7fd fb8e 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 80060b8:	61f8      	str	r0, [r7, #28]
        break;
 80060ba:	e014      	b.n	80060e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fd fba0 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 80060c0:	61f8      	str	r0, [r7, #28]
        break;
 80060c2:	e010      	b.n	80060e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c4:	4b1d      	ldr	r3, [pc, #116]	@ (800613c <UART_SetConfig+0x454>)
 80060c6:	61fb      	str	r3, [r7, #28]
        break;
 80060c8:	e00d      	b.n	80060e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ca:	f7fd faeb 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 80060ce:	61f8      	str	r0, [r7, #28]
        break;
 80060d0:	e009      	b.n	80060e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060d6:	61fb      	str	r3, [r7, #28]
        break;
 80060d8:	e005      	b.n	80060e6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060e4:	bf00      	nop
    }

    if (pclk != 0U)
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d019      	beq.n	8006120 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	085a      	lsrs	r2, r3, #1
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	441a      	add	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b0f      	cmp	r3, #15
 8006104:	d909      	bls.n	800611a <UART_SetConfig+0x432>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800610c:	d205      	bcs.n	800611a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60da      	str	r2, [r3, #12]
 8006118:	e002      	b.n	8006120 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 800612c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006130:	4618      	mov	r0, r3
 8006132:	3728      	adds	r7, #40	@ 0x28
 8006134:	46bd      	mov	sp, r7
 8006136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800613a:	bf00      	nop
 800613c:	00f42400 	.word	0x00f42400

08006140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01a      	beq.n	8006256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800623e:	d10a      	bne.n	8006256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]
  }
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006294:	f7fc f98a 	bl	80025ac <HAL_GetTick>
 8006298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d10e      	bne.n	80062c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f82d 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e023      	b.n	800630e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d10e      	bne.n	80062f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f817 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e00d      	b.n	800630e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b09c      	sub	sp, #112	@ 0x70
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	4613      	mov	r3, r2
 8006324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006326:	e0a5      	b.n	8006474 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	f000 80a1 	beq.w	8006474 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006332:	f7fc f93b 	bl	80025ac <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800633e:	429a      	cmp	r2, r3
 8006340:	d302      	bcc.n	8006348 <UART_WaitOnFlagUntilTimeout+0x32>
 8006342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006344:	2b00      	cmp	r3, #0
 8006346:	d13e      	bne.n	80063c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006358:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800635c:	667b      	str	r3, [r7, #100]	@ 0x64
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006366:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006368:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800636c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e6      	bne.n	8006348 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800638a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	663b      	str	r3, [r7, #96]	@ 0x60
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3308      	adds	r3, #8
 8006398:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800639a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800639c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80063a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e5      	bne.n	800637a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e067      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d04f      	beq.n	8006474 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e2:	d147      	bne.n	8006474 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006402:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800640c:	637b      	str	r3, [r7, #52]	@ 0x34
 800640e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800641a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e6      	bne.n	80063ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3308      	adds	r3, #8
 8006426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	613b      	str	r3, [r7, #16]
   return(result);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006440:	623a      	str	r2, [r7, #32]
 8006442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	69f9      	ldr	r1, [r7, #28]
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	61bb      	str	r3, [r7, #24]
   return(result);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e5      	bne.n	8006420 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e010      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4013      	ands	r3, r2
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	429a      	cmp	r2, r3
 8006490:	f43f af4a 	beq.w	8006328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3770      	adds	r7, #112	@ 0x70
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <__cvt>:
 800649e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a2:	ec57 6b10 	vmov	r6, r7, d0
 80064a6:	2f00      	cmp	r7, #0
 80064a8:	460c      	mov	r4, r1
 80064aa:	4619      	mov	r1, r3
 80064ac:	463b      	mov	r3, r7
 80064ae:	bfbb      	ittet	lt
 80064b0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80064b4:	461f      	movlt	r7, r3
 80064b6:	2300      	movge	r3, #0
 80064b8:	232d      	movlt	r3, #45	@ 0x2d
 80064ba:	700b      	strb	r3, [r1, #0]
 80064bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064be:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80064c2:	4691      	mov	r9, r2
 80064c4:	f023 0820 	bic.w	r8, r3, #32
 80064c8:	bfbc      	itt	lt
 80064ca:	4632      	movlt	r2, r6
 80064cc:	4616      	movlt	r6, r2
 80064ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064d2:	d005      	beq.n	80064e0 <__cvt+0x42>
 80064d4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064d8:	d100      	bne.n	80064dc <__cvt+0x3e>
 80064da:	3401      	adds	r4, #1
 80064dc:	2102      	movs	r1, #2
 80064de:	e000      	b.n	80064e2 <__cvt+0x44>
 80064e0:	2103      	movs	r1, #3
 80064e2:	ab03      	add	r3, sp, #12
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	ab02      	add	r3, sp, #8
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	ec47 6b10 	vmov	d0, r6, r7
 80064ee:	4653      	mov	r3, sl
 80064f0:	4622      	mov	r2, r4
 80064f2:	f001 f9bd 	bl	8007870 <_dtoa_r>
 80064f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064fa:	4605      	mov	r5, r0
 80064fc:	d119      	bne.n	8006532 <__cvt+0x94>
 80064fe:	f019 0f01 	tst.w	r9, #1
 8006502:	d00e      	beq.n	8006522 <__cvt+0x84>
 8006504:	eb00 0904 	add.w	r9, r0, r4
 8006508:	2200      	movs	r2, #0
 800650a:	2300      	movs	r3, #0
 800650c:	4630      	mov	r0, r6
 800650e:	4639      	mov	r1, r7
 8006510:	f7fa faea 	bl	8000ae8 <__aeabi_dcmpeq>
 8006514:	b108      	cbz	r0, 800651a <__cvt+0x7c>
 8006516:	f8cd 900c 	str.w	r9, [sp, #12]
 800651a:	2230      	movs	r2, #48	@ 0x30
 800651c:	9b03      	ldr	r3, [sp, #12]
 800651e:	454b      	cmp	r3, r9
 8006520:	d31e      	bcc.n	8006560 <__cvt+0xc2>
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006526:	1b5b      	subs	r3, r3, r5
 8006528:	4628      	mov	r0, r5
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	b004      	add	sp, #16
 800652e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006532:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006536:	eb00 0904 	add.w	r9, r0, r4
 800653a:	d1e5      	bne.n	8006508 <__cvt+0x6a>
 800653c:	7803      	ldrb	r3, [r0, #0]
 800653e:	2b30      	cmp	r3, #48	@ 0x30
 8006540:	d10a      	bne.n	8006558 <__cvt+0xba>
 8006542:	2200      	movs	r2, #0
 8006544:	2300      	movs	r3, #0
 8006546:	4630      	mov	r0, r6
 8006548:	4639      	mov	r1, r7
 800654a:	f7fa facd 	bl	8000ae8 <__aeabi_dcmpeq>
 800654e:	b918      	cbnz	r0, 8006558 <__cvt+0xba>
 8006550:	f1c4 0401 	rsb	r4, r4, #1
 8006554:	f8ca 4000 	str.w	r4, [sl]
 8006558:	f8da 3000 	ldr.w	r3, [sl]
 800655c:	4499      	add	r9, r3
 800655e:	e7d3      	b.n	8006508 <__cvt+0x6a>
 8006560:	1c59      	adds	r1, r3, #1
 8006562:	9103      	str	r1, [sp, #12]
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e7d9      	b.n	800651c <__cvt+0x7e>

08006568 <__exponent>:
 8006568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800656a:	2900      	cmp	r1, #0
 800656c:	bfba      	itte	lt
 800656e:	4249      	neglt	r1, r1
 8006570:	232d      	movlt	r3, #45	@ 0x2d
 8006572:	232b      	movge	r3, #43	@ 0x2b
 8006574:	2909      	cmp	r1, #9
 8006576:	7002      	strb	r2, [r0, #0]
 8006578:	7043      	strb	r3, [r0, #1]
 800657a:	dd29      	ble.n	80065d0 <__exponent+0x68>
 800657c:	f10d 0307 	add.w	r3, sp, #7
 8006580:	461d      	mov	r5, r3
 8006582:	270a      	movs	r7, #10
 8006584:	461a      	mov	r2, r3
 8006586:	fbb1 f6f7 	udiv	r6, r1, r7
 800658a:	fb07 1416 	mls	r4, r7, r6, r1
 800658e:	3430      	adds	r4, #48	@ 0x30
 8006590:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006594:	460c      	mov	r4, r1
 8006596:	2c63      	cmp	r4, #99	@ 0x63
 8006598:	f103 33ff 	add.w	r3, r3, #4294967295
 800659c:	4631      	mov	r1, r6
 800659e:	dcf1      	bgt.n	8006584 <__exponent+0x1c>
 80065a0:	3130      	adds	r1, #48	@ 0x30
 80065a2:	1e94      	subs	r4, r2, #2
 80065a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065a8:	1c41      	adds	r1, r0, #1
 80065aa:	4623      	mov	r3, r4
 80065ac:	42ab      	cmp	r3, r5
 80065ae:	d30a      	bcc.n	80065c6 <__exponent+0x5e>
 80065b0:	f10d 0309 	add.w	r3, sp, #9
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	42ac      	cmp	r4, r5
 80065b8:	bf88      	it	hi
 80065ba:	2300      	movhi	r3, #0
 80065bc:	3302      	adds	r3, #2
 80065be:	4403      	add	r3, r0
 80065c0:	1a18      	subs	r0, r3, r0
 80065c2:	b003      	add	sp, #12
 80065c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065ce:	e7ed      	b.n	80065ac <__exponent+0x44>
 80065d0:	2330      	movs	r3, #48	@ 0x30
 80065d2:	3130      	adds	r1, #48	@ 0x30
 80065d4:	7083      	strb	r3, [r0, #2]
 80065d6:	70c1      	strb	r1, [r0, #3]
 80065d8:	1d03      	adds	r3, r0, #4
 80065da:	e7f1      	b.n	80065c0 <__exponent+0x58>

080065dc <_printf_float>:
 80065dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	b08d      	sub	sp, #52	@ 0x34
 80065e2:	460c      	mov	r4, r1
 80065e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065e8:	4616      	mov	r6, r2
 80065ea:	461f      	mov	r7, r3
 80065ec:	4605      	mov	r5, r0
 80065ee:	f001 f837 	bl	8007660 <_localeconv_r>
 80065f2:	6803      	ldr	r3, [r0, #0]
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7f9 fe4a 	bl	8000290 <strlen>
 80065fc:	2300      	movs	r3, #0
 80065fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006600:	f8d8 3000 	ldr.w	r3, [r8]
 8006604:	9005      	str	r0, [sp, #20]
 8006606:	3307      	adds	r3, #7
 8006608:	f023 0307 	bic.w	r3, r3, #7
 800660c:	f103 0208 	add.w	r2, r3, #8
 8006610:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006614:	f8d4 b000 	ldr.w	fp, [r4]
 8006618:	f8c8 2000 	str.w	r2, [r8]
 800661c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006620:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006624:	9307      	str	r3, [sp, #28]
 8006626:	f8cd 8018 	str.w	r8, [sp, #24]
 800662a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800662e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006632:	4b9c      	ldr	r3, [pc, #624]	@ (80068a4 <_printf_float+0x2c8>)
 8006634:	f04f 32ff 	mov.w	r2, #4294967295
 8006638:	f7fa fa88 	bl	8000b4c <__aeabi_dcmpun>
 800663c:	bb70      	cbnz	r0, 800669c <_printf_float+0xc0>
 800663e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006642:	4b98      	ldr	r3, [pc, #608]	@ (80068a4 <_printf_float+0x2c8>)
 8006644:	f04f 32ff 	mov.w	r2, #4294967295
 8006648:	f7fa fa62 	bl	8000b10 <__aeabi_dcmple>
 800664c:	bb30      	cbnz	r0, 800669c <_printf_float+0xc0>
 800664e:	2200      	movs	r2, #0
 8006650:	2300      	movs	r3, #0
 8006652:	4640      	mov	r0, r8
 8006654:	4649      	mov	r1, r9
 8006656:	f7fa fa51 	bl	8000afc <__aeabi_dcmplt>
 800665a:	b110      	cbz	r0, 8006662 <_printf_float+0x86>
 800665c:	232d      	movs	r3, #45	@ 0x2d
 800665e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006662:	4a91      	ldr	r2, [pc, #580]	@ (80068a8 <_printf_float+0x2cc>)
 8006664:	4b91      	ldr	r3, [pc, #580]	@ (80068ac <_printf_float+0x2d0>)
 8006666:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800666a:	bf94      	ite	ls
 800666c:	4690      	movls	r8, r2
 800666e:	4698      	movhi	r8, r3
 8006670:	2303      	movs	r3, #3
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	f02b 0304 	bic.w	r3, fp, #4
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	f04f 0900 	mov.w	r9, #0
 800667e:	9700      	str	r7, [sp, #0]
 8006680:	4633      	mov	r3, r6
 8006682:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006684:	4621      	mov	r1, r4
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f9d2 	bl	8006a30 <_printf_common>
 800668c:	3001      	adds	r0, #1
 800668e:	f040 808d 	bne.w	80067ac <_printf_float+0x1d0>
 8006692:	f04f 30ff 	mov.w	r0, #4294967295
 8006696:	b00d      	add	sp, #52	@ 0x34
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	4642      	mov	r2, r8
 800669e:	464b      	mov	r3, r9
 80066a0:	4640      	mov	r0, r8
 80066a2:	4649      	mov	r1, r9
 80066a4:	f7fa fa52 	bl	8000b4c <__aeabi_dcmpun>
 80066a8:	b140      	cbz	r0, 80066bc <_printf_float+0xe0>
 80066aa:	464b      	mov	r3, r9
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bfbc      	itt	lt
 80066b0:	232d      	movlt	r3, #45	@ 0x2d
 80066b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066b6:	4a7e      	ldr	r2, [pc, #504]	@ (80068b0 <_printf_float+0x2d4>)
 80066b8:	4b7e      	ldr	r3, [pc, #504]	@ (80068b4 <_printf_float+0x2d8>)
 80066ba:	e7d4      	b.n	8006666 <_printf_float+0x8a>
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80066c2:	9206      	str	r2, [sp, #24]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	d13b      	bne.n	8006740 <_printf_float+0x164>
 80066c8:	2306      	movs	r3, #6
 80066ca:	6063      	str	r3, [r4, #4]
 80066cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80066d0:	2300      	movs	r3, #0
 80066d2:	6022      	str	r2, [r4, #0]
 80066d4:	9303      	str	r3, [sp, #12]
 80066d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80066d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80066dc:	ab09      	add	r3, sp, #36	@ 0x24
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	6861      	ldr	r1, [r4, #4]
 80066e2:	ec49 8b10 	vmov	d0, r8, r9
 80066e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066ea:	4628      	mov	r0, r5
 80066ec:	f7ff fed7 	bl	800649e <__cvt>
 80066f0:	9b06      	ldr	r3, [sp, #24]
 80066f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066f4:	2b47      	cmp	r3, #71	@ 0x47
 80066f6:	4680      	mov	r8, r0
 80066f8:	d129      	bne.n	800674e <_printf_float+0x172>
 80066fa:	1cc8      	adds	r0, r1, #3
 80066fc:	db02      	blt.n	8006704 <_printf_float+0x128>
 80066fe:	6863      	ldr	r3, [r4, #4]
 8006700:	4299      	cmp	r1, r3
 8006702:	dd41      	ble.n	8006788 <_printf_float+0x1ac>
 8006704:	f1aa 0a02 	sub.w	sl, sl, #2
 8006708:	fa5f fa8a 	uxtb.w	sl, sl
 800670c:	3901      	subs	r1, #1
 800670e:	4652      	mov	r2, sl
 8006710:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006714:	9109      	str	r1, [sp, #36]	@ 0x24
 8006716:	f7ff ff27 	bl	8006568 <__exponent>
 800671a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800671c:	1813      	adds	r3, r2, r0
 800671e:	2a01      	cmp	r2, #1
 8006720:	4681      	mov	r9, r0
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	dc02      	bgt.n	800672c <_printf_float+0x150>
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	07d2      	lsls	r2, r2, #31
 800672a:	d501      	bpl.n	8006730 <_printf_float+0x154>
 800672c:	3301      	adds	r3, #1
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0a2      	beq.n	800667e <_printf_float+0xa2>
 8006738:	232d      	movs	r3, #45	@ 0x2d
 800673a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800673e:	e79e      	b.n	800667e <_printf_float+0xa2>
 8006740:	9a06      	ldr	r2, [sp, #24]
 8006742:	2a47      	cmp	r2, #71	@ 0x47
 8006744:	d1c2      	bne.n	80066cc <_printf_float+0xf0>
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1c0      	bne.n	80066cc <_printf_float+0xf0>
 800674a:	2301      	movs	r3, #1
 800674c:	e7bd      	b.n	80066ca <_printf_float+0xee>
 800674e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006752:	d9db      	bls.n	800670c <_printf_float+0x130>
 8006754:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006758:	d118      	bne.n	800678c <_printf_float+0x1b0>
 800675a:	2900      	cmp	r1, #0
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	dd0b      	ble.n	8006778 <_printf_float+0x19c>
 8006760:	6121      	str	r1, [r4, #16]
 8006762:	b913      	cbnz	r3, 800676a <_printf_float+0x18e>
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	07d0      	lsls	r0, r2, #31
 8006768:	d502      	bpl.n	8006770 <_printf_float+0x194>
 800676a:	3301      	adds	r3, #1
 800676c:	440b      	add	r3, r1
 800676e:	6123      	str	r3, [r4, #16]
 8006770:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006772:	f04f 0900 	mov.w	r9, #0
 8006776:	e7db      	b.n	8006730 <_printf_float+0x154>
 8006778:	b913      	cbnz	r3, 8006780 <_printf_float+0x1a4>
 800677a:	6822      	ldr	r2, [r4, #0]
 800677c:	07d2      	lsls	r2, r2, #31
 800677e:	d501      	bpl.n	8006784 <_printf_float+0x1a8>
 8006780:	3302      	adds	r3, #2
 8006782:	e7f4      	b.n	800676e <_printf_float+0x192>
 8006784:	2301      	movs	r3, #1
 8006786:	e7f2      	b.n	800676e <_printf_float+0x192>
 8006788:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800678c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800678e:	4299      	cmp	r1, r3
 8006790:	db05      	blt.n	800679e <_printf_float+0x1c2>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	6121      	str	r1, [r4, #16]
 8006796:	07d8      	lsls	r0, r3, #31
 8006798:	d5ea      	bpl.n	8006770 <_printf_float+0x194>
 800679a:	1c4b      	adds	r3, r1, #1
 800679c:	e7e7      	b.n	800676e <_printf_float+0x192>
 800679e:	2900      	cmp	r1, #0
 80067a0:	bfd4      	ite	le
 80067a2:	f1c1 0202 	rsble	r2, r1, #2
 80067a6:	2201      	movgt	r2, #1
 80067a8:	4413      	add	r3, r2
 80067aa:	e7e0      	b.n	800676e <_printf_float+0x192>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	055a      	lsls	r2, r3, #21
 80067b0:	d407      	bmi.n	80067c2 <_printf_float+0x1e6>
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	4642      	mov	r2, r8
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	47b8      	blx	r7
 80067bc:	3001      	adds	r0, #1
 80067be:	d12b      	bne.n	8006818 <_printf_float+0x23c>
 80067c0:	e767      	b.n	8006692 <_printf_float+0xb6>
 80067c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067c6:	f240 80dd 	bls.w	8006984 <_printf_float+0x3a8>
 80067ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067ce:	2200      	movs	r2, #0
 80067d0:	2300      	movs	r3, #0
 80067d2:	f7fa f989 	bl	8000ae8 <__aeabi_dcmpeq>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d033      	beq.n	8006842 <_printf_float+0x266>
 80067da:	4a37      	ldr	r2, [pc, #220]	@ (80068b8 <_printf_float+0x2dc>)
 80067dc:	2301      	movs	r3, #1
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f af54 	beq.w	8006692 <_printf_float+0xb6>
 80067ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067ee:	4543      	cmp	r3, r8
 80067f0:	db02      	blt.n	80067f8 <_printf_float+0x21c>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	07d8      	lsls	r0, r3, #31
 80067f6:	d50f      	bpl.n	8006818 <_printf_float+0x23c>
 80067f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f af45 	beq.w	8006692 <_printf_float+0xb6>
 8006808:	f04f 0900 	mov.w	r9, #0
 800680c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006810:	f104 0a1a 	add.w	sl, r4, #26
 8006814:	45c8      	cmp	r8, r9
 8006816:	dc09      	bgt.n	800682c <_printf_float+0x250>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	079b      	lsls	r3, r3, #30
 800681c:	f100 8103 	bmi.w	8006a26 <_printf_float+0x44a>
 8006820:	68e0      	ldr	r0, [r4, #12]
 8006822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006824:	4298      	cmp	r0, r3
 8006826:	bfb8      	it	lt
 8006828:	4618      	movlt	r0, r3
 800682a:	e734      	b.n	8006696 <_printf_float+0xba>
 800682c:	2301      	movs	r3, #1
 800682e:	4652      	mov	r2, sl
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f af2b 	beq.w	8006692 <_printf_float+0xb6>
 800683c:	f109 0901 	add.w	r9, r9, #1
 8006840:	e7e8      	b.n	8006814 <_printf_float+0x238>
 8006842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	dc39      	bgt.n	80068bc <_printf_float+0x2e0>
 8006848:	4a1b      	ldr	r2, [pc, #108]	@ (80068b8 <_printf_float+0x2dc>)
 800684a:	2301      	movs	r3, #1
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	f43f af1d 	beq.w	8006692 <_printf_float+0xb6>
 8006858:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800685c:	ea59 0303 	orrs.w	r3, r9, r3
 8006860:	d102      	bne.n	8006868 <_printf_float+0x28c>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	07d9      	lsls	r1, r3, #31
 8006866:	d5d7      	bpl.n	8006818 <_printf_float+0x23c>
 8006868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	f43f af0d 	beq.w	8006692 <_printf_float+0xb6>
 8006878:	f04f 0a00 	mov.w	sl, #0
 800687c:	f104 0b1a 	add.w	fp, r4, #26
 8006880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006882:	425b      	negs	r3, r3
 8006884:	4553      	cmp	r3, sl
 8006886:	dc01      	bgt.n	800688c <_printf_float+0x2b0>
 8006888:	464b      	mov	r3, r9
 800688a:	e793      	b.n	80067b4 <_printf_float+0x1d8>
 800688c:	2301      	movs	r3, #1
 800688e:	465a      	mov	r2, fp
 8006890:	4631      	mov	r1, r6
 8006892:	4628      	mov	r0, r5
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	f43f aefb 	beq.w	8006692 <_printf_float+0xb6>
 800689c:	f10a 0a01 	add.w	sl, sl, #1
 80068a0:	e7ee      	b.n	8006880 <_printf_float+0x2a4>
 80068a2:	bf00      	nop
 80068a4:	7fefffff 	.word	0x7fefffff
 80068a8:	0800c2dc 	.word	0x0800c2dc
 80068ac:	0800c2e0 	.word	0x0800c2e0
 80068b0:	0800c2e4 	.word	0x0800c2e4
 80068b4:	0800c2e8 	.word	0x0800c2e8
 80068b8:	0800c678 	.word	0x0800c678
 80068bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068c2:	4553      	cmp	r3, sl
 80068c4:	bfa8      	it	ge
 80068c6:	4653      	movge	r3, sl
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	4699      	mov	r9, r3
 80068cc:	dc36      	bgt.n	800693c <_printf_float+0x360>
 80068ce:	f04f 0b00 	mov.w	fp, #0
 80068d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068d6:	f104 021a 	add.w	r2, r4, #26
 80068da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068dc:	9306      	str	r3, [sp, #24]
 80068de:	eba3 0309 	sub.w	r3, r3, r9
 80068e2:	455b      	cmp	r3, fp
 80068e4:	dc31      	bgt.n	800694a <_printf_float+0x36e>
 80068e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e8:	459a      	cmp	sl, r3
 80068ea:	dc3a      	bgt.n	8006962 <_printf_float+0x386>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	07da      	lsls	r2, r3, #31
 80068f0:	d437      	bmi.n	8006962 <_printf_float+0x386>
 80068f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f4:	ebaa 0903 	sub.w	r9, sl, r3
 80068f8:	9b06      	ldr	r3, [sp, #24]
 80068fa:	ebaa 0303 	sub.w	r3, sl, r3
 80068fe:	4599      	cmp	r9, r3
 8006900:	bfa8      	it	ge
 8006902:	4699      	movge	r9, r3
 8006904:	f1b9 0f00 	cmp.w	r9, #0
 8006908:	dc33      	bgt.n	8006972 <_printf_float+0x396>
 800690a:	f04f 0800 	mov.w	r8, #0
 800690e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006912:	f104 0b1a 	add.w	fp, r4, #26
 8006916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006918:	ebaa 0303 	sub.w	r3, sl, r3
 800691c:	eba3 0309 	sub.w	r3, r3, r9
 8006920:	4543      	cmp	r3, r8
 8006922:	f77f af79 	ble.w	8006818 <_printf_float+0x23c>
 8006926:	2301      	movs	r3, #1
 8006928:	465a      	mov	r2, fp
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	f43f aeae 	beq.w	8006692 <_printf_float+0xb6>
 8006936:	f108 0801 	add.w	r8, r8, #1
 800693a:	e7ec      	b.n	8006916 <_printf_float+0x33a>
 800693c:	4642      	mov	r2, r8
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	d1c2      	bne.n	80068ce <_printf_float+0x2f2>
 8006948:	e6a3      	b.n	8006692 <_printf_float+0xb6>
 800694a:	2301      	movs	r3, #1
 800694c:	4631      	mov	r1, r6
 800694e:	4628      	mov	r0, r5
 8006950:	9206      	str	r2, [sp, #24]
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f ae9c 	beq.w	8006692 <_printf_float+0xb6>
 800695a:	9a06      	ldr	r2, [sp, #24]
 800695c:	f10b 0b01 	add.w	fp, fp, #1
 8006960:	e7bb      	b.n	80068da <_printf_float+0x2fe>
 8006962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	d1c0      	bne.n	80068f2 <_printf_float+0x316>
 8006970:	e68f      	b.n	8006692 <_printf_float+0xb6>
 8006972:	9a06      	ldr	r2, [sp, #24]
 8006974:	464b      	mov	r3, r9
 8006976:	4442      	add	r2, r8
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	d1c3      	bne.n	800690a <_printf_float+0x32e>
 8006982:	e686      	b.n	8006692 <_printf_float+0xb6>
 8006984:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006988:	f1ba 0f01 	cmp.w	sl, #1
 800698c:	dc01      	bgt.n	8006992 <_printf_float+0x3b6>
 800698e:	07db      	lsls	r3, r3, #31
 8006990:	d536      	bpl.n	8006a00 <_printf_float+0x424>
 8006992:	2301      	movs	r3, #1
 8006994:	4642      	mov	r2, r8
 8006996:	4631      	mov	r1, r6
 8006998:	4628      	mov	r0, r5
 800699a:	47b8      	blx	r7
 800699c:	3001      	adds	r0, #1
 800699e:	f43f ae78 	beq.w	8006692 <_printf_float+0xb6>
 80069a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a6:	4631      	mov	r1, r6
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b8      	blx	r7
 80069ac:	3001      	adds	r0, #1
 80069ae:	f43f ae70 	beq.w	8006692 <_printf_float+0xb6>
 80069b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069b6:	2200      	movs	r2, #0
 80069b8:	2300      	movs	r3, #0
 80069ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069be:	f7fa f893 	bl	8000ae8 <__aeabi_dcmpeq>
 80069c2:	b9c0      	cbnz	r0, 80069f6 <_printf_float+0x41a>
 80069c4:	4653      	mov	r3, sl
 80069c6:	f108 0201 	add.w	r2, r8, #1
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	d10c      	bne.n	80069ee <_printf_float+0x412>
 80069d4:	e65d      	b.n	8006692 <_printf_float+0xb6>
 80069d6:	2301      	movs	r3, #1
 80069d8:	465a      	mov	r2, fp
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	f43f ae56 	beq.w	8006692 <_printf_float+0xb6>
 80069e6:	f108 0801 	add.w	r8, r8, #1
 80069ea:	45d0      	cmp	r8, sl
 80069ec:	dbf3      	blt.n	80069d6 <_printf_float+0x3fa>
 80069ee:	464b      	mov	r3, r9
 80069f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069f4:	e6df      	b.n	80067b6 <_printf_float+0x1da>
 80069f6:	f04f 0800 	mov.w	r8, #0
 80069fa:	f104 0b1a 	add.w	fp, r4, #26
 80069fe:	e7f4      	b.n	80069ea <_printf_float+0x40e>
 8006a00:	2301      	movs	r3, #1
 8006a02:	4642      	mov	r2, r8
 8006a04:	e7e1      	b.n	80069ca <_printf_float+0x3ee>
 8006a06:	2301      	movs	r3, #1
 8006a08:	464a      	mov	r2, r9
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	f43f ae3e 	beq.w	8006692 <_printf_float+0xb6>
 8006a16:	f108 0801 	add.w	r8, r8, #1
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a1e:	1a5b      	subs	r3, r3, r1
 8006a20:	4543      	cmp	r3, r8
 8006a22:	dcf0      	bgt.n	8006a06 <_printf_float+0x42a>
 8006a24:	e6fc      	b.n	8006820 <_printf_float+0x244>
 8006a26:	f04f 0800 	mov.w	r8, #0
 8006a2a:	f104 0919 	add.w	r9, r4, #25
 8006a2e:	e7f4      	b.n	8006a1a <_printf_float+0x43e>

08006a30 <_printf_common>:
 8006a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	4616      	mov	r6, r2
 8006a36:	4698      	mov	r8, r3
 8006a38:	688a      	ldr	r2, [r1, #8]
 8006a3a:	690b      	ldr	r3, [r1, #16]
 8006a3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	bfb8      	it	lt
 8006a44:	4613      	movlt	r3, r2
 8006a46:	6033      	str	r3, [r6, #0]
 8006a48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	b10a      	cbz	r2, 8006a56 <_printf_common+0x26>
 8006a52:	3301      	adds	r3, #1
 8006a54:	6033      	str	r3, [r6, #0]
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	0699      	lsls	r1, r3, #26
 8006a5a:	bf42      	ittt	mi
 8006a5c:	6833      	ldrmi	r3, [r6, #0]
 8006a5e:	3302      	addmi	r3, #2
 8006a60:	6033      	strmi	r3, [r6, #0]
 8006a62:	6825      	ldr	r5, [r4, #0]
 8006a64:	f015 0506 	ands.w	r5, r5, #6
 8006a68:	d106      	bne.n	8006a78 <_printf_common+0x48>
 8006a6a:	f104 0a19 	add.w	sl, r4, #25
 8006a6e:	68e3      	ldr	r3, [r4, #12]
 8006a70:	6832      	ldr	r2, [r6, #0]
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	42ab      	cmp	r3, r5
 8006a76:	dc26      	bgt.n	8006ac6 <_printf_common+0x96>
 8006a78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a7c:	6822      	ldr	r2, [r4, #0]
 8006a7e:	3b00      	subs	r3, #0
 8006a80:	bf18      	it	ne
 8006a82:	2301      	movne	r3, #1
 8006a84:	0692      	lsls	r2, r2, #26
 8006a86:	d42b      	bmi.n	8006ae0 <_printf_common+0xb0>
 8006a88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	4638      	mov	r0, r7
 8006a90:	47c8      	blx	r9
 8006a92:	3001      	adds	r0, #1
 8006a94:	d01e      	beq.n	8006ad4 <_printf_common+0xa4>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	6922      	ldr	r2, [r4, #16]
 8006a9a:	f003 0306 	and.w	r3, r3, #6
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	bf02      	ittt	eq
 8006aa2:	68e5      	ldreq	r5, [r4, #12]
 8006aa4:	6833      	ldreq	r3, [r6, #0]
 8006aa6:	1aed      	subeq	r5, r5, r3
 8006aa8:	68a3      	ldr	r3, [r4, #8]
 8006aaa:	bf0c      	ite	eq
 8006aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ab0:	2500      	movne	r5, #0
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	bfc4      	itt	gt
 8006ab6:	1a9b      	subgt	r3, r3, r2
 8006ab8:	18ed      	addgt	r5, r5, r3
 8006aba:	2600      	movs	r6, #0
 8006abc:	341a      	adds	r4, #26
 8006abe:	42b5      	cmp	r5, r6
 8006ac0:	d11a      	bne.n	8006af8 <_printf_common+0xc8>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	e008      	b.n	8006ad8 <_printf_common+0xa8>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4652      	mov	r2, sl
 8006aca:	4641      	mov	r1, r8
 8006acc:	4638      	mov	r0, r7
 8006ace:	47c8      	blx	r9
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d103      	bne.n	8006adc <_printf_common+0xac>
 8006ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006adc:	3501      	adds	r5, #1
 8006ade:	e7c6      	b.n	8006a6e <_printf_common+0x3e>
 8006ae0:	18e1      	adds	r1, r4, r3
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	2030      	movs	r0, #48	@ 0x30
 8006ae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006aea:	4422      	add	r2, r4
 8006aec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006af0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006af4:	3302      	adds	r3, #2
 8006af6:	e7c7      	b.n	8006a88 <_printf_common+0x58>
 8006af8:	2301      	movs	r3, #1
 8006afa:	4622      	mov	r2, r4
 8006afc:	4641      	mov	r1, r8
 8006afe:	4638      	mov	r0, r7
 8006b00:	47c8      	blx	r9
 8006b02:	3001      	adds	r0, #1
 8006b04:	d0e6      	beq.n	8006ad4 <_printf_common+0xa4>
 8006b06:	3601      	adds	r6, #1
 8006b08:	e7d9      	b.n	8006abe <_printf_common+0x8e>
	...

08006b0c <_printf_i>:
 8006b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	7e0f      	ldrb	r7, [r1, #24]
 8006b12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b14:	2f78      	cmp	r7, #120	@ 0x78
 8006b16:	4691      	mov	r9, r2
 8006b18:	4680      	mov	r8, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	469a      	mov	sl, r3
 8006b1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b22:	d807      	bhi.n	8006b34 <_printf_i+0x28>
 8006b24:	2f62      	cmp	r7, #98	@ 0x62
 8006b26:	d80a      	bhi.n	8006b3e <_printf_i+0x32>
 8006b28:	2f00      	cmp	r7, #0
 8006b2a:	f000 80d2 	beq.w	8006cd2 <_printf_i+0x1c6>
 8006b2e:	2f58      	cmp	r7, #88	@ 0x58
 8006b30:	f000 80b9 	beq.w	8006ca6 <_printf_i+0x19a>
 8006b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b3c:	e03a      	b.n	8006bb4 <_printf_i+0xa8>
 8006b3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b42:	2b15      	cmp	r3, #21
 8006b44:	d8f6      	bhi.n	8006b34 <_printf_i+0x28>
 8006b46:	a101      	add	r1, pc, #4	@ (adr r1, 8006b4c <_printf_i+0x40>)
 8006b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b4c:	08006ba5 	.word	0x08006ba5
 8006b50:	08006bb9 	.word	0x08006bb9
 8006b54:	08006b35 	.word	0x08006b35
 8006b58:	08006b35 	.word	0x08006b35
 8006b5c:	08006b35 	.word	0x08006b35
 8006b60:	08006b35 	.word	0x08006b35
 8006b64:	08006bb9 	.word	0x08006bb9
 8006b68:	08006b35 	.word	0x08006b35
 8006b6c:	08006b35 	.word	0x08006b35
 8006b70:	08006b35 	.word	0x08006b35
 8006b74:	08006b35 	.word	0x08006b35
 8006b78:	08006cb9 	.word	0x08006cb9
 8006b7c:	08006be3 	.word	0x08006be3
 8006b80:	08006c73 	.word	0x08006c73
 8006b84:	08006b35 	.word	0x08006b35
 8006b88:	08006b35 	.word	0x08006b35
 8006b8c:	08006cdb 	.word	0x08006cdb
 8006b90:	08006b35 	.word	0x08006b35
 8006b94:	08006be3 	.word	0x08006be3
 8006b98:	08006b35 	.word	0x08006b35
 8006b9c:	08006b35 	.word	0x08006b35
 8006ba0:	08006c7b 	.word	0x08006c7b
 8006ba4:	6833      	ldr	r3, [r6, #0]
 8006ba6:	1d1a      	adds	r2, r3, #4
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6032      	str	r2, [r6, #0]
 8006bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e09d      	b.n	8006cf4 <_printf_i+0x1e8>
 8006bb8:	6833      	ldr	r3, [r6, #0]
 8006bba:	6820      	ldr	r0, [r4, #0]
 8006bbc:	1d19      	adds	r1, r3, #4
 8006bbe:	6031      	str	r1, [r6, #0]
 8006bc0:	0606      	lsls	r6, r0, #24
 8006bc2:	d501      	bpl.n	8006bc8 <_printf_i+0xbc>
 8006bc4:	681d      	ldr	r5, [r3, #0]
 8006bc6:	e003      	b.n	8006bd0 <_printf_i+0xc4>
 8006bc8:	0645      	lsls	r5, r0, #25
 8006bca:	d5fb      	bpl.n	8006bc4 <_printf_i+0xb8>
 8006bcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bd0:	2d00      	cmp	r5, #0
 8006bd2:	da03      	bge.n	8006bdc <_printf_i+0xd0>
 8006bd4:	232d      	movs	r3, #45	@ 0x2d
 8006bd6:	426d      	negs	r5, r5
 8006bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bdc:	4859      	ldr	r0, [pc, #356]	@ (8006d44 <_printf_i+0x238>)
 8006bde:	230a      	movs	r3, #10
 8006be0:	e011      	b.n	8006c06 <_printf_i+0xfa>
 8006be2:	6821      	ldr	r1, [r4, #0]
 8006be4:	6833      	ldr	r3, [r6, #0]
 8006be6:	0608      	lsls	r0, r1, #24
 8006be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bec:	d402      	bmi.n	8006bf4 <_printf_i+0xe8>
 8006bee:	0649      	lsls	r1, r1, #25
 8006bf0:	bf48      	it	mi
 8006bf2:	b2ad      	uxthmi	r5, r5
 8006bf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bf6:	4853      	ldr	r0, [pc, #332]	@ (8006d44 <_printf_i+0x238>)
 8006bf8:	6033      	str	r3, [r6, #0]
 8006bfa:	bf14      	ite	ne
 8006bfc:	230a      	movne	r3, #10
 8006bfe:	2308      	moveq	r3, #8
 8006c00:	2100      	movs	r1, #0
 8006c02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c06:	6866      	ldr	r6, [r4, #4]
 8006c08:	60a6      	str	r6, [r4, #8]
 8006c0a:	2e00      	cmp	r6, #0
 8006c0c:	bfa2      	ittt	ge
 8006c0e:	6821      	ldrge	r1, [r4, #0]
 8006c10:	f021 0104 	bicge.w	r1, r1, #4
 8006c14:	6021      	strge	r1, [r4, #0]
 8006c16:	b90d      	cbnz	r5, 8006c1c <_printf_i+0x110>
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	d04b      	beq.n	8006cb4 <_printf_i+0x1a8>
 8006c1c:	4616      	mov	r6, r2
 8006c1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c22:	fb03 5711 	mls	r7, r3, r1, r5
 8006c26:	5dc7      	ldrb	r7, [r0, r7]
 8006c28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c2c:	462f      	mov	r7, r5
 8006c2e:	42bb      	cmp	r3, r7
 8006c30:	460d      	mov	r5, r1
 8006c32:	d9f4      	bls.n	8006c1e <_printf_i+0x112>
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d10b      	bne.n	8006c50 <_printf_i+0x144>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	07df      	lsls	r7, r3, #31
 8006c3c:	d508      	bpl.n	8006c50 <_printf_i+0x144>
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	6861      	ldr	r1, [r4, #4]
 8006c42:	4299      	cmp	r1, r3
 8006c44:	bfde      	ittt	le
 8006c46:	2330      	movle	r3, #48	@ 0x30
 8006c48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c50:	1b92      	subs	r2, r2, r6
 8006c52:	6122      	str	r2, [r4, #16]
 8006c54:	f8cd a000 	str.w	sl, [sp]
 8006c58:	464b      	mov	r3, r9
 8006c5a:	aa03      	add	r2, sp, #12
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4640      	mov	r0, r8
 8006c60:	f7ff fee6 	bl	8006a30 <_printf_common>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d14a      	bne.n	8006cfe <_printf_i+0x1f2>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	b004      	add	sp, #16
 8006c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	f043 0320 	orr.w	r3, r3, #32
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	4833      	ldr	r0, [pc, #204]	@ (8006d48 <_printf_i+0x23c>)
 8006c7c:	2778      	movs	r7, #120	@ 0x78
 8006c7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	6831      	ldr	r1, [r6, #0]
 8006c86:	061f      	lsls	r7, r3, #24
 8006c88:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c8c:	d402      	bmi.n	8006c94 <_printf_i+0x188>
 8006c8e:	065f      	lsls	r7, r3, #25
 8006c90:	bf48      	it	mi
 8006c92:	b2ad      	uxthmi	r5, r5
 8006c94:	6031      	str	r1, [r6, #0]
 8006c96:	07d9      	lsls	r1, r3, #31
 8006c98:	bf44      	itt	mi
 8006c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c9e:	6023      	strmi	r3, [r4, #0]
 8006ca0:	b11d      	cbz	r5, 8006caa <_printf_i+0x19e>
 8006ca2:	2310      	movs	r3, #16
 8006ca4:	e7ac      	b.n	8006c00 <_printf_i+0xf4>
 8006ca6:	4827      	ldr	r0, [pc, #156]	@ (8006d44 <_printf_i+0x238>)
 8006ca8:	e7e9      	b.n	8006c7e <_printf_i+0x172>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	f023 0320 	bic.w	r3, r3, #32
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	e7f6      	b.n	8006ca2 <_printf_i+0x196>
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	e7bd      	b.n	8006c34 <_printf_i+0x128>
 8006cb8:	6833      	ldr	r3, [r6, #0]
 8006cba:	6825      	ldr	r5, [r4, #0]
 8006cbc:	6961      	ldr	r1, [r4, #20]
 8006cbe:	1d18      	adds	r0, r3, #4
 8006cc0:	6030      	str	r0, [r6, #0]
 8006cc2:	062e      	lsls	r6, r5, #24
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	d501      	bpl.n	8006ccc <_printf_i+0x1c0>
 8006cc8:	6019      	str	r1, [r3, #0]
 8006cca:	e002      	b.n	8006cd2 <_printf_i+0x1c6>
 8006ccc:	0668      	lsls	r0, r5, #25
 8006cce:	d5fb      	bpl.n	8006cc8 <_printf_i+0x1bc>
 8006cd0:	8019      	strh	r1, [r3, #0]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6123      	str	r3, [r4, #16]
 8006cd6:	4616      	mov	r6, r2
 8006cd8:	e7bc      	b.n	8006c54 <_printf_i+0x148>
 8006cda:	6833      	ldr	r3, [r6, #0]
 8006cdc:	1d1a      	adds	r2, r3, #4
 8006cde:	6032      	str	r2, [r6, #0]
 8006ce0:	681e      	ldr	r6, [r3, #0]
 8006ce2:	6862      	ldr	r2, [r4, #4]
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7f9 fa82 	bl	80001f0 <memchr>
 8006cec:	b108      	cbz	r0, 8006cf2 <_printf_i+0x1e6>
 8006cee:	1b80      	subs	r0, r0, r6
 8006cf0:	6060      	str	r0, [r4, #4]
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cfc:	e7aa      	b.n	8006c54 <_printf_i+0x148>
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	4632      	mov	r2, r6
 8006d02:	4649      	mov	r1, r9
 8006d04:	4640      	mov	r0, r8
 8006d06:	47d0      	blx	sl
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d0ad      	beq.n	8006c68 <_printf_i+0x15c>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	079b      	lsls	r3, r3, #30
 8006d10:	d413      	bmi.n	8006d3a <_printf_i+0x22e>
 8006d12:	68e0      	ldr	r0, [r4, #12]
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	4298      	cmp	r0, r3
 8006d18:	bfb8      	it	lt
 8006d1a:	4618      	movlt	r0, r3
 8006d1c:	e7a6      	b.n	8006c6c <_printf_i+0x160>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4632      	mov	r2, r6
 8006d22:	4649      	mov	r1, r9
 8006d24:	4640      	mov	r0, r8
 8006d26:	47d0      	blx	sl
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d09d      	beq.n	8006c68 <_printf_i+0x15c>
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	68e3      	ldr	r3, [r4, #12]
 8006d30:	9903      	ldr	r1, [sp, #12]
 8006d32:	1a5b      	subs	r3, r3, r1
 8006d34:	42ab      	cmp	r3, r5
 8006d36:	dcf2      	bgt.n	8006d1e <_printf_i+0x212>
 8006d38:	e7eb      	b.n	8006d12 <_printf_i+0x206>
 8006d3a:	2500      	movs	r5, #0
 8006d3c:	f104 0619 	add.w	r6, r4, #25
 8006d40:	e7f5      	b.n	8006d2e <_printf_i+0x222>
 8006d42:	bf00      	nop
 8006d44:	0800c2ec 	.word	0x0800c2ec
 8006d48:	0800c2fd 	.word	0x0800c2fd

08006d4c <_scanf_float>:
 8006d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d50:	b087      	sub	sp, #28
 8006d52:	4617      	mov	r7, r2
 8006d54:	9303      	str	r3, [sp, #12]
 8006d56:	688b      	ldr	r3, [r1, #8]
 8006d58:	1e5a      	subs	r2, r3, #1
 8006d5a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006d5e:	bf81      	itttt	hi
 8006d60:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006d64:	eb03 0b05 	addhi.w	fp, r3, r5
 8006d68:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006d6c:	608b      	strhi	r3, [r1, #8]
 8006d6e:	680b      	ldr	r3, [r1, #0]
 8006d70:	460a      	mov	r2, r1
 8006d72:	f04f 0500 	mov.w	r5, #0
 8006d76:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006d7a:	f842 3b1c 	str.w	r3, [r2], #28
 8006d7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d82:	4680      	mov	r8, r0
 8006d84:	460c      	mov	r4, r1
 8006d86:	bf98      	it	ls
 8006d88:	f04f 0b00 	movls.w	fp, #0
 8006d8c:	9201      	str	r2, [sp, #4]
 8006d8e:	4616      	mov	r6, r2
 8006d90:	46aa      	mov	sl, r5
 8006d92:	46a9      	mov	r9, r5
 8006d94:	9502      	str	r5, [sp, #8]
 8006d96:	68a2      	ldr	r2, [r4, #8]
 8006d98:	b152      	cbz	r2, 8006db0 <_scanf_float+0x64>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006da0:	d864      	bhi.n	8006e6c <_scanf_float+0x120>
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	d83c      	bhi.n	8006e20 <_scanf_float+0xd4>
 8006da6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006daa:	b2c8      	uxtb	r0, r1
 8006dac:	280e      	cmp	r0, #14
 8006dae:	d93a      	bls.n	8006e26 <_scanf_float+0xda>
 8006db0:	f1b9 0f00 	cmp.w	r9, #0
 8006db4:	d003      	beq.n	8006dbe <_scanf_float+0x72>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dc2:	f1ba 0f01 	cmp.w	sl, #1
 8006dc6:	f200 8117 	bhi.w	8006ff8 <_scanf_float+0x2ac>
 8006dca:	9b01      	ldr	r3, [sp, #4]
 8006dcc:	429e      	cmp	r6, r3
 8006dce:	f200 8108 	bhi.w	8006fe2 <_scanf_float+0x296>
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	b007      	add	sp, #28
 8006dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dda:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006dde:	2a0d      	cmp	r2, #13
 8006de0:	d8e6      	bhi.n	8006db0 <_scanf_float+0x64>
 8006de2:	a101      	add	r1, pc, #4	@ (adr r1, 8006de8 <_scanf_float+0x9c>)
 8006de4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006de8:	08006f2f 	.word	0x08006f2f
 8006dec:	08006db1 	.word	0x08006db1
 8006df0:	08006db1 	.word	0x08006db1
 8006df4:	08006db1 	.word	0x08006db1
 8006df8:	08006f8f 	.word	0x08006f8f
 8006dfc:	08006f67 	.word	0x08006f67
 8006e00:	08006db1 	.word	0x08006db1
 8006e04:	08006db1 	.word	0x08006db1
 8006e08:	08006f3d 	.word	0x08006f3d
 8006e0c:	08006db1 	.word	0x08006db1
 8006e10:	08006db1 	.word	0x08006db1
 8006e14:	08006db1 	.word	0x08006db1
 8006e18:	08006db1 	.word	0x08006db1
 8006e1c:	08006ef5 	.word	0x08006ef5
 8006e20:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006e24:	e7db      	b.n	8006dde <_scanf_float+0x92>
 8006e26:	290e      	cmp	r1, #14
 8006e28:	d8c2      	bhi.n	8006db0 <_scanf_float+0x64>
 8006e2a:	a001      	add	r0, pc, #4	@ (adr r0, 8006e30 <_scanf_float+0xe4>)
 8006e2c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e30:	08006ee5 	.word	0x08006ee5
 8006e34:	08006db1 	.word	0x08006db1
 8006e38:	08006ee5 	.word	0x08006ee5
 8006e3c:	08006f7b 	.word	0x08006f7b
 8006e40:	08006db1 	.word	0x08006db1
 8006e44:	08006e8d 	.word	0x08006e8d
 8006e48:	08006ecb 	.word	0x08006ecb
 8006e4c:	08006ecb 	.word	0x08006ecb
 8006e50:	08006ecb 	.word	0x08006ecb
 8006e54:	08006ecb 	.word	0x08006ecb
 8006e58:	08006ecb 	.word	0x08006ecb
 8006e5c:	08006ecb 	.word	0x08006ecb
 8006e60:	08006ecb 	.word	0x08006ecb
 8006e64:	08006ecb 	.word	0x08006ecb
 8006e68:	08006ecb 	.word	0x08006ecb
 8006e6c:	2b6e      	cmp	r3, #110	@ 0x6e
 8006e6e:	d809      	bhi.n	8006e84 <_scanf_float+0x138>
 8006e70:	2b60      	cmp	r3, #96	@ 0x60
 8006e72:	d8b2      	bhi.n	8006dda <_scanf_float+0x8e>
 8006e74:	2b54      	cmp	r3, #84	@ 0x54
 8006e76:	d07b      	beq.n	8006f70 <_scanf_float+0x224>
 8006e78:	2b59      	cmp	r3, #89	@ 0x59
 8006e7a:	d199      	bne.n	8006db0 <_scanf_float+0x64>
 8006e7c:	2d07      	cmp	r5, #7
 8006e7e:	d197      	bne.n	8006db0 <_scanf_float+0x64>
 8006e80:	2508      	movs	r5, #8
 8006e82:	e02c      	b.n	8006ede <_scanf_float+0x192>
 8006e84:	2b74      	cmp	r3, #116	@ 0x74
 8006e86:	d073      	beq.n	8006f70 <_scanf_float+0x224>
 8006e88:	2b79      	cmp	r3, #121	@ 0x79
 8006e8a:	e7f6      	b.n	8006e7a <_scanf_float+0x12e>
 8006e8c:	6821      	ldr	r1, [r4, #0]
 8006e8e:	05c8      	lsls	r0, r1, #23
 8006e90:	d51b      	bpl.n	8006eca <_scanf_float+0x17e>
 8006e92:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006e96:	6021      	str	r1, [r4, #0]
 8006e98:	f109 0901 	add.w	r9, r9, #1
 8006e9c:	f1bb 0f00 	cmp.w	fp, #0
 8006ea0:	d003      	beq.n	8006eaa <_scanf_float+0x15e>
 8006ea2:	3201      	adds	r2, #1
 8006ea4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ea8:	60a2      	str	r2, [r4, #8]
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	60a3      	str	r3, [r4, #8]
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	6123      	str	r3, [r4, #16]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	607b      	str	r3, [r7, #4]
 8006ebe:	f340 8087 	ble.w	8006fd0 <_scanf_float+0x284>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	e765      	b.n	8006d96 <_scanf_float+0x4a>
 8006eca:	eb1a 0105 	adds.w	r1, sl, r5
 8006ece:	f47f af6f 	bne.w	8006db0 <_scanf_float+0x64>
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006ed8:	6022      	str	r2, [r4, #0]
 8006eda:	460d      	mov	r5, r1
 8006edc:	468a      	mov	sl, r1
 8006ede:	f806 3b01 	strb.w	r3, [r6], #1
 8006ee2:	e7e2      	b.n	8006eaa <_scanf_float+0x15e>
 8006ee4:	6822      	ldr	r2, [r4, #0]
 8006ee6:	0610      	lsls	r0, r2, #24
 8006ee8:	f57f af62 	bpl.w	8006db0 <_scanf_float+0x64>
 8006eec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ef0:	6022      	str	r2, [r4, #0]
 8006ef2:	e7f4      	b.n	8006ede <_scanf_float+0x192>
 8006ef4:	f1ba 0f00 	cmp.w	sl, #0
 8006ef8:	d10e      	bne.n	8006f18 <_scanf_float+0x1cc>
 8006efa:	f1b9 0f00 	cmp.w	r9, #0
 8006efe:	d10e      	bne.n	8006f1e <_scanf_float+0x1d2>
 8006f00:	6822      	ldr	r2, [r4, #0]
 8006f02:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006f06:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006f0a:	d108      	bne.n	8006f1e <_scanf_float+0x1d2>
 8006f0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f10:	6022      	str	r2, [r4, #0]
 8006f12:	f04f 0a01 	mov.w	sl, #1
 8006f16:	e7e2      	b.n	8006ede <_scanf_float+0x192>
 8006f18:	f1ba 0f02 	cmp.w	sl, #2
 8006f1c:	d055      	beq.n	8006fca <_scanf_float+0x27e>
 8006f1e:	2d01      	cmp	r5, #1
 8006f20:	d002      	beq.n	8006f28 <_scanf_float+0x1dc>
 8006f22:	2d04      	cmp	r5, #4
 8006f24:	f47f af44 	bne.w	8006db0 <_scanf_float+0x64>
 8006f28:	3501      	adds	r5, #1
 8006f2a:	b2ed      	uxtb	r5, r5
 8006f2c:	e7d7      	b.n	8006ede <_scanf_float+0x192>
 8006f2e:	f1ba 0f01 	cmp.w	sl, #1
 8006f32:	f47f af3d 	bne.w	8006db0 <_scanf_float+0x64>
 8006f36:	f04f 0a02 	mov.w	sl, #2
 8006f3a:	e7d0      	b.n	8006ede <_scanf_float+0x192>
 8006f3c:	b97d      	cbnz	r5, 8006f5e <_scanf_float+0x212>
 8006f3e:	f1b9 0f00 	cmp.w	r9, #0
 8006f42:	f47f af38 	bne.w	8006db6 <_scanf_float+0x6a>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006f4c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006f50:	f040 8108 	bne.w	8007164 <_scanf_float+0x418>
 8006f54:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f58:	6022      	str	r2, [r4, #0]
 8006f5a:	2501      	movs	r5, #1
 8006f5c:	e7bf      	b.n	8006ede <_scanf_float+0x192>
 8006f5e:	2d03      	cmp	r5, #3
 8006f60:	d0e2      	beq.n	8006f28 <_scanf_float+0x1dc>
 8006f62:	2d05      	cmp	r5, #5
 8006f64:	e7de      	b.n	8006f24 <_scanf_float+0x1d8>
 8006f66:	2d02      	cmp	r5, #2
 8006f68:	f47f af22 	bne.w	8006db0 <_scanf_float+0x64>
 8006f6c:	2503      	movs	r5, #3
 8006f6e:	e7b6      	b.n	8006ede <_scanf_float+0x192>
 8006f70:	2d06      	cmp	r5, #6
 8006f72:	f47f af1d 	bne.w	8006db0 <_scanf_float+0x64>
 8006f76:	2507      	movs	r5, #7
 8006f78:	e7b1      	b.n	8006ede <_scanf_float+0x192>
 8006f7a:	6822      	ldr	r2, [r4, #0]
 8006f7c:	0591      	lsls	r1, r2, #22
 8006f7e:	f57f af17 	bpl.w	8006db0 <_scanf_float+0x64>
 8006f82:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006f86:	6022      	str	r2, [r4, #0]
 8006f88:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f8c:	e7a7      	b.n	8006ede <_scanf_float+0x192>
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006f94:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f98:	d006      	beq.n	8006fa8 <_scanf_float+0x25c>
 8006f9a:	0550      	lsls	r0, r2, #21
 8006f9c:	f57f af08 	bpl.w	8006db0 <_scanf_float+0x64>
 8006fa0:	f1b9 0f00 	cmp.w	r9, #0
 8006fa4:	f000 80de 	beq.w	8007164 <_scanf_float+0x418>
 8006fa8:	0591      	lsls	r1, r2, #22
 8006faa:	bf58      	it	pl
 8006fac:	9902      	ldrpl	r1, [sp, #8]
 8006fae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006fb2:	bf58      	it	pl
 8006fb4:	eba9 0101 	subpl.w	r1, r9, r1
 8006fb8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006fbc:	bf58      	it	pl
 8006fbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006fc2:	6022      	str	r2, [r4, #0]
 8006fc4:	f04f 0900 	mov.w	r9, #0
 8006fc8:	e789      	b.n	8006ede <_scanf_float+0x192>
 8006fca:	f04f 0a03 	mov.w	sl, #3
 8006fce:	e786      	b.n	8006ede <_scanf_float+0x192>
 8006fd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	4798      	blx	r3
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	f43f aedb 	beq.w	8006d96 <_scanf_float+0x4a>
 8006fe0:	e6e6      	b.n	8006db0 <_scanf_float+0x64>
 8006fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fea:	463a      	mov	r2, r7
 8006fec:	4640      	mov	r0, r8
 8006fee:	4798      	blx	r3
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	6123      	str	r3, [r4, #16]
 8006ff6:	e6e8      	b.n	8006dca <_scanf_float+0x7e>
 8006ff8:	1e6b      	subs	r3, r5, #1
 8006ffa:	2b06      	cmp	r3, #6
 8006ffc:	d824      	bhi.n	8007048 <_scanf_float+0x2fc>
 8006ffe:	2d02      	cmp	r5, #2
 8007000:	d836      	bhi.n	8007070 <_scanf_float+0x324>
 8007002:	9b01      	ldr	r3, [sp, #4]
 8007004:	429e      	cmp	r6, r3
 8007006:	f67f aee4 	bls.w	8006dd2 <_scanf_float+0x86>
 800700a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800700e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007012:	463a      	mov	r2, r7
 8007014:	4640      	mov	r0, r8
 8007016:	4798      	blx	r3
 8007018:	6923      	ldr	r3, [r4, #16]
 800701a:	3b01      	subs	r3, #1
 800701c:	6123      	str	r3, [r4, #16]
 800701e:	e7f0      	b.n	8007002 <_scanf_float+0x2b6>
 8007020:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007024:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007028:	463a      	mov	r2, r7
 800702a:	4640      	mov	r0, r8
 800702c:	4798      	blx	r3
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	3b01      	subs	r3, #1
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007038:	fa5f fa8a 	uxtb.w	sl, sl
 800703c:	f1ba 0f02 	cmp.w	sl, #2
 8007040:	d1ee      	bne.n	8007020 <_scanf_float+0x2d4>
 8007042:	3d03      	subs	r5, #3
 8007044:	b2ed      	uxtb	r5, r5
 8007046:	1b76      	subs	r6, r6, r5
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	05da      	lsls	r2, r3, #23
 800704c:	d530      	bpl.n	80070b0 <_scanf_float+0x364>
 800704e:	055b      	lsls	r3, r3, #21
 8007050:	d511      	bpl.n	8007076 <_scanf_float+0x32a>
 8007052:	9b01      	ldr	r3, [sp, #4]
 8007054:	429e      	cmp	r6, r3
 8007056:	f67f aebc 	bls.w	8006dd2 <_scanf_float+0x86>
 800705a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800705e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007062:	463a      	mov	r2, r7
 8007064:	4640      	mov	r0, r8
 8007066:	4798      	blx	r3
 8007068:	6923      	ldr	r3, [r4, #16]
 800706a:	3b01      	subs	r3, #1
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	e7f0      	b.n	8007052 <_scanf_float+0x306>
 8007070:	46aa      	mov	sl, r5
 8007072:	46b3      	mov	fp, r6
 8007074:	e7de      	b.n	8007034 <_scanf_float+0x2e8>
 8007076:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	2965      	cmp	r1, #101	@ 0x65
 800707e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007082:	f106 35ff 	add.w	r5, r6, #4294967295
 8007086:	6123      	str	r3, [r4, #16]
 8007088:	d00c      	beq.n	80070a4 <_scanf_float+0x358>
 800708a:	2945      	cmp	r1, #69	@ 0x45
 800708c:	d00a      	beq.n	80070a4 <_scanf_float+0x358>
 800708e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007092:	463a      	mov	r2, r7
 8007094:	4640      	mov	r0, r8
 8007096:	4798      	blx	r3
 8007098:	6923      	ldr	r3, [r4, #16]
 800709a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800709e:	3b01      	subs	r3, #1
 80070a0:	1eb5      	subs	r5, r6, #2
 80070a2:	6123      	str	r3, [r4, #16]
 80070a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070a8:	463a      	mov	r2, r7
 80070aa:	4640      	mov	r0, r8
 80070ac:	4798      	blx	r3
 80070ae:	462e      	mov	r6, r5
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	f012 0210 	ands.w	r2, r2, #16
 80070b6:	d001      	beq.n	80070bc <_scanf_float+0x370>
 80070b8:	2000      	movs	r0, #0
 80070ba:	e68b      	b.n	8006dd4 <_scanf_float+0x88>
 80070bc:	7032      	strb	r2, [r6, #0]
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80070c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c8:	d11c      	bne.n	8007104 <_scanf_float+0x3b8>
 80070ca:	9b02      	ldr	r3, [sp, #8]
 80070cc:	454b      	cmp	r3, r9
 80070ce:	eba3 0209 	sub.w	r2, r3, r9
 80070d2:	d123      	bne.n	800711c <_scanf_float+0x3d0>
 80070d4:	9901      	ldr	r1, [sp, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	4640      	mov	r0, r8
 80070da:	f002 fd41 	bl	8009b60 <_strtod_r>
 80070de:	9b03      	ldr	r3, [sp, #12]
 80070e0:	6821      	ldr	r1, [r4, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f011 0f02 	tst.w	r1, #2
 80070e8:	ec57 6b10 	vmov	r6, r7, d0
 80070ec:	f103 0204 	add.w	r2, r3, #4
 80070f0:	d01f      	beq.n	8007132 <_scanf_float+0x3e6>
 80070f2:	9903      	ldr	r1, [sp, #12]
 80070f4:	600a      	str	r2, [r1, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	e9c3 6700 	strd	r6, r7, [r3]
 80070fc:	68e3      	ldr	r3, [r4, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	60e3      	str	r3, [r4, #12]
 8007102:	e7d9      	b.n	80070b8 <_scanf_float+0x36c>
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0e4      	beq.n	80070d4 <_scanf_float+0x388>
 800710a:	9905      	ldr	r1, [sp, #20]
 800710c:	230a      	movs	r3, #10
 800710e:	3101      	adds	r1, #1
 8007110:	4640      	mov	r0, r8
 8007112:	f002 fda5 	bl	8009c60 <_strtol_r>
 8007116:	9b04      	ldr	r3, [sp, #16]
 8007118:	9e05      	ldr	r6, [sp, #20]
 800711a:	1ac2      	subs	r2, r0, r3
 800711c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007120:	429e      	cmp	r6, r3
 8007122:	bf28      	it	cs
 8007124:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007128:	4910      	ldr	r1, [pc, #64]	@ (800716c <_scanf_float+0x420>)
 800712a:	4630      	mov	r0, r6
 800712c:	f000 f988 	bl	8007440 <siprintf>
 8007130:	e7d0      	b.n	80070d4 <_scanf_float+0x388>
 8007132:	f011 0f04 	tst.w	r1, #4
 8007136:	9903      	ldr	r1, [sp, #12]
 8007138:	600a      	str	r2, [r1, #0]
 800713a:	d1dc      	bne.n	80070f6 <_scanf_float+0x3aa>
 800713c:	681d      	ldr	r5, [r3, #0]
 800713e:	4632      	mov	r2, r6
 8007140:	463b      	mov	r3, r7
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 fd01 	bl	8000b4c <__aeabi_dcmpun>
 800714a:	b128      	cbz	r0, 8007158 <_scanf_float+0x40c>
 800714c:	4808      	ldr	r0, [pc, #32]	@ (8007170 <_scanf_float+0x424>)
 800714e:	f000 faff 	bl	8007750 <nanf>
 8007152:	ed85 0a00 	vstr	s0, [r5]
 8007156:	e7d1      	b.n	80070fc <_scanf_float+0x3b0>
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 fd54 	bl	8000c08 <__aeabi_d2f>
 8007160:	6028      	str	r0, [r5, #0]
 8007162:	e7cb      	b.n	80070fc <_scanf_float+0x3b0>
 8007164:	f04f 0900 	mov.w	r9, #0
 8007168:	e629      	b.n	8006dbe <_scanf_float+0x72>
 800716a:	bf00      	nop
 800716c:	0800c30e 	.word	0x0800c30e
 8007170:	0800c6c0 	.word	0x0800c6c0

08007174 <std>:
 8007174:	2300      	movs	r3, #0
 8007176:	b510      	push	{r4, lr}
 8007178:	4604      	mov	r4, r0
 800717a:	e9c0 3300 	strd	r3, r3, [r0]
 800717e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007182:	6083      	str	r3, [r0, #8]
 8007184:	8181      	strh	r1, [r0, #12]
 8007186:	6643      	str	r3, [r0, #100]	@ 0x64
 8007188:	81c2      	strh	r2, [r0, #14]
 800718a:	6183      	str	r3, [r0, #24]
 800718c:	4619      	mov	r1, r3
 800718e:	2208      	movs	r2, #8
 8007190:	305c      	adds	r0, #92	@ 0x5c
 8007192:	f000 fa4d 	bl	8007630 <memset>
 8007196:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <std+0x58>)
 8007198:	6263      	str	r3, [r4, #36]	@ 0x24
 800719a:	4b0d      	ldr	r3, [pc, #52]	@ (80071d0 <std+0x5c>)
 800719c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800719e:	4b0d      	ldr	r3, [pc, #52]	@ (80071d4 <std+0x60>)
 80071a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071a2:	4b0d      	ldr	r3, [pc, #52]	@ (80071d8 <std+0x64>)
 80071a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80071a6:	4b0d      	ldr	r3, [pc, #52]	@ (80071dc <std+0x68>)
 80071a8:	6224      	str	r4, [r4, #32]
 80071aa:	429c      	cmp	r4, r3
 80071ac:	d006      	beq.n	80071bc <std+0x48>
 80071ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071b2:	4294      	cmp	r4, r2
 80071b4:	d002      	beq.n	80071bc <std+0x48>
 80071b6:	33d0      	adds	r3, #208	@ 0xd0
 80071b8:	429c      	cmp	r4, r3
 80071ba:	d105      	bne.n	80071c8 <std+0x54>
 80071bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c4:	f000 bac0 	b.w	8007748 <__retarget_lock_init_recursive>
 80071c8:	bd10      	pop	{r4, pc}
 80071ca:	bf00      	nop
 80071cc:	08007481 	.word	0x08007481
 80071d0:	080074a3 	.word	0x080074a3
 80071d4:	080074db 	.word	0x080074db
 80071d8:	080074ff 	.word	0x080074ff
 80071dc:	2000037c 	.word	0x2000037c

080071e0 <stdio_exit_handler>:
 80071e0:	4a02      	ldr	r2, [pc, #8]	@ (80071ec <stdio_exit_handler+0xc>)
 80071e2:	4903      	ldr	r1, [pc, #12]	@ (80071f0 <stdio_exit_handler+0x10>)
 80071e4:	4803      	ldr	r0, [pc, #12]	@ (80071f4 <stdio_exit_handler+0x14>)
 80071e6:	f000 b869 	b.w	80072bc <_fwalk_sglue>
 80071ea:	bf00      	nop
 80071ec:	2000000c 	.word	0x2000000c
 80071f0:	0800a619 	.word	0x0800a619
 80071f4:	2000001c 	.word	0x2000001c

080071f8 <cleanup_stdio>:
 80071f8:	6841      	ldr	r1, [r0, #4]
 80071fa:	4b0c      	ldr	r3, [pc, #48]	@ (800722c <cleanup_stdio+0x34>)
 80071fc:	4299      	cmp	r1, r3
 80071fe:	b510      	push	{r4, lr}
 8007200:	4604      	mov	r4, r0
 8007202:	d001      	beq.n	8007208 <cleanup_stdio+0x10>
 8007204:	f003 fa08 	bl	800a618 <_fflush_r>
 8007208:	68a1      	ldr	r1, [r4, #8]
 800720a:	4b09      	ldr	r3, [pc, #36]	@ (8007230 <cleanup_stdio+0x38>)
 800720c:	4299      	cmp	r1, r3
 800720e:	d002      	beq.n	8007216 <cleanup_stdio+0x1e>
 8007210:	4620      	mov	r0, r4
 8007212:	f003 fa01 	bl	800a618 <_fflush_r>
 8007216:	68e1      	ldr	r1, [r4, #12]
 8007218:	4b06      	ldr	r3, [pc, #24]	@ (8007234 <cleanup_stdio+0x3c>)
 800721a:	4299      	cmp	r1, r3
 800721c:	d004      	beq.n	8007228 <cleanup_stdio+0x30>
 800721e:	4620      	mov	r0, r4
 8007220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007224:	f003 b9f8 	b.w	800a618 <_fflush_r>
 8007228:	bd10      	pop	{r4, pc}
 800722a:	bf00      	nop
 800722c:	2000037c 	.word	0x2000037c
 8007230:	200003e4 	.word	0x200003e4
 8007234:	2000044c 	.word	0x2000044c

08007238 <global_stdio_init.part.0>:
 8007238:	b510      	push	{r4, lr}
 800723a:	4b0b      	ldr	r3, [pc, #44]	@ (8007268 <global_stdio_init.part.0+0x30>)
 800723c:	4c0b      	ldr	r4, [pc, #44]	@ (800726c <global_stdio_init.part.0+0x34>)
 800723e:	4a0c      	ldr	r2, [pc, #48]	@ (8007270 <global_stdio_init.part.0+0x38>)
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	4620      	mov	r0, r4
 8007244:	2200      	movs	r2, #0
 8007246:	2104      	movs	r1, #4
 8007248:	f7ff ff94 	bl	8007174 <std>
 800724c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007250:	2201      	movs	r2, #1
 8007252:	2109      	movs	r1, #9
 8007254:	f7ff ff8e 	bl	8007174 <std>
 8007258:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800725c:	2202      	movs	r2, #2
 800725e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007262:	2112      	movs	r1, #18
 8007264:	f7ff bf86 	b.w	8007174 <std>
 8007268:	200004b4 	.word	0x200004b4
 800726c:	2000037c 	.word	0x2000037c
 8007270:	080071e1 	.word	0x080071e1

08007274 <__sfp_lock_acquire>:
 8007274:	4801      	ldr	r0, [pc, #4]	@ (800727c <__sfp_lock_acquire+0x8>)
 8007276:	f000 ba68 	b.w	800774a <__retarget_lock_acquire_recursive>
 800727a:	bf00      	nop
 800727c:	200004bd 	.word	0x200004bd

08007280 <__sfp_lock_release>:
 8007280:	4801      	ldr	r0, [pc, #4]	@ (8007288 <__sfp_lock_release+0x8>)
 8007282:	f000 ba63 	b.w	800774c <__retarget_lock_release_recursive>
 8007286:	bf00      	nop
 8007288:	200004bd 	.word	0x200004bd

0800728c <__sinit>:
 800728c:	b510      	push	{r4, lr}
 800728e:	4604      	mov	r4, r0
 8007290:	f7ff fff0 	bl	8007274 <__sfp_lock_acquire>
 8007294:	6a23      	ldr	r3, [r4, #32]
 8007296:	b11b      	cbz	r3, 80072a0 <__sinit+0x14>
 8007298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800729c:	f7ff bff0 	b.w	8007280 <__sfp_lock_release>
 80072a0:	4b04      	ldr	r3, [pc, #16]	@ (80072b4 <__sinit+0x28>)
 80072a2:	6223      	str	r3, [r4, #32]
 80072a4:	4b04      	ldr	r3, [pc, #16]	@ (80072b8 <__sinit+0x2c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1f5      	bne.n	8007298 <__sinit+0xc>
 80072ac:	f7ff ffc4 	bl	8007238 <global_stdio_init.part.0>
 80072b0:	e7f2      	b.n	8007298 <__sinit+0xc>
 80072b2:	bf00      	nop
 80072b4:	080071f9 	.word	0x080071f9
 80072b8:	200004b4 	.word	0x200004b4

080072bc <_fwalk_sglue>:
 80072bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c0:	4607      	mov	r7, r0
 80072c2:	4688      	mov	r8, r1
 80072c4:	4614      	mov	r4, r2
 80072c6:	2600      	movs	r6, #0
 80072c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072cc:	f1b9 0901 	subs.w	r9, r9, #1
 80072d0:	d505      	bpl.n	80072de <_fwalk_sglue+0x22>
 80072d2:	6824      	ldr	r4, [r4, #0]
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	d1f7      	bne.n	80072c8 <_fwalk_sglue+0xc>
 80072d8:	4630      	mov	r0, r6
 80072da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072de:	89ab      	ldrh	r3, [r5, #12]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d907      	bls.n	80072f4 <_fwalk_sglue+0x38>
 80072e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072e8:	3301      	adds	r3, #1
 80072ea:	d003      	beq.n	80072f4 <_fwalk_sglue+0x38>
 80072ec:	4629      	mov	r1, r5
 80072ee:	4638      	mov	r0, r7
 80072f0:	47c0      	blx	r8
 80072f2:	4306      	orrs	r6, r0
 80072f4:	3568      	adds	r5, #104	@ 0x68
 80072f6:	e7e9      	b.n	80072cc <_fwalk_sglue+0x10>

080072f8 <_puts_r>:
 80072f8:	6a03      	ldr	r3, [r0, #32]
 80072fa:	b570      	push	{r4, r5, r6, lr}
 80072fc:	6884      	ldr	r4, [r0, #8]
 80072fe:	4605      	mov	r5, r0
 8007300:	460e      	mov	r6, r1
 8007302:	b90b      	cbnz	r3, 8007308 <_puts_r+0x10>
 8007304:	f7ff ffc2 	bl	800728c <__sinit>
 8007308:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800730a:	07db      	lsls	r3, r3, #31
 800730c:	d405      	bmi.n	800731a <_puts_r+0x22>
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	0598      	lsls	r0, r3, #22
 8007312:	d402      	bmi.n	800731a <_puts_r+0x22>
 8007314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007316:	f000 fa18 	bl	800774a <__retarget_lock_acquire_recursive>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	0719      	lsls	r1, r3, #28
 800731e:	d502      	bpl.n	8007326 <_puts_r+0x2e>
 8007320:	6923      	ldr	r3, [r4, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d135      	bne.n	8007392 <_puts_r+0x9a>
 8007326:	4621      	mov	r1, r4
 8007328:	4628      	mov	r0, r5
 800732a:	f000 f92b 	bl	8007584 <__swsetup_r>
 800732e:	b380      	cbz	r0, 8007392 <_puts_r+0x9a>
 8007330:	f04f 35ff 	mov.w	r5, #4294967295
 8007334:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007336:	07da      	lsls	r2, r3, #31
 8007338:	d405      	bmi.n	8007346 <_puts_r+0x4e>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	059b      	lsls	r3, r3, #22
 800733e:	d402      	bmi.n	8007346 <_puts_r+0x4e>
 8007340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007342:	f000 fa03 	bl	800774c <__retarget_lock_release_recursive>
 8007346:	4628      	mov	r0, r5
 8007348:	bd70      	pop	{r4, r5, r6, pc}
 800734a:	2b00      	cmp	r3, #0
 800734c:	da04      	bge.n	8007358 <_puts_r+0x60>
 800734e:	69a2      	ldr	r2, [r4, #24]
 8007350:	429a      	cmp	r2, r3
 8007352:	dc17      	bgt.n	8007384 <_puts_r+0x8c>
 8007354:	290a      	cmp	r1, #10
 8007356:	d015      	beq.n	8007384 <_puts_r+0x8c>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	7019      	strb	r1, [r3, #0]
 8007360:	68a3      	ldr	r3, [r4, #8]
 8007362:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007366:	3b01      	subs	r3, #1
 8007368:	60a3      	str	r3, [r4, #8]
 800736a:	2900      	cmp	r1, #0
 800736c:	d1ed      	bne.n	800734a <_puts_r+0x52>
 800736e:	2b00      	cmp	r3, #0
 8007370:	da11      	bge.n	8007396 <_puts_r+0x9e>
 8007372:	4622      	mov	r2, r4
 8007374:	210a      	movs	r1, #10
 8007376:	4628      	mov	r0, r5
 8007378:	f000 f8c5 	bl	8007506 <__swbuf_r>
 800737c:	3001      	adds	r0, #1
 800737e:	d0d7      	beq.n	8007330 <_puts_r+0x38>
 8007380:	250a      	movs	r5, #10
 8007382:	e7d7      	b.n	8007334 <_puts_r+0x3c>
 8007384:	4622      	mov	r2, r4
 8007386:	4628      	mov	r0, r5
 8007388:	f000 f8bd 	bl	8007506 <__swbuf_r>
 800738c:	3001      	adds	r0, #1
 800738e:	d1e7      	bne.n	8007360 <_puts_r+0x68>
 8007390:	e7ce      	b.n	8007330 <_puts_r+0x38>
 8007392:	3e01      	subs	r6, #1
 8007394:	e7e4      	b.n	8007360 <_puts_r+0x68>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	6022      	str	r2, [r4, #0]
 800739c:	220a      	movs	r2, #10
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	e7ee      	b.n	8007380 <_puts_r+0x88>
	...

080073a4 <puts>:
 80073a4:	4b02      	ldr	r3, [pc, #8]	@ (80073b0 <puts+0xc>)
 80073a6:	4601      	mov	r1, r0
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	f7ff bfa5 	b.w	80072f8 <_puts_r>
 80073ae:	bf00      	nop
 80073b0:	20000018 	.word	0x20000018

080073b4 <iscanf>:
 80073b4:	b40f      	push	{r0, r1, r2, r3}
 80073b6:	b507      	push	{r0, r1, r2, lr}
 80073b8:	4906      	ldr	r1, [pc, #24]	@ (80073d4 <iscanf+0x20>)
 80073ba:	ab04      	add	r3, sp, #16
 80073bc:	6808      	ldr	r0, [r1, #0]
 80073be:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c2:	6841      	ldr	r1, [r0, #4]
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	f002 ff41 	bl	800a24c <_vfiscanf_r>
 80073ca:	b003      	add	sp, #12
 80073cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d0:	b004      	add	sp, #16
 80073d2:	4770      	bx	lr
 80073d4:	20000018 	.word	0x20000018

080073d8 <sniprintf>:
 80073d8:	b40c      	push	{r2, r3}
 80073da:	b530      	push	{r4, r5, lr}
 80073dc:	4b17      	ldr	r3, [pc, #92]	@ (800743c <sniprintf+0x64>)
 80073de:	1e0c      	subs	r4, r1, #0
 80073e0:	681d      	ldr	r5, [r3, #0]
 80073e2:	b09d      	sub	sp, #116	@ 0x74
 80073e4:	da08      	bge.n	80073f8 <sniprintf+0x20>
 80073e6:	238b      	movs	r3, #139	@ 0x8b
 80073e8:	602b      	str	r3, [r5, #0]
 80073ea:	f04f 30ff 	mov.w	r0, #4294967295
 80073ee:	b01d      	add	sp, #116	@ 0x74
 80073f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073f4:	b002      	add	sp, #8
 80073f6:	4770      	bx	lr
 80073f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80073fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007400:	bf14      	ite	ne
 8007402:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007406:	4623      	moveq	r3, r4
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	9307      	str	r3, [sp, #28]
 800740c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007410:	9002      	str	r0, [sp, #8]
 8007412:	9006      	str	r0, [sp, #24]
 8007414:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007418:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800741a:	ab21      	add	r3, sp, #132	@ 0x84
 800741c:	a902      	add	r1, sp, #8
 800741e:	4628      	mov	r0, r5
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	f002 fc7b 	bl	8009d1c <_svfiprintf_r>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	bfbc      	itt	lt
 800742a:	238b      	movlt	r3, #139	@ 0x8b
 800742c:	602b      	strlt	r3, [r5, #0]
 800742e:	2c00      	cmp	r4, #0
 8007430:	d0dd      	beq.n	80073ee <sniprintf+0x16>
 8007432:	9b02      	ldr	r3, [sp, #8]
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	e7d9      	b.n	80073ee <sniprintf+0x16>
 800743a:	bf00      	nop
 800743c:	20000018 	.word	0x20000018

08007440 <siprintf>:
 8007440:	b40e      	push	{r1, r2, r3}
 8007442:	b500      	push	{lr}
 8007444:	b09c      	sub	sp, #112	@ 0x70
 8007446:	ab1d      	add	r3, sp, #116	@ 0x74
 8007448:	9002      	str	r0, [sp, #8]
 800744a:	9006      	str	r0, [sp, #24]
 800744c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007450:	4809      	ldr	r0, [pc, #36]	@ (8007478 <siprintf+0x38>)
 8007452:	9107      	str	r1, [sp, #28]
 8007454:	9104      	str	r1, [sp, #16]
 8007456:	4909      	ldr	r1, [pc, #36]	@ (800747c <siprintf+0x3c>)
 8007458:	f853 2b04 	ldr.w	r2, [r3], #4
 800745c:	9105      	str	r1, [sp, #20]
 800745e:	6800      	ldr	r0, [r0, #0]
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	a902      	add	r1, sp, #8
 8007464:	f002 fc5a 	bl	8009d1c <_svfiprintf_r>
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	b01c      	add	sp, #112	@ 0x70
 8007470:	f85d eb04 	ldr.w	lr, [sp], #4
 8007474:	b003      	add	sp, #12
 8007476:	4770      	bx	lr
 8007478:	20000018 	.word	0x20000018
 800747c:	ffff0208 	.word	0xffff0208

08007480 <__sread>:
 8007480:	b510      	push	{r4, lr}
 8007482:	460c      	mov	r4, r1
 8007484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007488:	f000 f910 	bl	80076ac <_read_r>
 800748c:	2800      	cmp	r0, #0
 800748e:	bfab      	itete	ge
 8007490:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007492:	89a3      	ldrhlt	r3, [r4, #12]
 8007494:	181b      	addge	r3, r3, r0
 8007496:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800749a:	bfac      	ite	ge
 800749c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800749e:	81a3      	strhlt	r3, [r4, #12]
 80074a0:	bd10      	pop	{r4, pc}

080074a2 <__swrite>:
 80074a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a6:	461f      	mov	r7, r3
 80074a8:	898b      	ldrh	r3, [r1, #12]
 80074aa:	05db      	lsls	r3, r3, #23
 80074ac:	4605      	mov	r5, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	4616      	mov	r6, r2
 80074b2:	d505      	bpl.n	80074c0 <__swrite+0x1e>
 80074b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b8:	2302      	movs	r3, #2
 80074ba:	2200      	movs	r2, #0
 80074bc:	f000 f8e4 	bl	8007688 <_lseek_r>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074ca:	81a3      	strh	r3, [r4, #12]
 80074cc:	4632      	mov	r2, r6
 80074ce:	463b      	mov	r3, r7
 80074d0:	4628      	mov	r0, r5
 80074d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074d6:	f000 b8fb 	b.w	80076d0 <_write_r>

080074da <__sseek>:
 80074da:	b510      	push	{r4, lr}
 80074dc:	460c      	mov	r4, r1
 80074de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e2:	f000 f8d1 	bl	8007688 <_lseek_r>
 80074e6:	1c43      	adds	r3, r0, #1
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	bf15      	itete	ne
 80074ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074f6:	81a3      	strheq	r3, [r4, #12]
 80074f8:	bf18      	it	ne
 80074fa:	81a3      	strhne	r3, [r4, #12]
 80074fc:	bd10      	pop	{r4, pc}

080074fe <__sclose>:
 80074fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007502:	f000 b8b1 	b.w	8007668 <_close_r>

08007506 <__swbuf_r>:
 8007506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007508:	460e      	mov	r6, r1
 800750a:	4614      	mov	r4, r2
 800750c:	4605      	mov	r5, r0
 800750e:	b118      	cbz	r0, 8007518 <__swbuf_r+0x12>
 8007510:	6a03      	ldr	r3, [r0, #32]
 8007512:	b90b      	cbnz	r3, 8007518 <__swbuf_r+0x12>
 8007514:	f7ff feba 	bl	800728c <__sinit>
 8007518:	69a3      	ldr	r3, [r4, #24]
 800751a:	60a3      	str	r3, [r4, #8]
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	071a      	lsls	r2, r3, #28
 8007520:	d501      	bpl.n	8007526 <__swbuf_r+0x20>
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	b943      	cbnz	r3, 8007538 <__swbuf_r+0x32>
 8007526:	4621      	mov	r1, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f82b 	bl	8007584 <__swsetup_r>
 800752e:	b118      	cbz	r0, 8007538 <__swbuf_r+0x32>
 8007530:	f04f 37ff 	mov.w	r7, #4294967295
 8007534:	4638      	mov	r0, r7
 8007536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	6922      	ldr	r2, [r4, #16]
 800753c:	1a98      	subs	r0, r3, r2
 800753e:	6963      	ldr	r3, [r4, #20]
 8007540:	b2f6      	uxtb	r6, r6
 8007542:	4283      	cmp	r3, r0
 8007544:	4637      	mov	r7, r6
 8007546:	dc05      	bgt.n	8007554 <__swbuf_r+0x4e>
 8007548:	4621      	mov	r1, r4
 800754a:	4628      	mov	r0, r5
 800754c:	f003 f864 	bl	800a618 <_fflush_r>
 8007550:	2800      	cmp	r0, #0
 8007552:	d1ed      	bne.n	8007530 <__swbuf_r+0x2a>
 8007554:	68a3      	ldr	r3, [r4, #8]
 8007556:	3b01      	subs	r3, #1
 8007558:	60a3      	str	r3, [r4, #8]
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	6022      	str	r2, [r4, #0]
 8007560:	701e      	strb	r6, [r3, #0]
 8007562:	6962      	ldr	r2, [r4, #20]
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	429a      	cmp	r2, r3
 8007568:	d004      	beq.n	8007574 <__swbuf_r+0x6e>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	07db      	lsls	r3, r3, #31
 800756e:	d5e1      	bpl.n	8007534 <__swbuf_r+0x2e>
 8007570:	2e0a      	cmp	r6, #10
 8007572:	d1df      	bne.n	8007534 <__swbuf_r+0x2e>
 8007574:	4621      	mov	r1, r4
 8007576:	4628      	mov	r0, r5
 8007578:	f003 f84e 	bl	800a618 <_fflush_r>
 800757c:	2800      	cmp	r0, #0
 800757e:	d0d9      	beq.n	8007534 <__swbuf_r+0x2e>
 8007580:	e7d6      	b.n	8007530 <__swbuf_r+0x2a>
	...

08007584 <__swsetup_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4b29      	ldr	r3, [pc, #164]	@ (800762c <__swsetup_r+0xa8>)
 8007588:	4605      	mov	r5, r0
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	460c      	mov	r4, r1
 800758e:	b118      	cbz	r0, 8007598 <__swsetup_r+0x14>
 8007590:	6a03      	ldr	r3, [r0, #32]
 8007592:	b90b      	cbnz	r3, 8007598 <__swsetup_r+0x14>
 8007594:	f7ff fe7a 	bl	800728c <__sinit>
 8007598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759c:	0719      	lsls	r1, r3, #28
 800759e:	d422      	bmi.n	80075e6 <__swsetup_r+0x62>
 80075a0:	06da      	lsls	r2, r3, #27
 80075a2:	d407      	bmi.n	80075b4 <__swsetup_r+0x30>
 80075a4:	2209      	movs	r2, #9
 80075a6:	602a      	str	r2, [r5, #0]
 80075a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ac:	81a3      	strh	r3, [r4, #12]
 80075ae:	f04f 30ff 	mov.w	r0, #4294967295
 80075b2:	e033      	b.n	800761c <__swsetup_r+0x98>
 80075b4:	0758      	lsls	r0, r3, #29
 80075b6:	d512      	bpl.n	80075de <__swsetup_r+0x5a>
 80075b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075ba:	b141      	cbz	r1, 80075ce <__swsetup_r+0x4a>
 80075bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075c0:	4299      	cmp	r1, r3
 80075c2:	d002      	beq.n	80075ca <__swsetup_r+0x46>
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 ff17 	bl	80083f8 <_free_r>
 80075ca:	2300      	movs	r3, #0
 80075cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	2300      	movs	r3, #0
 80075d8:	6063      	str	r3, [r4, #4]
 80075da:	6923      	ldr	r3, [r4, #16]
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	f043 0308 	orr.w	r3, r3, #8
 80075e4:	81a3      	strh	r3, [r4, #12]
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	b94b      	cbnz	r3, 80075fe <__swsetup_r+0x7a>
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f4:	d003      	beq.n	80075fe <__swsetup_r+0x7a>
 80075f6:	4621      	mov	r1, r4
 80075f8:	4628      	mov	r0, r5
 80075fa:	f003 f85b 	bl	800a6b4 <__smakebuf_r>
 80075fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007602:	f013 0201 	ands.w	r2, r3, #1
 8007606:	d00a      	beq.n	800761e <__swsetup_r+0x9a>
 8007608:	2200      	movs	r2, #0
 800760a:	60a2      	str	r2, [r4, #8]
 800760c:	6962      	ldr	r2, [r4, #20]
 800760e:	4252      	negs	r2, r2
 8007610:	61a2      	str	r2, [r4, #24]
 8007612:	6922      	ldr	r2, [r4, #16]
 8007614:	b942      	cbnz	r2, 8007628 <__swsetup_r+0xa4>
 8007616:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800761a:	d1c5      	bne.n	80075a8 <__swsetup_r+0x24>
 800761c:	bd38      	pop	{r3, r4, r5, pc}
 800761e:	0799      	lsls	r1, r3, #30
 8007620:	bf58      	it	pl
 8007622:	6962      	ldrpl	r2, [r4, #20]
 8007624:	60a2      	str	r2, [r4, #8]
 8007626:	e7f4      	b.n	8007612 <__swsetup_r+0x8e>
 8007628:	2000      	movs	r0, #0
 800762a:	e7f7      	b.n	800761c <__swsetup_r+0x98>
 800762c:	20000018 	.word	0x20000018

08007630 <memset>:
 8007630:	4402      	add	r2, r0
 8007632:	4603      	mov	r3, r0
 8007634:	4293      	cmp	r3, r2
 8007636:	d100      	bne.n	800763a <memset+0xa>
 8007638:	4770      	bx	lr
 800763a:	f803 1b01 	strb.w	r1, [r3], #1
 800763e:	e7f9      	b.n	8007634 <memset+0x4>

08007640 <strcat>:
 8007640:	b510      	push	{r4, lr}
 8007642:	4602      	mov	r2, r0
 8007644:	7814      	ldrb	r4, [r2, #0]
 8007646:	4613      	mov	r3, r2
 8007648:	3201      	adds	r2, #1
 800764a:	2c00      	cmp	r4, #0
 800764c:	d1fa      	bne.n	8007644 <strcat+0x4>
 800764e:	3b01      	subs	r3, #1
 8007650:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007654:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007658:	2a00      	cmp	r2, #0
 800765a:	d1f9      	bne.n	8007650 <strcat+0x10>
 800765c:	bd10      	pop	{r4, pc}
	...

08007660 <_localeconv_r>:
 8007660:	4800      	ldr	r0, [pc, #0]	@ (8007664 <_localeconv_r+0x4>)
 8007662:	4770      	bx	lr
 8007664:	20000158 	.word	0x20000158

08007668 <_close_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4d06      	ldr	r5, [pc, #24]	@ (8007684 <_close_r+0x1c>)
 800766c:	2300      	movs	r3, #0
 800766e:	4604      	mov	r4, r0
 8007670:	4608      	mov	r0, r1
 8007672:	602b      	str	r3, [r5, #0]
 8007674:	f7fa fe8c 	bl	8002390 <_close>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d102      	bne.n	8007682 <_close_r+0x1a>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	b103      	cbz	r3, 8007682 <_close_r+0x1a>
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	200004b8 	.word	0x200004b8

08007688 <_lseek_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d07      	ldr	r5, [pc, #28]	@ (80076a8 <_lseek_r+0x20>)
 800768c:	4604      	mov	r4, r0
 800768e:	4608      	mov	r0, r1
 8007690:	4611      	mov	r1, r2
 8007692:	2200      	movs	r2, #0
 8007694:	602a      	str	r2, [r5, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f7fa fea1 	bl	80023de <_lseek>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_lseek_r+0x1e>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_lseek_r+0x1e>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	200004b8 	.word	0x200004b8

080076ac <_read_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d07      	ldr	r5, [pc, #28]	@ (80076cc <_read_r+0x20>)
 80076b0:	4604      	mov	r4, r0
 80076b2:	4608      	mov	r0, r1
 80076b4:	4611      	mov	r1, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	602a      	str	r2, [r5, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f7fa fe24 	bl	8002308 <_read>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_read_r+0x1e>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_read_r+0x1e>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	200004b8 	.word	0x200004b8

080076d0 <_write_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4d07      	ldr	r5, [pc, #28]	@ (80076f0 <_write_r+0x20>)
 80076d4:	4604      	mov	r4, r0
 80076d6:	4608      	mov	r0, r1
 80076d8:	4611      	mov	r1, r2
 80076da:	2200      	movs	r2, #0
 80076dc:	602a      	str	r2, [r5, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	f7fa fe34 	bl	800234c <_write>
 80076e4:	1c43      	adds	r3, r0, #1
 80076e6:	d102      	bne.n	80076ee <_write_r+0x1e>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	b103      	cbz	r3, 80076ee <_write_r+0x1e>
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	bd38      	pop	{r3, r4, r5, pc}
 80076f0:	200004b8 	.word	0x200004b8

080076f4 <__errno>:
 80076f4:	4b01      	ldr	r3, [pc, #4]	@ (80076fc <__errno+0x8>)
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	20000018 	.word	0x20000018

08007700 <__libc_init_array>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	4d0d      	ldr	r5, [pc, #52]	@ (8007738 <__libc_init_array+0x38>)
 8007704:	4c0d      	ldr	r4, [pc, #52]	@ (800773c <__libc_init_array+0x3c>)
 8007706:	1b64      	subs	r4, r4, r5
 8007708:	10a4      	asrs	r4, r4, #2
 800770a:	2600      	movs	r6, #0
 800770c:	42a6      	cmp	r6, r4
 800770e:	d109      	bne.n	8007724 <__libc_init_array+0x24>
 8007710:	4d0b      	ldr	r5, [pc, #44]	@ (8007740 <__libc_init_array+0x40>)
 8007712:	4c0c      	ldr	r4, [pc, #48]	@ (8007744 <__libc_init_array+0x44>)
 8007714:	f003 ffc4 	bl	800b6a0 <_init>
 8007718:	1b64      	subs	r4, r4, r5
 800771a:	10a4      	asrs	r4, r4, #2
 800771c:	2600      	movs	r6, #0
 800771e:	42a6      	cmp	r6, r4
 8007720:	d105      	bne.n	800772e <__libc_init_array+0x2e>
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	f855 3b04 	ldr.w	r3, [r5], #4
 8007728:	4798      	blx	r3
 800772a:	3601      	adds	r6, #1
 800772c:	e7ee      	b.n	800770c <__libc_init_array+0xc>
 800772e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007732:	4798      	blx	r3
 8007734:	3601      	adds	r6, #1
 8007736:	e7f2      	b.n	800771e <__libc_init_array+0x1e>
 8007738:	0800c72c 	.word	0x0800c72c
 800773c:	0800c72c 	.word	0x0800c72c
 8007740:	0800c72c 	.word	0x0800c72c
 8007744:	0800c730 	.word	0x0800c730

08007748 <__retarget_lock_init_recursive>:
 8007748:	4770      	bx	lr

0800774a <__retarget_lock_acquire_recursive>:
 800774a:	4770      	bx	lr

0800774c <__retarget_lock_release_recursive>:
 800774c:	4770      	bx	lr
	...

08007750 <nanf>:
 8007750:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007758 <nanf+0x8>
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	7fc00000 	.word	0x7fc00000

0800775c <quorem>:
 800775c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	6903      	ldr	r3, [r0, #16]
 8007762:	690c      	ldr	r4, [r1, #16]
 8007764:	42a3      	cmp	r3, r4
 8007766:	4607      	mov	r7, r0
 8007768:	db7e      	blt.n	8007868 <quorem+0x10c>
 800776a:	3c01      	subs	r4, #1
 800776c:	f101 0814 	add.w	r8, r1, #20
 8007770:	00a3      	lsls	r3, r4, #2
 8007772:	f100 0514 	add.w	r5, r0, #20
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007782:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007786:	3301      	adds	r3, #1
 8007788:	429a      	cmp	r2, r3
 800778a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800778e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007792:	d32e      	bcc.n	80077f2 <quorem+0x96>
 8007794:	f04f 0a00 	mov.w	sl, #0
 8007798:	46c4      	mov	ip, r8
 800779a:	46ae      	mov	lr, r5
 800779c:	46d3      	mov	fp, sl
 800779e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077a2:	b298      	uxth	r0, r3
 80077a4:	fb06 a000 	mla	r0, r6, r0, sl
 80077a8:	0c02      	lsrs	r2, r0, #16
 80077aa:	0c1b      	lsrs	r3, r3, #16
 80077ac:	fb06 2303 	mla	r3, r6, r3, r2
 80077b0:	f8de 2000 	ldr.w	r2, [lr]
 80077b4:	b280      	uxth	r0, r0
 80077b6:	b292      	uxth	r2, r2
 80077b8:	1a12      	subs	r2, r2, r0
 80077ba:	445a      	add	r2, fp
 80077bc:	f8de 0000 	ldr.w	r0, [lr]
 80077c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80077ce:	b292      	uxth	r2, r2
 80077d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80077d4:	45e1      	cmp	r9, ip
 80077d6:	f84e 2b04 	str.w	r2, [lr], #4
 80077da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80077de:	d2de      	bcs.n	800779e <quorem+0x42>
 80077e0:	9b00      	ldr	r3, [sp, #0]
 80077e2:	58eb      	ldr	r3, [r5, r3]
 80077e4:	b92b      	cbnz	r3, 80077f2 <quorem+0x96>
 80077e6:	9b01      	ldr	r3, [sp, #4]
 80077e8:	3b04      	subs	r3, #4
 80077ea:	429d      	cmp	r5, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	d32f      	bcc.n	8007850 <quorem+0xf4>
 80077f0:	613c      	str	r4, [r7, #16]
 80077f2:	4638      	mov	r0, r7
 80077f4:	f001 f9c4 	bl	8008b80 <__mcmp>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	db25      	blt.n	8007848 <quorem+0xec>
 80077fc:	4629      	mov	r1, r5
 80077fe:	2000      	movs	r0, #0
 8007800:	f858 2b04 	ldr.w	r2, [r8], #4
 8007804:	f8d1 c000 	ldr.w	ip, [r1]
 8007808:	fa1f fe82 	uxth.w	lr, r2
 800780c:	fa1f f38c 	uxth.w	r3, ip
 8007810:	eba3 030e 	sub.w	r3, r3, lr
 8007814:	4403      	add	r3, r0
 8007816:	0c12      	lsrs	r2, r2, #16
 8007818:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800781c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007820:	b29b      	uxth	r3, r3
 8007822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007826:	45c1      	cmp	r9, r8
 8007828:	f841 3b04 	str.w	r3, [r1], #4
 800782c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007830:	d2e6      	bcs.n	8007800 <quorem+0xa4>
 8007832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800783a:	b922      	cbnz	r2, 8007846 <quorem+0xea>
 800783c:	3b04      	subs	r3, #4
 800783e:	429d      	cmp	r5, r3
 8007840:	461a      	mov	r2, r3
 8007842:	d30b      	bcc.n	800785c <quorem+0x100>
 8007844:	613c      	str	r4, [r7, #16]
 8007846:	3601      	adds	r6, #1
 8007848:	4630      	mov	r0, r6
 800784a:	b003      	add	sp, #12
 800784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007850:	6812      	ldr	r2, [r2, #0]
 8007852:	3b04      	subs	r3, #4
 8007854:	2a00      	cmp	r2, #0
 8007856:	d1cb      	bne.n	80077f0 <quorem+0x94>
 8007858:	3c01      	subs	r4, #1
 800785a:	e7c6      	b.n	80077ea <quorem+0x8e>
 800785c:	6812      	ldr	r2, [r2, #0]
 800785e:	3b04      	subs	r3, #4
 8007860:	2a00      	cmp	r2, #0
 8007862:	d1ef      	bne.n	8007844 <quorem+0xe8>
 8007864:	3c01      	subs	r4, #1
 8007866:	e7ea      	b.n	800783e <quorem+0xe2>
 8007868:	2000      	movs	r0, #0
 800786a:	e7ee      	b.n	800784a <quorem+0xee>
 800786c:	0000      	movs	r0, r0
	...

08007870 <_dtoa_r>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	69c7      	ldr	r7, [r0, #28]
 8007876:	b099      	sub	sp, #100	@ 0x64
 8007878:	ed8d 0b02 	vstr	d0, [sp, #8]
 800787c:	ec55 4b10 	vmov	r4, r5, d0
 8007880:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007882:	9109      	str	r1, [sp, #36]	@ 0x24
 8007884:	4683      	mov	fp, r0
 8007886:	920e      	str	r2, [sp, #56]	@ 0x38
 8007888:	9313      	str	r3, [sp, #76]	@ 0x4c
 800788a:	b97f      	cbnz	r7, 80078ac <_dtoa_r+0x3c>
 800788c:	2010      	movs	r0, #16
 800788e:	f000 fdfd 	bl	800848c <malloc>
 8007892:	4602      	mov	r2, r0
 8007894:	f8cb 001c 	str.w	r0, [fp, #28]
 8007898:	b920      	cbnz	r0, 80078a4 <_dtoa_r+0x34>
 800789a:	4ba7      	ldr	r3, [pc, #668]	@ (8007b38 <_dtoa_r+0x2c8>)
 800789c:	21ef      	movs	r1, #239	@ 0xef
 800789e:	48a7      	ldr	r0, [pc, #668]	@ (8007b3c <_dtoa_r+0x2cc>)
 80078a0:	f003 f92e 	bl	800ab00 <__assert_func>
 80078a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078a8:	6007      	str	r7, [r0, #0]
 80078aa:	60c7      	str	r7, [r0, #12]
 80078ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078b0:	6819      	ldr	r1, [r3, #0]
 80078b2:	b159      	cbz	r1, 80078cc <_dtoa_r+0x5c>
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	604a      	str	r2, [r1, #4]
 80078b8:	2301      	movs	r3, #1
 80078ba:	4093      	lsls	r3, r2
 80078bc:	608b      	str	r3, [r1, #8]
 80078be:	4658      	mov	r0, fp
 80078c0:	f000 feda 	bl	8008678 <_Bfree>
 80078c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	1e2b      	subs	r3, r5, #0
 80078ce:	bfb9      	ittee	lt
 80078d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80078d4:	9303      	strlt	r3, [sp, #12]
 80078d6:	2300      	movge	r3, #0
 80078d8:	6033      	strge	r3, [r6, #0]
 80078da:	9f03      	ldr	r7, [sp, #12]
 80078dc:	4b98      	ldr	r3, [pc, #608]	@ (8007b40 <_dtoa_r+0x2d0>)
 80078de:	bfbc      	itt	lt
 80078e0:	2201      	movlt	r2, #1
 80078e2:	6032      	strlt	r2, [r6, #0]
 80078e4:	43bb      	bics	r3, r7
 80078e6:	d112      	bne.n	800790e <_dtoa_r+0x9e>
 80078e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078f4:	4323      	orrs	r3, r4
 80078f6:	f000 854d 	beq.w	8008394 <_dtoa_r+0xb24>
 80078fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007b54 <_dtoa_r+0x2e4>
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 854f 	beq.w	80083a4 <_dtoa_r+0xb34>
 8007906:	f10a 0303 	add.w	r3, sl, #3
 800790a:	f000 bd49 	b.w	80083a0 <_dtoa_r+0xb30>
 800790e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	ec51 0b17 	vmov	r0, r1, d7
 8007918:	2300      	movs	r3, #0
 800791a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800791e:	f7f9 f8e3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007922:	4680      	mov	r8, r0
 8007924:	b158      	cbz	r0, 800793e <_dtoa_r+0xce>
 8007926:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007928:	2301      	movs	r3, #1
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800792e:	b113      	cbz	r3, 8007936 <_dtoa_r+0xc6>
 8007930:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007932:	4b84      	ldr	r3, [pc, #528]	@ (8007b44 <_dtoa_r+0x2d4>)
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007b58 <_dtoa_r+0x2e8>
 800793a:	f000 bd33 	b.w	80083a4 <_dtoa_r+0xb34>
 800793e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007942:	aa16      	add	r2, sp, #88	@ 0x58
 8007944:	a917      	add	r1, sp, #92	@ 0x5c
 8007946:	4658      	mov	r0, fp
 8007948:	f001 fa3a 	bl	8008dc0 <__d2b>
 800794c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007950:	4681      	mov	r9, r0
 8007952:	2e00      	cmp	r6, #0
 8007954:	d077      	beq.n	8007a46 <_dtoa_r+0x1d6>
 8007956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007958:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800795c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007964:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007968:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800796c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007970:	4619      	mov	r1, r3
 8007972:	2200      	movs	r2, #0
 8007974:	4b74      	ldr	r3, [pc, #464]	@ (8007b48 <_dtoa_r+0x2d8>)
 8007976:	f7f8 fc97 	bl	80002a8 <__aeabi_dsub>
 800797a:	a369      	add	r3, pc, #420	@ (adr r3, 8007b20 <_dtoa_r+0x2b0>)
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f7f8 fe4a 	bl	8000618 <__aeabi_dmul>
 8007984:	a368      	add	r3, pc, #416	@ (adr r3, 8007b28 <_dtoa_r+0x2b8>)
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	f7f8 fc8f 	bl	80002ac <__adddf3>
 800798e:	4604      	mov	r4, r0
 8007990:	4630      	mov	r0, r6
 8007992:	460d      	mov	r5, r1
 8007994:	f7f8 fdd6 	bl	8000544 <__aeabi_i2d>
 8007998:	a365      	add	r3, pc, #404	@ (adr r3, 8007b30 <_dtoa_r+0x2c0>)
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fe3b 	bl	8000618 <__aeabi_dmul>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4620      	mov	r0, r4
 80079a8:	4629      	mov	r1, r5
 80079aa:	f7f8 fc7f 	bl	80002ac <__adddf3>
 80079ae:	4604      	mov	r4, r0
 80079b0:	460d      	mov	r5, r1
 80079b2:	f7f9 f8e1 	bl	8000b78 <__aeabi_d2iz>
 80079b6:	2200      	movs	r2, #0
 80079b8:	4607      	mov	r7, r0
 80079ba:	2300      	movs	r3, #0
 80079bc:	4620      	mov	r0, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	f7f9 f89c 	bl	8000afc <__aeabi_dcmplt>
 80079c4:	b140      	cbz	r0, 80079d8 <_dtoa_r+0x168>
 80079c6:	4638      	mov	r0, r7
 80079c8:	f7f8 fdbc 	bl	8000544 <__aeabi_i2d>
 80079cc:	4622      	mov	r2, r4
 80079ce:	462b      	mov	r3, r5
 80079d0:	f7f9 f88a 	bl	8000ae8 <__aeabi_dcmpeq>
 80079d4:	b900      	cbnz	r0, 80079d8 <_dtoa_r+0x168>
 80079d6:	3f01      	subs	r7, #1
 80079d8:	2f16      	cmp	r7, #22
 80079da:	d851      	bhi.n	8007a80 <_dtoa_r+0x210>
 80079dc:	4b5b      	ldr	r3, [pc, #364]	@ (8007b4c <_dtoa_r+0x2dc>)
 80079de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ea:	f7f9 f887 	bl	8000afc <__aeabi_dcmplt>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d048      	beq.n	8007a84 <_dtoa_r+0x214>
 80079f2:	3f01      	subs	r7, #1
 80079f4:	2300      	movs	r3, #0
 80079f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80079f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80079fa:	1b9b      	subs	r3, r3, r6
 80079fc:	1e5a      	subs	r2, r3, #1
 80079fe:	bf44      	itt	mi
 8007a00:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a04:	2300      	movmi	r3, #0
 8007a06:	9208      	str	r2, [sp, #32]
 8007a08:	bf54      	ite	pl
 8007a0a:	f04f 0800 	movpl.w	r8, #0
 8007a0e:	9308      	strmi	r3, [sp, #32]
 8007a10:	2f00      	cmp	r7, #0
 8007a12:	db39      	blt.n	8007a88 <_dtoa_r+0x218>
 8007a14:	9b08      	ldr	r3, [sp, #32]
 8007a16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007a18:	443b      	add	r3, r7
 8007a1a:	9308      	str	r3, [sp, #32]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a22:	2b09      	cmp	r3, #9
 8007a24:	d864      	bhi.n	8007af0 <_dtoa_r+0x280>
 8007a26:	2b05      	cmp	r3, #5
 8007a28:	bfc4      	itt	gt
 8007a2a:	3b04      	subgt	r3, #4
 8007a2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a30:	f1a3 0302 	sub.w	r3, r3, #2
 8007a34:	bfcc      	ite	gt
 8007a36:	2400      	movgt	r4, #0
 8007a38:	2401      	movle	r4, #1
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d863      	bhi.n	8007b06 <_dtoa_r+0x296>
 8007a3e:	e8df f003 	tbb	[pc, r3]
 8007a42:	372a      	.short	0x372a
 8007a44:	5535      	.short	0x5535
 8007a46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007a4a:	441e      	add	r6, r3
 8007a4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	bfc1      	itttt	gt
 8007a54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a58:	409f      	lslgt	r7, r3
 8007a5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a62:	bfd6      	itet	le
 8007a64:	f1c3 0320 	rsble	r3, r3, #32
 8007a68:	ea47 0003 	orrgt.w	r0, r7, r3
 8007a6c:	fa04 f003 	lslle.w	r0, r4, r3
 8007a70:	f7f8 fd58 	bl	8000524 <__aeabi_ui2d>
 8007a74:	2201      	movs	r2, #1
 8007a76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a7a:	3e01      	subs	r6, #1
 8007a7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007a7e:	e777      	b.n	8007970 <_dtoa_r+0x100>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e7b8      	b.n	80079f6 <_dtoa_r+0x186>
 8007a84:	9012      	str	r0, [sp, #72]	@ 0x48
 8007a86:	e7b7      	b.n	80079f8 <_dtoa_r+0x188>
 8007a88:	427b      	negs	r3, r7
 8007a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	eba8 0807 	sub.w	r8, r8, r7
 8007a92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a94:	e7c4      	b.n	8007a20 <_dtoa_r+0x1b0>
 8007a96:	2300      	movs	r3, #0
 8007a98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dc35      	bgt.n	8007b0c <_dtoa_r+0x29c>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	9307      	str	r3, [sp, #28]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aaa:	e00b      	b.n	8007ac4 <_dtoa_r+0x254>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e7f3      	b.n	8007a98 <_dtoa_r+0x228>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ab6:	18fb      	adds	r3, r7, r3
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	9307      	str	r3, [sp, #28]
 8007ac0:	bfb8      	it	lt
 8007ac2:	2301      	movlt	r3, #1
 8007ac4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ac8:	2100      	movs	r1, #0
 8007aca:	2204      	movs	r2, #4
 8007acc:	f102 0514 	add.w	r5, r2, #20
 8007ad0:	429d      	cmp	r5, r3
 8007ad2:	d91f      	bls.n	8007b14 <_dtoa_r+0x2a4>
 8007ad4:	6041      	str	r1, [r0, #4]
 8007ad6:	4658      	mov	r0, fp
 8007ad8:	f000 fd8e 	bl	80085f8 <_Balloc>
 8007adc:	4682      	mov	sl, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d13c      	bne.n	8007b5c <_dtoa_r+0x2ec>
 8007ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b50 <_dtoa_r+0x2e0>)
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007aea:	e6d8      	b.n	800789e <_dtoa_r+0x2e>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7e0      	b.n	8007ab2 <_dtoa_r+0x242>
 8007af0:	2401      	movs	r4, #1
 8007af2:	2300      	movs	r3, #0
 8007af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	9307      	str	r3, [sp, #28]
 8007b00:	2200      	movs	r2, #0
 8007b02:	2312      	movs	r3, #18
 8007b04:	e7d0      	b.n	8007aa8 <_dtoa_r+0x238>
 8007b06:	2301      	movs	r3, #1
 8007b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b0a:	e7f5      	b.n	8007af8 <_dtoa_r+0x288>
 8007b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	9307      	str	r3, [sp, #28]
 8007b12:	e7d7      	b.n	8007ac4 <_dtoa_r+0x254>
 8007b14:	3101      	adds	r1, #1
 8007b16:	0052      	lsls	r2, r2, #1
 8007b18:	e7d8      	b.n	8007acc <_dtoa_r+0x25c>
 8007b1a:	bf00      	nop
 8007b1c:	f3af 8000 	nop.w
 8007b20:	636f4361 	.word	0x636f4361
 8007b24:	3fd287a7 	.word	0x3fd287a7
 8007b28:	8b60c8b3 	.word	0x8b60c8b3
 8007b2c:	3fc68a28 	.word	0x3fc68a28
 8007b30:	509f79fb 	.word	0x509f79fb
 8007b34:	3fd34413 	.word	0x3fd34413
 8007b38:	0800c320 	.word	0x0800c320
 8007b3c:	0800c337 	.word	0x0800c337
 8007b40:	7ff00000 	.word	0x7ff00000
 8007b44:	0800c679 	.word	0x0800c679
 8007b48:	3ff80000 	.word	0x3ff80000
 8007b4c:	0800c430 	.word	0x0800c430
 8007b50:	0800c38f 	.word	0x0800c38f
 8007b54:	0800c31c 	.word	0x0800c31c
 8007b58:	0800c678 	.word	0x0800c678
 8007b5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b60:	6018      	str	r0, [r3, #0]
 8007b62:	9b07      	ldr	r3, [sp, #28]
 8007b64:	2b0e      	cmp	r3, #14
 8007b66:	f200 80a4 	bhi.w	8007cb2 <_dtoa_r+0x442>
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	f000 80a1 	beq.w	8007cb2 <_dtoa_r+0x442>
 8007b70:	2f00      	cmp	r7, #0
 8007b72:	dd33      	ble.n	8007bdc <_dtoa_r+0x36c>
 8007b74:	4bad      	ldr	r3, [pc, #692]	@ (8007e2c <_dtoa_r+0x5bc>)
 8007b76:	f007 020f 	and.w	r2, r7, #15
 8007b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b7e:	ed93 7b00 	vldr	d7, [r3]
 8007b82:	05f8      	lsls	r0, r7, #23
 8007b84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b8c:	d516      	bpl.n	8007bbc <_dtoa_r+0x34c>
 8007b8e:	4ba8      	ldr	r3, [pc, #672]	@ (8007e30 <_dtoa_r+0x5c0>)
 8007b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b98:	f7f8 fe68 	bl	800086c <__aeabi_ddiv>
 8007b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba0:	f004 040f 	and.w	r4, r4, #15
 8007ba4:	2603      	movs	r6, #3
 8007ba6:	4da2      	ldr	r5, [pc, #648]	@ (8007e30 <_dtoa_r+0x5c0>)
 8007ba8:	b954      	cbnz	r4, 8007bc0 <_dtoa_r+0x350>
 8007baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bb2:	f7f8 fe5b 	bl	800086c <__aeabi_ddiv>
 8007bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bba:	e028      	b.n	8007c0e <_dtoa_r+0x39e>
 8007bbc:	2602      	movs	r6, #2
 8007bbe:	e7f2      	b.n	8007ba6 <_dtoa_r+0x336>
 8007bc0:	07e1      	lsls	r1, r4, #31
 8007bc2:	d508      	bpl.n	8007bd6 <_dtoa_r+0x366>
 8007bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bcc:	f7f8 fd24 	bl	8000618 <__aeabi_dmul>
 8007bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bd4:	3601      	adds	r6, #1
 8007bd6:	1064      	asrs	r4, r4, #1
 8007bd8:	3508      	adds	r5, #8
 8007bda:	e7e5      	b.n	8007ba8 <_dtoa_r+0x338>
 8007bdc:	f000 80d2 	beq.w	8007d84 <_dtoa_r+0x514>
 8007be0:	427c      	negs	r4, r7
 8007be2:	4b92      	ldr	r3, [pc, #584]	@ (8007e2c <_dtoa_r+0x5bc>)
 8007be4:	4d92      	ldr	r5, [pc, #584]	@ (8007e30 <_dtoa_r+0x5c0>)
 8007be6:	f004 020f 	and.w	r2, r4, #15
 8007bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bf6:	f7f8 fd0f 	bl	8000618 <__aeabi_dmul>
 8007bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfe:	1124      	asrs	r4, r4, #4
 8007c00:	2300      	movs	r3, #0
 8007c02:	2602      	movs	r6, #2
 8007c04:	2c00      	cmp	r4, #0
 8007c06:	f040 80b2 	bne.w	8007d6e <_dtoa_r+0x4fe>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1d3      	bne.n	8007bb6 <_dtoa_r+0x346>
 8007c0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80b7 	beq.w	8007d88 <_dtoa_r+0x518>
 8007c1a:	4b86      	ldr	r3, [pc, #536]	@ (8007e34 <_dtoa_r+0x5c4>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4629      	mov	r1, r5
 8007c22:	f7f8 ff6b 	bl	8000afc <__aeabi_dcmplt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f000 80ae 	beq.w	8007d88 <_dtoa_r+0x518>
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 80aa 	beq.w	8007d88 <_dtoa_r+0x518>
 8007c34:	9b00      	ldr	r3, [sp, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dd37      	ble.n	8007caa <_dtoa_r+0x43a>
 8007c3a:	1e7b      	subs	r3, r7, #1
 8007c3c:	9304      	str	r3, [sp, #16]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4b7d      	ldr	r3, [pc, #500]	@ (8007e38 <_dtoa_r+0x5c8>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	4629      	mov	r1, r5
 8007c46:	f7f8 fce7 	bl	8000618 <__aeabi_dmul>
 8007c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c4e:	9c00      	ldr	r4, [sp, #0]
 8007c50:	3601      	adds	r6, #1
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7f8 fc76 	bl	8000544 <__aeabi_i2d>
 8007c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c5c:	f7f8 fcdc 	bl	8000618 <__aeabi_dmul>
 8007c60:	4b76      	ldr	r3, [pc, #472]	@ (8007e3c <_dtoa_r+0x5cc>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	f7f8 fb22 	bl	80002ac <__adddf3>
 8007c68:	4605      	mov	r5, r0
 8007c6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	f040 808d 	bne.w	8007d8e <_dtoa_r+0x51e>
 8007c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c78:	4b71      	ldr	r3, [pc, #452]	@ (8007e40 <_dtoa_r+0x5d0>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f7f8 fb14 	bl	80002a8 <__aeabi_dsub>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c88:	462a      	mov	r2, r5
 8007c8a:	4633      	mov	r3, r6
 8007c8c:	f7f8 ff54 	bl	8000b38 <__aeabi_dcmpgt>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	f040 828b 	bne.w	80081ac <_dtoa_r+0x93c>
 8007c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ca0:	f7f8 ff2c 	bl	8000afc <__aeabi_dcmplt>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f040 8128 	bne.w	8007efa <_dtoa_r+0x68a>
 8007caa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007cae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f2c0 815a 	blt.w	8007f6e <_dtoa_r+0x6fe>
 8007cba:	2f0e      	cmp	r7, #14
 8007cbc:	f300 8157 	bgt.w	8007f6e <_dtoa_r+0x6fe>
 8007cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8007e2c <_dtoa_r+0x5bc>)
 8007cc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cc6:	ed93 7b00 	vldr	d7, [r3]
 8007cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	ed8d 7b00 	vstr	d7, [sp]
 8007cd2:	da03      	bge.n	8007cdc <_dtoa_r+0x46c>
 8007cd4:	9b07      	ldr	r3, [sp, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f340 8101 	ble.w	8007ede <_dtoa_r+0x66e>
 8007cdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ce0:	4656      	mov	r6, sl
 8007ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7f8 fdbf 	bl	800086c <__aeabi_ddiv>
 8007cee:	f7f8 ff43 	bl	8000b78 <__aeabi_d2iz>
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	f7f8 fc26 	bl	8000544 <__aeabi_i2d>
 8007cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cfc:	f7f8 fc8c 	bl	8000618 <__aeabi_dmul>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d0c:	f7f8 facc 	bl	80002a8 <__aeabi_dsub>
 8007d10:	f806 4b01 	strb.w	r4, [r6], #1
 8007d14:	9d07      	ldr	r5, [sp, #28]
 8007d16:	eba6 040a 	sub.w	r4, r6, sl
 8007d1a:	42a5      	cmp	r5, r4
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	f040 8117 	bne.w	8007f52 <_dtoa_r+0x6e2>
 8007d24:	f7f8 fac2 	bl	80002ac <__adddf3>
 8007d28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	460d      	mov	r5, r1
 8007d30:	f7f8 ff02 	bl	8000b38 <__aeabi_dcmpgt>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	f040 80f9 	bne.w	8007f2c <_dtoa_r+0x6bc>
 8007d3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fed1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d46:	b118      	cbz	r0, 8007d50 <_dtoa_r+0x4e0>
 8007d48:	f018 0f01 	tst.w	r8, #1
 8007d4c:	f040 80ee 	bne.w	8007f2c <_dtoa_r+0x6bc>
 8007d50:	4649      	mov	r1, r9
 8007d52:	4658      	mov	r0, fp
 8007d54:	f000 fc90 	bl	8008678 <_Bfree>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	7033      	strb	r3, [r6, #0]
 8007d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d5e:	3701      	adds	r7, #1
 8007d60:	601f      	str	r7, [r3, #0]
 8007d62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 831d 	beq.w	80083a4 <_dtoa_r+0xb34>
 8007d6a:	601e      	str	r6, [r3, #0]
 8007d6c:	e31a      	b.n	80083a4 <_dtoa_r+0xb34>
 8007d6e:	07e2      	lsls	r2, r4, #31
 8007d70:	d505      	bpl.n	8007d7e <_dtoa_r+0x50e>
 8007d72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d76:	f7f8 fc4f 	bl	8000618 <__aeabi_dmul>
 8007d7a:	3601      	adds	r6, #1
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	1064      	asrs	r4, r4, #1
 8007d80:	3508      	adds	r5, #8
 8007d82:	e73f      	b.n	8007c04 <_dtoa_r+0x394>
 8007d84:	2602      	movs	r6, #2
 8007d86:	e742      	b.n	8007c0e <_dtoa_r+0x39e>
 8007d88:	9c07      	ldr	r4, [sp, #28]
 8007d8a:	9704      	str	r7, [sp, #16]
 8007d8c:	e761      	b.n	8007c52 <_dtoa_r+0x3e2>
 8007d8e:	4b27      	ldr	r3, [pc, #156]	@ (8007e2c <_dtoa_r+0x5bc>)
 8007d90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d9a:	4454      	add	r4, sl
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	d053      	beq.n	8007e48 <_dtoa_r+0x5d8>
 8007da0:	4928      	ldr	r1, [pc, #160]	@ (8007e44 <_dtoa_r+0x5d4>)
 8007da2:	2000      	movs	r0, #0
 8007da4:	f7f8 fd62 	bl	800086c <__aeabi_ddiv>
 8007da8:	4633      	mov	r3, r6
 8007daa:	462a      	mov	r2, r5
 8007dac:	f7f8 fa7c 	bl	80002a8 <__aeabi_dsub>
 8007db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007db4:	4656      	mov	r6, sl
 8007db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dba:	f7f8 fedd 	bl	8000b78 <__aeabi_d2iz>
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	f7f8 fbc0 	bl	8000544 <__aeabi_i2d>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dcc:	f7f8 fa6c 	bl	80002a8 <__aeabi_dsub>
 8007dd0:	3530      	adds	r5, #48	@ 0x30
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dda:	f806 5b01 	strb.w	r5, [r6], #1
 8007dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007de2:	f7f8 fe8b 	bl	8000afc <__aeabi_dcmplt>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d171      	bne.n	8007ece <_dtoa_r+0x65e>
 8007dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dee:	4911      	ldr	r1, [pc, #68]	@ (8007e34 <_dtoa_r+0x5c4>)
 8007df0:	2000      	movs	r0, #0
 8007df2:	f7f8 fa59 	bl	80002a8 <__aeabi_dsub>
 8007df6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dfa:	f7f8 fe7f 	bl	8000afc <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f040 8095 	bne.w	8007f2e <_dtoa_r+0x6be>
 8007e04:	42a6      	cmp	r6, r4
 8007e06:	f43f af50 	beq.w	8007caa <_dtoa_r+0x43a>
 8007e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e38 <_dtoa_r+0x5c8>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	f7f8 fc01 	bl	8000618 <__aeabi_dmul>
 8007e16:	4b08      	ldr	r3, [pc, #32]	@ (8007e38 <_dtoa_r+0x5c8>)
 8007e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e22:	f7f8 fbf9 	bl	8000618 <__aeabi_dmul>
 8007e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e2a:	e7c4      	b.n	8007db6 <_dtoa_r+0x546>
 8007e2c:	0800c430 	.word	0x0800c430
 8007e30:	0800c408 	.word	0x0800c408
 8007e34:	3ff00000 	.word	0x3ff00000
 8007e38:	40240000 	.word	0x40240000
 8007e3c:	401c0000 	.word	0x401c0000
 8007e40:	40140000 	.word	0x40140000
 8007e44:	3fe00000 	.word	0x3fe00000
 8007e48:	4631      	mov	r1, r6
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f7f8 fbe4 	bl	8000618 <__aeabi_dmul>
 8007e50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e54:	9415      	str	r4, [sp, #84]	@ 0x54
 8007e56:	4656      	mov	r6, sl
 8007e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e5c:	f7f8 fe8c 	bl	8000b78 <__aeabi_d2iz>
 8007e60:	4605      	mov	r5, r0
 8007e62:	f7f8 fb6f 	bl	8000544 <__aeabi_i2d>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e6e:	f7f8 fa1b 	bl	80002a8 <__aeabi_dsub>
 8007e72:	3530      	adds	r5, #48	@ 0x30
 8007e74:	f806 5b01 	strb.w	r5, [r6], #1
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	42a6      	cmp	r6, r4
 8007e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	d124      	bne.n	8007ed2 <_dtoa_r+0x662>
 8007e88:	4bac      	ldr	r3, [pc, #688]	@ (800813c <_dtoa_r+0x8cc>)
 8007e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e8e:	f7f8 fa0d 	bl	80002ac <__adddf3>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e9a:	f7f8 fe4d 	bl	8000b38 <__aeabi_dcmpgt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d145      	bne.n	8007f2e <_dtoa_r+0x6be>
 8007ea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ea6:	49a5      	ldr	r1, [pc, #660]	@ (800813c <_dtoa_r+0x8cc>)
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f7f8 f9fd 	bl	80002a8 <__aeabi_dsub>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb6:	f7f8 fe21 	bl	8000afc <__aeabi_dcmplt>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	f43f aef5 	beq.w	8007caa <_dtoa_r+0x43a>
 8007ec0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007ec2:	1e73      	subs	r3, r6, #1
 8007ec4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ec6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007eca:	2b30      	cmp	r3, #48	@ 0x30
 8007ecc:	d0f8      	beq.n	8007ec0 <_dtoa_r+0x650>
 8007ece:	9f04      	ldr	r7, [sp, #16]
 8007ed0:	e73e      	b.n	8007d50 <_dtoa_r+0x4e0>
 8007ed2:	4b9b      	ldr	r3, [pc, #620]	@ (8008140 <_dtoa_r+0x8d0>)
 8007ed4:	f7f8 fba0 	bl	8000618 <__aeabi_dmul>
 8007ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007edc:	e7bc      	b.n	8007e58 <_dtoa_r+0x5e8>
 8007ede:	d10c      	bne.n	8007efa <_dtoa_r+0x68a>
 8007ee0:	4b98      	ldr	r3, [pc, #608]	@ (8008144 <_dtoa_r+0x8d4>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ee8:	f7f8 fb96 	bl	8000618 <__aeabi_dmul>
 8007eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ef0:	f7f8 fe18 	bl	8000b24 <__aeabi_dcmpge>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f000 8157 	beq.w	80081a8 <_dtoa_r+0x938>
 8007efa:	2400      	movs	r4, #0
 8007efc:	4625      	mov	r5, r4
 8007efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f00:	43db      	mvns	r3, r3
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	4656      	mov	r6, sl
 8007f06:	2700      	movs	r7, #0
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4658      	mov	r0, fp
 8007f0c:	f000 fbb4 	bl	8008678 <_Bfree>
 8007f10:	2d00      	cmp	r5, #0
 8007f12:	d0dc      	beq.n	8007ece <_dtoa_r+0x65e>
 8007f14:	b12f      	cbz	r7, 8007f22 <_dtoa_r+0x6b2>
 8007f16:	42af      	cmp	r7, r5
 8007f18:	d003      	beq.n	8007f22 <_dtoa_r+0x6b2>
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	4658      	mov	r0, fp
 8007f1e:	f000 fbab 	bl	8008678 <_Bfree>
 8007f22:	4629      	mov	r1, r5
 8007f24:	4658      	mov	r0, fp
 8007f26:	f000 fba7 	bl	8008678 <_Bfree>
 8007f2a:	e7d0      	b.n	8007ece <_dtoa_r+0x65e>
 8007f2c:	9704      	str	r7, [sp, #16]
 8007f2e:	4633      	mov	r3, r6
 8007f30:	461e      	mov	r6, r3
 8007f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f36:	2a39      	cmp	r2, #57	@ 0x39
 8007f38:	d107      	bne.n	8007f4a <_dtoa_r+0x6da>
 8007f3a:	459a      	cmp	sl, r3
 8007f3c:	d1f8      	bne.n	8007f30 <_dtoa_r+0x6c0>
 8007f3e:	9a04      	ldr	r2, [sp, #16]
 8007f40:	3201      	adds	r2, #1
 8007f42:	9204      	str	r2, [sp, #16]
 8007f44:	2230      	movs	r2, #48	@ 0x30
 8007f46:	f88a 2000 	strb.w	r2, [sl]
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	3201      	adds	r2, #1
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	e7bd      	b.n	8007ece <_dtoa_r+0x65e>
 8007f52:	4b7b      	ldr	r3, [pc, #492]	@ (8008140 <_dtoa_r+0x8d0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	f7f8 fb5f 	bl	8000618 <__aeabi_dmul>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	460d      	mov	r5, r1
 8007f62:	f7f8 fdc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f43f aebb 	beq.w	8007ce2 <_dtoa_r+0x472>
 8007f6c:	e6f0      	b.n	8007d50 <_dtoa_r+0x4e0>
 8007f6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	f000 80db 	beq.w	800812c <_dtoa_r+0x8bc>
 8007f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f78:	2a01      	cmp	r2, #1
 8007f7a:	f300 80bf 	bgt.w	80080fc <_dtoa_r+0x88c>
 8007f7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	f000 80b7 	beq.w	80080f4 <_dtoa_r+0x884>
 8007f86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f8c:	4646      	mov	r6, r8
 8007f8e:	9a08      	ldr	r2, [sp, #32]
 8007f90:	2101      	movs	r1, #1
 8007f92:	441a      	add	r2, r3
 8007f94:	4658      	mov	r0, fp
 8007f96:	4498      	add	r8, r3
 8007f98:	9208      	str	r2, [sp, #32]
 8007f9a:	f000 fc6b 	bl	8008874 <__i2b>
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	b15e      	cbz	r6, 8007fba <_dtoa_r+0x74a>
 8007fa2:	9b08      	ldr	r3, [sp, #32]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dd08      	ble.n	8007fba <_dtoa_r+0x74a>
 8007fa8:	42b3      	cmp	r3, r6
 8007faa:	9a08      	ldr	r2, [sp, #32]
 8007fac:	bfa8      	it	ge
 8007fae:	4633      	movge	r3, r6
 8007fb0:	eba8 0803 	sub.w	r8, r8, r3
 8007fb4:	1af6      	subs	r6, r6, r3
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	9308      	str	r3, [sp, #32]
 8007fba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fbc:	b1f3      	cbz	r3, 8007ffc <_dtoa_r+0x78c>
 8007fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 80b7 	beq.w	8008134 <_dtoa_r+0x8c4>
 8007fc6:	b18c      	cbz	r4, 8007fec <_dtoa_r+0x77c>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4622      	mov	r2, r4
 8007fcc:	4658      	mov	r0, fp
 8007fce:	f000 fd11 	bl	80089f4 <__pow5mult>
 8007fd2:	464a      	mov	r2, r9
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	4658      	mov	r0, fp
 8007fda:	f000 fc61 	bl	80088a0 <__multiply>
 8007fde:	4649      	mov	r1, r9
 8007fe0:	9004      	str	r0, [sp, #16]
 8007fe2:	4658      	mov	r0, fp
 8007fe4:	f000 fb48 	bl	8008678 <_Bfree>
 8007fe8:	9b04      	ldr	r3, [sp, #16]
 8007fea:	4699      	mov	r9, r3
 8007fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fee:	1b1a      	subs	r2, r3, r4
 8007ff0:	d004      	beq.n	8007ffc <_dtoa_r+0x78c>
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4658      	mov	r0, fp
 8007ff6:	f000 fcfd 	bl	80089f4 <__pow5mult>
 8007ffa:	4681      	mov	r9, r0
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	4658      	mov	r0, fp
 8008000:	f000 fc38 	bl	8008874 <__i2b>
 8008004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008006:	4604      	mov	r4, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 81cf 	beq.w	80083ac <_dtoa_r+0xb3c>
 800800e:	461a      	mov	r2, r3
 8008010:	4601      	mov	r1, r0
 8008012:	4658      	mov	r0, fp
 8008014:	f000 fcee 	bl	80089f4 <__pow5mult>
 8008018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800801a:	2b01      	cmp	r3, #1
 800801c:	4604      	mov	r4, r0
 800801e:	f300 8095 	bgt.w	800814c <_dtoa_r+0x8dc>
 8008022:	9b02      	ldr	r3, [sp, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	f040 8087 	bne.w	8008138 <_dtoa_r+0x8c8>
 800802a:	9b03      	ldr	r3, [sp, #12]
 800802c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008030:	2b00      	cmp	r3, #0
 8008032:	f040 8089 	bne.w	8008148 <_dtoa_r+0x8d8>
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800803c:	0d1b      	lsrs	r3, r3, #20
 800803e:	051b      	lsls	r3, r3, #20
 8008040:	b12b      	cbz	r3, 800804e <_dtoa_r+0x7de>
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	3301      	adds	r3, #1
 8008046:	9308      	str	r3, [sp, #32]
 8008048:	f108 0801 	add.w	r8, r8, #1
 800804c:	2301      	movs	r3, #1
 800804e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 81b0 	beq.w	80083b8 <_dtoa_r+0xb48>
 8008058:	6923      	ldr	r3, [r4, #16]
 800805a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800805e:	6918      	ldr	r0, [r3, #16]
 8008060:	f000 fbbc 	bl	80087dc <__hi0bits>
 8008064:	f1c0 0020 	rsb	r0, r0, #32
 8008068:	9b08      	ldr	r3, [sp, #32]
 800806a:	4418      	add	r0, r3
 800806c:	f010 001f 	ands.w	r0, r0, #31
 8008070:	d077      	beq.n	8008162 <_dtoa_r+0x8f2>
 8008072:	f1c0 0320 	rsb	r3, r0, #32
 8008076:	2b04      	cmp	r3, #4
 8008078:	dd6b      	ble.n	8008152 <_dtoa_r+0x8e2>
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	f1c0 001c 	rsb	r0, r0, #28
 8008080:	4403      	add	r3, r0
 8008082:	4480      	add	r8, r0
 8008084:	4406      	add	r6, r0
 8008086:	9308      	str	r3, [sp, #32]
 8008088:	f1b8 0f00 	cmp.w	r8, #0
 800808c:	dd05      	ble.n	800809a <_dtoa_r+0x82a>
 800808e:	4649      	mov	r1, r9
 8008090:	4642      	mov	r2, r8
 8008092:	4658      	mov	r0, fp
 8008094:	f000 fd08 	bl	8008aa8 <__lshift>
 8008098:	4681      	mov	r9, r0
 800809a:	9b08      	ldr	r3, [sp, #32]
 800809c:	2b00      	cmp	r3, #0
 800809e:	dd05      	ble.n	80080ac <_dtoa_r+0x83c>
 80080a0:	4621      	mov	r1, r4
 80080a2:	461a      	mov	r2, r3
 80080a4:	4658      	mov	r0, fp
 80080a6:	f000 fcff 	bl	8008aa8 <__lshift>
 80080aa:	4604      	mov	r4, r0
 80080ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d059      	beq.n	8008166 <_dtoa_r+0x8f6>
 80080b2:	4621      	mov	r1, r4
 80080b4:	4648      	mov	r0, r9
 80080b6:	f000 fd63 	bl	8008b80 <__mcmp>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	da53      	bge.n	8008166 <_dtoa_r+0x8f6>
 80080be:	1e7b      	subs	r3, r7, #1
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	4649      	mov	r1, r9
 80080c4:	2300      	movs	r3, #0
 80080c6:	220a      	movs	r2, #10
 80080c8:	4658      	mov	r0, fp
 80080ca:	f000 faf7 	bl	80086bc <__multadd>
 80080ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080d0:	4681      	mov	r9, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 8172 	beq.w	80083bc <_dtoa_r+0xb4c>
 80080d8:	2300      	movs	r3, #0
 80080da:	4629      	mov	r1, r5
 80080dc:	220a      	movs	r2, #10
 80080de:	4658      	mov	r0, fp
 80080e0:	f000 faec 	bl	80086bc <__multadd>
 80080e4:	9b00      	ldr	r3, [sp, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	4605      	mov	r5, r0
 80080ea:	dc67      	bgt.n	80081bc <_dtoa_r+0x94c>
 80080ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	dc41      	bgt.n	8008176 <_dtoa_r+0x906>
 80080f2:	e063      	b.n	80081bc <_dtoa_r+0x94c>
 80080f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80080f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80080fa:	e746      	b.n	8007f8a <_dtoa_r+0x71a>
 80080fc:	9b07      	ldr	r3, [sp, #28]
 80080fe:	1e5c      	subs	r4, r3, #1
 8008100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008102:	42a3      	cmp	r3, r4
 8008104:	bfbf      	itttt	lt
 8008106:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008108:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800810a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800810c:	1ae3      	sublt	r3, r4, r3
 800810e:	bfb4      	ite	lt
 8008110:	18d2      	addlt	r2, r2, r3
 8008112:	1b1c      	subge	r4, r3, r4
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	bfbc      	itt	lt
 8008118:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800811a:	2400      	movlt	r4, #0
 800811c:	2b00      	cmp	r3, #0
 800811e:	bfb5      	itete	lt
 8008120:	eba8 0603 	sublt.w	r6, r8, r3
 8008124:	9b07      	ldrge	r3, [sp, #28]
 8008126:	2300      	movlt	r3, #0
 8008128:	4646      	movge	r6, r8
 800812a:	e730      	b.n	8007f8e <_dtoa_r+0x71e>
 800812c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800812e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008130:	4646      	mov	r6, r8
 8008132:	e735      	b.n	8007fa0 <_dtoa_r+0x730>
 8008134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008136:	e75c      	b.n	8007ff2 <_dtoa_r+0x782>
 8008138:	2300      	movs	r3, #0
 800813a:	e788      	b.n	800804e <_dtoa_r+0x7de>
 800813c:	3fe00000 	.word	0x3fe00000
 8008140:	40240000 	.word	0x40240000
 8008144:	40140000 	.word	0x40140000
 8008148:	9b02      	ldr	r3, [sp, #8]
 800814a:	e780      	b.n	800804e <_dtoa_r+0x7de>
 800814c:	2300      	movs	r3, #0
 800814e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008150:	e782      	b.n	8008058 <_dtoa_r+0x7e8>
 8008152:	d099      	beq.n	8008088 <_dtoa_r+0x818>
 8008154:	9a08      	ldr	r2, [sp, #32]
 8008156:	331c      	adds	r3, #28
 8008158:	441a      	add	r2, r3
 800815a:	4498      	add	r8, r3
 800815c:	441e      	add	r6, r3
 800815e:	9208      	str	r2, [sp, #32]
 8008160:	e792      	b.n	8008088 <_dtoa_r+0x818>
 8008162:	4603      	mov	r3, r0
 8008164:	e7f6      	b.n	8008154 <_dtoa_r+0x8e4>
 8008166:	9b07      	ldr	r3, [sp, #28]
 8008168:	9704      	str	r7, [sp, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dc20      	bgt.n	80081b0 <_dtoa_r+0x940>
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008172:	2b02      	cmp	r3, #2
 8008174:	dd1e      	ble.n	80081b4 <_dtoa_r+0x944>
 8008176:	9b00      	ldr	r3, [sp, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f47f aec0 	bne.w	8007efe <_dtoa_r+0x68e>
 800817e:	4621      	mov	r1, r4
 8008180:	2205      	movs	r2, #5
 8008182:	4658      	mov	r0, fp
 8008184:	f000 fa9a 	bl	80086bc <__multadd>
 8008188:	4601      	mov	r1, r0
 800818a:	4604      	mov	r4, r0
 800818c:	4648      	mov	r0, r9
 800818e:	f000 fcf7 	bl	8008b80 <__mcmp>
 8008192:	2800      	cmp	r0, #0
 8008194:	f77f aeb3 	ble.w	8007efe <_dtoa_r+0x68e>
 8008198:	4656      	mov	r6, sl
 800819a:	2331      	movs	r3, #49	@ 0x31
 800819c:	f806 3b01 	strb.w	r3, [r6], #1
 80081a0:	9b04      	ldr	r3, [sp, #16]
 80081a2:	3301      	adds	r3, #1
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	e6ae      	b.n	8007f06 <_dtoa_r+0x696>
 80081a8:	9c07      	ldr	r4, [sp, #28]
 80081aa:	9704      	str	r7, [sp, #16]
 80081ac:	4625      	mov	r5, r4
 80081ae:	e7f3      	b.n	8008198 <_dtoa_r+0x928>
 80081b0:	9b07      	ldr	r3, [sp, #28]
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 8104 	beq.w	80083c4 <_dtoa_r+0xb54>
 80081bc:	2e00      	cmp	r6, #0
 80081be:	dd05      	ble.n	80081cc <_dtoa_r+0x95c>
 80081c0:	4629      	mov	r1, r5
 80081c2:	4632      	mov	r2, r6
 80081c4:	4658      	mov	r0, fp
 80081c6:	f000 fc6f 	bl	8008aa8 <__lshift>
 80081ca:	4605      	mov	r5, r0
 80081cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d05a      	beq.n	8008288 <_dtoa_r+0xa18>
 80081d2:	6869      	ldr	r1, [r5, #4]
 80081d4:	4658      	mov	r0, fp
 80081d6:	f000 fa0f 	bl	80085f8 <_Balloc>
 80081da:	4606      	mov	r6, r0
 80081dc:	b928      	cbnz	r0, 80081ea <_dtoa_r+0x97a>
 80081de:	4b84      	ldr	r3, [pc, #528]	@ (80083f0 <_dtoa_r+0xb80>)
 80081e0:	4602      	mov	r2, r0
 80081e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80081e6:	f7ff bb5a 	b.w	800789e <_dtoa_r+0x2e>
 80081ea:	692a      	ldr	r2, [r5, #16]
 80081ec:	3202      	adds	r2, #2
 80081ee:	0092      	lsls	r2, r2, #2
 80081f0:	f105 010c 	add.w	r1, r5, #12
 80081f4:	300c      	adds	r0, #12
 80081f6:	f002 fc6b 	bl	800aad0 <memcpy>
 80081fa:	2201      	movs	r2, #1
 80081fc:	4631      	mov	r1, r6
 80081fe:	4658      	mov	r0, fp
 8008200:	f000 fc52 	bl	8008aa8 <__lshift>
 8008204:	f10a 0301 	add.w	r3, sl, #1
 8008208:	9307      	str	r3, [sp, #28]
 800820a:	9b00      	ldr	r3, [sp, #0]
 800820c:	4453      	add	r3, sl
 800820e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008210:	9b02      	ldr	r3, [sp, #8]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	462f      	mov	r7, r5
 8008218:	930a      	str	r3, [sp, #40]	@ 0x28
 800821a:	4605      	mov	r5, r0
 800821c:	9b07      	ldr	r3, [sp, #28]
 800821e:	4621      	mov	r1, r4
 8008220:	3b01      	subs	r3, #1
 8008222:	4648      	mov	r0, r9
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	f7ff fa99 	bl	800775c <quorem>
 800822a:	4639      	mov	r1, r7
 800822c:	9002      	str	r0, [sp, #8]
 800822e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008232:	4648      	mov	r0, r9
 8008234:	f000 fca4 	bl	8008b80 <__mcmp>
 8008238:	462a      	mov	r2, r5
 800823a:	9008      	str	r0, [sp, #32]
 800823c:	4621      	mov	r1, r4
 800823e:	4658      	mov	r0, fp
 8008240:	f000 fcba 	bl	8008bb8 <__mdiff>
 8008244:	68c2      	ldr	r2, [r0, #12]
 8008246:	4606      	mov	r6, r0
 8008248:	bb02      	cbnz	r2, 800828c <_dtoa_r+0xa1c>
 800824a:	4601      	mov	r1, r0
 800824c:	4648      	mov	r0, r9
 800824e:	f000 fc97 	bl	8008b80 <__mcmp>
 8008252:	4602      	mov	r2, r0
 8008254:	4631      	mov	r1, r6
 8008256:	4658      	mov	r0, fp
 8008258:	920e      	str	r2, [sp, #56]	@ 0x38
 800825a:	f000 fa0d 	bl	8008678 <_Bfree>
 800825e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008262:	9e07      	ldr	r6, [sp, #28]
 8008264:	ea43 0102 	orr.w	r1, r3, r2
 8008268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800826a:	4319      	orrs	r1, r3
 800826c:	d110      	bne.n	8008290 <_dtoa_r+0xa20>
 800826e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008272:	d029      	beq.n	80082c8 <_dtoa_r+0xa58>
 8008274:	9b08      	ldr	r3, [sp, #32]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd02      	ble.n	8008280 <_dtoa_r+0xa10>
 800827a:	9b02      	ldr	r3, [sp, #8]
 800827c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008280:	9b00      	ldr	r3, [sp, #0]
 8008282:	f883 8000 	strb.w	r8, [r3]
 8008286:	e63f      	b.n	8007f08 <_dtoa_r+0x698>
 8008288:	4628      	mov	r0, r5
 800828a:	e7bb      	b.n	8008204 <_dtoa_r+0x994>
 800828c:	2201      	movs	r2, #1
 800828e:	e7e1      	b.n	8008254 <_dtoa_r+0x9e4>
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	2b00      	cmp	r3, #0
 8008294:	db04      	blt.n	80082a0 <_dtoa_r+0xa30>
 8008296:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008298:	430b      	orrs	r3, r1
 800829a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800829c:	430b      	orrs	r3, r1
 800829e:	d120      	bne.n	80082e2 <_dtoa_r+0xa72>
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	dded      	ble.n	8008280 <_dtoa_r+0xa10>
 80082a4:	4649      	mov	r1, r9
 80082a6:	2201      	movs	r2, #1
 80082a8:	4658      	mov	r0, fp
 80082aa:	f000 fbfd 	bl	8008aa8 <__lshift>
 80082ae:	4621      	mov	r1, r4
 80082b0:	4681      	mov	r9, r0
 80082b2:	f000 fc65 	bl	8008b80 <__mcmp>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	dc03      	bgt.n	80082c2 <_dtoa_r+0xa52>
 80082ba:	d1e1      	bne.n	8008280 <_dtoa_r+0xa10>
 80082bc:	f018 0f01 	tst.w	r8, #1
 80082c0:	d0de      	beq.n	8008280 <_dtoa_r+0xa10>
 80082c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082c6:	d1d8      	bne.n	800827a <_dtoa_r+0xa0a>
 80082c8:	9a00      	ldr	r2, [sp, #0]
 80082ca:	2339      	movs	r3, #57	@ 0x39
 80082cc:	7013      	strb	r3, [r2, #0]
 80082ce:	4633      	mov	r3, r6
 80082d0:	461e      	mov	r6, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80082d8:	2a39      	cmp	r2, #57	@ 0x39
 80082da:	d052      	beq.n	8008382 <_dtoa_r+0xb12>
 80082dc:	3201      	adds	r2, #1
 80082de:	701a      	strb	r2, [r3, #0]
 80082e0:	e612      	b.n	8007f08 <_dtoa_r+0x698>
 80082e2:	2a00      	cmp	r2, #0
 80082e4:	dd07      	ble.n	80082f6 <_dtoa_r+0xa86>
 80082e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082ea:	d0ed      	beq.n	80082c8 <_dtoa_r+0xa58>
 80082ec:	9a00      	ldr	r2, [sp, #0]
 80082ee:	f108 0301 	add.w	r3, r8, #1
 80082f2:	7013      	strb	r3, [r2, #0]
 80082f4:	e608      	b.n	8007f08 <_dtoa_r+0x698>
 80082f6:	9b07      	ldr	r3, [sp, #28]
 80082f8:	9a07      	ldr	r2, [sp, #28]
 80082fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80082fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008300:	4293      	cmp	r3, r2
 8008302:	d028      	beq.n	8008356 <_dtoa_r+0xae6>
 8008304:	4649      	mov	r1, r9
 8008306:	2300      	movs	r3, #0
 8008308:	220a      	movs	r2, #10
 800830a:	4658      	mov	r0, fp
 800830c:	f000 f9d6 	bl	80086bc <__multadd>
 8008310:	42af      	cmp	r7, r5
 8008312:	4681      	mov	r9, r0
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	f04f 020a 	mov.w	r2, #10
 800831c:	4639      	mov	r1, r7
 800831e:	4658      	mov	r0, fp
 8008320:	d107      	bne.n	8008332 <_dtoa_r+0xac2>
 8008322:	f000 f9cb 	bl	80086bc <__multadd>
 8008326:	4607      	mov	r7, r0
 8008328:	4605      	mov	r5, r0
 800832a:	9b07      	ldr	r3, [sp, #28]
 800832c:	3301      	adds	r3, #1
 800832e:	9307      	str	r3, [sp, #28]
 8008330:	e774      	b.n	800821c <_dtoa_r+0x9ac>
 8008332:	f000 f9c3 	bl	80086bc <__multadd>
 8008336:	4629      	mov	r1, r5
 8008338:	4607      	mov	r7, r0
 800833a:	2300      	movs	r3, #0
 800833c:	220a      	movs	r2, #10
 800833e:	4658      	mov	r0, fp
 8008340:	f000 f9bc 	bl	80086bc <__multadd>
 8008344:	4605      	mov	r5, r0
 8008346:	e7f0      	b.n	800832a <_dtoa_r+0xaba>
 8008348:	9b00      	ldr	r3, [sp, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	bfcc      	ite	gt
 800834e:	461e      	movgt	r6, r3
 8008350:	2601      	movle	r6, #1
 8008352:	4456      	add	r6, sl
 8008354:	2700      	movs	r7, #0
 8008356:	4649      	mov	r1, r9
 8008358:	2201      	movs	r2, #1
 800835a:	4658      	mov	r0, fp
 800835c:	f000 fba4 	bl	8008aa8 <__lshift>
 8008360:	4621      	mov	r1, r4
 8008362:	4681      	mov	r9, r0
 8008364:	f000 fc0c 	bl	8008b80 <__mcmp>
 8008368:	2800      	cmp	r0, #0
 800836a:	dcb0      	bgt.n	80082ce <_dtoa_r+0xa5e>
 800836c:	d102      	bne.n	8008374 <_dtoa_r+0xb04>
 800836e:	f018 0f01 	tst.w	r8, #1
 8008372:	d1ac      	bne.n	80082ce <_dtoa_r+0xa5e>
 8008374:	4633      	mov	r3, r6
 8008376:	461e      	mov	r6, r3
 8008378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800837c:	2a30      	cmp	r2, #48	@ 0x30
 800837e:	d0fa      	beq.n	8008376 <_dtoa_r+0xb06>
 8008380:	e5c2      	b.n	8007f08 <_dtoa_r+0x698>
 8008382:	459a      	cmp	sl, r3
 8008384:	d1a4      	bne.n	80082d0 <_dtoa_r+0xa60>
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	3301      	adds	r3, #1
 800838a:	9304      	str	r3, [sp, #16]
 800838c:	2331      	movs	r3, #49	@ 0x31
 800838e:	f88a 3000 	strb.w	r3, [sl]
 8008392:	e5b9      	b.n	8007f08 <_dtoa_r+0x698>
 8008394:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008396:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80083f4 <_dtoa_r+0xb84>
 800839a:	b11b      	cbz	r3, 80083a4 <_dtoa_r+0xb34>
 800839c:	f10a 0308 	add.w	r3, sl, #8
 80083a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083a2:	6013      	str	r3, [r2, #0]
 80083a4:	4650      	mov	r0, sl
 80083a6:	b019      	add	sp, #100	@ 0x64
 80083a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	f77f ae37 	ble.w	8008022 <_dtoa_r+0x7b2>
 80083b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083b8:	2001      	movs	r0, #1
 80083ba:	e655      	b.n	8008068 <_dtoa_r+0x7f8>
 80083bc:	9b00      	ldr	r3, [sp, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f77f aed6 	ble.w	8008170 <_dtoa_r+0x900>
 80083c4:	4656      	mov	r6, sl
 80083c6:	4621      	mov	r1, r4
 80083c8:	4648      	mov	r0, r9
 80083ca:	f7ff f9c7 	bl	800775c <quorem>
 80083ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083d2:	f806 8b01 	strb.w	r8, [r6], #1
 80083d6:	9b00      	ldr	r3, [sp, #0]
 80083d8:	eba6 020a 	sub.w	r2, r6, sl
 80083dc:	4293      	cmp	r3, r2
 80083de:	ddb3      	ble.n	8008348 <_dtoa_r+0xad8>
 80083e0:	4649      	mov	r1, r9
 80083e2:	2300      	movs	r3, #0
 80083e4:	220a      	movs	r2, #10
 80083e6:	4658      	mov	r0, fp
 80083e8:	f000 f968 	bl	80086bc <__multadd>
 80083ec:	4681      	mov	r9, r0
 80083ee:	e7ea      	b.n	80083c6 <_dtoa_r+0xb56>
 80083f0:	0800c38f 	.word	0x0800c38f
 80083f4:	0800c313 	.word	0x0800c313

080083f8 <_free_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4605      	mov	r5, r0
 80083fc:	2900      	cmp	r1, #0
 80083fe:	d041      	beq.n	8008484 <_free_r+0x8c>
 8008400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008404:	1f0c      	subs	r4, r1, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	bfb8      	it	lt
 800840a:	18e4      	addlt	r4, r4, r3
 800840c:	f000 f8e8 	bl	80085e0 <__malloc_lock>
 8008410:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <_free_r+0x90>)
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	b933      	cbnz	r3, 8008424 <_free_r+0x2c>
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	6014      	str	r4, [r2, #0]
 800841a:	4628      	mov	r0, r5
 800841c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008420:	f000 b8e4 	b.w	80085ec <__malloc_unlock>
 8008424:	42a3      	cmp	r3, r4
 8008426:	d908      	bls.n	800843a <_free_r+0x42>
 8008428:	6820      	ldr	r0, [r4, #0]
 800842a:	1821      	adds	r1, r4, r0
 800842c:	428b      	cmp	r3, r1
 800842e:	bf01      	itttt	eq
 8008430:	6819      	ldreq	r1, [r3, #0]
 8008432:	685b      	ldreq	r3, [r3, #4]
 8008434:	1809      	addeq	r1, r1, r0
 8008436:	6021      	streq	r1, [r4, #0]
 8008438:	e7ed      	b.n	8008416 <_free_r+0x1e>
 800843a:	461a      	mov	r2, r3
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b10b      	cbz	r3, 8008444 <_free_r+0x4c>
 8008440:	42a3      	cmp	r3, r4
 8008442:	d9fa      	bls.n	800843a <_free_r+0x42>
 8008444:	6811      	ldr	r1, [r2, #0]
 8008446:	1850      	adds	r0, r2, r1
 8008448:	42a0      	cmp	r0, r4
 800844a:	d10b      	bne.n	8008464 <_free_r+0x6c>
 800844c:	6820      	ldr	r0, [r4, #0]
 800844e:	4401      	add	r1, r0
 8008450:	1850      	adds	r0, r2, r1
 8008452:	4283      	cmp	r3, r0
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	d1e0      	bne.n	800841a <_free_r+0x22>
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	6053      	str	r3, [r2, #4]
 800845e:	4408      	add	r0, r1
 8008460:	6010      	str	r0, [r2, #0]
 8008462:	e7da      	b.n	800841a <_free_r+0x22>
 8008464:	d902      	bls.n	800846c <_free_r+0x74>
 8008466:	230c      	movs	r3, #12
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	e7d6      	b.n	800841a <_free_r+0x22>
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	1821      	adds	r1, r4, r0
 8008470:	428b      	cmp	r3, r1
 8008472:	bf04      	itt	eq
 8008474:	6819      	ldreq	r1, [r3, #0]
 8008476:	685b      	ldreq	r3, [r3, #4]
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	bf04      	itt	eq
 800847c:	1809      	addeq	r1, r1, r0
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	6054      	str	r4, [r2, #4]
 8008482:	e7ca      	b.n	800841a <_free_r+0x22>
 8008484:	bd38      	pop	{r3, r4, r5, pc}
 8008486:	bf00      	nop
 8008488:	200004c4 	.word	0x200004c4

0800848c <malloc>:
 800848c:	4b02      	ldr	r3, [pc, #8]	@ (8008498 <malloc+0xc>)
 800848e:	4601      	mov	r1, r0
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	f000 b825 	b.w	80084e0 <_malloc_r>
 8008496:	bf00      	nop
 8008498:	20000018 	.word	0x20000018

0800849c <sbrk_aligned>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4e0f      	ldr	r6, [pc, #60]	@ (80084dc <sbrk_aligned+0x40>)
 80084a0:	460c      	mov	r4, r1
 80084a2:	6831      	ldr	r1, [r6, #0]
 80084a4:	4605      	mov	r5, r0
 80084a6:	b911      	cbnz	r1, 80084ae <sbrk_aligned+0x12>
 80084a8:	f002 fb02 	bl	800aab0 <_sbrk_r>
 80084ac:	6030      	str	r0, [r6, #0]
 80084ae:	4621      	mov	r1, r4
 80084b0:	4628      	mov	r0, r5
 80084b2:	f002 fafd 	bl	800aab0 <_sbrk_r>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d103      	bne.n	80084c2 <sbrk_aligned+0x26>
 80084ba:	f04f 34ff 	mov.w	r4, #4294967295
 80084be:	4620      	mov	r0, r4
 80084c0:	bd70      	pop	{r4, r5, r6, pc}
 80084c2:	1cc4      	adds	r4, r0, #3
 80084c4:	f024 0403 	bic.w	r4, r4, #3
 80084c8:	42a0      	cmp	r0, r4
 80084ca:	d0f8      	beq.n	80084be <sbrk_aligned+0x22>
 80084cc:	1a21      	subs	r1, r4, r0
 80084ce:	4628      	mov	r0, r5
 80084d0:	f002 faee 	bl	800aab0 <_sbrk_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	d1f2      	bne.n	80084be <sbrk_aligned+0x22>
 80084d8:	e7ef      	b.n	80084ba <sbrk_aligned+0x1e>
 80084da:	bf00      	nop
 80084dc:	200004c0 	.word	0x200004c0

080084e0 <_malloc_r>:
 80084e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e4:	1ccd      	adds	r5, r1, #3
 80084e6:	f025 0503 	bic.w	r5, r5, #3
 80084ea:	3508      	adds	r5, #8
 80084ec:	2d0c      	cmp	r5, #12
 80084ee:	bf38      	it	cc
 80084f0:	250c      	movcc	r5, #12
 80084f2:	2d00      	cmp	r5, #0
 80084f4:	4606      	mov	r6, r0
 80084f6:	db01      	blt.n	80084fc <_malloc_r+0x1c>
 80084f8:	42a9      	cmp	r1, r5
 80084fa:	d904      	bls.n	8008506 <_malloc_r+0x26>
 80084fc:	230c      	movs	r3, #12
 80084fe:	6033      	str	r3, [r6, #0]
 8008500:	2000      	movs	r0, #0
 8008502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085dc <_malloc_r+0xfc>
 800850a:	f000 f869 	bl	80085e0 <__malloc_lock>
 800850e:	f8d8 3000 	ldr.w	r3, [r8]
 8008512:	461c      	mov	r4, r3
 8008514:	bb44      	cbnz	r4, 8008568 <_malloc_r+0x88>
 8008516:	4629      	mov	r1, r5
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff ffbf 	bl	800849c <sbrk_aligned>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	4604      	mov	r4, r0
 8008522:	d158      	bne.n	80085d6 <_malloc_r+0xf6>
 8008524:	f8d8 4000 	ldr.w	r4, [r8]
 8008528:	4627      	mov	r7, r4
 800852a:	2f00      	cmp	r7, #0
 800852c:	d143      	bne.n	80085b6 <_malloc_r+0xd6>
 800852e:	2c00      	cmp	r4, #0
 8008530:	d04b      	beq.n	80085ca <_malloc_r+0xea>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	4639      	mov	r1, r7
 8008536:	4630      	mov	r0, r6
 8008538:	eb04 0903 	add.w	r9, r4, r3
 800853c:	f002 fab8 	bl	800aab0 <_sbrk_r>
 8008540:	4581      	cmp	r9, r0
 8008542:	d142      	bne.n	80085ca <_malloc_r+0xea>
 8008544:	6821      	ldr	r1, [r4, #0]
 8008546:	1a6d      	subs	r5, r5, r1
 8008548:	4629      	mov	r1, r5
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff ffa6 	bl	800849c <sbrk_aligned>
 8008550:	3001      	adds	r0, #1
 8008552:	d03a      	beq.n	80085ca <_malloc_r+0xea>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	442b      	add	r3, r5
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	f8d8 3000 	ldr.w	r3, [r8]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	bb62      	cbnz	r2, 80085bc <_malloc_r+0xdc>
 8008562:	f8c8 7000 	str.w	r7, [r8]
 8008566:	e00f      	b.n	8008588 <_malloc_r+0xa8>
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	1b52      	subs	r2, r2, r5
 800856c:	d420      	bmi.n	80085b0 <_malloc_r+0xd0>
 800856e:	2a0b      	cmp	r2, #11
 8008570:	d917      	bls.n	80085a2 <_malloc_r+0xc2>
 8008572:	1961      	adds	r1, r4, r5
 8008574:	42a3      	cmp	r3, r4
 8008576:	6025      	str	r5, [r4, #0]
 8008578:	bf18      	it	ne
 800857a:	6059      	strne	r1, [r3, #4]
 800857c:	6863      	ldr	r3, [r4, #4]
 800857e:	bf08      	it	eq
 8008580:	f8c8 1000 	streq.w	r1, [r8]
 8008584:	5162      	str	r2, [r4, r5]
 8008586:	604b      	str	r3, [r1, #4]
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f82f 	bl	80085ec <__malloc_unlock>
 800858e:	f104 000b 	add.w	r0, r4, #11
 8008592:	1d23      	adds	r3, r4, #4
 8008594:	f020 0007 	bic.w	r0, r0, #7
 8008598:	1ac2      	subs	r2, r0, r3
 800859a:	bf1c      	itt	ne
 800859c:	1a1b      	subne	r3, r3, r0
 800859e:	50a3      	strne	r3, [r4, r2]
 80085a0:	e7af      	b.n	8008502 <_malloc_r+0x22>
 80085a2:	6862      	ldr	r2, [r4, #4]
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	bf0c      	ite	eq
 80085a8:	f8c8 2000 	streq.w	r2, [r8]
 80085ac:	605a      	strne	r2, [r3, #4]
 80085ae:	e7eb      	b.n	8008588 <_malloc_r+0xa8>
 80085b0:	4623      	mov	r3, r4
 80085b2:	6864      	ldr	r4, [r4, #4]
 80085b4:	e7ae      	b.n	8008514 <_malloc_r+0x34>
 80085b6:	463c      	mov	r4, r7
 80085b8:	687f      	ldr	r7, [r7, #4]
 80085ba:	e7b6      	b.n	800852a <_malloc_r+0x4a>
 80085bc:	461a      	mov	r2, r3
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	d1fb      	bne.n	80085bc <_malloc_r+0xdc>
 80085c4:	2300      	movs	r3, #0
 80085c6:	6053      	str	r3, [r2, #4]
 80085c8:	e7de      	b.n	8008588 <_malloc_r+0xa8>
 80085ca:	230c      	movs	r3, #12
 80085cc:	6033      	str	r3, [r6, #0]
 80085ce:	4630      	mov	r0, r6
 80085d0:	f000 f80c 	bl	80085ec <__malloc_unlock>
 80085d4:	e794      	b.n	8008500 <_malloc_r+0x20>
 80085d6:	6005      	str	r5, [r0, #0]
 80085d8:	e7d6      	b.n	8008588 <_malloc_r+0xa8>
 80085da:	bf00      	nop
 80085dc:	200004c4 	.word	0x200004c4

080085e0 <__malloc_lock>:
 80085e0:	4801      	ldr	r0, [pc, #4]	@ (80085e8 <__malloc_lock+0x8>)
 80085e2:	f7ff b8b2 	b.w	800774a <__retarget_lock_acquire_recursive>
 80085e6:	bf00      	nop
 80085e8:	200004bc 	.word	0x200004bc

080085ec <__malloc_unlock>:
 80085ec:	4801      	ldr	r0, [pc, #4]	@ (80085f4 <__malloc_unlock+0x8>)
 80085ee:	f7ff b8ad 	b.w	800774c <__retarget_lock_release_recursive>
 80085f2:	bf00      	nop
 80085f4:	200004bc 	.word	0x200004bc

080085f8 <_Balloc>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	69c6      	ldr	r6, [r0, #28]
 80085fc:	4604      	mov	r4, r0
 80085fe:	460d      	mov	r5, r1
 8008600:	b976      	cbnz	r6, 8008620 <_Balloc+0x28>
 8008602:	2010      	movs	r0, #16
 8008604:	f7ff ff42 	bl	800848c <malloc>
 8008608:	4602      	mov	r2, r0
 800860a:	61e0      	str	r0, [r4, #28]
 800860c:	b920      	cbnz	r0, 8008618 <_Balloc+0x20>
 800860e:	4b18      	ldr	r3, [pc, #96]	@ (8008670 <_Balloc+0x78>)
 8008610:	4818      	ldr	r0, [pc, #96]	@ (8008674 <_Balloc+0x7c>)
 8008612:	216b      	movs	r1, #107	@ 0x6b
 8008614:	f002 fa74 	bl	800ab00 <__assert_func>
 8008618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800861c:	6006      	str	r6, [r0, #0]
 800861e:	60c6      	str	r6, [r0, #12]
 8008620:	69e6      	ldr	r6, [r4, #28]
 8008622:	68f3      	ldr	r3, [r6, #12]
 8008624:	b183      	cbz	r3, 8008648 <_Balloc+0x50>
 8008626:	69e3      	ldr	r3, [r4, #28]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800862e:	b9b8      	cbnz	r0, 8008660 <_Balloc+0x68>
 8008630:	2101      	movs	r1, #1
 8008632:	fa01 f605 	lsl.w	r6, r1, r5
 8008636:	1d72      	adds	r2, r6, #5
 8008638:	0092      	lsls	r2, r2, #2
 800863a:	4620      	mov	r0, r4
 800863c:	f002 fa7e 	bl	800ab3c <_calloc_r>
 8008640:	b160      	cbz	r0, 800865c <_Balloc+0x64>
 8008642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008646:	e00e      	b.n	8008666 <_Balloc+0x6e>
 8008648:	2221      	movs	r2, #33	@ 0x21
 800864a:	2104      	movs	r1, #4
 800864c:	4620      	mov	r0, r4
 800864e:	f002 fa75 	bl	800ab3c <_calloc_r>
 8008652:	69e3      	ldr	r3, [r4, #28]
 8008654:	60f0      	str	r0, [r6, #12]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e4      	bne.n	8008626 <_Balloc+0x2e>
 800865c:	2000      	movs	r0, #0
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	6802      	ldr	r2, [r0, #0]
 8008662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008666:	2300      	movs	r3, #0
 8008668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800866c:	e7f7      	b.n	800865e <_Balloc+0x66>
 800866e:	bf00      	nop
 8008670:	0800c320 	.word	0x0800c320
 8008674:	0800c3a0 	.word	0x0800c3a0

08008678 <_Bfree>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	69c6      	ldr	r6, [r0, #28]
 800867c:	4605      	mov	r5, r0
 800867e:	460c      	mov	r4, r1
 8008680:	b976      	cbnz	r6, 80086a0 <_Bfree+0x28>
 8008682:	2010      	movs	r0, #16
 8008684:	f7ff ff02 	bl	800848c <malloc>
 8008688:	4602      	mov	r2, r0
 800868a:	61e8      	str	r0, [r5, #28]
 800868c:	b920      	cbnz	r0, 8008698 <_Bfree+0x20>
 800868e:	4b09      	ldr	r3, [pc, #36]	@ (80086b4 <_Bfree+0x3c>)
 8008690:	4809      	ldr	r0, [pc, #36]	@ (80086b8 <_Bfree+0x40>)
 8008692:	218f      	movs	r1, #143	@ 0x8f
 8008694:	f002 fa34 	bl	800ab00 <__assert_func>
 8008698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800869c:	6006      	str	r6, [r0, #0]
 800869e:	60c6      	str	r6, [r0, #12]
 80086a0:	b13c      	cbz	r4, 80086b2 <_Bfree+0x3a>
 80086a2:	69eb      	ldr	r3, [r5, #28]
 80086a4:	6862      	ldr	r2, [r4, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086ac:	6021      	str	r1, [r4, #0]
 80086ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086b2:	bd70      	pop	{r4, r5, r6, pc}
 80086b4:	0800c320 	.word	0x0800c320
 80086b8:	0800c3a0 	.word	0x0800c3a0

080086bc <__multadd>:
 80086bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c0:	690d      	ldr	r5, [r1, #16]
 80086c2:	4607      	mov	r7, r0
 80086c4:	460c      	mov	r4, r1
 80086c6:	461e      	mov	r6, r3
 80086c8:	f101 0c14 	add.w	ip, r1, #20
 80086cc:	2000      	movs	r0, #0
 80086ce:	f8dc 3000 	ldr.w	r3, [ip]
 80086d2:	b299      	uxth	r1, r3
 80086d4:	fb02 6101 	mla	r1, r2, r1, r6
 80086d8:	0c1e      	lsrs	r6, r3, #16
 80086da:	0c0b      	lsrs	r3, r1, #16
 80086dc:	fb02 3306 	mla	r3, r2, r6, r3
 80086e0:	b289      	uxth	r1, r1
 80086e2:	3001      	adds	r0, #1
 80086e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086e8:	4285      	cmp	r5, r0
 80086ea:	f84c 1b04 	str.w	r1, [ip], #4
 80086ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086f2:	dcec      	bgt.n	80086ce <__multadd+0x12>
 80086f4:	b30e      	cbz	r6, 800873a <__multadd+0x7e>
 80086f6:	68a3      	ldr	r3, [r4, #8]
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	dc19      	bgt.n	8008730 <__multadd+0x74>
 80086fc:	6861      	ldr	r1, [r4, #4]
 80086fe:	4638      	mov	r0, r7
 8008700:	3101      	adds	r1, #1
 8008702:	f7ff ff79 	bl	80085f8 <_Balloc>
 8008706:	4680      	mov	r8, r0
 8008708:	b928      	cbnz	r0, 8008716 <__multadd+0x5a>
 800870a:	4602      	mov	r2, r0
 800870c:	4b0c      	ldr	r3, [pc, #48]	@ (8008740 <__multadd+0x84>)
 800870e:	480d      	ldr	r0, [pc, #52]	@ (8008744 <__multadd+0x88>)
 8008710:	21ba      	movs	r1, #186	@ 0xba
 8008712:	f002 f9f5 	bl	800ab00 <__assert_func>
 8008716:	6922      	ldr	r2, [r4, #16]
 8008718:	3202      	adds	r2, #2
 800871a:	f104 010c 	add.w	r1, r4, #12
 800871e:	0092      	lsls	r2, r2, #2
 8008720:	300c      	adds	r0, #12
 8008722:	f002 f9d5 	bl	800aad0 <memcpy>
 8008726:	4621      	mov	r1, r4
 8008728:	4638      	mov	r0, r7
 800872a:	f7ff ffa5 	bl	8008678 <_Bfree>
 800872e:	4644      	mov	r4, r8
 8008730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008734:	3501      	adds	r5, #1
 8008736:	615e      	str	r6, [r3, #20]
 8008738:	6125      	str	r5, [r4, #16]
 800873a:	4620      	mov	r0, r4
 800873c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008740:	0800c38f 	.word	0x0800c38f
 8008744:	0800c3a0 	.word	0x0800c3a0

08008748 <__s2b>:
 8008748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800874c:	460c      	mov	r4, r1
 800874e:	4615      	mov	r5, r2
 8008750:	461f      	mov	r7, r3
 8008752:	2209      	movs	r2, #9
 8008754:	3308      	adds	r3, #8
 8008756:	4606      	mov	r6, r0
 8008758:	fb93 f3f2 	sdiv	r3, r3, r2
 800875c:	2100      	movs	r1, #0
 800875e:	2201      	movs	r2, #1
 8008760:	429a      	cmp	r2, r3
 8008762:	db09      	blt.n	8008778 <__s2b+0x30>
 8008764:	4630      	mov	r0, r6
 8008766:	f7ff ff47 	bl	80085f8 <_Balloc>
 800876a:	b940      	cbnz	r0, 800877e <__s2b+0x36>
 800876c:	4602      	mov	r2, r0
 800876e:	4b19      	ldr	r3, [pc, #100]	@ (80087d4 <__s2b+0x8c>)
 8008770:	4819      	ldr	r0, [pc, #100]	@ (80087d8 <__s2b+0x90>)
 8008772:	21d3      	movs	r1, #211	@ 0xd3
 8008774:	f002 f9c4 	bl	800ab00 <__assert_func>
 8008778:	0052      	lsls	r2, r2, #1
 800877a:	3101      	adds	r1, #1
 800877c:	e7f0      	b.n	8008760 <__s2b+0x18>
 800877e:	9b08      	ldr	r3, [sp, #32]
 8008780:	6143      	str	r3, [r0, #20]
 8008782:	2d09      	cmp	r5, #9
 8008784:	f04f 0301 	mov.w	r3, #1
 8008788:	6103      	str	r3, [r0, #16]
 800878a:	dd16      	ble.n	80087ba <__s2b+0x72>
 800878c:	f104 0909 	add.w	r9, r4, #9
 8008790:	46c8      	mov	r8, r9
 8008792:	442c      	add	r4, r5
 8008794:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008798:	4601      	mov	r1, r0
 800879a:	3b30      	subs	r3, #48	@ 0x30
 800879c:	220a      	movs	r2, #10
 800879e:	4630      	mov	r0, r6
 80087a0:	f7ff ff8c 	bl	80086bc <__multadd>
 80087a4:	45a0      	cmp	r8, r4
 80087a6:	d1f5      	bne.n	8008794 <__s2b+0x4c>
 80087a8:	f1a5 0408 	sub.w	r4, r5, #8
 80087ac:	444c      	add	r4, r9
 80087ae:	1b2d      	subs	r5, r5, r4
 80087b0:	1963      	adds	r3, r4, r5
 80087b2:	42bb      	cmp	r3, r7
 80087b4:	db04      	blt.n	80087c0 <__s2b+0x78>
 80087b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ba:	340a      	adds	r4, #10
 80087bc:	2509      	movs	r5, #9
 80087be:	e7f6      	b.n	80087ae <__s2b+0x66>
 80087c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087c4:	4601      	mov	r1, r0
 80087c6:	3b30      	subs	r3, #48	@ 0x30
 80087c8:	220a      	movs	r2, #10
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7ff ff76 	bl	80086bc <__multadd>
 80087d0:	e7ee      	b.n	80087b0 <__s2b+0x68>
 80087d2:	bf00      	nop
 80087d4:	0800c38f 	.word	0x0800c38f
 80087d8:	0800c3a0 	.word	0x0800c3a0

080087dc <__hi0bits>:
 80087dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80087e0:	4603      	mov	r3, r0
 80087e2:	bf36      	itet	cc
 80087e4:	0403      	lslcc	r3, r0, #16
 80087e6:	2000      	movcs	r0, #0
 80087e8:	2010      	movcc	r0, #16
 80087ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087ee:	bf3c      	itt	cc
 80087f0:	021b      	lslcc	r3, r3, #8
 80087f2:	3008      	addcc	r0, #8
 80087f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087f8:	bf3c      	itt	cc
 80087fa:	011b      	lslcc	r3, r3, #4
 80087fc:	3004      	addcc	r0, #4
 80087fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008802:	bf3c      	itt	cc
 8008804:	009b      	lslcc	r3, r3, #2
 8008806:	3002      	addcc	r0, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	db05      	blt.n	8008818 <__hi0bits+0x3c>
 800880c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008810:	f100 0001 	add.w	r0, r0, #1
 8008814:	bf08      	it	eq
 8008816:	2020      	moveq	r0, #32
 8008818:	4770      	bx	lr

0800881a <__lo0bits>:
 800881a:	6803      	ldr	r3, [r0, #0]
 800881c:	4602      	mov	r2, r0
 800881e:	f013 0007 	ands.w	r0, r3, #7
 8008822:	d00b      	beq.n	800883c <__lo0bits+0x22>
 8008824:	07d9      	lsls	r1, r3, #31
 8008826:	d421      	bmi.n	800886c <__lo0bits+0x52>
 8008828:	0798      	lsls	r0, r3, #30
 800882a:	bf49      	itett	mi
 800882c:	085b      	lsrmi	r3, r3, #1
 800882e:	089b      	lsrpl	r3, r3, #2
 8008830:	2001      	movmi	r0, #1
 8008832:	6013      	strmi	r3, [r2, #0]
 8008834:	bf5c      	itt	pl
 8008836:	6013      	strpl	r3, [r2, #0]
 8008838:	2002      	movpl	r0, #2
 800883a:	4770      	bx	lr
 800883c:	b299      	uxth	r1, r3
 800883e:	b909      	cbnz	r1, 8008844 <__lo0bits+0x2a>
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	2010      	movs	r0, #16
 8008844:	b2d9      	uxtb	r1, r3
 8008846:	b909      	cbnz	r1, 800884c <__lo0bits+0x32>
 8008848:	3008      	adds	r0, #8
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	0719      	lsls	r1, r3, #28
 800884e:	bf04      	itt	eq
 8008850:	091b      	lsreq	r3, r3, #4
 8008852:	3004      	addeq	r0, #4
 8008854:	0799      	lsls	r1, r3, #30
 8008856:	bf04      	itt	eq
 8008858:	089b      	lsreq	r3, r3, #2
 800885a:	3002      	addeq	r0, #2
 800885c:	07d9      	lsls	r1, r3, #31
 800885e:	d403      	bmi.n	8008868 <__lo0bits+0x4e>
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	f100 0001 	add.w	r0, r0, #1
 8008866:	d003      	beq.n	8008870 <__lo0bits+0x56>
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	4770      	bx	lr
 800886c:	2000      	movs	r0, #0
 800886e:	4770      	bx	lr
 8008870:	2020      	movs	r0, #32
 8008872:	4770      	bx	lr

08008874 <__i2b>:
 8008874:	b510      	push	{r4, lr}
 8008876:	460c      	mov	r4, r1
 8008878:	2101      	movs	r1, #1
 800887a:	f7ff febd 	bl	80085f8 <_Balloc>
 800887e:	4602      	mov	r2, r0
 8008880:	b928      	cbnz	r0, 800888e <__i2b+0x1a>
 8008882:	4b05      	ldr	r3, [pc, #20]	@ (8008898 <__i2b+0x24>)
 8008884:	4805      	ldr	r0, [pc, #20]	@ (800889c <__i2b+0x28>)
 8008886:	f240 1145 	movw	r1, #325	@ 0x145
 800888a:	f002 f939 	bl	800ab00 <__assert_func>
 800888e:	2301      	movs	r3, #1
 8008890:	6144      	str	r4, [r0, #20]
 8008892:	6103      	str	r3, [r0, #16]
 8008894:	bd10      	pop	{r4, pc}
 8008896:	bf00      	nop
 8008898:	0800c38f 	.word	0x0800c38f
 800889c:	0800c3a0 	.word	0x0800c3a0

080088a0 <__multiply>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	4614      	mov	r4, r2
 80088a6:	690a      	ldr	r2, [r1, #16]
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	bfa8      	it	ge
 80088ae:	4623      	movge	r3, r4
 80088b0:	460f      	mov	r7, r1
 80088b2:	bfa4      	itt	ge
 80088b4:	460c      	movge	r4, r1
 80088b6:	461f      	movge	r7, r3
 80088b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80088bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80088c0:	68a3      	ldr	r3, [r4, #8]
 80088c2:	6861      	ldr	r1, [r4, #4]
 80088c4:	eb0a 0609 	add.w	r6, sl, r9
 80088c8:	42b3      	cmp	r3, r6
 80088ca:	b085      	sub	sp, #20
 80088cc:	bfb8      	it	lt
 80088ce:	3101      	addlt	r1, #1
 80088d0:	f7ff fe92 	bl	80085f8 <_Balloc>
 80088d4:	b930      	cbnz	r0, 80088e4 <__multiply+0x44>
 80088d6:	4602      	mov	r2, r0
 80088d8:	4b44      	ldr	r3, [pc, #272]	@ (80089ec <__multiply+0x14c>)
 80088da:	4845      	ldr	r0, [pc, #276]	@ (80089f0 <__multiply+0x150>)
 80088dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80088e0:	f002 f90e 	bl	800ab00 <__assert_func>
 80088e4:	f100 0514 	add.w	r5, r0, #20
 80088e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088ec:	462b      	mov	r3, r5
 80088ee:	2200      	movs	r2, #0
 80088f0:	4543      	cmp	r3, r8
 80088f2:	d321      	bcc.n	8008938 <__multiply+0x98>
 80088f4:	f107 0114 	add.w	r1, r7, #20
 80088f8:	f104 0214 	add.w	r2, r4, #20
 80088fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008900:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008904:	9302      	str	r3, [sp, #8]
 8008906:	1b13      	subs	r3, r2, r4
 8008908:	3b15      	subs	r3, #21
 800890a:	f023 0303 	bic.w	r3, r3, #3
 800890e:	3304      	adds	r3, #4
 8008910:	f104 0715 	add.w	r7, r4, #21
 8008914:	42ba      	cmp	r2, r7
 8008916:	bf38      	it	cc
 8008918:	2304      	movcc	r3, #4
 800891a:	9301      	str	r3, [sp, #4]
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	9103      	str	r1, [sp, #12]
 8008920:	428b      	cmp	r3, r1
 8008922:	d80c      	bhi.n	800893e <__multiply+0x9e>
 8008924:	2e00      	cmp	r6, #0
 8008926:	dd03      	ble.n	8008930 <__multiply+0x90>
 8008928:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800892c:	2b00      	cmp	r3, #0
 800892e:	d05b      	beq.n	80089e8 <__multiply+0x148>
 8008930:	6106      	str	r6, [r0, #16]
 8008932:	b005      	add	sp, #20
 8008934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008938:	f843 2b04 	str.w	r2, [r3], #4
 800893c:	e7d8      	b.n	80088f0 <__multiply+0x50>
 800893e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008942:	f1ba 0f00 	cmp.w	sl, #0
 8008946:	d024      	beq.n	8008992 <__multiply+0xf2>
 8008948:	f104 0e14 	add.w	lr, r4, #20
 800894c:	46a9      	mov	r9, r5
 800894e:	f04f 0c00 	mov.w	ip, #0
 8008952:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008956:	f8d9 3000 	ldr.w	r3, [r9]
 800895a:	fa1f fb87 	uxth.w	fp, r7
 800895e:	b29b      	uxth	r3, r3
 8008960:	fb0a 330b 	mla	r3, sl, fp, r3
 8008964:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008968:	f8d9 7000 	ldr.w	r7, [r9]
 800896c:	4463      	add	r3, ip
 800896e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008972:	fb0a c70b 	mla	r7, sl, fp, ip
 8008976:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800897a:	b29b      	uxth	r3, r3
 800897c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008980:	4572      	cmp	r2, lr
 8008982:	f849 3b04 	str.w	r3, [r9], #4
 8008986:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800898a:	d8e2      	bhi.n	8008952 <__multiply+0xb2>
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	f845 c003 	str.w	ip, [r5, r3]
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008998:	3104      	adds	r1, #4
 800899a:	f1b9 0f00 	cmp.w	r9, #0
 800899e:	d021      	beq.n	80089e4 <__multiply+0x144>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	f104 0c14 	add.w	ip, r4, #20
 80089a6:	46ae      	mov	lr, r5
 80089a8:	f04f 0a00 	mov.w	sl, #0
 80089ac:	f8bc b000 	ldrh.w	fp, [ip]
 80089b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80089b4:	fb09 770b 	mla	r7, r9, fp, r7
 80089b8:	4457      	add	r7, sl
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80089c0:	f84e 3b04 	str.w	r3, [lr], #4
 80089c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089cc:	f8be 3000 	ldrh.w	r3, [lr]
 80089d0:	fb09 330a 	mla	r3, r9, sl, r3
 80089d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80089d8:	4562      	cmp	r2, ip
 80089da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089de:	d8e5      	bhi.n	80089ac <__multiply+0x10c>
 80089e0:	9f01      	ldr	r7, [sp, #4]
 80089e2:	51eb      	str	r3, [r5, r7]
 80089e4:	3504      	adds	r5, #4
 80089e6:	e799      	b.n	800891c <__multiply+0x7c>
 80089e8:	3e01      	subs	r6, #1
 80089ea:	e79b      	b.n	8008924 <__multiply+0x84>
 80089ec:	0800c38f 	.word	0x0800c38f
 80089f0:	0800c3a0 	.word	0x0800c3a0

080089f4 <__pow5mult>:
 80089f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f8:	4615      	mov	r5, r2
 80089fa:	f012 0203 	ands.w	r2, r2, #3
 80089fe:	4607      	mov	r7, r0
 8008a00:	460e      	mov	r6, r1
 8008a02:	d007      	beq.n	8008a14 <__pow5mult+0x20>
 8008a04:	4c25      	ldr	r4, [pc, #148]	@ (8008a9c <__pow5mult+0xa8>)
 8008a06:	3a01      	subs	r2, #1
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a0e:	f7ff fe55 	bl	80086bc <__multadd>
 8008a12:	4606      	mov	r6, r0
 8008a14:	10ad      	asrs	r5, r5, #2
 8008a16:	d03d      	beq.n	8008a94 <__pow5mult+0xa0>
 8008a18:	69fc      	ldr	r4, [r7, #28]
 8008a1a:	b97c      	cbnz	r4, 8008a3c <__pow5mult+0x48>
 8008a1c:	2010      	movs	r0, #16
 8008a1e:	f7ff fd35 	bl	800848c <malloc>
 8008a22:	4602      	mov	r2, r0
 8008a24:	61f8      	str	r0, [r7, #28]
 8008a26:	b928      	cbnz	r0, 8008a34 <__pow5mult+0x40>
 8008a28:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa0 <__pow5mult+0xac>)
 8008a2a:	481e      	ldr	r0, [pc, #120]	@ (8008aa4 <__pow5mult+0xb0>)
 8008a2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a30:	f002 f866 	bl	800ab00 <__assert_func>
 8008a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a38:	6004      	str	r4, [r0, #0]
 8008a3a:	60c4      	str	r4, [r0, #12]
 8008a3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a44:	b94c      	cbnz	r4, 8008a5a <__pow5mult+0x66>
 8008a46:	f240 2171 	movw	r1, #625	@ 0x271
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	f7ff ff12 	bl	8008874 <__i2b>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a56:	4604      	mov	r4, r0
 8008a58:	6003      	str	r3, [r0, #0]
 8008a5a:	f04f 0900 	mov.w	r9, #0
 8008a5e:	07eb      	lsls	r3, r5, #31
 8008a60:	d50a      	bpl.n	8008a78 <__pow5mult+0x84>
 8008a62:	4631      	mov	r1, r6
 8008a64:	4622      	mov	r2, r4
 8008a66:	4638      	mov	r0, r7
 8008a68:	f7ff ff1a 	bl	80088a0 <__multiply>
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4680      	mov	r8, r0
 8008a70:	4638      	mov	r0, r7
 8008a72:	f7ff fe01 	bl	8008678 <_Bfree>
 8008a76:	4646      	mov	r6, r8
 8008a78:	106d      	asrs	r5, r5, #1
 8008a7a:	d00b      	beq.n	8008a94 <__pow5mult+0xa0>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	b938      	cbnz	r0, 8008a90 <__pow5mult+0x9c>
 8008a80:	4622      	mov	r2, r4
 8008a82:	4621      	mov	r1, r4
 8008a84:	4638      	mov	r0, r7
 8008a86:	f7ff ff0b 	bl	80088a0 <__multiply>
 8008a8a:	6020      	str	r0, [r4, #0]
 8008a8c:	f8c0 9000 	str.w	r9, [r0]
 8008a90:	4604      	mov	r4, r0
 8008a92:	e7e4      	b.n	8008a5e <__pow5mult+0x6a>
 8008a94:	4630      	mov	r0, r6
 8008a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9a:	bf00      	nop
 8008a9c:	0800c3fc 	.word	0x0800c3fc
 8008aa0:	0800c320 	.word	0x0800c320
 8008aa4:	0800c3a0 	.word	0x0800c3a0

08008aa8 <__lshift>:
 8008aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aac:	460c      	mov	r4, r1
 8008aae:	6849      	ldr	r1, [r1, #4]
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ab6:	68a3      	ldr	r3, [r4, #8]
 8008ab8:	4607      	mov	r7, r0
 8008aba:	4691      	mov	r9, r2
 8008abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ac0:	f108 0601 	add.w	r6, r8, #1
 8008ac4:	42b3      	cmp	r3, r6
 8008ac6:	db0b      	blt.n	8008ae0 <__lshift+0x38>
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7ff fd95 	bl	80085f8 <_Balloc>
 8008ace:	4605      	mov	r5, r0
 8008ad0:	b948      	cbnz	r0, 8008ae6 <__lshift+0x3e>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	4b28      	ldr	r3, [pc, #160]	@ (8008b78 <__lshift+0xd0>)
 8008ad6:	4829      	ldr	r0, [pc, #164]	@ (8008b7c <__lshift+0xd4>)
 8008ad8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008adc:	f002 f810 	bl	800ab00 <__assert_func>
 8008ae0:	3101      	adds	r1, #1
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	e7ee      	b.n	8008ac4 <__lshift+0x1c>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f100 0114 	add.w	r1, r0, #20
 8008aec:	f100 0210 	add.w	r2, r0, #16
 8008af0:	4618      	mov	r0, r3
 8008af2:	4553      	cmp	r3, sl
 8008af4:	db33      	blt.n	8008b5e <__lshift+0xb6>
 8008af6:	6920      	ldr	r0, [r4, #16]
 8008af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008afc:	f104 0314 	add.w	r3, r4, #20
 8008b00:	f019 091f 	ands.w	r9, r9, #31
 8008b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b0c:	d02b      	beq.n	8008b66 <__lshift+0xbe>
 8008b0e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b12:	468a      	mov	sl, r1
 8008b14:	2200      	movs	r2, #0
 8008b16:	6818      	ldr	r0, [r3, #0]
 8008b18:	fa00 f009 	lsl.w	r0, r0, r9
 8008b1c:	4310      	orrs	r0, r2
 8008b1e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b26:	459c      	cmp	ip, r3
 8008b28:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b2c:	d8f3      	bhi.n	8008b16 <__lshift+0x6e>
 8008b2e:	ebac 0304 	sub.w	r3, ip, r4
 8008b32:	3b15      	subs	r3, #21
 8008b34:	f023 0303 	bic.w	r3, r3, #3
 8008b38:	3304      	adds	r3, #4
 8008b3a:	f104 0015 	add.w	r0, r4, #21
 8008b3e:	4584      	cmp	ip, r0
 8008b40:	bf38      	it	cc
 8008b42:	2304      	movcc	r3, #4
 8008b44:	50ca      	str	r2, [r1, r3]
 8008b46:	b10a      	cbz	r2, 8008b4c <__lshift+0xa4>
 8008b48:	f108 0602 	add.w	r6, r8, #2
 8008b4c:	3e01      	subs	r6, #1
 8008b4e:	4638      	mov	r0, r7
 8008b50:	612e      	str	r6, [r5, #16]
 8008b52:	4621      	mov	r1, r4
 8008b54:	f7ff fd90 	bl	8008678 <_Bfree>
 8008b58:	4628      	mov	r0, r5
 8008b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b62:	3301      	adds	r3, #1
 8008b64:	e7c5      	b.n	8008af2 <__lshift+0x4a>
 8008b66:	3904      	subs	r1, #4
 8008b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b70:	459c      	cmp	ip, r3
 8008b72:	d8f9      	bhi.n	8008b68 <__lshift+0xc0>
 8008b74:	e7ea      	b.n	8008b4c <__lshift+0xa4>
 8008b76:	bf00      	nop
 8008b78:	0800c38f 	.word	0x0800c38f
 8008b7c:	0800c3a0 	.word	0x0800c3a0

08008b80 <__mcmp>:
 8008b80:	690a      	ldr	r2, [r1, #16]
 8008b82:	4603      	mov	r3, r0
 8008b84:	6900      	ldr	r0, [r0, #16]
 8008b86:	1a80      	subs	r0, r0, r2
 8008b88:	b530      	push	{r4, r5, lr}
 8008b8a:	d10e      	bne.n	8008baa <__mcmp+0x2a>
 8008b8c:	3314      	adds	r3, #20
 8008b8e:	3114      	adds	r1, #20
 8008b90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ba0:	4295      	cmp	r5, r2
 8008ba2:	d003      	beq.n	8008bac <__mcmp+0x2c>
 8008ba4:	d205      	bcs.n	8008bb2 <__mcmp+0x32>
 8008ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8008baa:	bd30      	pop	{r4, r5, pc}
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	d3f3      	bcc.n	8008b98 <__mcmp+0x18>
 8008bb0:	e7fb      	b.n	8008baa <__mcmp+0x2a>
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	e7f9      	b.n	8008baa <__mcmp+0x2a>
	...

08008bb8 <__mdiff>:
 8008bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	4689      	mov	r9, r1
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4648      	mov	r0, r9
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	f7ff ffdb 	bl	8008b80 <__mcmp>
 8008bca:	1e05      	subs	r5, r0, #0
 8008bcc:	d112      	bne.n	8008bf4 <__mdiff+0x3c>
 8008bce:	4629      	mov	r1, r5
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff fd11 	bl	80085f8 <_Balloc>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	b928      	cbnz	r0, 8008be6 <__mdiff+0x2e>
 8008bda:	4b3f      	ldr	r3, [pc, #252]	@ (8008cd8 <__mdiff+0x120>)
 8008bdc:	f240 2137 	movw	r1, #567	@ 0x237
 8008be0:	483e      	ldr	r0, [pc, #248]	@ (8008cdc <__mdiff+0x124>)
 8008be2:	f001 ff8d 	bl	800ab00 <__assert_func>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bec:	4610      	mov	r0, r2
 8008bee:	b003      	add	sp, #12
 8008bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf4:	bfbc      	itt	lt
 8008bf6:	464b      	movlt	r3, r9
 8008bf8:	46a1      	movlt	r9, r4
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c00:	bfba      	itte	lt
 8008c02:	461c      	movlt	r4, r3
 8008c04:	2501      	movlt	r5, #1
 8008c06:	2500      	movge	r5, #0
 8008c08:	f7ff fcf6 	bl	80085f8 <_Balloc>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	b918      	cbnz	r0, 8008c18 <__mdiff+0x60>
 8008c10:	4b31      	ldr	r3, [pc, #196]	@ (8008cd8 <__mdiff+0x120>)
 8008c12:	f240 2145 	movw	r1, #581	@ 0x245
 8008c16:	e7e3      	b.n	8008be0 <__mdiff+0x28>
 8008c18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c1c:	6926      	ldr	r6, [r4, #16]
 8008c1e:	60c5      	str	r5, [r0, #12]
 8008c20:	f109 0310 	add.w	r3, r9, #16
 8008c24:	f109 0514 	add.w	r5, r9, #20
 8008c28:	f104 0e14 	add.w	lr, r4, #20
 8008c2c:	f100 0b14 	add.w	fp, r0, #20
 8008c30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	46d9      	mov	r9, fp
 8008c3c:	f04f 0c00 	mov.w	ip, #0
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c4a:	9301      	str	r3, [sp, #4]
 8008c4c:	fa1f f38a 	uxth.w	r3, sl
 8008c50:	4619      	mov	r1, r3
 8008c52:	b283      	uxth	r3, r0
 8008c54:	1acb      	subs	r3, r1, r3
 8008c56:	0c00      	lsrs	r0, r0, #16
 8008c58:	4463      	add	r3, ip
 8008c5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c68:	4576      	cmp	r6, lr
 8008c6a:	f849 3b04 	str.w	r3, [r9], #4
 8008c6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c72:	d8e5      	bhi.n	8008c40 <__mdiff+0x88>
 8008c74:	1b33      	subs	r3, r6, r4
 8008c76:	3b15      	subs	r3, #21
 8008c78:	f023 0303 	bic.w	r3, r3, #3
 8008c7c:	3415      	adds	r4, #21
 8008c7e:	3304      	adds	r3, #4
 8008c80:	42a6      	cmp	r6, r4
 8008c82:	bf38      	it	cc
 8008c84:	2304      	movcc	r3, #4
 8008c86:	441d      	add	r5, r3
 8008c88:	445b      	add	r3, fp
 8008c8a:	461e      	mov	r6, r3
 8008c8c:	462c      	mov	r4, r5
 8008c8e:	4544      	cmp	r4, r8
 8008c90:	d30e      	bcc.n	8008cb0 <__mdiff+0xf8>
 8008c92:	f108 0103 	add.w	r1, r8, #3
 8008c96:	1b49      	subs	r1, r1, r5
 8008c98:	f021 0103 	bic.w	r1, r1, #3
 8008c9c:	3d03      	subs	r5, #3
 8008c9e:	45a8      	cmp	r8, r5
 8008ca0:	bf38      	it	cc
 8008ca2:	2100      	movcc	r1, #0
 8008ca4:	440b      	add	r3, r1
 8008ca6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008caa:	b191      	cbz	r1, 8008cd2 <__mdiff+0x11a>
 8008cac:	6117      	str	r7, [r2, #16]
 8008cae:	e79d      	b.n	8008bec <__mdiff+0x34>
 8008cb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cb4:	46e6      	mov	lr, ip
 8008cb6:	0c08      	lsrs	r0, r1, #16
 8008cb8:	fa1c fc81 	uxtah	ip, ip, r1
 8008cbc:	4471      	add	r1, lr
 8008cbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008cc2:	b289      	uxth	r1, r1
 8008cc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008cc8:	f846 1b04 	str.w	r1, [r6], #4
 8008ccc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cd0:	e7dd      	b.n	8008c8e <__mdiff+0xd6>
 8008cd2:	3f01      	subs	r7, #1
 8008cd4:	e7e7      	b.n	8008ca6 <__mdiff+0xee>
 8008cd6:	bf00      	nop
 8008cd8:	0800c38f 	.word	0x0800c38f
 8008cdc:	0800c3a0 	.word	0x0800c3a0

08008ce0 <__ulp>:
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	ed8d 0b00 	vstr	d0, [sp]
 8008ce6:	9a01      	ldr	r2, [sp, #4]
 8008ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d28 <__ulp+0x48>)
 8008cea:	4013      	ands	r3, r2
 8008cec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dc08      	bgt.n	8008d06 <__ulp+0x26>
 8008cf4:	425b      	negs	r3, r3
 8008cf6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008cfa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008cfe:	da04      	bge.n	8008d0a <__ulp+0x2a>
 8008d00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008d04:	4113      	asrs	r3, r2
 8008d06:	2200      	movs	r2, #0
 8008d08:	e008      	b.n	8008d1c <__ulp+0x3c>
 8008d0a:	f1a2 0314 	sub.w	r3, r2, #20
 8008d0e:	2b1e      	cmp	r3, #30
 8008d10:	bfda      	itte	le
 8008d12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008d16:	40da      	lsrle	r2, r3
 8008d18:	2201      	movgt	r2, #1
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	ec41 0b10 	vmov	d0, r0, r1
 8008d24:	b002      	add	sp, #8
 8008d26:	4770      	bx	lr
 8008d28:	7ff00000 	.word	0x7ff00000

08008d2c <__b2d>:
 8008d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d30:	6906      	ldr	r6, [r0, #16]
 8008d32:	f100 0814 	add.w	r8, r0, #20
 8008d36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008d3a:	1f37      	subs	r7, r6, #4
 8008d3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d40:	4610      	mov	r0, r2
 8008d42:	f7ff fd4b 	bl	80087dc <__hi0bits>
 8008d46:	f1c0 0320 	rsb	r3, r0, #32
 8008d4a:	280a      	cmp	r0, #10
 8008d4c:	600b      	str	r3, [r1, #0]
 8008d4e:	491b      	ldr	r1, [pc, #108]	@ (8008dbc <__b2d+0x90>)
 8008d50:	dc15      	bgt.n	8008d7e <__b2d+0x52>
 8008d52:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d56:	fa22 f30c 	lsr.w	r3, r2, ip
 8008d5a:	45b8      	cmp	r8, r7
 8008d5c:	ea43 0501 	orr.w	r5, r3, r1
 8008d60:	bf34      	ite	cc
 8008d62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d66:	2300      	movcs	r3, #0
 8008d68:	3015      	adds	r0, #21
 8008d6a:	fa02 f000 	lsl.w	r0, r2, r0
 8008d6e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008d72:	4303      	orrs	r3, r0
 8008d74:	461c      	mov	r4, r3
 8008d76:	ec45 4b10 	vmov	d0, r4, r5
 8008d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d7e:	45b8      	cmp	r8, r7
 8008d80:	bf3a      	itte	cc
 8008d82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d86:	f1a6 0708 	subcc.w	r7, r6, #8
 8008d8a:	2300      	movcs	r3, #0
 8008d8c:	380b      	subs	r0, #11
 8008d8e:	d012      	beq.n	8008db6 <__b2d+0x8a>
 8008d90:	f1c0 0120 	rsb	r1, r0, #32
 8008d94:	fa23 f401 	lsr.w	r4, r3, r1
 8008d98:	4082      	lsls	r2, r0
 8008d9a:	4322      	orrs	r2, r4
 8008d9c:	4547      	cmp	r7, r8
 8008d9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008da2:	bf8c      	ite	hi
 8008da4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008da8:	2200      	movls	r2, #0
 8008daa:	4083      	lsls	r3, r0
 8008dac:	40ca      	lsrs	r2, r1
 8008dae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008db2:	4313      	orrs	r3, r2
 8008db4:	e7de      	b.n	8008d74 <__b2d+0x48>
 8008db6:	ea42 0501 	orr.w	r5, r2, r1
 8008dba:	e7db      	b.n	8008d74 <__b2d+0x48>
 8008dbc:	3ff00000 	.word	0x3ff00000

08008dc0 <__d2b>:
 8008dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	ec59 8b10 	vmov	r8, r9, d0
 8008dcc:	4616      	mov	r6, r2
 8008dce:	f7ff fc13 	bl	80085f8 <_Balloc>
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	b930      	cbnz	r0, 8008de4 <__d2b+0x24>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	4b23      	ldr	r3, [pc, #140]	@ (8008e68 <__d2b+0xa8>)
 8008dda:	4824      	ldr	r0, [pc, #144]	@ (8008e6c <__d2b+0xac>)
 8008ddc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008de0:	f001 fe8e 	bl	800ab00 <__assert_func>
 8008de4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dec:	b10d      	cbz	r5, 8008df2 <__d2b+0x32>
 8008dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	f1b8 0300 	subs.w	r3, r8, #0
 8008df8:	d023      	beq.n	8008e42 <__d2b+0x82>
 8008dfa:	4668      	mov	r0, sp
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	f7ff fd0c 	bl	800881a <__lo0bits>
 8008e02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e06:	b1d0      	cbz	r0, 8008e3e <__d2b+0x7e>
 8008e08:	f1c0 0320 	rsb	r3, r0, #32
 8008e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e10:	430b      	orrs	r3, r1
 8008e12:	40c2      	lsrs	r2, r0
 8008e14:	6163      	str	r3, [r4, #20]
 8008e16:	9201      	str	r2, [sp, #4]
 8008e18:	9b01      	ldr	r3, [sp, #4]
 8008e1a:	61a3      	str	r3, [r4, #24]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bf0c      	ite	eq
 8008e20:	2201      	moveq	r2, #1
 8008e22:	2202      	movne	r2, #2
 8008e24:	6122      	str	r2, [r4, #16]
 8008e26:	b1a5      	cbz	r5, 8008e52 <__d2b+0x92>
 8008e28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008e2c:	4405      	add	r5, r0
 8008e2e:	603d      	str	r5, [r7, #0]
 8008e30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008e34:	6030      	str	r0, [r6, #0]
 8008e36:	4620      	mov	r0, r4
 8008e38:	b003      	add	sp, #12
 8008e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e3e:	6161      	str	r1, [r4, #20]
 8008e40:	e7ea      	b.n	8008e18 <__d2b+0x58>
 8008e42:	a801      	add	r0, sp, #4
 8008e44:	f7ff fce9 	bl	800881a <__lo0bits>
 8008e48:	9b01      	ldr	r3, [sp, #4]
 8008e4a:	6163      	str	r3, [r4, #20]
 8008e4c:	3020      	adds	r0, #32
 8008e4e:	2201      	movs	r2, #1
 8008e50:	e7e8      	b.n	8008e24 <__d2b+0x64>
 8008e52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008e5a:	6038      	str	r0, [r7, #0]
 8008e5c:	6918      	ldr	r0, [r3, #16]
 8008e5e:	f7ff fcbd 	bl	80087dc <__hi0bits>
 8008e62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e66:	e7e5      	b.n	8008e34 <__d2b+0x74>
 8008e68:	0800c38f 	.word	0x0800c38f
 8008e6c:	0800c3a0 	.word	0x0800c3a0

08008e70 <__ratio>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	b085      	sub	sp, #20
 8008e76:	e9cd 1000 	strd	r1, r0, [sp]
 8008e7a:	a902      	add	r1, sp, #8
 8008e7c:	f7ff ff56 	bl	8008d2c <__b2d>
 8008e80:	9800      	ldr	r0, [sp, #0]
 8008e82:	a903      	add	r1, sp, #12
 8008e84:	ec55 4b10 	vmov	r4, r5, d0
 8008e88:	f7ff ff50 	bl	8008d2c <__b2d>
 8008e8c:	9b01      	ldr	r3, [sp, #4]
 8008e8e:	6919      	ldr	r1, [r3, #16]
 8008e90:	9b00      	ldr	r3, [sp, #0]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	1ac9      	subs	r1, r1, r3
 8008e96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008e9a:	1a9b      	subs	r3, r3, r2
 8008e9c:	ec5b ab10 	vmov	sl, fp, d0
 8008ea0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	bfce      	itee	gt
 8008ea8:	462a      	movgt	r2, r5
 8008eaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008eae:	465a      	movle	r2, fp
 8008eb0:	462f      	mov	r7, r5
 8008eb2:	46d9      	mov	r9, fp
 8008eb4:	bfcc      	ite	gt
 8008eb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008eba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008ebe:	464b      	mov	r3, r9
 8008ec0:	4652      	mov	r2, sl
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	f7f7 fcd1 	bl	800086c <__aeabi_ddiv>
 8008eca:	ec41 0b10 	vmov	d0, r0, r1
 8008ece:	b005      	add	sp, #20
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ed4 <__copybits>:
 8008ed4:	3901      	subs	r1, #1
 8008ed6:	b570      	push	{r4, r5, r6, lr}
 8008ed8:	1149      	asrs	r1, r1, #5
 8008eda:	6914      	ldr	r4, [r2, #16]
 8008edc:	3101      	adds	r1, #1
 8008ede:	f102 0314 	add.w	r3, r2, #20
 8008ee2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ee6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008eea:	1f05      	subs	r5, r0, #4
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	d30c      	bcc.n	8008f0a <__copybits+0x36>
 8008ef0:	1aa3      	subs	r3, r4, r2
 8008ef2:	3b11      	subs	r3, #17
 8008ef4:	f023 0303 	bic.w	r3, r3, #3
 8008ef8:	3211      	adds	r2, #17
 8008efa:	42a2      	cmp	r2, r4
 8008efc:	bf88      	it	hi
 8008efe:	2300      	movhi	r3, #0
 8008f00:	4418      	add	r0, r3
 8008f02:	2300      	movs	r3, #0
 8008f04:	4288      	cmp	r0, r1
 8008f06:	d305      	bcc.n	8008f14 <__copybits+0x40>
 8008f08:	bd70      	pop	{r4, r5, r6, pc}
 8008f0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f12:	e7eb      	b.n	8008eec <__copybits+0x18>
 8008f14:	f840 3b04 	str.w	r3, [r0], #4
 8008f18:	e7f4      	b.n	8008f04 <__copybits+0x30>

08008f1a <__any_on>:
 8008f1a:	f100 0214 	add.w	r2, r0, #20
 8008f1e:	6900      	ldr	r0, [r0, #16]
 8008f20:	114b      	asrs	r3, r1, #5
 8008f22:	4298      	cmp	r0, r3
 8008f24:	b510      	push	{r4, lr}
 8008f26:	db11      	blt.n	8008f4c <__any_on+0x32>
 8008f28:	dd0a      	ble.n	8008f40 <__any_on+0x26>
 8008f2a:	f011 011f 	ands.w	r1, r1, #31
 8008f2e:	d007      	beq.n	8008f40 <__any_on+0x26>
 8008f30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f34:	fa24 f001 	lsr.w	r0, r4, r1
 8008f38:	fa00 f101 	lsl.w	r1, r0, r1
 8008f3c:	428c      	cmp	r4, r1
 8008f3e:	d10b      	bne.n	8008f58 <__any_on+0x3e>
 8008f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d803      	bhi.n	8008f50 <__any_on+0x36>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	bd10      	pop	{r4, pc}
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	e7f7      	b.n	8008f40 <__any_on+0x26>
 8008f50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f54:	2900      	cmp	r1, #0
 8008f56:	d0f5      	beq.n	8008f44 <__any_on+0x2a>
 8008f58:	2001      	movs	r0, #1
 8008f5a:	e7f6      	b.n	8008f4a <__any_on+0x30>

08008f5c <sulp>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4604      	mov	r4, r0
 8008f60:	460d      	mov	r5, r1
 8008f62:	ec45 4b10 	vmov	d0, r4, r5
 8008f66:	4616      	mov	r6, r2
 8008f68:	f7ff feba 	bl	8008ce0 <__ulp>
 8008f6c:	ec51 0b10 	vmov	r0, r1, d0
 8008f70:	b17e      	cbz	r6, 8008f92 <sulp+0x36>
 8008f72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dd09      	ble.n	8008f92 <sulp+0x36>
 8008f7e:	051b      	lsls	r3, r3, #20
 8008f80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008f84:	2400      	movs	r4, #0
 8008f86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	462b      	mov	r3, r5
 8008f8e:	f7f7 fb43 	bl	8000618 <__aeabi_dmul>
 8008f92:	ec41 0b10 	vmov	d0, r0, r1
 8008f96:	bd70      	pop	{r4, r5, r6, pc}

08008f98 <_strtod_l>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	b09f      	sub	sp, #124	@ 0x7c
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008fa6:	9005      	str	r0, [sp, #20]
 8008fa8:	f04f 0a00 	mov.w	sl, #0
 8008fac:	f04f 0b00 	mov.w	fp, #0
 8008fb0:	460a      	mov	r2, r1
 8008fb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fb4:	7811      	ldrb	r1, [r2, #0]
 8008fb6:	292b      	cmp	r1, #43	@ 0x2b
 8008fb8:	d04a      	beq.n	8009050 <_strtod_l+0xb8>
 8008fba:	d838      	bhi.n	800902e <_strtod_l+0x96>
 8008fbc:	290d      	cmp	r1, #13
 8008fbe:	d832      	bhi.n	8009026 <_strtod_l+0x8e>
 8008fc0:	2908      	cmp	r1, #8
 8008fc2:	d832      	bhi.n	800902a <_strtod_l+0x92>
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	d03b      	beq.n	8009040 <_strtod_l+0xa8>
 8008fc8:	2200      	movs	r2, #0
 8008fca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008fcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008fce:	782a      	ldrb	r2, [r5, #0]
 8008fd0:	2a30      	cmp	r2, #48	@ 0x30
 8008fd2:	f040 80b3 	bne.w	800913c <_strtod_l+0x1a4>
 8008fd6:	786a      	ldrb	r2, [r5, #1]
 8008fd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008fdc:	2a58      	cmp	r2, #88	@ 0x58
 8008fde:	d16e      	bne.n	80090be <_strtod_l+0x126>
 8008fe0:	9302      	str	r3, [sp, #8]
 8008fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	ab1a      	add	r3, sp, #104	@ 0x68
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	4a8e      	ldr	r2, [pc, #568]	@ (8009224 <_strtod_l+0x28c>)
 8008fec:	9805      	ldr	r0, [sp, #20]
 8008fee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ff0:	a919      	add	r1, sp, #100	@ 0x64
 8008ff2:	f001 fe1f 	bl	800ac34 <__gethex>
 8008ff6:	f010 060f 	ands.w	r6, r0, #15
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	d005      	beq.n	800900a <_strtod_l+0x72>
 8008ffe:	2e06      	cmp	r6, #6
 8009000:	d128      	bne.n	8009054 <_strtod_l+0xbc>
 8009002:	3501      	adds	r5, #1
 8009004:	2300      	movs	r3, #0
 8009006:	9519      	str	r5, [sp, #100]	@ 0x64
 8009008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800900a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 858e 	bne.w	8009b2e <_strtod_l+0xb96>
 8009012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009014:	b1cb      	cbz	r3, 800904a <_strtod_l+0xb2>
 8009016:	4652      	mov	r2, sl
 8009018:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800901c:	ec43 2b10 	vmov	d0, r2, r3
 8009020:	b01f      	add	sp, #124	@ 0x7c
 8009022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009026:	2920      	cmp	r1, #32
 8009028:	d1ce      	bne.n	8008fc8 <_strtod_l+0x30>
 800902a:	3201      	adds	r2, #1
 800902c:	e7c1      	b.n	8008fb2 <_strtod_l+0x1a>
 800902e:	292d      	cmp	r1, #45	@ 0x2d
 8009030:	d1ca      	bne.n	8008fc8 <_strtod_l+0x30>
 8009032:	2101      	movs	r1, #1
 8009034:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009036:	1c51      	adds	r1, r2, #1
 8009038:	9119      	str	r1, [sp, #100]	@ 0x64
 800903a:	7852      	ldrb	r2, [r2, #1]
 800903c:	2a00      	cmp	r2, #0
 800903e:	d1c5      	bne.n	8008fcc <_strtod_l+0x34>
 8009040:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009042:	9419      	str	r4, [sp, #100]	@ 0x64
 8009044:	2b00      	cmp	r3, #0
 8009046:	f040 8570 	bne.w	8009b2a <_strtod_l+0xb92>
 800904a:	4652      	mov	r2, sl
 800904c:	465b      	mov	r3, fp
 800904e:	e7e5      	b.n	800901c <_strtod_l+0x84>
 8009050:	2100      	movs	r1, #0
 8009052:	e7ef      	b.n	8009034 <_strtod_l+0x9c>
 8009054:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009056:	b13a      	cbz	r2, 8009068 <_strtod_l+0xd0>
 8009058:	2135      	movs	r1, #53	@ 0x35
 800905a:	a81c      	add	r0, sp, #112	@ 0x70
 800905c:	f7ff ff3a 	bl	8008ed4 <__copybits>
 8009060:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009062:	9805      	ldr	r0, [sp, #20]
 8009064:	f7ff fb08 	bl	8008678 <_Bfree>
 8009068:	3e01      	subs	r6, #1
 800906a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800906c:	2e04      	cmp	r6, #4
 800906e:	d806      	bhi.n	800907e <_strtod_l+0xe6>
 8009070:	e8df f006 	tbb	[pc, r6]
 8009074:	201d0314 	.word	0x201d0314
 8009078:	14          	.byte	0x14
 8009079:	00          	.byte	0x00
 800907a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800907e:	05e1      	lsls	r1, r4, #23
 8009080:	bf48      	it	mi
 8009082:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009086:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800908a:	0d1b      	lsrs	r3, r3, #20
 800908c:	051b      	lsls	r3, r3, #20
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1bb      	bne.n	800900a <_strtod_l+0x72>
 8009092:	f7fe fb2f 	bl	80076f4 <__errno>
 8009096:	2322      	movs	r3, #34	@ 0x22
 8009098:	6003      	str	r3, [r0, #0]
 800909a:	e7b6      	b.n	800900a <_strtod_l+0x72>
 800909c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80090a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80090a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090ac:	e7e7      	b.n	800907e <_strtod_l+0xe6>
 80090ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800922c <_strtod_l+0x294>
 80090b2:	e7e4      	b.n	800907e <_strtod_l+0xe6>
 80090b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80090b8:	f04f 3aff 	mov.w	sl, #4294967295
 80090bc:	e7df      	b.n	800907e <_strtod_l+0xe6>
 80090be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80090c4:	785b      	ldrb	r3, [r3, #1]
 80090c6:	2b30      	cmp	r3, #48	@ 0x30
 80090c8:	d0f9      	beq.n	80090be <_strtod_l+0x126>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d09d      	beq.n	800900a <_strtod_l+0x72>
 80090ce:	2301      	movs	r3, #1
 80090d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80090d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80090d6:	2300      	movs	r3, #0
 80090d8:	9308      	str	r3, [sp, #32]
 80090da:	930a      	str	r3, [sp, #40]	@ 0x28
 80090dc:	461f      	mov	r7, r3
 80090de:	220a      	movs	r2, #10
 80090e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80090e2:	7805      	ldrb	r5, [r0, #0]
 80090e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80090e8:	b2d9      	uxtb	r1, r3
 80090ea:	2909      	cmp	r1, #9
 80090ec:	d928      	bls.n	8009140 <_strtod_l+0x1a8>
 80090ee:	494e      	ldr	r1, [pc, #312]	@ (8009228 <_strtod_l+0x290>)
 80090f0:	2201      	movs	r2, #1
 80090f2:	f001 fca9 	bl	800aa48 <strncmp>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d032      	beq.n	8009160 <_strtod_l+0x1c8>
 80090fa:	2000      	movs	r0, #0
 80090fc:	462a      	mov	r2, r5
 80090fe:	4681      	mov	r9, r0
 8009100:	463d      	mov	r5, r7
 8009102:	4603      	mov	r3, r0
 8009104:	2a65      	cmp	r2, #101	@ 0x65
 8009106:	d001      	beq.n	800910c <_strtod_l+0x174>
 8009108:	2a45      	cmp	r2, #69	@ 0x45
 800910a:	d114      	bne.n	8009136 <_strtod_l+0x19e>
 800910c:	b91d      	cbnz	r5, 8009116 <_strtod_l+0x17e>
 800910e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009110:	4302      	orrs	r2, r0
 8009112:	d095      	beq.n	8009040 <_strtod_l+0xa8>
 8009114:	2500      	movs	r5, #0
 8009116:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009118:	1c62      	adds	r2, r4, #1
 800911a:	9219      	str	r2, [sp, #100]	@ 0x64
 800911c:	7862      	ldrb	r2, [r4, #1]
 800911e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009120:	d077      	beq.n	8009212 <_strtod_l+0x27a>
 8009122:	2a2d      	cmp	r2, #45	@ 0x2d
 8009124:	d07b      	beq.n	800921e <_strtod_l+0x286>
 8009126:	f04f 0c00 	mov.w	ip, #0
 800912a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800912e:	2909      	cmp	r1, #9
 8009130:	f240 8082 	bls.w	8009238 <_strtod_l+0x2a0>
 8009134:	9419      	str	r4, [sp, #100]	@ 0x64
 8009136:	f04f 0800 	mov.w	r8, #0
 800913a:	e0a2      	b.n	8009282 <_strtod_l+0x2ea>
 800913c:	2300      	movs	r3, #0
 800913e:	e7c7      	b.n	80090d0 <_strtod_l+0x138>
 8009140:	2f08      	cmp	r7, #8
 8009142:	bfd5      	itete	le
 8009144:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009146:	9908      	ldrgt	r1, [sp, #32]
 8009148:	fb02 3301 	mlale	r3, r2, r1, r3
 800914c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009150:	f100 0001 	add.w	r0, r0, #1
 8009154:	bfd4      	ite	le
 8009156:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009158:	9308      	strgt	r3, [sp, #32]
 800915a:	3701      	adds	r7, #1
 800915c:	9019      	str	r0, [sp, #100]	@ 0x64
 800915e:	e7bf      	b.n	80090e0 <_strtod_l+0x148>
 8009160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	9219      	str	r2, [sp, #100]	@ 0x64
 8009166:	785a      	ldrb	r2, [r3, #1]
 8009168:	b37f      	cbz	r7, 80091ca <_strtod_l+0x232>
 800916a:	4681      	mov	r9, r0
 800916c:	463d      	mov	r5, r7
 800916e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009172:	2b09      	cmp	r3, #9
 8009174:	d912      	bls.n	800919c <_strtod_l+0x204>
 8009176:	2301      	movs	r3, #1
 8009178:	e7c4      	b.n	8009104 <_strtod_l+0x16c>
 800917a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009180:	785a      	ldrb	r2, [r3, #1]
 8009182:	3001      	adds	r0, #1
 8009184:	2a30      	cmp	r2, #48	@ 0x30
 8009186:	d0f8      	beq.n	800917a <_strtod_l+0x1e2>
 8009188:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800918c:	2b08      	cmp	r3, #8
 800918e:	f200 84d3 	bhi.w	8009b38 <_strtod_l+0xba0>
 8009192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009194:	930c      	str	r3, [sp, #48]	@ 0x30
 8009196:	4681      	mov	r9, r0
 8009198:	2000      	movs	r0, #0
 800919a:	4605      	mov	r5, r0
 800919c:	3a30      	subs	r2, #48	@ 0x30
 800919e:	f100 0301 	add.w	r3, r0, #1
 80091a2:	d02a      	beq.n	80091fa <_strtod_l+0x262>
 80091a4:	4499      	add	r9, r3
 80091a6:	eb00 0c05 	add.w	ip, r0, r5
 80091aa:	462b      	mov	r3, r5
 80091ac:	210a      	movs	r1, #10
 80091ae:	4563      	cmp	r3, ip
 80091b0:	d10d      	bne.n	80091ce <_strtod_l+0x236>
 80091b2:	1c69      	adds	r1, r5, #1
 80091b4:	4401      	add	r1, r0
 80091b6:	4428      	add	r0, r5
 80091b8:	2808      	cmp	r0, #8
 80091ba:	dc16      	bgt.n	80091ea <_strtod_l+0x252>
 80091bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091be:	230a      	movs	r3, #10
 80091c0:	fb03 2300 	mla	r3, r3, r0, r2
 80091c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80091c6:	2300      	movs	r3, #0
 80091c8:	e018      	b.n	80091fc <_strtod_l+0x264>
 80091ca:	4638      	mov	r0, r7
 80091cc:	e7da      	b.n	8009184 <_strtod_l+0x1ec>
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	f103 0301 	add.w	r3, r3, #1
 80091d4:	dc03      	bgt.n	80091de <_strtod_l+0x246>
 80091d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80091d8:	434e      	muls	r6, r1
 80091da:	960a      	str	r6, [sp, #40]	@ 0x28
 80091dc:	e7e7      	b.n	80091ae <_strtod_l+0x216>
 80091de:	2b10      	cmp	r3, #16
 80091e0:	bfde      	ittt	le
 80091e2:	9e08      	ldrle	r6, [sp, #32]
 80091e4:	434e      	mulle	r6, r1
 80091e6:	9608      	strle	r6, [sp, #32]
 80091e8:	e7e1      	b.n	80091ae <_strtod_l+0x216>
 80091ea:	280f      	cmp	r0, #15
 80091ec:	dceb      	bgt.n	80091c6 <_strtod_l+0x22e>
 80091ee:	9808      	ldr	r0, [sp, #32]
 80091f0:	230a      	movs	r3, #10
 80091f2:	fb03 2300 	mla	r3, r3, r0, r2
 80091f6:	9308      	str	r3, [sp, #32]
 80091f8:	e7e5      	b.n	80091c6 <_strtod_l+0x22e>
 80091fa:	4629      	mov	r1, r5
 80091fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091fe:	1c50      	adds	r0, r2, #1
 8009200:	9019      	str	r0, [sp, #100]	@ 0x64
 8009202:	7852      	ldrb	r2, [r2, #1]
 8009204:	4618      	mov	r0, r3
 8009206:	460d      	mov	r5, r1
 8009208:	e7b1      	b.n	800916e <_strtod_l+0x1d6>
 800920a:	f04f 0900 	mov.w	r9, #0
 800920e:	2301      	movs	r3, #1
 8009210:	e77d      	b.n	800910e <_strtod_l+0x176>
 8009212:	f04f 0c00 	mov.w	ip, #0
 8009216:	1ca2      	adds	r2, r4, #2
 8009218:	9219      	str	r2, [sp, #100]	@ 0x64
 800921a:	78a2      	ldrb	r2, [r4, #2]
 800921c:	e785      	b.n	800912a <_strtod_l+0x192>
 800921e:	f04f 0c01 	mov.w	ip, #1
 8009222:	e7f8      	b.n	8009216 <_strtod_l+0x27e>
 8009224:	0800c510 	.word	0x0800c510
 8009228:	0800c4f8 	.word	0x0800c4f8
 800922c:	7ff00000 	.word	0x7ff00000
 8009230:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009232:	1c51      	adds	r1, r2, #1
 8009234:	9119      	str	r1, [sp, #100]	@ 0x64
 8009236:	7852      	ldrb	r2, [r2, #1]
 8009238:	2a30      	cmp	r2, #48	@ 0x30
 800923a:	d0f9      	beq.n	8009230 <_strtod_l+0x298>
 800923c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009240:	2908      	cmp	r1, #8
 8009242:	f63f af78 	bhi.w	8009136 <_strtod_l+0x19e>
 8009246:	3a30      	subs	r2, #48	@ 0x30
 8009248:	920e      	str	r2, [sp, #56]	@ 0x38
 800924a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800924c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800924e:	f04f 080a 	mov.w	r8, #10
 8009252:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009254:	1c56      	adds	r6, r2, #1
 8009256:	9619      	str	r6, [sp, #100]	@ 0x64
 8009258:	7852      	ldrb	r2, [r2, #1]
 800925a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800925e:	f1be 0f09 	cmp.w	lr, #9
 8009262:	d939      	bls.n	80092d8 <_strtod_l+0x340>
 8009264:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009266:	1a76      	subs	r6, r6, r1
 8009268:	2e08      	cmp	r6, #8
 800926a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800926e:	dc03      	bgt.n	8009278 <_strtod_l+0x2e0>
 8009270:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009272:	4588      	cmp	r8, r1
 8009274:	bfa8      	it	ge
 8009276:	4688      	movge	r8, r1
 8009278:	f1bc 0f00 	cmp.w	ip, #0
 800927c:	d001      	beq.n	8009282 <_strtod_l+0x2ea>
 800927e:	f1c8 0800 	rsb	r8, r8, #0
 8009282:	2d00      	cmp	r5, #0
 8009284:	d14e      	bne.n	8009324 <_strtod_l+0x38c>
 8009286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009288:	4308      	orrs	r0, r1
 800928a:	f47f aebe 	bne.w	800900a <_strtod_l+0x72>
 800928e:	2b00      	cmp	r3, #0
 8009290:	f47f aed6 	bne.w	8009040 <_strtod_l+0xa8>
 8009294:	2a69      	cmp	r2, #105	@ 0x69
 8009296:	d028      	beq.n	80092ea <_strtod_l+0x352>
 8009298:	dc25      	bgt.n	80092e6 <_strtod_l+0x34e>
 800929a:	2a49      	cmp	r2, #73	@ 0x49
 800929c:	d025      	beq.n	80092ea <_strtod_l+0x352>
 800929e:	2a4e      	cmp	r2, #78	@ 0x4e
 80092a0:	f47f aece 	bne.w	8009040 <_strtod_l+0xa8>
 80092a4:	499b      	ldr	r1, [pc, #620]	@ (8009514 <_strtod_l+0x57c>)
 80092a6:	a819      	add	r0, sp, #100	@ 0x64
 80092a8:	f001 fee6 	bl	800b078 <__match>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	f43f aec7 	beq.w	8009040 <_strtod_l+0xa8>
 80092b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b28      	cmp	r3, #40	@ 0x28
 80092b8:	d12e      	bne.n	8009318 <_strtod_l+0x380>
 80092ba:	4997      	ldr	r1, [pc, #604]	@ (8009518 <_strtod_l+0x580>)
 80092bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80092be:	a819      	add	r0, sp, #100	@ 0x64
 80092c0:	f001 feee 	bl	800b0a0 <__hexnan>
 80092c4:	2805      	cmp	r0, #5
 80092c6:	d127      	bne.n	8009318 <_strtod_l+0x380>
 80092c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80092ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80092ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80092d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80092d6:	e698      	b.n	800900a <_strtod_l+0x72>
 80092d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80092da:	fb08 2101 	mla	r1, r8, r1, r2
 80092de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80092e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80092e4:	e7b5      	b.n	8009252 <_strtod_l+0x2ba>
 80092e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80092e8:	e7da      	b.n	80092a0 <_strtod_l+0x308>
 80092ea:	498c      	ldr	r1, [pc, #560]	@ (800951c <_strtod_l+0x584>)
 80092ec:	a819      	add	r0, sp, #100	@ 0x64
 80092ee:	f001 fec3 	bl	800b078 <__match>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f43f aea4 	beq.w	8009040 <_strtod_l+0xa8>
 80092f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092fa:	4989      	ldr	r1, [pc, #548]	@ (8009520 <_strtod_l+0x588>)
 80092fc:	3b01      	subs	r3, #1
 80092fe:	a819      	add	r0, sp, #100	@ 0x64
 8009300:	9319      	str	r3, [sp, #100]	@ 0x64
 8009302:	f001 feb9 	bl	800b078 <__match>
 8009306:	b910      	cbnz	r0, 800930e <_strtod_l+0x376>
 8009308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800930a:	3301      	adds	r3, #1
 800930c:	9319      	str	r3, [sp, #100]	@ 0x64
 800930e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009530 <_strtod_l+0x598>
 8009312:	f04f 0a00 	mov.w	sl, #0
 8009316:	e678      	b.n	800900a <_strtod_l+0x72>
 8009318:	4882      	ldr	r0, [pc, #520]	@ (8009524 <_strtod_l+0x58c>)
 800931a:	f001 fbe9 	bl	800aaf0 <nan>
 800931e:	ec5b ab10 	vmov	sl, fp, d0
 8009322:	e672      	b.n	800900a <_strtod_l+0x72>
 8009324:	eba8 0309 	sub.w	r3, r8, r9
 8009328:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800932a:	9309      	str	r3, [sp, #36]	@ 0x24
 800932c:	2f00      	cmp	r7, #0
 800932e:	bf08      	it	eq
 8009330:	462f      	moveq	r7, r5
 8009332:	2d10      	cmp	r5, #16
 8009334:	462c      	mov	r4, r5
 8009336:	bfa8      	it	ge
 8009338:	2410      	movge	r4, #16
 800933a:	f7f7 f8f3 	bl	8000524 <__aeabi_ui2d>
 800933e:	2d09      	cmp	r5, #9
 8009340:	4682      	mov	sl, r0
 8009342:	468b      	mov	fp, r1
 8009344:	dc13      	bgt.n	800936e <_strtod_l+0x3d6>
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	f43f ae5e 	beq.w	800900a <_strtod_l+0x72>
 800934e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009350:	dd78      	ble.n	8009444 <_strtod_l+0x4ac>
 8009352:	2b16      	cmp	r3, #22
 8009354:	dc5f      	bgt.n	8009416 <_strtod_l+0x47e>
 8009356:	4974      	ldr	r1, [pc, #464]	@ (8009528 <_strtod_l+0x590>)
 8009358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800935c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009360:	4652      	mov	r2, sl
 8009362:	465b      	mov	r3, fp
 8009364:	f7f7 f958 	bl	8000618 <__aeabi_dmul>
 8009368:	4682      	mov	sl, r0
 800936a:	468b      	mov	fp, r1
 800936c:	e64d      	b.n	800900a <_strtod_l+0x72>
 800936e:	4b6e      	ldr	r3, [pc, #440]	@ (8009528 <_strtod_l+0x590>)
 8009370:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009374:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009378:	f7f7 f94e 	bl	8000618 <__aeabi_dmul>
 800937c:	4682      	mov	sl, r0
 800937e:	9808      	ldr	r0, [sp, #32]
 8009380:	468b      	mov	fp, r1
 8009382:	f7f7 f8cf 	bl	8000524 <__aeabi_ui2d>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4650      	mov	r0, sl
 800938c:	4659      	mov	r1, fp
 800938e:	f7f6 ff8d 	bl	80002ac <__adddf3>
 8009392:	2d0f      	cmp	r5, #15
 8009394:	4682      	mov	sl, r0
 8009396:	468b      	mov	fp, r1
 8009398:	ddd5      	ble.n	8009346 <_strtod_l+0x3ae>
 800939a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800939c:	1b2c      	subs	r4, r5, r4
 800939e:	441c      	add	r4, r3
 80093a0:	2c00      	cmp	r4, #0
 80093a2:	f340 8096 	ble.w	80094d2 <_strtod_l+0x53a>
 80093a6:	f014 030f 	ands.w	r3, r4, #15
 80093aa:	d00a      	beq.n	80093c2 <_strtod_l+0x42a>
 80093ac:	495e      	ldr	r1, [pc, #376]	@ (8009528 <_strtod_l+0x590>)
 80093ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093b2:	4652      	mov	r2, sl
 80093b4:	465b      	mov	r3, fp
 80093b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ba:	f7f7 f92d 	bl	8000618 <__aeabi_dmul>
 80093be:	4682      	mov	sl, r0
 80093c0:	468b      	mov	fp, r1
 80093c2:	f034 040f 	bics.w	r4, r4, #15
 80093c6:	d073      	beq.n	80094b0 <_strtod_l+0x518>
 80093c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80093cc:	dd48      	ble.n	8009460 <_strtod_l+0x4c8>
 80093ce:	2400      	movs	r4, #0
 80093d0:	46a0      	mov	r8, r4
 80093d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80093d4:	46a1      	mov	r9, r4
 80093d6:	9a05      	ldr	r2, [sp, #20]
 80093d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009530 <_strtod_l+0x598>
 80093dc:	2322      	movs	r3, #34	@ 0x22
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	f04f 0a00 	mov.w	sl, #0
 80093e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f43f ae0f 	beq.w	800900a <_strtod_l+0x72>
 80093ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093ee:	9805      	ldr	r0, [sp, #20]
 80093f0:	f7ff f942 	bl	8008678 <_Bfree>
 80093f4:	9805      	ldr	r0, [sp, #20]
 80093f6:	4649      	mov	r1, r9
 80093f8:	f7ff f93e 	bl	8008678 <_Bfree>
 80093fc:	9805      	ldr	r0, [sp, #20]
 80093fe:	4641      	mov	r1, r8
 8009400:	f7ff f93a 	bl	8008678 <_Bfree>
 8009404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009406:	9805      	ldr	r0, [sp, #20]
 8009408:	f7ff f936 	bl	8008678 <_Bfree>
 800940c:	9805      	ldr	r0, [sp, #20]
 800940e:	4621      	mov	r1, r4
 8009410:	f7ff f932 	bl	8008678 <_Bfree>
 8009414:	e5f9      	b.n	800900a <_strtod_l+0x72>
 8009416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009418:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800941c:	4293      	cmp	r3, r2
 800941e:	dbbc      	blt.n	800939a <_strtod_l+0x402>
 8009420:	4c41      	ldr	r4, [pc, #260]	@ (8009528 <_strtod_l+0x590>)
 8009422:	f1c5 050f 	rsb	r5, r5, #15
 8009426:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800942a:	4652      	mov	r2, sl
 800942c:	465b      	mov	r3, fp
 800942e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009432:	f7f7 f8f1 	bl	8000618 <__aeabi_dmul>
 8009436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009438:	1b5d      	subs	r5, r3, r5
 800943a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800943e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009442:	e78f      	b.n	8009364 <_strtod_l+0x3cc>
 8009444:	3316      	adds	r3, #22
 8009446:	dba8      	blt.n	800939a <_strtod_l+0x402>
 8009448:	4b37      	ldr	r3, [pc, #220]	@ (8009528 <_strtod_l+0x590>)
 800944a:	eba9 0808 	sub.w	r8, r9, r8
 800944e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009452:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009456:	4650      	mov	r0, sl
 8009458:	4659      	mov	r1, fp
 800945a:	f7f7 fa07 	bl	800086c <__aeabi_ddiv>
 800945e:	e783      	b.n	8009368 <_strtod_l+0x3d0>
 8009460:	4b32      	ldr	r3, [pc, #200]	@ (800952c <_strtod_l+0x594>)
 8009462:	9308      	str	r3, [sp, #32]
 8009464:	2300      	movs	r3, #0
 8009466:	1124      	asrs	r4, r4, #4
 8009468:	4650      	mov	r0, sl
 800946a:	4659      	mov	r1, fp
 800946c:	461e      	mov	r6, r3
 800946e:	2c01      	cmp	r4, #1
 8009470:	dc21      	bgt.n	80094b6 <_strtod_l+0x51e>
 8009472:	b10b      	cbz	r3, 8009478 <_strtod_l+0x4e0>
 8009474:	4682      	mov	sl, r0
 8009476:	468b      	mov	fp, r1
 8009478:	492c      	ldr	r1, [pc, #176]	@ (800952c <_strtod_l+0x594>)
 800947a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800947e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009482:	4652      	mov	r2, sl
 8009484:	465b      	mov	r3, fp
 8009486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800948a:	f7f7 f8c5 	bl	8000618 <__aeabi_dmul>
 800948e:	4b28      	ldr	r3, [pc, #160]	@ (8009530 <_strtod_l+0x598>)
 8009490:	460a      	mov	r2, r1
 8009492:	400b      	ands	r3, r1
 8009494:	4927      	ldr	r1, [pc, #156]	@ (8009534 <_strtod_l+0x59c>)
 8009496:	428b      	cmp	r3, r1
 8009498:	4682      	mov	sl, r0
 800949a:	d898      	bhi.n	80093ce <_strtod_l+0x436>
 800949c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80094a0:	428b      	cmp	r3, r1
 80094a2:	bf86      	itte	hi
 80094a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009538 <_strtod_l+0x5a0>
 80094a8:	f04f 3aff 	movhi.w	sl, #4294967295
 80094ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80094b0:	2300      	movs	r3, #0
 80094b2:	9308      	str	r3, [sp, #32]
 80094b4:	e07a      	b.n	80095ac <_strtod_l+0x614>
 80094b6:	07e2      	lsls	r2, r4, #31
 80094b8:	d505      	bpl.n	80094c6 <_strtod_l+0x52e>
 80094ba:	9b08      	ldr	r3, [sp, #32]
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f7 f8aa 	bl	8000618 <__aeabi_dmul>
 80094c4:	2301      	movs	r3, #1
 80094c6:	9a08      	ldr	r2, [sp, #32]
 80094c8:	3208      	adds	r2, #8
 80094ca:	3601      	adds	r6, #1
 80094cc:	1064      	asrs	r4, r4, #1
 80094ce:	9208      	str	r2, [sp, #32]
 80094d0:	e7cd      	b.n	800946e <_strtod_l+0x4d6>
 80094d2:	d0ed      	beq.n	80094b0 <_strtod_l+0x518>
 80094d4:	4264      	negs	r4, r4
 80094d6:	f014 020f 	ands.w	r2, r4, #15
 80094da:	d00a      	beq.n	80094f2 <_strtod_l+0x55a>
 80094dc:	4b12      	ldr	r3, [pc, #72]	@ (8009528 <_strtod_l+0x590>)
 80094de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094e2:	4650      	mov	r0, sl
 80094e4:	4659      	mov	r1, fp
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	f7f7 f9bf 	bl	800086c <__aeabi_ddiv>
 80094ee:	4682      	mov	sl, r0
 80094f0:	468b      	mov	fp, r1
 80094f2:	1124      	asrs	r4, r4, #4
 80094f4:	d0dc      	beq.n	80094b0 <_strtod_l+0x518>
 80094f6:	2c1f      	cmp	r4, #31
 80094f8:	dd20      	ble.n	800953c <_strtod_l+0x5a4>
 80094fa:	2400      	movs	r4, #0
 80094fc:	46a0      	mov	r8, r4
 80094fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8009500:	46a1      	mov	r9, r4
 8009502:	9a05      	ldr	r2, [sp, #20]
 8009504:	2322      	movs	r3, #34	@ 0x22
 8009506:	f04f 0a00 	mov.w	sl, #0
 800950a:	f04f 0b00 	mov.w	fp, #0
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	e768      	b.n	80093e4 <_strtod_l+0x44c>
 8009512:	bf00      	nop
 8009514:	0800c2e9 	.word	0x0800c2e9
 8009518:	0800c4fc 	.word	0x0800c4fc
 800951c:	0800c2e1 	.word	0x0800c2e1
 8009520:	0800c316 	.word	0x0800c316
 8009524:	0800c6c0 	.word	0x0800c6c0
 8009528:	0800c430 	.word	0x0800c430
 800952c:	0800c408 	.word	0x0800c408
 8009530:	7ff00000 	.word	0x7ff00000
 8009534:	7ca00000 	.word	0x7ca00000
 8009538:	7fefffff 	.word	0x7fefffff
 800953c:	f014 0310 	ands.w	r3, r4, #16
 8009540:	bf18      	it	ne
 8009542:	236a      	movne	r3, #106	@ 0x6a
 8009544:	4ea9      	ldr	r6, [pc, #676]	@ (80097ec <_strtod_l+0x854>)
 8009546:	9308      	str	r3, [sp, #32]
 8009548:	4650      	mov	r0, sl
 800954a:	4659      	mov	r1, fp
 800954c:	2300      	movs	r3, #0
 800954e:	07e2      	lsls	r2, r4, #31
 8009550:	d504      	bpl.n	800955c <_strtod_l+0x5c4>
 8009552:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009556:	f7f7 f85f 	bl	8000618 <__aeabi_dmul>
 800955a:	2301      	movs	r3, #1
 800955c:	1064      	asrs	r4, r4, #1
 800955e:	f106 0608 	add.w	r6, r6, #8
 8009562:	d1f4      	bne.n	800954e <_strtod_l+0x5b6>
 8009564:	b10b      	cbz	r3, 800956a <_strtod_l+0x5d2>
 8009566:	4682      	mov	sl, r0
 8009568:	468b      	mov	fp, r1
 800956a:	9b08      	ldr	r3, [sp, #32]
 800956c:	b1b3      	cbz	r3, 800959c <_strtod_l+0x604>
 800956e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009572:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009576:	2b00      	cmp	r3, #0
 8009578:	4659      	mov	r1, fp
 800957a:	dd0f      	ble.n	800959c <_strtod_l+0x604>
 800957c:	2b1f      	cmp	r3, #31
 800957e:	dd55      	ble.n	800962c <_strtod_l+0x694>
 8009580:	2b34      	cmp	r3, #52	@ 0x34
 8009582:	bfde      	ittt	le
 8009584:	f04f 33ff 	movle.w	r3, #4294967295
 8009588:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800958c:	4093      	lslle	r3, r2
 800958e:	f04f 0a00 	mov.w	sl, #0
 8009592:	bfcc      	ite	gt
 8009594:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009598:	ea03 0b01 	andle.w	fp, r3, r1
 800959c:	2200      	movs	r2, #0
 800959e:	2300      	movs	r3, #0
 80095a0:	4650      	mov	r0, sl
 80095a2:	4659      	mov	r1, fp
 80095a4:	f7f7 faa0 	bl	8000ae8 <__aeabi_dcmpeq>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d1a6      	bne.n	80094fa <_strtod_l+0x562>
 80095ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80095b2:	9805      	ldr	r0, [sp, #20]
 80095b4:	462b      	mov	r3, r5
 80095b6:	463a      	mov	r2, r7
 80095b8:	f7ff f8c6 	bl	8008748 <__s2b>
 80095bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80095be:	2800      	cmp	r0, #0
 80095c0:	f43f af05 	beq.w	80093ce <_strtod_l+0x436>
 80095c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	eba9 0308 	sub.w	r3, r9, r8
 80095cc:	bfa8      	it	ge
 80095ce:	2300      	movge	r3, #0
 80095d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80095d2:	2400      	movs	r4, #0
 80095d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80095d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80095da:	46a0      	mov	r8, r4
 80095dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095de:	9805      	ldr	r0, [sp, #20]
 80095e0:	6859      	ldr	r1, [r3, #4]
 80095e2:	f7ff f809 	bl	80085f8 <_Balloc>
 80095e6:	4681      	mov	r9, r0
 80095e8:	2800      	cmp	r0, #0
 80095ea:	f43f aef4 	beq.w	80093d6 <_strtod_l+0x43e>
 80095ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095f0:	691a      	ldr	r2, [r3, #16]
 80095f2:	3202      	adds	r2, #2
 80095f4:	f103 010c 	add.w	r1, r3, #12
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	300c      	adds	r0, #12
 80095fc:	f001 fa68 	bl	800aad0 <memcpy>
 8009600:	ec4b ab10 	vmov	d0, sl, fp
 8009604:	9805      	ldr	r0, [sp, #20]
 8009606:	aa1c      	add	r2, sp, #112	@ 0x70
 8009608:	a91b      	add	r1, sp, #108	@ 0x6c
 800960a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800960e:	f7ff fbd7 	bl	8008dc0 <__d2b>
 8009612:	901a      	str	r0, [sp, #104]	@ 0x68
 8009614:	2800      	cmp	r0, #0
 8009616:	f43f aede 	beq.w	80093d6 <_strtod_l+0x43e>
 800961a:	9805      	ldr	r0, [sp, #20]
 800961c:	2101      	movs	r1, #1
 800961e:	f7ff f929 	bl	8008874 <__i2b>
 8009622:	4680      	mov	r8, r0
 8009624:	b948      	cbnz	r0, 800963a <_strtod_l+0x6a2>
 8009626:	f04f 0800 	mov.w	r8, #0
 800962a:	e6d4      	b.n	80093d6 <_strtod_l+0x43e>
 800962c:	f04f 32ff 	mov.w	r2, #4294967295
 8009630:	fa02 f303 	lsl.w	r3, r2, r3
 8009634:	ea03 0a0a 	and.w	sl, r3, sl
 8009638:	e7b0      	b.n	800959c <_strtod_l+0x604>
 800963a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800963c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800963e:	2d00      	cmp	r5, #0
 8009640:	bfab      	itete	ge
 8009642:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009644:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009646:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009648:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800964a:	bfac      	ite	ge
 800964c:	18ef      	addge	r7, r5, r3
 800964e:	1b5e      	sublt	r6, r3, r5
 8009650:	9b08      	ldr	r3, [sp, #32]
 8009652:	1aed      	subs	r5, r5, r3
 8009654:	4415      	add	r5, r2
 8009656:	4b66      	ldr	r3, [pc, #408]	@ (80097f0 <_strtod_l+0x858>)
 8009658:	3d01      	subs	r5, #1
 800965a:	429d      	cmp	r5, r3
 800965c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009660:	da50      	bge.n	8009704 <_strtod_l+0x76c>
 8009662:	1b5b      	subs	r3, r3, r5
 8009664:	2b1f      	cmp	r3, #31
 8009666:	eba2 0203 	sub.w	r2, r2, r3
 800966a:	f04f 0101 	mov.w	r1, #1
 800966e:	dc3d      	bgt.n	80096ec <_strtod_l+0x754>
 8009670:	fa01 f303 	lsl.w	r3, r1, r3
 8009674:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009676:	2300      	movs	r3, #0
 8009678:	9310      	str	r3, [sp, #64]	@ 0x40
 800967a:	18bd      	adds	r5, r7, r2
 800967c:	9b08      	ldr	r3, [sp, #32]
 800967e:	42af      	cmp	r7, r5
 8009680:	4416      	add	r6, r2
 8009682:	441e      	add	r6, r3
 8009684:	463b      	mov	r3, r7
 8009686:	bfa8      	it	ge
 8009688:	462b      	movge	r3, r5
 800968a:	42b3      	cmp	r3, r6
 800968c:	bfa8      	it	ge
 800968e:	4633      	movge	r3, r6
 8009690:	2b00      	cmp	r3, #0
 8009692:	bfc2      	ittt	gt
 8009694:	1aed      	subgt	r5, r5, r3
 8009696:	1af6      	subgt	r6, r6, r3
 8009698:	1aff      	subgt	r7, r7, r3
 800969a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800969c:	2b00      	cmp	r3, #0
 800969e:	dd16      	ble.n	80096ce <_strtod_l+0x736>
 80096a0:	4641      	mov	r1, r8
 80096a2:	9805      	ldr	r0, [sp, #20]
 80096a4:	461a      	mov	r2, r3
 80096a6:	f7ff f9a5 	bl	80089f4 <__pow5mult>
 80096aa:	4680      	mov	r8, r0
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d0ba      	beq.n	8009626 <_strtod_l+0x68e>
 80096b0:	4601      	mov	r1, r0
 80096b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80096b4:	9805      	ldr	r0, [sp, #20]
 80096b6:	f7ff f8f3 	bl	80088a0 <__multiply>
 80096ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f ae8a 	beq.w	80093d6 <_strtod_l+0x43e>
 80096c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096c4:	9805      	ldr	r0, [sp, #20]
 80096c6:	f7fe ffd7 	bl	8008678 <_Bfree>
 80096ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80096ce:	2d00      	cmp	r5, #0
 80096d0:	dc1d      	bgt.n	800970e <_strtod_l+0x776>
 80096d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	dd23      	ble.n	8009720 <_strtod_l+0x788>
 80096d8:	4649      	mov	r1, r9
 80096da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80096dc:	9805      	ldr	r0, [sp, #20]
 80096de:	f7ff f989 	bl	80089f4 <__pow5mult>
 80096e2:	4681      	mov	r9, r0
 80096e4:	b9e0      	cbnz	r0, 8009720 <_strtod_l+0x788>
 80096e6:	f04f 0900 	mov.w	r9, #0
 80096ea:	e674      	b.n	80093d6 <_strtod_l+0x43e>
 80096ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80096f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80096f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80096f8:	35e2      	adds	r5, #226	@ 0xe2
 80096fa:	fa01 f305 	lsl.w	r3, r1, r5
 80096fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8009700:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009702:	e7ba      	b.n	800967a <_strtod_l+0x6e2>
 8009704:	2300      	movs	r3, #0
 8009706:	9310      	str	r3, [sp, #64]	@ 0x40
 8009708:	2301      	movs	r3, #1
 800970a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800970c:	e7b5      	b.n	800967a <_strtod_l+0x6e2>
 800970e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009710:	9805      	ldr	r0, [sp, #20]
 8009712:	462a      	mov	r2, r5
 8009714:	f7ff f9c8 	bl	8008aa8 <__lshift>
 8009718:	901a      	str	r0, [sp, #104]	@ 0x68
 800971a:	2800      	cmp	r0, #0
 800971c:	d1d9      	bne.n	80096d2 <_strtod_l+0x73a>
 800971e:	e65a      	b.n	80093d6 <_strtod_l+0x43e>
 8009720:	2e00      	cmp	r6, #0
 8009722:	dd07      	ble.n	8009734 <_strtod_l+0x79c>
 8009724:	4649      	mov	r1, r9
 8009726:	9805      	ldr	r0, [sp, #20]
 8009728:	4632      	mov	r2, r6
 800972a:	f7ff f9bd 	bl	8008aa8 <__lshift>
 800972e:	4681      	mov	r9, r0
 8009730:	2800      	cmp	r0, #0
 8009732:	d0d8      	beq.n	80096e6 <_strtod_l+0x74e>
 8009734:	2f00      	cmp	r7, #0
 8009736:	dd08      	ble.n	800974a <_strtod_l+0x7b2>
 8009738:	4641      	mov	r1, r8
 800973a:	9805      	ldr	r0, [sp, #20]
 800973c:	463a      	mov	r2, r7
 800973e:	f7ff f9b3 	bl	8008aa8 <__lshift>
 8009742:	4680      	mov	r8, r0
 8009744:	2800      	cmp	r0, #0
 8009746:	f43f ae46 	beq.w	80093d6 <_strtod_l+0x43e>
 800974a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800974c:	9805      	ldr	r0, [sp, #20]
 800974e:	464a      	mov	r2, r9
 8009750:	f7ff fa32 	bl	8008bb8 <__mdiff>
 8009754:	4604      	mov	r4, r0
 8009756:	2800      	cmp	r0, #0
 8009758:	f43f ae3d 	beq.w	80093d6 <_strtod_l+0x43e>
 800975c:	68c3      	ldr	r3, [r0, #12]
 800975e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009760:	2300      	movs	r3, #0
 8009762:	60c3      	str	r3, [r0, #12]
 8009764:	4641      	mov	r1, r8
 8009766:	f7ff fa0b 	bl	8008b80 <__mcmp>
 800976a:	2800      	cmp	r0, #0
 800976c:	da46      	bge.n	80097fc <_strtod_l+0x864>
 800976e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009770:	ea53 030a 	orrs.w	r3, r3, sl
 8009774:	d16c      	bne.n	8009850 <_strtod_l+0x8b8>
 8009776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800977a:	2b00      	cmp	r3, #0
 800977c:	d168      	bne.n	8009850 <_strtod_l+0x8b8>
 800977e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009782:	0d1b      	lsrs	r3, r3, #20
 8009784:	051b      	lsls	r3, r3, #20
 8009786:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800978a:	d961      	bls.n	8009850 <_strtod_l+0x8b8>
 800978c:	6963      	ldr	r3, [r4, #20]
 800978e:	b913      	cbnz	r3, 8009796 <_strtod_l+0x7fe>
 8009790:	6923      	ldr	r3, [r4, #16]
 8009792:	2b01      	cmp	r3, #1
 8009794:	dd5c      	ble.n	8009850 <_strtod_l+0x8b8>
 8009796:	4621      	mov	r1, r4
 8009798:	2201      	movs	r2, #1
 800979a:	9805      	ldr	r0, [sp, #20]
 800979c:	f7ff f984 	bl	8008aa8 <__lshift>
 80097a0:	4641      	mov	r1, r8
 80097a2:	4604      	mov	r4, r0
 80097a4:	f7ff f9ec 	bl	8008b80 <__mcmp>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	dd51      	ble.n	8009850 <_strtod_l+0x8b8>
 80097ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097b0:	9a08      	ldr	r2, [sp, #32]
 80097b2:	0d1b      	lsrs	r3, r3, #20
 80097b4:	051b      	lsls	r3, r3, #20
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	d06b      	beq.n	8009892 <_strtod_l+0x8fa>
 80097ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80097be:	d868      	bhi.n	8009892 <_strtod_l+0x8fa>
 80097c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80097c4:	f67f ae9d 	bls.w	8009502 <_strtod_l+0x56a>
 80097c8:	4b0a      	ldr	r3, [pc, #40]	@ (80097f4 <_strtod_l+0x85c>)
 80097ca:	4650      	mov	r0, sl
 80097cc:	4659      	mov	r1, fp
 80097ce:	2200      	movs	r2, #0
 80097d0:	f7f6 ff22 	bl	8000618 <__aeabi_dmul>
 80097d4:	4b08      	ldr	r3, [pc, #32]	@ (80097f8 <_strtod_l+0x860>)
 80097d6:	400b      	ands	r3, r1
 80097d8:	4682      	mov	sl, r0
 80097da:	468b      	mov	fp, r1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f47f ae05 	bne.w	80093ec <_strtod_l+0x454>
 80097e2:	9a05      	ldr	r2, [sp, #20]
 80097e4:	2322      	movs	r3, #34	@ 0x22
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	e600      	b.n	80093ec <_strtod_l+0x454>
 80097ea:	bf00      	nop
 80097ec:	0800c528 	.word	0x0800c528
 80097f0:	fffffc02 	.word	0xfffffc02
 80097f4:	39500000 	.word	0x39500000
 80097f8:	7ff00000 	.word	0x7ff00000
 80097fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009800:	d165      	bne.n	80098ce <_strtod_l+0x936>
 8009802:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009808:	b35a      	cbz	r2, 8009862 <_strtod_l+0x8ca>
 800980a:	4a9f      	ldr	r2, [pc, #636]	@ (8009a88 <_strtod_l+0xaf0>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d12b      	bne.n	8009868 <_strtod_l+0x8d0>
 8009810:	9b08      	ldr	r3, [sp, #32]
 8009812:	4651      	mov	r1, sl
 8009814:	b303      	cbz	r3, 8009858 <_strtod_l+0x8c0>
 8009816:	4b9d      	ldr	r3, [pc, #628]	@ (8009a8c <_strtod_l+0xaf4>)
 8009818:	465a      	mov	r2, fp
 800981a:	4013      	ands	r3, r2
 800981c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009820:	f04f 32ff 	mov.w	r2, #4294967295
 8009824:	d81b      	bhi.n	800985e <_strtod_l+0x8c6>
 8009826:	0d1b      	lsrs	r3, r3, #20
 8009828:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800982c:	fa02 f303 	lsl.w	r3, r2, r3
 8009830:	4299      	cmp	r1, r3
 8009832:	d119      	bne.n	8009868 <_strtod_l+0x8d0>
 8009834:	4b96      	ldr	r3, [pc, #600]	@ (8009a90 <_strtod_l+0xaf8>)
 8009836:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009838:	429a      	cmp	r2, r3
 800983a:	d102      	bne.n	8009842 <_strtod_l+0x8aa>
 800983c:	3101      	adds	r1, #1
 800983e:	f43f adca 	beq.w	80093d6 <_strtod_l+0x43e>
 8009842:	4b92      	ldr	r3, [pc, #584]	@ (8009a8c <_strtod_l+0xaf4>)
 8009844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009846:	401a      	ands	r2, r3
 8009848:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800984c:	f04f 0a00 	mov.w	sl, #0
 8009850:	9b08      	ldr	r3, [sp, #32]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1b8      	bne.n	80097c8 <_strtod_l+0x830>
 8009856:	e5c9      	b.n	80093ec <_strtod_l+0x454>
 8009858:	f04f 33ff 	mov.w	r3, #4294967295
 800985c:	e7e8      	b.n	8009830 <_strtod_l+0x898>
 800985e:	4613      	mov	r3, r2
 8009860:	e7e6      	b.n	8009830 <_strtod_l+0x898>
 8009862:	ea53 030a 	orrs.w	r3, r3, sl
 8009866:	d0a1      	beq.n	80097ac <_strtod_l+0x814>
 8009868:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800986a:	b1db      	cbz	r3, 80098a4 <_strtod_l+0x90c>
 800986c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800986e:	4213      	tst	r3, r2
 8009870:	d0ee      	beq.n	8009850 <_strtod_l+0x8b8>
 8009872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009874:	9a08      	ldr	r2, [sp, #32]
 8009876:	4650      	mov	r0, sl
 8009878:	4659      	mov	r1, fp
 800987a:	b1bb      	cbz	r3, 80098ac <_strtod_l+0x914>
 800987c:	f7ff fb6e 	bl	8008f5c <sulp>
 8009880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009884:	ec53 2b10 	vmov	r2, r3, d0
 8009888:	f7f6 fd10 	bl	80002ac <__adddf3>
 800988c:	4682      	mov	sl, r0
 800988e:	468b      	mov	fp, r1
 8009890:	e7de      	b.n	8009850 <_strtod_l+0x8b8>
 8009892:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009896:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800989a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800989e:	f04f 3aff 	mov.w	sl, #4294967295
 80098a2:	e7d5      	b.n	8009850 <_strtod_l+0x8b8>
 80098a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098a6:	ea13 0f0a 	tst.w	r3, sl
 80098aa:	e7e1      	b.n	8009870 <_strtod_l+0x8d8>
 80098ac:	f7ff fb56 	bl	8008f5c <sulp>
 80098b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098b4:	ec53 2b10 	vmov	r2, r3, d0
 80098b8:	f7f6 fcf6 	bl	80002a8 <__aeabi_dsub>
 80098bc:	2200      	movs	r2, #0
 80098be:	2300      	movs	r3, #0
 80098c0:	4682      	mov	sl, r0
 80098c2:	468b      	mov	fp, r1
 80098c4:	f7f7 f910 	bl	8000ae8 <__aeabi_dcmpeq>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d0c1      	beq.n	8009850 <_strtod_l+0x8b8>
 80098cc:	e619      	b.n	8009502 <_strtod_l+0x56a>
 80098ce:	4641      	mov	r1, r8
 80098d0:	4620      	mov	r0, r4
 80098d2:	f7ff facd 	bl	8008e70 <__ratio>
 80098d6:	ec57 6b10 	vmov	r6, r7, d0
 80098da:	2200      	movs	r2, #0
 80098dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80098e0:	4630      	mov	r0, r6
 80098e2:	4639      	mov	r1, r7
 80098e4:	f7f7 f914 	bl	8000b10 <__aeabi_dcmple>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d06f      	beq.n	80099cc <_strtod_l+0xa34>
 80098ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d17a      	bne.n	80099e8 <_strtod_l+0xa50>
 80098f2:	f1ba 0f00 	cmp.w	sl, #0
 80098f6:	d158      	bne.n	80099aa <_strtod_l+0xa12>
 80098f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d15a      	bne.n	80099b8 <_strtod_l+0xa20>
 8009902:	4b64      	ldr	r3, [pc, #400]	@ (8009a94 <_strtod_l+0xafc>)
 8009904:	2200      	movs	r2, #0
 8009906:	4630      	mov	r0, r6
 8009908:	4639      	mov	r1, r7
 800990a:	f7f7 f8f7 	bl	8000afc <__aeabi_dcmplt>
 800990e:	2800      	cmp	r0, #0
 8009910:	d159      	bne.n	80099c6 <_strtod_l+0xa2e>
 8009912:	4630      	mov	r0, r6
 8009914:	4639      	mov	r1, r7
 8009916:	4b60      	ldr	r3, [pc, #384]	@ (8009a98 <_strtod_l+0xb00>)
 8009918:	2200      	movs	r2, #0
 800991a:	f7f6 fe7d 	bl	8000618 <__aeabi_dmul>
 800991e:	4606      	mov	r6, r0
 8009920:	460f      	mov	r7, r1
 8009922:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009926:	9606      	str	r6, [sp, #24]
 8009928:	9307      	str	r3, [sp, #28]
 800992a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800992e:	4d57      	ldr	r5, [pc, #348]	@ (8009a8c <_strtod_l+0xaf4>)
 8009930:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009934:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009936:	401d      	ands	r5, r3
 8009938:	4b58      	ldr	r3, [pc, #352]	@ (8009a9c <_strtod_l+0xb04>)
 800993a:	429d      	cmp	r5, r3
 800993c:	f040 80b2 	bne.w	8009aa4 <_strtod_l+0xb0c>
 8009940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009942:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009946:	ec4b ab10 	vmov	d0, sl, fp
 800994a:	f7ff f9c9 	bl	8008ce0 <__ulp>
 800994e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009952:	ec51 0b10 	vmov	r0, r1, d0
 8009956:	f7f6 fe5f 	bl	8000618 <__aeabi_dmul>
 800995a:	4652      	mov	r2, sl
 800995c:	465b      	mov	r3, fp
 800995e:	f7f6 fca5 	bl	80002ac <__adddf3>
 8009962:	460b      	mov	r3, r1
 8009964:	4949      	ldr	r1, [pc, #292]	@ (8009a8c <_strtod_l+0xaf4>)
 8009966:	4a4e      	ldr	r2, [pc, #312]	@ (8009aa0 <_strtod_l+0xb08>)
 8009968:	4019      	ands	r1, r3
 800996a:	4291      	cmp	r1, r2
 800996c:	4682      	mov	sl, r0
 800996e:	d942      	bls.n	80099f6 <_strtod_l+0xa5e>
 8009970:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009972:	4b47      	ldr	r3, [pc, #284]	@ (8009a90 <_strtod_l+0xaf8>)
 8009974:	429a      	cmp	r2, r3
 8009976:	d103      	bne.n	8009980 <_strtod_l+0x9e8>
 8009978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800997a:	3301      	adds	r3, #1
 800997c:	f43f ad2b 	beq.w	80093d6 <_strtod_l+0x43e>
 8009980:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009a90 <_strtod_l+0xaf8>
 8009984:	f04f 3aff 	mov.w	sl, #4294967295
 8009988:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800998a:	9805      	ldr	r0, [sp, #20]
 800998c:	f7fe fe74 	bl	8008678 <_Bfree>
 8009990:	9805      	ldr	r0, [sp, #20]
 8009992:	4649      	mov	r1, r9
 8009994:	f7fe fe70 	bl	8008678 <_Bfree>
 8009998:	9805      	ldr	r0, [sp, #20]
 800999a:	4641      	mov	r1, r8
 800999c:	f7fe fe6c 	bl	8008678 <_Bfree>
 80099a0:	9805      	ldr	r0, [sp, #20]
 80099a2:	4621      	mov	r1, r4
 80099a4:	f7fe fe68 	bl	8008678 <_Bfree>
 80099a8:	e618      	b.n	80095dc <_strtod_l+0x644>
 80099aa:	f1ba 0f01 	cmp.w	sl, #1
 80099ae:	d103      	bne.n	80099b8 <_strtod_l+0xa20>
 80099b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f43f ada5 	beq.w	8009502 <_strtod_l+0x56a>
 80099b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009a68 <_strtod_l+0xad0>
 80099bc:	4f35      	ldr	r7, [pc, #212]	@ (8009a94 <_strtod_l+0xafc>)
 80099be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80099c2:	2600      	movs	r6, #0
 80099c4:	e7b1      	b.n	800992a <_strtod_l+0x992>
 80099c6:	4f34      	ldr	r7, [pc, #208]	@ (8009a98 <_strtod_l+0xb00>)
 80099c8:	2600      	movs	r6, #0
 80099ca:	e7aa      	b.n	8009922 <_strtod_l+0x98a>
 80099cc:	4b32      	ldr	r3, [pc, #200]	@ (8009a98 <_strtod_l+0xb00>)
 80099ce:	4630      	mov	r0, r6
 80099d0:	4639      	mov	r1, r7
 80099d2:	2200      	movs	r2, #0
 80099d4:	f7f6 fe20 	bl	8000618 <__aeabi_dmul>
 80099d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099da:	4606      	mov	r6, r0
 80099dc:	460f      	mov	r7, r1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d09f      	beq.n	8009922 <_strtod_l+0x98a>
 80099e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80099e6:	e7a0      	b.n	800992a <_strtod_l+0x992>
 80099e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009a70 <_strtod_l+0xad8>
 80099ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80099f0:	ec57 6b17 	vmov	r6, r7, d7
 80099f4:	e799      	b.n	800992a <_strtod_l+0x992>
 80099f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80099fa:	9b08      	ldr	r3, [sp, #32]
 80099fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1c1      	bne.n	8009988 <_strtod_l+0x9f0>
 8009a04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a08:	0d1b      	lsrs	r3, r3, #20
 8009a0a:	051b      	lsls	r3, r3, #20
 8009a0c:	429d      	cmp	r5, r3
 8009a0e:	d1bb      	bne.n	8009988 <_strtod_l+0x9f0>
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f7 f960 	bl	8000cd8 <__aeabi_d2lz>
 8009a18:	f7f6 fdd0 	bl	80005bc <__aeabi_l2d>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4630      	mov	r0, r6
 8009a22:	4639      	mov	r1, r7
 8009a24:	f7f6 fc40 	bl	80002a8 <__aeabi_dsub>
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009a30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a36:	ea46 060a 	orr.w	r6, r6, sl
 8009a3a:	431e      	orrs	r6, r3
 8009a3c:	d06f      	beq.n	8009b1e <_strtod_l+0xb86>
 8009a3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a78 <_strtod_l+0xae0>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f7 f85a 	bl	8000afc <__aeabi_dcmplt>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	f47f accf 	bne.w	80093ec <_strtod_l+0x454>
 8009a4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009a80 <_strtod_l+0xae8>)
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a58:	f7f7 f86e 	bl	8000b38 <__aeabi_dcmpgt>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d093      	beq.n	8009988 <_strtod_l+0x9f0>
 8009a60:	e4c4      	b.n	80093ec <_strtod_l+0x454>
 8009a62:	bf00      	nop
 8009a64:	f3af 8000 	nop.w
 8009a68:	00000000 	.word	0x00000000
 8009a6c:	bff00000 	.word	0xbff00000
 8009a70:	00000000 	.word	0x00000000
 8009a74:	3ff00000 	.word	0x3ff00000
 8009a78:	94a03595 	.word	0x94a03595
 8009a7c:	3fdfffff 	.word	0x3fdfffff
 8009a80:	35afe535 	.word	0x35afe535
 8009a84:	3fe00000 	.word	0x3fe00000
 8009a88:	000fffff 	.word	0x000fffff
 8009a8c:	7ff00000 	.word	0x7ff00000
 8009a90:	7fefffff 	.word	0x7fefffff
 8009a94:	3ff00000 	.word	0x3ff00000
 8009a98:	3fe00000 	.word	0x3fe00000
 8009a9c:	7fe00000 	.word	0x7fe00000
 8009aa0:	7c9fffff 	.word	0x7c9fffff
 8009aa4:	9b08      	ldr	r3, [sp, #32]
 8009aa6:	b323      	cbz	r3, 8009af2 <_strtod_l+0xb5a>
 8009aa8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009aac:	d821      	bhi.n	8009af2 <_strtod_l+0xb5a>
 8009aae:	a328      	add	r3, pc, #160	@ (adr r3, 8009b50 <_strtod_l+0xbb8>)
 8009ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	f7f7 f82a 	bl	8000b10 <__aeabi_dcmple>
 8009abc:	b1a0      	cbz	r0, 8009ae8 <_strtod_l+0xb50>
 8009abe:	4639      	mov	r1, r7
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f7f7 f881 	bl	8000bc8 <__aeabi_d2uiz>
 8009ac6:	2801      	cmp	r0, #1
 8009ac8:	bf38      	it	cc
 8009aca:	2001      	movcc	r0, #1
 8009acc:	f7f6 fd2a 	bl	8000524 <__aeabi_ui2d>
 8009ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	460f      	mov	r7, r1
 8009ad6:	b9fb      	cbnz	r3, 8009b18 <_strtod_l+0xb80>
 8009ad8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009adc:	9014      	str	r0, [sp, #80]	@ 0x50
 8009ade:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ae0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009ae4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ae8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009aea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009aee:	1b5b      	subs	r3, r3, r5
 8009af0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009af2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009af6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009afa:	f7ff f8f1 	bl	8008ce0 <__ulp>
 8009afe:	4650      	mov	r0, sl
 8009b00:	ec53 2b10 	vmov	r2, r3, d0
 8009b04:	4659      	mov	r1, fp
 8009b06:	f7f6 fd87 	bl	8000618 <__aeabi_dmul>
 8009b0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009b0e:	f7f6 fbcd 	bl	80002ac <__adddf3>
 8009b12:	4682      	mov	sl, r0
 8009b14:	468b      	mov	fp, r1
 8009b16:	e770      	b.n	80099fa <_strtod_l+0xa62>
 8009b18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009b1c:	e7e0      	b.n	8009ae0 <_strtod_l+0xb48>
 8009b1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b58 <_strtod_l+0xbc0>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 ffea 	bl	8000afc <__aeabi_dcmplt>
 8009b28:	e798      	b.n	8009a5c <_strtod_l+0xac4>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b32:	6013      	str	r3, [r2, #0]
 8009b34:	f7ff ba6d 	b.w	8009012 <_strtod_l+0x7a>
 8009b38:	2a65      	cmp	r2, #101	@ 0x65
 8009b3a:	f43f ab66 	beq.w	800920a <_strtod_l+0x272>
 8009b3e:	2a45      	cmp	r2, #69	@ 0x45
 8009b40:	f43f ab63 	beq.w	800920a <_strtod_l+0x272>
 8009b44:	2301      	movs	r3, #1
 8009b46:	f7ff bb9e 	b.w	8009286 <_strtod_l+0x2ee>
 8009b4a:	bf00      	nop
 8009b4c:	f3af 8000 	nop.w
 8009b50:	ffc00000 	.word	0xffc00000
 8009b54:	41dfffff 	.word	0x41dfffff
 8009b58:	94a03595 	.word	0x94a03595
 8009b5c:	3fcfffff 	.word	0x3fcfffff

08009b60 <_strtod_r>:
 8009b60:	4b01      	ldr	r3, [pc, #4]	@ (8009b68 <_strtod_r+0x8>)
 8009b62:	f7ff ba19 	b.w	8008f98 <_strtod_l>
 8009b66:	bf00      	nop
 8009b68:	20000068 	.word	0x20000068

08009b6c <_strtol_l.constprop.0>:
 8009b6c:	2b24      	cmp	r3, #36	@ 0x24
 8009b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b72:	4686      	mov	lr, r0
 8009b74:	4690      	mov	r8, r2
 8009b76:	d801      	bhi.n	8009b7c <_strtol_l.constprop.0+0x10>
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d106      	bne.n	8009b8a <_strtol_l.constprop.0+0x1e>
 8009b7c:	f7fd fdba 	bl	80076f4 <__errno>
 8009b80:	2316      	movs	r3, #22
 8009b82:	6003      	str	r3, [r0, #0]
 8009b84:	2000      	movs	r0, #0
 8009b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8a:	4834      	ldr	r0, [pc, #208]	@ (8009c5c <_strtol_l.constprop.0+0xf0>)
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	462a      	mov	r2, r5
 8009b90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b94:	5d06      	ldrb	r6, [r0, r4]
 8009b96:	f016 0608 	ands.w	r6, r6, #8
 8009b9a:	d1f8      	bne.n	8009b8e <_strtol_l.constprop.0+0x22>
 8009b9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b9e:	d12d      	bne.n	8009bfc <_strtol_l.constprop.0+0x90>
 8009ba0:	782c      	ldrb	r4, [r5, #0]
 8009ba2:	2601      	movs	r6, #1
 8009ba4:	1c95      	adds	r5, r2, #2
 8009ba6:	f033 0210 	bics.w	r2, r3, #16
 8009baa:	d109      	bne.n	8009bc0 <_strtol_l.constprop.0+0x54>
 8009bac:	2c30      	cmp	r4, #48	@ 0x30
 8009bae:	d12a      	bne.n	8009c06 <_strtol_l.constprop.0+0x9a>
 8009bb0:	782a      	ldrb	r2, [r5, #0]
 8009bb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009bb6:	2a58      	cmp	r2, #88	@ 0x58
 8009bb8:	d125      	bne.n	8009c06 <_strtol_l.constprop.0+0x9a>
 8009bba:	786c      	ldrb	r4, [r5, #1]
 8009bbc:	2310      	movs	r3, #16
 8009bbe:	3502      	adds	r5, #2
 8009bc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009bc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009bc8:	2200      	movs	r2, #0
 8009bca:	fbbc f9f3 	udiv	r9, ip, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009bd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009bd8:	2f09      	cmp	r7, #9
 8009bda:	d81b      	bhi.n	8009c14 <_strtol_l.constprop.0+0xa8>
 8009bdc:	463c      	mov	r4, r7
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	dd27      	ble.n	8009c32 <_strtol_l.constprop.0+0xc6>
 8009be2:	1c57      	adds	r7, r2, #1
 8009be4:	d007      	beq.n	8009bf6 <_strtol_l.constprop.0+0x8a>
 8009be6:	4581      	cmp	r9, r0
 8009be8:	d320      	bcc.n	8009c2c <_strtol_l.constprop.0+0xc0>
 8009bea:	d101      	bne.n	8009bf0 <_strtol_l.constprop.0+0x84>
 8009bec:	45a2      	cmp	sl, r4
 8009bee:	db1d      	blt.n	8009c2c <_strtol_l.constprop.0+0xc0>
 8009bf0:	fb00 4003 	mla	r0, r0, r3, r4
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bfa:	e7eb      	b.n	8009bd4 <_strtol_l.constprop.0+0x68>
 8009bfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009bfe:	bf04      	itt	eq
 8009c00:	782c      	ldrbeq	r4, [r5, #0]
 8009c02:	1c95      	addeq	r5, r2, #2
 8009c04:	e7cf      	b.n	8009ba6 <_strtol_l.constprop.0+0x3a>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1da      	bne.n	8009bc0 <_strtol_l.constprop.0+0x54>
 8009c0a:	2c30      	cmp	r4, #48	@ 0x30
 8009c0c:	bf0c      	ite	eq
 8009c0e:	2308      	moveq	r3, #8
 8009c10:	230a      	movne	r3, #10
 8009c12:	e7d5      	b.n	8009bc0 <_strtol_l.constprop.0+0x54>
 8009c14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c18:	2f19      	cmp	r7, #25
 8009c1a:	d801      	bhi.n	8009c20 <_strtol_l.constprop.0+0xb4>
 8009c1c:	3c37      	subs	r4, #55	@ 0x37
 8009c1e:	e7de      	b.n	8009bde <_strtol_l.constprop.0+0x72>
 8009c20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c24:	2f19      	cmp	r7, #25
 8009c26:	d804      	bhi.n	8009c32 <_strtol_l.constprop.0+0xc6>
 8009c28:	3c57      	subs	r4, #87	@ 0x57
 8009c2a:	e7d8      	b.n	8009bde <_strtol_l.constprop.0+0x72>
 8009c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c30:	e7e1      	b.n	8009bf6 <_strtol_l.constprop.0+0x8a>
 8009c32:	1c53      	adds	r3, r2, #1
 8009c34:	d108      	bne.n	8009c48 <_strtol_l.constprop.0+0xdc>
 8009c36:	2322      	movs	r3, #34	@ 0x22
 8009c38:	f8ce 3000 	str.w	r3, [lr]
 8009c3c:	4660      	mov	r0, ip
 8009c3e:	f1b8 0f00 	cmp.w	r8, #0
 8009c42:	d0a0      	beq.n	8009b86 <_strtol_l.constprop.0+0x1a>
 8009c44:	1e69      	subs	r1, r5, #1
 8009c46:	e006      	b.n	8009c56 <_strtol_l.constprop.0+0xea>
 8009c48:	b106      	cbz	r6, 8009c4c <_strtol_l.constprop.0+0xe0>
 8009c4a:	4240      	negs	r0, r0
 8009c4c:	f1b8 0f00 	cmp.w	r8, #0
 8009c50:	d099      	beq.n	8009b86 <_strtol_l.constprop.0+0x1a>
 8009c52:	2a00      	cmp	r2, #0
 8009c54:	d1f6      	bne.n	8009c44 <_strtol_l.constprop.0+0xd8>
 8009c56:	f8c8 1000 	str.w	r1, [r8]
 8009c5a:	e794      	b.n	8009b86 <_strtol_l.constprop.0+0x1a>
 8009c5c:	0800c551 	.word	0x0800c551

08009c60 <_strtol_r>:
 8009c60:	f7ff bf84 	b.w	8009b6c <_strtol_l.constprop.0>

08009c64 <__ssputs_r>:
 8009c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c68:	688e      	ldr	r6, [r1, #8]
 8009c6a:	461f      	mov	r7, r3
 8009c6c:	42be      	cmp	r6, r7
 8009c6e:	680b      	ldr	r3, [r1, #0]
 8009c70:	4682      	mov	sl, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	4690      	mov	r8, r2
 8009c76:	d82d      	bhi.n	8009cd4 <__ssputs_r+0x70>
 8009c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c80:	d026      	beq.n	8009cd0 <__ssputs_r+0x6c>
 8009c82:	6965      	ldr	r5, [r4, #20]
 8009c84:	6909      	ldr	r1, [r1, #16]
 8009c86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c8a:	eba3 0901 	sub.w	r9, r3, r1
 8009c8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c92:	1c7b      	adds	r3, r7, #1
 8009c94:	444b      	add	r3, r9
 8009c96:	106d      	asrs	r5, r5, #1
 8009c98:	429d      	cmp	r5, r3
 8009c9a:	bf38      	it	cc
 8009c9c:	461d      	movcc	r5, r3
 8009c9e:	0553      	lsls	r3, r2, #21
 8009ca0:	d527      	bpl.n	8009cf2 <__ssputs_r+0x8e>
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	f7fe fc1c 	bl	80084e0 <_malloc_r>
 8009ca8:	4606      	mov	r6, r0
 8009caa:	b360      	cbz	r0, 8009d06 <__ssputs_r+0xa2>
 8009cac:	6921      	ldr	r1, [r4, #16]
 8009cae:	464a      	mov	r2, r9
 8009cb0:	f000 ff0e 	bl	800aad0 <memcpy>
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cbe:	81a3      	strh	r3, [r4, #12]
 8009cc0:	6126      	str	r6, [r4, #16]
 8009cc2:	6165      	str	r5, [r4, #20]
 8009cc4:	444e      	add	r6, r9
 8009cc6:	eba5 0509 	sub.w	r5, r5, r9
 8009cca:	6026      	str	r6, [r4, #0]
 8009ccc:	60a5      	str	r5, [r4, #8]
 8009cce:	463e      	mov	r6, r7
 8009cd0:	42be      	cmp	r6, r7
 8009cd2:	d900      	bls.n	8009cd6 <__ssputs_r+0x72>
 8009cd4:	463e      	mov	r6, r7
 8009cd6:	6820      	ldr	r0, [r4, #0]
 8009cd8:	4632      	mov	r2, r6
 8009cda:	4641      	mov	r1, r8
 8009cdc:	f000 fe9a 	bl	800aa14 <memmove>
 8009ce0:	68a3      	ldr	r3, [r4, #8]
 8009ce2:	1b9b      	subs	r3, r3, r6
 8009ce4:	60a3      	str	r3, [r4, #8]
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	4433      	add	r3, r6
 8009cea:	6023      	str	r3, [r4, #0]
 8009cec:	2000      	movs	r0, #0
 8009cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	f001 fa81 	bl	800b1fa <_realloc_r>
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d1e0      	bne.n	8009cc0 <__ssputs_r+0x5c>
 8009cfe:	6921      	ldr	r1, [r4, #16]
 8009d00:	4650      	mov	r0, sl
 8009d02:	f7fe fb79 	bl	80083f8 <_free_r>
 8009d06:	230c      	movs	r3, #12
 8009d08:	f8ca 3000 	str.w	r3, [sl]
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d12:	81a3      	strh	r3, [r4, #12]
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	e7e9      	b.n	8009cee <__ssputs_r+0x8a>
	...

08009d1c <_svfiprintf_r>:
 8009d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d20:	4698      	mov	r8, r3
 8009d22:	898b      	ldrh	r3, [r1, #12]
 8009d24:	061b      	lsls	r3, r3, #24
 8009d26:	b09d      	sub	sp, #116	@ 0x74
 8009d28:	4607      	mov	r7, r0
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	d510      	bpl.n	8009d52 <_svfiprintf_r+0x36>
 8009d30:	690b      	ldr	r3, [r1, #16]
 8009d32:	b973      	cbnz	r3, 8009d52 <_svfiprintf_r+0x36>
 8009d34:	2140      	movs	r1, #64	@ 0x40
 8009d36:	f7fe fbd3 	bl	80084e0 <_malloc_r>
 8009d3a:	6028      	str	r0, [r5, #0]
 8009d3c:	6128      	str	r0, [r5, #16]
 8009d3e:	b930      	cbnz	r0, 8009d4e <_svfiprintf_r+0x32>
 8009d40:	230c      	movs	r3, #12
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295
 8009d48:	b01d      	add	sp, #116	@ 0x74
 8009d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4e:	2340      	movs	r3, #64	@ 0x40
 8009d50:	616b      	str	r3, [r5, #20]
 8009d52:	2300      	movs	r3, #0
 8009d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d56:	2320      	movs	r3, #32
 8009d58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d60:	2330      	movs	r3, #48	@ 0x30
 8009d62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f00 <_svfiprintf_r+0x1e4>
 8009d66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d6a:	f04f 0901 	mov.w	r9, #1
 8009d6e:	4623      	mov	r3, r4
 8009d70:	469a      	mov	sl, r3
 8009d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d76:	b10a      	cbz	r2, 8009d7c <_svfiprintf_r+0x60>
 8009d78:	2a25      	cmp	r2, #37	@ 0x25
 8009d7a:	d1f9      	bne.n	8009d70 <_svfiprintf_r+0x54>
 8009d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d80:	d00b      	beq.n	8009d9a <_svfiprintf_r+0x7e>
 8009d82:	465b      	mov	r3, fp
 8009d84:	4622      	mov	r2, r4
 8009d86:	4629      	mov	r1, r5
 8009d88:	4638      	mov	r0, r7
 8009d8a:	f7ff ff6b 	bl	8009c64 <__ssputs_r>
 8009d8e:	3001      	adds	r0, #1
 8009d90:	f000 80a7 	beq.w	8009ee2 <_svfiprintf_r+0x1c6>
 8009d94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d96:	445a      	add	r2, fp
 8009d98:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f000 809f 	beq.w	8009ee2 <_svfiprintf_r+0x1c6>
 8009da4:	2300      	movs	r3, #0
 8009da6:	f04f 32ff 	mov.w	r2, #4294967295
 8009daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dae:	f10a 0a01 	add.w	sl, sl, #1
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	9307      	str	r3, [sp, #28]
 8009db6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dba:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dbc:	4654      	mov	r4, sl
 8009dbe:	2205      	movs	r2, #5
 8009dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc4:	484e      	ldr	r0, [pc, #312]	@ (8009f00 <_svfiprintf_r+0x1e4>)
 8009dc6:	f7f6 fa13 	bl	80001f0 <memchr>
 8009dca:	9a04      	ldr	r2, [sp, #16]
 8009dcc:	b9d8      	cbnz	r0, 8009e06 <_svfiprintf_r+0xea>
 8009dce:	06d0      	lsls	r0, r2, #27
 8009dd0:	bf44      	itt	mi
 8009dd2:	2320      	movmi	r3, #32
 8009dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dd8:	0711      	lsls	r1, r2, #28
 8009dda:	bf44      	itt	mi
 8009ddc:	232b      	movmi	r3, #43	@ 0x2b
 8009dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009de2:	f89a 3000 	ldrb.w	r3, [sl]
 8009de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009de8:	d015      	beq.n	8009e16 <_svfiprintf_r+0xfa>
 8009dea:	9a07      	ldr	r2, [sp, #28]
 8009dec:	4654      	mov	r4, sl
 8009dee:	2000      	movs	r0, #0
 8009df0:	f04f 0c0a 	mov.w	ip, #10
 8009df4:	4621      	mov	r1, r4
 8009df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dfa:	3b30      	subs	r3, #48	@ 0x30
 8009dfc:	2b09      	cmp	r3, #9
 8009dfe:	d94b      	bls.n	8009e98 <_svfiprintf_r+0x17c>
 8009e00:	b1b0      	cbz	r0, 8009e30 <_svfiprintf_r+0x114>
 8009e02:	9207      	str	r2, [sp, #28]
 8009e04:	e014      	b.n	8009e30 <_svfiprintf_r+0x114>
 8009e06:	eba0 0308 	sub.w	r3, r0, r8
 8009e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	46a2      	mov	sl, r4
 8009e14:	e7d2      	b.n	8009dbc <_svfiprintf_r+0xa0>
 8009e16:	9b03      	ldr	r3, [sp, #12]
 8009e18:	1d19      	adds	r1, r3, #4
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	9103      	str	r1, [sp, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bfbb      	ittet	lt
 8009e22:	425b      	neglt	r3, r3
 8009e24:	f042 0202 	orrlt.w	r2, r2, #2
 8009e28:	9307      	strge	r3, [sp, #28]
 8009e2a:	9307      	strlt	r3, [sp, #28]
 8009e2c:	bfb8      	it	lt
 8009e2e:	9204      	strlt	r2, [sp, #16]
 8009e30:	7823      	ldrb	r3, [r4, #0]
 8009e32:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e34:	d10a      	bne.n	8009e4c <_svfiprintf_r+0x130>
 8009e36:	7863      	ldrb	r3, [r4, #1]
 8009e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e3a:	d132      	bne.n	8009ea2 <_svfiprintf_r+0x186>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	1d1a      	adds	r2, r3, #4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	9203      	str	r2, [sp, #12]
 8009e44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e48:	3402      	adds	r4, #2
 8009e4a:	9305      	str	r3, [sp, #20]
 8009e4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f10 <_svfiprintf_r+0x1f4>
 8009e50:	7821      	ldrb	r1, [r4, #0]
 8009e52:	2203      	movs	r2, #3
 8009e54:	4650      	mov	r0, sl
 8009e56:	f7f6 f9cb 	bl	80001f0 <memchr>
 8009e5a:	b138      	cbz	r0, 8009e6c <_svfiprintf_r+0x150>
 8009e5c:	9b04      	ldr	r3, [sp, #16]
 8009e5e:	eba0 000a 	sub.w	r0, r0, sl
 8009e62:	2240      	movs	r2, #64	@ 0x40
 8009e64:	4082      	lsls	r2, r0
 8009e66:	4313      	orrs	r3, r2
 8009e68:	3401      	adds	r4, #1
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e70:	4824      	ldr	r0, [pc, #144]	@ (8009f04 <_svfiprintf_r+0x1e8>)
 8009e72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e76:	2206      	movs	r2, #6
 8009e78:	f7f6 f9ba 	bl	80001f0 <memchr>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d036      	beq.n	8009eee <_svfiprintf_r+0x1d2>
 8009e80:	4b21      	ldr	r3, [pc, #132]	@ (8009f08 <_svfiprintf_r+0x1ec>)
 8009e82:	bb1b      	cbnz	r3, 8009ecc <_svfiprintf_r+0x1b0>
 8009e84:	9b03      	ldr	r3, [sp, #12]
 8009e86:	3307      	adds	r3, #7
 8009e88:	f023 0307 	bic.w	r3, r3, #7
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	9303      	str	r3, [sp, #12]
 8009e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e92:	4433      	add	r3, r6
 8009e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e96:	e76a      	b.n	8009d6e <_svfiprintf_r+0x52>
 8009e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	e7a8      	b.n	8009df4 <_svfiprintf_r+0xd8>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	3401      	adds	r4, #1
 8009ea6:	9305      	str	r3, [sp, #20]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	f04f 0c0a 	mov.w	ip, #10
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eb4:	3a30      	subs	r2, #48	@ 0x30
 8009eb6:	2a09      	cmp	r2, #9
 8009eb8:	d903      	bls.n	8009ec2 <_svfiprintf_r+0x1a6>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0c6      	beq.n	8009e4c <_svfiprintf_r+0x130>
 8009ebe:	9105      	str	r1, [sp, #20]
 8009ec0:	e7c4      	b.n	8009e4c <_svfiprintf_r+0x130>
 8009ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e7f0      	b.n	8009eae <_svfiprintf_r+0x192>
 8009ecc:	ab03      	add	r3, sp, #12
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	462a      	mov	r2, r5
 8009ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8009f0c <_svfiprintf_r+0x1f0>)
 8009ed4:	a904      	add	r1, sp, #16
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f7fc fb80 	bl	80065dc <_printf_float>
 8009edc:	1c42      	adds	r2, r0, #1
 8009ede:	4606      	mov	r6, r0
 8009ee0:	d1d6      	bne.n	8009e90 <_svfiprintf_r+0x174>
 8009ee2:	89ab      	ldrh	r3, [r5, #12]
 8009ee4:	065b      	lsls	r3, r3, #25
 8009ee6:	f53f af2d 	bmi.w	8009d44 <_svfiprintf_r+0x28>
 8009eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eec:	e72c      	b.n	8009d48 <_svfiprintf_r+0x2c>
 8009eee:	ab03      	add	r3, sp, #12
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	462a      	mov	r2, r5
 8009ef4:	4b05      	ldr	r3, [pc, #20]	@ (8009f0c <_svfiprintf_r+0x1f0>)
 8009ef6:	a904      	add	r1, sp, #16
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f7fc fe07 	bl	8006b0c <_printf_i>
 8009efe:	e7ed      	b.n	8009edc <_svfiprintf_r+0x1c0>
 8009f00:	0800c651 	.word	0x0800c651
 8009f04:	0800c65b 	.word	0x0800c65b
 8009f08:	080065dd 	.word	0x080065dd
 8009f0c:	08009c65 	.word	0x08009c65
 8009f10:	0800c657 	.word	0x0800c657

08009f14 <__svfiscanf_r>:
 8009f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	461d      	mov	r5, r3
 8009f1a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8009f1c:	07df      	lsls	r7, r3, #31
 8009f1e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009f22:	4606      	mov	r6, r0
 8009f24:	460c      	mov	r4, r1
 8009f26:	4691      	mov	r9, r2
 8009f28:	d405      	bmi.n	8009f36 <__svfiscanf_r+0x22>
 8009f2a:	898b      	ldrh	r3, [r1, #12]
 8009f2c:	0598      	lsls	r0, r3, #22
 8009f2e:	d402      	bmi.n	8009f36 <__svfiscanf_r+0x22>
 8009f30:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8009f32:	f7fd fc0a 	bl	800774a <__retarget_lock_acquire_recursive>
 8009f36:	2300      	movs	r3, #0
 8009f38:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8009f3c:	4ba7      	ldr	r3, [pc, #668]	@ (800a1dc <__svfiscanf_r+0x2c8>)
 8009f3e:	93a0      	str	r3, [sp, #640]	@ 0x280
 8009f40:	f10d 0804 	add.w	r8, sp, #4
 8009f44:	4ba6      	ldr	r3, [pc, #664]	@ (800a1e0 <__svfiscanf_r+0x2cc>)
 8009f46:	4fa7      	ldr	r7, [pc, #668]	@ (800a1e4 <__svfiscanf_r+0x2d0>)
 8009f48:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009f4c:	93a1      	str	r3, [sp, #644]	@ 0x284
 8009f4e:	9500      	str	r5, [sp, #0]
 8009f50:	f899 3000 	ldrb.w	r3, [r9]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 816c 	beq.w	800a232 <__svfiscanf_r+0x31e>
 8009f5a:	5cf9      	ldrb	r1, [r7, r3]
 8009f5c:	f011 0108 	ands.w	r1, r1, #8
 8009f60:	f109 0501 	add.w	r5, r9, #1
 8009f64:	d019      	beq.n	8009f9a <__svfiscanf_r+0x86>
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	dd0f      	ble.n	8009f8c <__svfiscanf_r+0x78>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	781a      	ldrb	r2, [r3, #0]
 8009f70:	5cba      	ldrb	r2, [r7, r2]
 8009f72:	0711      	lsls	r1, r2, #28
 8009f74:	d401      	bmi.n	8009f7a <__svfiscanf_r+0x66>
 8009f76:	46a9      	mov	r9, r5
 8009f78:	e7ea      	b.n	8009f50 <__svfiscanf_r+0x3c>
 8009f7a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009f7c:	3201      	adds	r2, #1
 8009f7e:	9245      	str	r2, [sp, #276]	@ 0x114
 8009f80:	6862      	ldr	r2, [r4, #4]
 8009f82:	3301      	adds	r3, #1
 8009f84:	3a01      	subs	r2, #1
 8009f86:	6062      	str	r2, [r4, #4]
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	e7ec      	b.n	8009f66 <__svfiscanf_r+0x52>
 8009f8c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4630      	mov	r0, r6
 8009f92:	4798      	blx	r3
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d0e9      	beq.n	8009f6c <__svfiscanf_r+0x58>
 8009f98:	e7ed      	b.n	8009f76 <__svfiscanf_r+0x62>
 8009f9a:	2b25      	cmp	r3, #37	@ 0x25
 8009f9c:	d012      	beq.n	8009fc4 <__svfiscanf_r+0xb0>
 8009f9e:	4699      	mov	r9, r3
 8009fa0:	6863      	ldr	r3, [r4, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f340 8095 	ble.w	800a0d2 <__svfiscanf_r+0x1be>
 8009fa8:	6822      	ldr	r2, [r4, #0]
 8009faa:	7813      	ldrb	r3, [r2, #0]
 8009fac:	454b      	cmp	r3, r9
 8009fae:	f040 8140 	bne.w	800a232 <__svfiscanf_r+0x31e>
 8009fb2:	6863      	ldr	r3, [r4, #4]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	6063      	str	r3, [r4, #4]
 8009fb8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009fba:	3201      	adds	r2, #1
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	6022      	str	r2, [r4, #0]
 8009fc0:	9345      	str	r3, [sp, #276]	@ 0x114
 8009fc2:	e7d8      	b.n	8009f76 <__svfiscanf_r+0x62>
 8009fc4:	9141      	str	r1, [sp, #260]	@ 0x104
 8009fc6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009fc8:	f899 3001 	ldrb.w	r3, [r9, #1]
 8009fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fce:	bf02      	ittt	eq
 8009fd0:	2310      	moveq	r3, #16
 8009fd2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009fd4:	f109 0502 	addeq.w	r5, r9, #2
 8009fd8:	220a      	movs	r2, #10
 8009fda:	46a9      	mov	r9, r5
 8009fdc:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009fe0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009fe4:	2b09      	cmp	r3, #9
 8009fe6:	d91f      	bls.n	800a028 <__svfiscanf_r+0x114>
 8009fe8:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 800a1e8 <__svfiscanf_r+0x2d4>
 8009fec:	2203      	movs	r2, #3
 8009fee:	4650      	mov	r0, sl
 8009ff0:	f7f6 f8fe 	bl	80001f0 <memchr>
 8009ff4:	b138      	cbz	r0, 800a006 <__svfiscanf_r+0xf2>
 8009ff6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009ff8:	eba0 000a 	sub.w	r0, r0, sl
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	4083      	lsls	r3, r0
 800a000:	4313      	orrs	r3, r2
 800a002:	9341      	str	r3, [sp, #260]	@ 0x104
 800a004:	464d      	mov	r5, r9
 800a006:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a00a:	2b78      	cmp	r3, #120	@ 0x78
 800a00c:	d807      	bhi.n	800a01e <__svfiscanf_r+0x10a>
 800a00e:	2b57      	cmp	r3, #87	@ 0x57
 800a010:	d811      	bhi.n	800a036 <__svfiscanf_r+0x122>
 800a012:	2b25      	cmp	r3, #37	@ 0x25
 800a014:	d0c3      	beq.n	8009f9e <__svfiscanf_r+0x8a>
 800a016:	d857      	bhi.n	800a0c8 <__svfiscanf_r+0x1b4>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 80c1 	beq.w	800a1a0 <__svfiscanf_r+0x28c>
 800a01e:	2303      	movs	r3, #3
 800a020:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a022:	230a      	movs	r3, #10
 800a024:	9342      	str	r3, [sp, #264]	@ 0x108
 800a026:	e07e      	b.n	800a126 <__svfiscanf_r+0x212>
 800a028:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a02a:	fb02 1103 	mla	r1, r2, r3, r1
 800a02e:	3930      	subs	r1, #48	@ 0x30
 800a030:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a032:	464d      	mov	r5, r9
 800a034:	e7d1      	b.n	8009fda <__svfiscanf_r+0xc6>
 800a036:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a03a:	2a20      	cmp	r2, #32
 800a03c:	d8ef      	bhi.n	800a01e <__svfiscanf_r+0x10a>
 800a03e:	a101      	add	r1, pc, #4	@ (adr r1, 800a044 <__svfiscanf_r+0x130>)
 800a040:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a044:	0800a105 	.word	0x0800a105
 800a048:	0800a01f 	.word	0x0800a01f
 800a04c:	0800a01f 	.word	0x0800a01f
 800a050:	0800a15f 	.word	0x0800a15f
 800a054:	0800a01f 	.word	0x0800a01f
 800a058:	0800a01f 	.word	0x0800a01f
 800a05c:	0800a01f 	.word	0x0800a01f
 800a060:	0800a01f 	.word	0x0800a01f
 800a064:	0800a01f 	.word	0x0800a01f
 800a068:	0800a01f 	.word	0x0800a01f
 800a06c:	0800a01f 	.word	0x0800a01f
 800a070:	0800a175 	.word	0x0800a175
 800a074:	0800a15b 	.word	0x0800a15b
 800a078:	0800a0cf 	.word	0x0800a0cf
 800a07c:	0800a0cf 	.word	0x0800a0cf
 800a080:	0800a0cf 	.word	0x0800a0cf
 800a084:	0800a01f 	.word	0x0800a01f
 800a088:	0800a117 	.word	0x0800a117
 800a08c:	0800a01f 	.word	0x0800a01f
 800a090:	0800a01f 	.word	0x0800a01f
 800a094:	0800a01f 	.word	0x0800a01f
 800a098:	0800a01f 	.word	0x0800a01f
 800a09c:	0800a185 	.word	0x0800a185
 800a0a0:	0800a11f 	.word	0x0800a11f
 800a0a4:	0800a0fd 	.word	0x0800a0fd
 800a0a8:	0800a01f 	.word	0x0800a01f
 800a0ac:	0800a01f 	.word	0x0800a01f
 800a0b0:	0800a181 	.word	0x0800a181
 800a0b4:	0800a01f 	.word	0x0800a01f
 800a0b8:	0800a15b 	.word	0x0800a15b
 800a0bc:	0800a01f 	.word	0x0800a01f
 800a0c0:	0800a01f 	.word	0x0800a01f
 800a0c4:	0800a105 	.word	0x0800a105
 800a0c8:	3b45      	subs	r3, #69	@ 0x45
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d8a7      	bhi.n	800a01e <__svfiscanf_r+0x10a>
 800a0ce:	2305      	movs	r3, #5
 800a0d0:	e028      	b.n	800a124 <__svfiscanf_r+0x210>
 800a0d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	4798      	blx	r3
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	f43f af64 	beq.w	8009fa8 <__svfiscanf_r+0x94>
 800a0e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0e2:	07da      	lsls	r2, r3, #31
 800a0e4:	f140 809d 	bpl.w	800a222 <__svfiscanf_r+0x30e>
 800a0e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d061      	beq.n	800a1b2 <__svfiscanf_r+0x29e>
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	0659      	lsls	r1, r3, #25
 800a0f2:	d45e      	bmi.n	800a1b2 <__svfiscanf_r+0x29e>
 800a0f4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fc:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a0fe:	f042 0220 	orr.w	r2, r2, #32
 800a102:	9241      	str	r2, [sp, #260]	@ 0x104
 800a104:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a10a:	9241      	str	r2, [sp, #260]	@ 0x104
 800a10c:	2210      	movs	r2, #16
 800a10e:	2b6e      	cmp	r3, #110	@ 0x6e
 800a110:	9242      	str	r2, [sp, #264]	@ 0x108
 800a112:	d902      	bls.n	800a11a <__svfiscanf_r+0x206>
 800a114:	e005      	b.n	800a122 <__svfiscanf_r+0x20e>
 800a116:	2300      	movs	r3, #0
 800a118:	9342      	str	r3, [sp, #264]	@ 0x108
 800a11a:	2303      	movs	r3, #3
 800a11c:	e002      	b.n	800a124 <__svfiscanf_r+0x210>
 800a11e:	2308      	movs	r3, #8
 800a120:	9342      	str	r3, [sp, #264]	@ 0x108
 800a122:	2304      	movs	r3, #4
 800a124:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a126:	6863      	ldr	r3, [r4, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dd45      	ble.n	800a1b8 <__svfiscanf_r+0x2a4>
 800a12c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a12e:	0659      	lsls	r1, r3, #25
 800a130:	d404      	bmi.n	800a13c <__svfiscanf_r+0x228>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	5cba      	ldrb	r2, [r7, r2]
 800a138:	0712      	lsls	r2, r2, #28
 800a13a:	d444      	bmi.n	800a1c6 <__svfiscanf_r+0x2b2>
 800a13c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a13e:	2b02      	cmp	r3, #2
 800a140:	dc5b      	bgt.n	800a1fa <__svfiscanf_r+0x2e6>
 800a142:	466b      	mov	r3, sp
 800a144:	4622      	mov	r2, r4
 800a146:	a941      	add	r1, sp, #260	@ 0x104
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 f893 	bl	800a274 <_scanf_chars>
 800a14e:	2801      	cmp	r0, #1
 800a150:	d06f      	beq.n	800a232 <__svfiscanf_r+0x31e>
 800a152:	2802      	cmp	r0, #2
 800a154:	f47f af0f 	bne.w	8009f76 <__svfiscanf_r+0x62>
 800a158:	e7c2      	b.n	800a0e0 <__svfiscanf_r+0x1cc>
 800a15a:	220a      	movs	r2, #10
 800a15c:	e7d7      	b.n	800a10e <__svfiscanf_r+0x1fa>
 800a15e:	4629      	mov	r1, r5
 800a160:	4640      	mov	r0, r8
 800a162:	f000 fb65 	bl	800a830 <__sccl>
 800a166:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a16c:	9341      	str	r3, [sp, #260]	@ 0x104
 800a16e:	4605      	mov	r5, r0
 800a170:	2301      	movs	r3, #1
 800a172:	e7d7      	b.n	800a124 <__svfiscanf_r+0x210>
 800a174:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a17a:	9341      	str	r3, [sp, #260]	@ 0x104
 800a17c:	2300      	movs	r3, #0
 800a17e:	e7d1      	b.n	800a124 <__svfiscanf_r+0x210>
 800a180:	2302      	movs	r3, #2
 800a182:	e7cf      	b.n	800a124 <__svfiscanf_r+0x210>
 800a184:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a186:	06c3      	lsls	r3, r0, #27
 800a188:	f53f aef5 	bmi.w	8009f76 <__svfiscanf_r+0x62>
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a190:	1d19      	adds	r1, r3, #4
 800a192:	9100      	str	r1, [sp, #0]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	07c0      	lsls	r0, r0, #31
 800a198:	bf4c      	ite	mi
 800a19a:	801a      	strhmi	r2, [r3, #0]
 800a19c:	601a      	strpl	r2, [r3, #0]
 800a19e:	e6ea      	b.n	8009f76 <__svfiscanf_r+0x62>
 800a1a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1a2:	07de      	lsls	r6, r3, #31
 800a1a4:	d405      	bmi.n	800a1b2 <__svfiscanf_r+0x29e>
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	059d      	lsls	r5, r3, #22
 800a1aa:	d402      	bmi.n	800a1b2 <__svfiscanf_r+0x29e>
 800a1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ae:	f7fd facd 	bl	800774c <__retarget_lock_release_recursive>
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	e79d      	b.n	800a0f4 <__svfiscanf_r+0x1e0>
 800a1b8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4630      	mov	r0, r6
 800a1be:	4798      	blx	r3
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d0b3      	beq.n	800a12c <__svfiscanf_r+0x218>
 800a1c4:	e78c      	b.n	800a0e0 <__svfiscanf_r+0x1cc>
 800a1c6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a1c8:	3201      	adds	r2, #1
 800a1ca:	9245      	str	r2, [sp, #276]	@ 0x114
 800a1cc:	6862      	ldr	r2, [r4, #4]
 800a1ce:	3a01      	subs	r2, #1
 800a1d0:	2a00      	cmp	r2, #0
 800a1d2:	6062      	str	r2, [r4, #4]
 800a1d4:	dd0a      	ble.n	800a1ec <__svfiscanf_r+0x2d8>
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	e7aa      	b.n	800a132 <__svfiscanf_r+0x21e>
 800a1dc:	0800a917 	.word	0x0800a917
 800a1e0:	0800a749 	.word	0x0800a749
 800a1e4:	0800c551 	.word	0x0800c551
 800a1e8:	0800c657 	.word	0x0800c657
 800a1ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	4798      	blx	r3
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d09c      	beq.n	800a132 <__svfiscanf_r+0x21e>
 800a1f8:	e772      	b.n	800a0e0 <__svfiscanf_r+0x1cc>
 800a1fa:	2b04      	cmp	r3, #4
 800a1fc:	dc06      	bgt.n	800a20c <__svfiscanf_r+0x2f8>
 800a1fe:	466b      	mov	r3, sp
 800a200:	4622      	mov	r2, r4
 800a202:	a941      	add	r1, sp, #260	@ 0x104
 800a204:	4630      	mov	r0, r6
 800a206:	f000 f88f 	bl	800a328 <_scanf_i>
 800a20a:	e7a0      	b.n	800a14e <__svfiscanf_r+0x23a>
 800a20c:	4b0e      	ldr	r3, [pc, #56]	@ (800a248 <__svfiscanf_r+0x334>)
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f43f aeb1 	beq.w	8009f76 <__svfiscanf_r+0x62>
 800a214:	466b      	mov	r3, sp
 800a216:	4622      	mov	r2, r4
 800a218:	a941      	add	r1, sp, #260	@ 0x104
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7fc fd96 	bl	8006d4c <_scanf_float>
 800a220:	e795      	b.n	800a14e <__svfiscanf_r+0x23a>
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	0598      	lsls	r0, r3, #22
 800a226:	f53f af5f 	bmi.w	800a0e8 <__svfiscanf_r+0x1d4>
 800a22a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a22c:	f7fd fa8e 	bl	800774c <__retarget_lock_release_recursive>
 800a230:	e75a      	b.n	800a0e8 <__svfiscanf_r+0x1d4>
 800a232:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a234:	07da      	lsls	r2, r3, #31
 800a236:	d405      	bmi.n	800a244 <__svfiscanf_r+0x330>
 800a238:	89a3      	ldrh	r3, [r4, #12]
 800a23a:	059b      	lsls	r3, r3, #22
 800a23c:	d402      	bmi.n	800a244 <__svfiscanf_r+0x330>
 800a23e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a240:	f7fd fa84 	bl	800774c <__retarget_lock_release_recursive>
 800a244:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a246:	e755      	b.n	800a0f4 <__svfiscanf_r+0x1e0>
 800a248:	08006d4d 	.word	0x08006d4d

0800a24c <_vfiscanf_r>:
 800a24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a250:	460d      	mov	r5, r1
 800a252:	4616      	mov	r6, r2
 800a254:	461f      	mov	r7, r3
 800a256:	4604      	mov	r4, r0
 800a258:	b118      	cbz	r0, 800a262 <_vfiscanf_r+0x16>
 800a25a:	6a03      	ldr	r3, [r0, #32]
 800a25c:	b90b      	cbnz	r3, 800a262 <_vfiscanf_r+0x16>
 800a25e:	f7fd f815 	bl	800728c <__sinit>
 800a262:	463b      	mov	r3, r7
 800a264:	4632      	mov	r2, r6
 800a266:	4629      	mov	r1, r5
 800a268:	4620      	mov	r0, r4
 800a26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a26e:	f7ff be51 	b.w	8009f14 <__svfiscanf_r>
	...

0800a274 <_scanf_chars>:
 800a274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a278:	4615      	mov	r5, r2
 800a27a:	688a      	ldr	r2, [r1, #8]
 800a27c:	4680      	mov	r8, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	b932      	cbnz	r2, 800a290 <_scanf_chars+0x1c>
 800a282:	698a      	ldr	r2, [r1, #24]
 800a284:	2a00      	cmp	r2, #0
 800a286:	bf14      	ite	ne
 800a288:	f04f 32ff 	movne.w	r2, #4294967295
 800a28c:	2201      	moveq	r2, #1
 800a28e:	608a      	str	r2, [r1, #8]
 800a290:	6822      	ldr	r2, [r4, #0]
 800a292:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a324 <_scanf_chars+0xb0>
 800a296:	06d1      	lsls	r1, r2, #27
 800a298:	bf5f      	itttt	pl
 800a29a:	681a      	ldrpl	r2, [r3, #0]
 800a29c:	1d11      	addpl	r1, r2, #4
 800a29e:	6019      	strpl	r1, [r3, #0]
 800a2a0:	6816      	ldrpl	r6, [r2, #0]
 800a2a2:	2700      	movs	r7, #0
 800a2a4:	69a0      	ldr	r0, [r4, #24]
 800a2a6:	b188      	cbz	r0, 800a2cc <_scanf_chars+0x58>
 800a2a8:	2801      	cmp	r0, #1
 800a2aa:	d107      	bne.n	800a2bc <_scanf_chars+0x48>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	781a      	ldrb	r2, [r3, #0]
 800a2b0:	6963      	ldr	r3, [r4, #20]
 800a2b2:	5c9b      	ldrb	r3, [r3, r2]
 800a2b4:	b953      	cbnz	r3, 800a2cc <_scanf_chars+0x58>
 800a2b6:	2f00      	cmp	r7, #0
 800a2b8:	d031      	beq.n	800a31e <_scanf_chars+0xaa>
 800a2ba:	e022      	b.n	800a302 <_scanf_chars+0x8e>
 800a2bc:	2802      	cmp	r0, #2
 800a2be:	d120      	bne.n	800a302 <_scanf_chars+0x8e>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a2c8:	071b      	lsls	r3, r3, #28
 800a2ca:	d41a      	bmi.n	800a302 <_scanf_chars+0x8e>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	06da      	lsls	r2, r3, #27
 800a2d0:	bf5e      	ittt	pl
 800a2d2:	682b      	ldrpl	r3, [r5, #0]
 800a2d4:	781b      	ldrbpl	r3, [r3, #0]
 800a2d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a2da:	682a      	ldr	r2, [r5, #0]
 800a2dc:	686b      	ldr	r3, [r5, #4]
 800a2de:	3201      	adds	r2, #1
 800a2e0:	602a      	str	r2, [r5, #0]
 800a2e2:	68a2      	ldr	r2, [r4, #8]
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	3a01      	subs	r2, #1
 800a2e8:	606b      	str	r3, [r5, #4]
 800a2ea:	3701      	adds	r7, #1
 800a2ec:	60a2      	str	r2, [r4, #8]
 800a2ee:	b142      	cbz	r2, 800a302 <_scanf_chars+0x8e>
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	dcd7      	bgt.n	800a2a4 <_scanf_chars+0x30>
 800a2f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4798      	blx	r3
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d0d0      	beq.n	800a2a4 <_scanf_chars+0x30>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	f013 0310 	ands.w	r3, r3, #16
 800a308:	d105      	bne.n	800a316 <_scanf_chars+0xa2>
 800a30a:	68e2      	ldr	r2, [r4, #12]
 800a30c:	3201      	adds	r2, #1
 800a30e:	60e2      	str	r2, [r4, #12]
 800a310:	69a2      	ldr	r2, [r4, #24]
 800a312:	b102      	cbz	r2, 800a316 <_scanf_chars+0xa2>
 800a314:	7033      	strb	r3, [r6, #0]
 800a316:	6923      	ldr	r3, [r4, #16]
 800a318:	443b      	add	r3, r7
 800a31a:	6123      	str	r3, [r4, #16]
 800a31c:	2000      	movs	r0, #0
 800a31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a322:	bf00      	nop
 800a324:	0800c551 	.word	0x0800c551

0800a328 <_scanf_i>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	4698      	mov	r8, r3
 800a32e:	4b74      	ldr	r3, [pc, #464]	@ (800a500 <_scanf_i+0x1d8>)
 800a330:	460c      	mov	r4, r1
 800a332:	4682      	mov	sl, r0
 800a334:	4616      	mov	r6, r2
 800a336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a33a:	b087      	sub	sp, #28
 800a33c:	ab03      	add	r3, sp, #12
 800a33e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a342:	4b70      	ldr	r3, [pc, #448]	@ (800a504 <_scanf_i+0x1dc>)
 800a344:	69a1      	ldr	r1, [r4, #24]
 800a346:	4a70      	ldr	r2, [pc, #448]	@ (800a508 <_scanf_i+0x1e0>)
 800a348:	2903      	cmp	r1, #3
 800a34a:	bf08      	it	eq
 800a34c:	461a      	moveq	r2, r3
 800a34e:	68a3      	ldr	r3, [r4, #8]
 800a350:	9201      	str	r2, [sp, #4]
 800a352:	1e5a      	subs	r2, r3, #1
 800a354:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a358:	bf88      	it	hi
 800a35a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a35e:	4627      	mov	r7, r4
 800a360:	bf82      	ittt	hi
 800a362:	eb03 0905 	addhi.w	r9, r3, r5
 800a366:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a36a:	60a3      	strhi	r3, [r4, #8]
 800a36c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a370:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a374:	bf98      	it	ls
 800a376:	f04f 0900 	movls.w	r9, #0
 800a37a:	6023      	str	r3, [r4, #0]
 800a37c:	463d      	mov	r5, r7
 800a37e:	f04f 0b00 	mov.w	fp, #0
 800a382:	6831      	ldr	r1, [r6, #0]
 800a384:	ab03      	add	r3, sp, #12
 800a386:	7809      	ldrb	r1, [r1, #0]
 800a388:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a38c:	2202      	movs	r2, #2
 800a38e:	f7f5 ff2f 	bl	80001f0 <memchr>
 800a392:	b328      	cbz	r0, 800a3e0 <_scanf_i+0xb8>
 800a394:	f1bb 0f01 	cmp.w	fp, #1
 800a398:	d159      	bne.n	800a44e <_scanf_i+0x126>
 800a39a:	6862      	ldr	r2, [r4, #4]
 800a39c:	b92a      	cbnz	r2, 800a3aa <_scanf_i+0x82>
 800a39e:	6822      	ldr	r2, [r4, #0]
 800a3a0:	2108      	movs	r1, #8
 800a3a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3a6:	6061      	str	r1, [r4, #4]
 800a3a8:	6022      	str	r2, [r4, #0]
 800a3aa:	6822      	ldr	r2, [r4, #0]
 800a3ac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a3b0:	6022      	str	r2, [r4, #0]
 800a3b2:	68a2      	ldr	r2, [r4, #8]
 800a3b4:	1e51      	subs	r1, r2, #1
 800a3b6:	60a1      	str	r1, [r4, #8]
 800a3b8:	b192      	cbz	r2, 800a3e0 <_scanf_i+0xb8>
 800a3ba:	6832      	ldr	r2, [r6, #0]
 800a3bc:	1c51      	adds	r1, r2, #1
 800a3be:	6031      	str	r1, [r6, #0]
 800a3c0:	7812      	ldrb	r2, [r2, #0]
 800a3c2:	f805 2b01 	strb.w	r2, [r5], #1
 800a3c6:	6872      	ldr	r2, [r6, #4]
 800a3c8:	3a01      	subs	r2, #1
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	6072      	str	r2, [r6, #4]
 800a3ce:	dc07      	bgt.n	800a3e0 <_scanf_i+0xb8>
 800a3d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4650      	mov	r0, sl
 800a3d8:	4790      	blx	r2
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	f040 8085 	bne.w	800a4ea <_scanf_i+0x1c2>
 800a3e0:	f10b 0b01 	add.w	fp, fp, #1
 800a3e4:	f1bb 0f03 	cmp.w	fp, #3
 800a3e8:	d1cb      	bne.n	800a382 <_scanf_i+0x5a>
 800a3ea:	6863      	ldr	r3, [r4, #4]
 800a3ec:	b90b      	cbnz	r3, 800a3f2 <_scanf_i+0xca>
 800a3ee:	230a      	movs	r3, #10
 800a3f0:	6063      	str	r3, [r4, #4]
 800a3f2:	6863      	ldr	r3, [r4, #4]
 800a3f4:	4945      	ldr	r1, [pc, #276]	@ (800a50c <_scanf_i+0x1e4>)
 800a3f6:	6960      	ldr	r0, [r4, #20]
 800a3f8:	1ac9      	subs	r1, r1, r3
 800a3fa:	f000 fa19 	bl	800a830 <__sccl>
 800a3fe:	f04f 0b00 	mov.w	fp, #0
 800a402:	68a3      	ldr	r3, [r4, #8]
 800a404:	6822      	ldr	r2, [r4, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d03d      	beq.n	800a486 <_scanf_i+0x15e>
 800a40a:	6831      	ldr	r1, [r6, #0]
 800a40c:	6960      	ldr	r0, [r4, #20]
 800a40e:	f891 c000 	ldrb.w	ip, [r1]
 800a412:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a416:	2800      	cmp	r0, #0
 800a418:	d035      	beq.n	800a486 <_scanf_i+0x15e>
 800a41a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a41e:	d124      	bne.n	800a46a <_scanf_i+0x142>
 800a420:	0510      	lsls	r0, r2, #20
 800a422:	d522      	bpl.n	800a46a <_scanf_i+0x142>
 800a424:	f10b 0b01 	add.w	fp, fp, #1
 800a428:	f1b9 0f00 	cmp.w	r9, #0
 800a42c:	d003      	beq.n	800a436 <_scanf_i+0x10e>
 800a42e:	3301      	adds	r3, #1
 800a430:	f109 39ff 	add.w	r9, r9, #4294967295
 800a434:	60a3      	str	r3, [r4, #8]
 800a436:	6873      	ldr	r3, [r6, #4]
 800a438:	3b01      	subs	r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	6073      	str	r3, [r6, #4]
 800a43e:	dd1b      	ble.n	800a478 <_scanf_i+0x150>
 800a440:	6833      	ldr	r3, [r6, #0]
 800a442:	3301      	adds	r3, #1
 800a444:	6033      	str	r3, [r6, #0]
 800a446:	68a3      	ldr	r3, [r4, #8]
 800a448:	3b01      	subs	r3, #1
 800a44a:	60a3      	str	r3, [r4, #8]
 800a44c:	e7d9      	b.n	800a402 <_scanf_i+0xda>
 800a44e:	f1bb 0f02 	cmp.w	fp, #2
 800a452:	d1ae      	bne.n	800a3b2 <_scanf_i+0x8a>
 800a454:	6822      	ldr	r2, [r4, #0]
 800a456:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a45a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a45e:	d1bf      	bne.n	800a3e0 <_scanf_i+0xb8>
 800a460:	2110      	movs	r1, #16
 800a462:	6061      	str	r1, [r4, #4]
 800a464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a468:	e7a2      	b.n	800a3b0 <_scanf_i+0x88>
 800a46a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a46e:	6022      	str	r2, [r4, #0]
 800a470:	780b      	ldrb	r3, [r1, #0]
 800a472:	f805 3b01 	strb.w	r3, [r5], #1
 800a476:	e7de      	b.n	800a436 <_scanf_i+0x10e>
 800a478:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a47c:	4631      	mov	r1, r6
 800a47e:	4650      	mov	r0, sl
 800a480:	4798      	blx	r3
 800a482:	2800      	cmp	r0, #0
 800a484:	d0df      	beq.n	800a446 <_scanf_i+0x11e>
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	05d9      	lsls	r1, r3, #23
 800a48a:	d50d      	bpl.n	800a4a8 <_scanf_i+0x180>
 800a48c:	42bd      	cmp	r5, r7
 800a48e:	d909      	bls.n	800a4a4 <_scanf_i+0x17c>
 800a490:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a494:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a498:	4632      	mov	r2, r6
 800a49a:	4650      	mov	r0, sl
 800a49c:	4798      	blx	r3
 800a49e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a4a2:	464d      	mov	r5, r9
 800a4a4:	42bd      	cmp	r5, r7
 800a4a6:	d028      	beq.n	800a4fa <_scanf_i+0x1d2>
 800a4a8:	6822      	ldr	r2, [r4, #0]
 800a4aa:	f012 0210 	ands.w	r2, r2, #16
 800a4ae:	d113      	bne.n	800a4d8 <_scanf_i+0x1b0>
 800a4b0:	702a      	strb	r2, [r5, #0]
 800a4b2:	6863      	ldr	r3, [r4, #4]
 800a4b4:	9e01      	ldr	r6, [sp, #4]
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	47b0      	blx	r6
 800a4bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a4c0:	6821      	ldr	r1, [r4, #0]
 800a4c2:	1d1a      	adds	r2, r3, #4
 800a4c4:	f8c8 2000 	str.w	r2, [r8]
 800a4c8:	f011 0f20 	tst.w	r1, #32
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	d00f      	beq.n	800a4f0 <_scanf_i+0x1c8>
 800a4d0:	6018      	str	r0, [r3, #0]
 800a4d2:	68e3      	ldr	r3, [r4, #12]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	60e3      	str	r3, [r4, #12]
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	1bed      	subs	r5, r5, r7
 800a4dc:	445d      	add	r5, fp
 800a4de:	442b      	add	r3, r5
 800a4e0:	6123      	str	r3, [r4, #16]
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	b007      	add	sp, #28
 800a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ea:	f04f 0b00 	mov.w	fp, #0
 800a4ee:	e7ca      	b.n	800a486 <_scanf_i+0x15e>
 800a4f0:	07ca      	lsls	r2, r1, #31
 800a4f2:	bf4c      	ite	mi
 800a4f4:	8018      	strhmi	r0, [r3, #0]
 800a4f6:	6018      	strpl	r0, [r3, #0]
 800a4f8:	e7eb      	b.n	800a4d2 <_scanf_i+0x1aa>
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	e7f2      	b.n	800a4e4 <_scanf_i+0x1bc>
 800a4fe:	bf00      	nop
 800a500:	0800b824 	.word	0x0800b824
 800a504:	08009c61 	.word	0x08009c61
 800a508:	0800b335 	.word	0x0800b335
 800a50c:	0800c672 	.word	0x0800c672

0800a510 <__sflush_r>:
 800a510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a518:	0716      	lsls	r6, r2, #28
 800a51a:	4605      	mov	r5, r0
 800a51c:	460c      	mov	r4, r1
 800a51e:	d454      	bmi.n	800a5ca <__sflush_r+0xba>
 800a520:	684b      	ldr	r3, [r1, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	dc02      	bgt.n	800a52c <__sflush_r+0x1c>
 800a526:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a528:	2b00      	cmp	r3, #0
 800a52a:	dd48      	ble.n	800a5be <__sflush_r+0xae>
 800a52c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a52e:	2e00      	cmp	r6, #0
 800a530:	d045      	beq.n	800a5be <__sflush_r+0xae>
 800a532:	2300      	movs	r3, #0
 800a534:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a538:	682f      	ldr	r7, [r5, #0]
 800a53a:	6a21      	ldr	r1, [r4, #32]
 800a53c:	602b      	str	r3, [r5, #0]
 800a53e:	d030      	beq.n	800a5a2 <__sflush_r+0x92>
 800a540:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	0759      	lsls	r1, r3, #29
 800a546:	d505      	bpl.n	800a554 <__sflush_r+0x44>
 800a548:	6863      	ldr	r3, [r4, #4]
 800a54a:	1ad2      	subs	r2, r2, r3
 800a54c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a54e:	b10b      	cbz	r3, 800a554 <__sflush_r+0x44>
 800a550:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a552:	1ad2      	subs	r2, r2, r3
 800a554:	2300      	movs	r3, #0
 800a556:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a558:	6a21      	ldr	r1, [r4, #32]
 800a55a:	4628      	mov	r0, r5
 800a55c:	47b0      	blx	r6
 800a55e:	1c43      	adds	r3, r0, #1
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	d106      	bne.n	800a572 <__sflush_r+0x62>
 800a564:	6829      	ldr	r1, [r5, #0]
 800a566:	291d      	cmp	r1, #29
 800a568:	d82b      	bhi.n	800a5c2 <__sflush_r+0xb2>
 800a56a:	4a2a      	ldr	r2, [pc, #168]	@ (800a614 <__sflush_r+0x104>)
 800a56c:	410a      	asrs	r2, r1
 800a56e:	07d6      	lsls	r6, r2, #31
 800a570:	d427      	bmi.n	800a5c2 <__sflush_r+0xb2>
 800a572:	2200      	movs	r2, #0
 800a574:	6062      	str	r2, [r4, #4]
 800a576:	04d9      	lsls	r1, r3, #19
 800a578:	6922      	ldr	r2, [r4, #16]
 800a57a:	6022      	str	r2, [r4, #0]
 800a57c:	d504      	bpl.n	800a588 <__sflush_r+0x78>
 800a57e:	1c42      	adds	r2, r0, #1
 800a580:	d101      	bne.n	800a586 <__sflush_r+0x76>
 800a582:	682b      	ldr	r3, [r5, #0]
 800a584:	b903      	cbnz	r3, 800a588 <__sflush_r+0x78>
 800a586:	6560      	str	r0, [r4, #84]	@ 0x54
 800a588:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a58a:	602f      	str	r7, [r5, #0]
 800a58c:	b1b9      	cbz	r1, 800a5be <__sflush_r+0xae>
 800a58e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a592:	4299      	cmp	r1, r3
 800a594:	d002      	beq.n	800a59c <__sflush_r+0x8c>
 800a596:	4628      	mov	r0, r5
 800a598:	f7fd ff2e 	bl	80083f8 <_free_r>
 800a59c:	2300      	movs	r3, #0
 800a59e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5a0:	e00d      	b.n	800a5be <__sflush_r+0xae>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	47b0      	blx	r6
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	1c50      	adds	r0, r2, #1
 800a5ac:	d1c9      	bne.n	800a542 <__sflush_r+0x32>
 800a5ae:	682b      	ldr	r3, [r5, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0c6      	beq.n	800a542 <__sflush_r+0x32>
 800a5b4:	2b1d      	cmp	r3, #29
 800a5b6:	d001      	beq.n	800a5bc <__sflush_r+0xac>
 800a5b8:	2b16      	cmp	r3, #22
 800a5ba:	d11e      	bne.n	800a5fa <__sflush_r+0xea>
 800a5bc:	602f      	str	r7, [r5, #0]
 800a5be:	2000      	movs	r0, #0
 800a5c0:	e022      	b.n	800a608 <__sflush_r+0xf8>
 800a5c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5c6:	b21b      	sxth	r3, r3
 800a5c8:	e01b      	b.n	800a602 <__sflush_r+0xf2>
 800a5ca:	690f      	ldr	r7, [r1, #16]
 800a5cc:	2f00      	cmp	r7, #0
 800a5ce:	d0f6      	beq.n	800a5be <__sflush_r+0xae>
 800a5d0:	0793      	lsls	r3, r2, #30
 800a5d2:	680e      	ldr	r6, [r1, #0]
 800a5d4:	bf08      	it	eq
 800a5d6:	694b      	ldreq	r3, [r1, #20]
 800a5d8:	600f      	str	r7, [r1, #0]
 800a5da:	bf18      	it	ne
 800a5dc:	2300      	movne	r3, #0
 800a5de:	eba6 0807 	sub.w	r8, r6, r7
 800a5e2:	608b      	str	r3, [r1, #8]
 800a5e4:	f1b8 0f00 	cmp.w	r8, #0
 800a5e8:	dde9      	ble.n	800a5be <__sflush_r+0xae>
 800a5ea:	6a21      	ldr	r1, [r4, #32]
 800a5ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a5ee:	4643      	mov	r3, r8
 800a5f0:	463a      	mov	r2, r7
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	47b0      	blx	r6
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	dc08      	bgt.n	800a60c <__sflush_r+0xfc>
 800a5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a60c:	4407      	add	r7, r0
 800a60e:	eba8 0800 	sub.w	r8, r8, r0
 800a612:	e7e7      	b.n	800a5e4 <__sflush_r+0xd4>
 800a614:	dfbffffe 	.word	0xdfbffffe

0800a618 <_fflush_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	690b      	ldr	r3, [r1, #16]
 800a61c:	4605      	mov	r5, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	b913      	cbnz	r3, 800a628 <_fflush_r+0x10>
 800a622:	2500      	movs	r5, #0
 800a624:	4628      	mov	r0, r5
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	b118      	cbz	r0, 800a632 <_fflush_r+0x1a>
 800a62a:	6a03      	ldr	r3, [r0, #32]
 800a62c:	b90b      	cbnz	r3, 800a632 <_fflush_r+0x1a>
 800a62e:	f7fc fe2d 	bl	800728c <__sinit>
 800a632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0f3      	beq.n	800a622 <_fflush_r+0xa>
 800a63a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a63c:	07d0      	lsls	r0, r2, #31
 800a63e:	d404      	bmi.n	800a64a <_fflush_r+0x32>
 800a640:	0599      	lsls	r1, r3, #22
 800a642:	d402      	bmi.n	800a64a <_fflush_r+0x32>
 800a644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a646:	f7fd f880 	bl	800774a <__retarget_lock_acquire_recursive>
 800a64a:	4628      	mov	r0, r5
 800a64c:	4621      	mov	r1, r4
 800a64e:	f7ff ff5f 	bl	800a510 <__sflush_r>
 800a652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a654:	07da      	lsls	r2, r3, #31
 800a656:	4605      	mov	r5, r0
 800a658:	d4e4      	bmi.n	800a624 <_fflush_r+0xc>
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	059b      	lsls	r3, r3, #22
 800a65e:	d4e1      	bmi.n	800a624 <_fflush_r+0xc>
 800a660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a662:	f7fd f873 	bl	800774c <__retarget_lock_release_recursive>
 800a666:	e7dd      	b.n	800a624 <_fflush_r+0xc>

0800a668 <__swhatbuf_r>:
 800a668:	b570      	push	{r4, r5, r6, lr}
 800a66a:	460c      	mov	r4, r1
 800a66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a670:	2900      	cmp	r1, #0
 800a672:	b096      	sub	sp, #88	@ 0x58
 800a674:	4615      	mov	r5, r2
 800a676:	461e      	mov	r6, r3
 800a678:	da0d      	bge.n	800a696 <__swhatbuf_r+0x2e>
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a680:	f04f 0100 	mov.w	r1, #0
 800a684:	bf14      	ite	ne
 800a686:	2340      	movne	r3, #64	@ 0x40
 800a688:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a68c:	2000      	movs	r0, #0
 800a68e:	6031      	str	r1, [r6, #0]
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	b016      	add	sp, #88	@ 0x58
 800a694:	bd70      	pop	{r4, r5, r6, pc}
 800a696:	466a      	mov	r2, sp
 800a698:	f000 f9e8 	bl	800aa6c <_fstat_r>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	dbec      	blt.n	800a67a <__swhatbuf_r+0x12>
 800a6a0:	9901      	ldr	r1, [sp, #4]
 800a6a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6aa:	4259      	negs	r1, r3
 800a6ac:	4159      	adcs	r1, r3
 800a6ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6b2:	e7eb      	b.n	800a68c <__swhatbuf_r+0x24>

0800a6b4 <__smakebuf_r>:
 800a6b4:	898b      	ldrh	r3, [r1, #12]
 800a6b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b8:	079d      	lsls	r5, r3, #30
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460c      	mov	r4, r1
 800a6be:	d507      	bpl.n	800a6d0 <__smakebuf_r+0x1c>
 800a6c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	6123      	str	r3, [r4, #16]
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	6163      	str	r3, [r4, #20]
 800a6cc:	b003      	add	sp, #12
 800a6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d0:	ab01      	add	r3, sp, #4
 800a6d2:	466a      	mov	r2, sp
 800a6d4:	f7ff ffc8 	bl	800a668 <__swhatbuf_r>
 800a6d8:	9f00      	ldr	r7, [sp, #0]
 800a6da:	4605      	mov	r5, r0
 800a6dc:	4639      	mov	r1, r7
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7fd fefe 	bl	80084e0 <_malloc_r>
 800a6e4:	b948      	cbnz	r0, 800a6fa <__smakebuf_r+0x46>
 800a6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ea:	059a      	lsls	r2, r3, #22
 800a6ec:	d4ee      	bmi.n	800a6cc <__smakebuf_r+0x18>
 800a6ee:	f023 0303 	bic.w	r3, r3, #3
 800a6f2:	f043 0302 	orr.w	r3, r3, #2
 800a6f6:	81a3      	strh	r3, [r4, #12]
 800a6f8:	e7e2      	b.n	800a6c0 <__smakebuf_r+0xc>
 800a6fa:	89a3      	ldrh	r3, [r4, #12]
 800a6fc:	6020      	str	r0, [r4, #0]
 800a6fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a702:	81a3      	strh	r3, [r4, #12]
 800a704:	9b01      	ldr	r3, [sp, #4]
 800a706:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a70a:	b15b      	cbz	r3, 800a724 <__smakebuf_r+0x70>
 800a70c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a710:	4630      	mov	r0, r6
 800a712:	f000 f9bd 	bl	800aa90 <_isatty_r>
 800a716:	b128      	cbz	r0, 800a724 <__smakebuf_r+0x70>
 800a718:	89a3      	ldrh	r3, [r4, #12]
 800a71a:	f023 0303 	bic.w	r3, r3, #3
 800a71e:	f043 0301 	orr.w	r3, r3, #1
 800a722:	81a3      	strh	r3, [r4, #12]
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	431d      	orrs	r5, r3
 800a728:	81a5      	strh	r5, [r4, #12]
 800a72a:	e7cf      	b.n	800a6cc <__smakebuf_r+0x18>

0800a72c <lflush>:
 800a72c:	898b      	ldrh	r3, [r1, #12]
 800a72e:	f003 0309 	and.w	r3, r3, #9
 800a732:	2b09      	cmp	r3, #9
 800a734:	d103      	bne.n	800a73e <lflush+0x12>
 800a736:	4b03      	ldr	r3, [pc, #12]	@ (800a744 <lflush+0x18>)
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	f7ff bf6d 	b.w	800a618 <_fflush_r>
 800a73e:	2000      	movs	r0, #0
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	20000018 	.word	0x20000018

0800a748 <__srefill_r>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	460c      	mov	r4, r1
 800a74c:	4605      	mov	r5, r0
 800a74e:	b118      	cbz	r0, 800a758 <__srefill_r+0x10>
 800a750:	6a03      	ldr	r3, [r0, #32]
 800a752:	b90b      	cbnz	r3, 800a758 <__srefill_r+0x10>
 800a754:	f7fc fd9a 	bl	800728c <__sinit>
 800a758:	2300      	movs	r3, #0
 800a75a:	6063      	str	r3, [r4, #4]
 800a75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a760:	069e      	lsls	r6, r3, #26
 800a762:	d408      	bmi.n	800a776 <__srefill_r+0x2e>
 800a764:	0758      	lsls	r0, r3, #29
 800a766:	d445      	bmi.n	800a7f4 <__srefill_r+0xac>
 800a768:	06d9      	lsls	r1, r3, #27
 800a76a:	d407      	bmi.n	800a77c <__srefill_r+0x34>
 800a76c:	2209      	movs	r2, #9
 800a76e:	602a      	str	r2, [r5, #0]
 800a770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	f04f 30ff 	mov.w	r0, #4294967295
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	071a      	lsls	r2, r3, #28
 800a77e:	d50b      	bpl.n	800a798 <__srefill_r+0x50>
 800a780:	4621      	mov	r1, r4
 800a782:	4628      	mov	r0, r5
 800a784:	f7ff ff48 	bl	800a618 <_fflush_r>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d1f4      	bne.n	800a776 <__srefill_r+0x2e>
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	60a0      	str	r0, [r4, #8]
 800a790:	f023 0308 	bic.w	r3, r3, #8
 800a794:	81a3      	strh	r3, [r4, #12]
 800a796:	61a0      	str	r0, [r4, #24]
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	f043 0304 	orr.w	r3, r3, #4
 800a79e:	81a3      	strh	r3, [r4, #12]
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	b91b      	cbnz	r3, 800a7ac <__srefill_r+0x64>
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	f7ff ff84 	bl	800a6b4 <__smakebuf_r>
 800a7ac:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800a7b0:	07b3      	lsls	r3, r6, #30
 800a7b2:	d00f      	beq.n	800a7d4 <__srefill_r+0x8c>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	4a1b      	ldr	r2, [pc, #108]	@ (800a824 <__srefill_r+0xdc>)
 800a7b8:	491b      	ldr	r1, [pc, #108]	@ (800a828 <__srefill_r+0xe0>)
 800a7ba:	481c      	ldr	r0, [pc, #112]	@ (800a82c <__srefill_r+0xe4>)
 800a7bc:	81a3      	strh	r3, [r4, #12]
 800a7be:	f7fc fd7d 	bl	80072bc <_fwalk_sglue>
 800a7c2:	81a6      	strh	r6, [r4, #12]
 800a7c4:	f006 0609 	and.w	r6, r6, #9
 800a7c8:	2e09      	cmp	r6, #9
 800a7ca:	d103      	bne.n	800a7d4 <__srefill_r+0x8c>
 800a7cc:	4621      	mov	r1, r4
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f7ff fe9e 	bl	800a510 <__sflush_r>
 800a7d4:	6922      	ldr	r2, [r4, #16]
 800a7d6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800a7d8:	6963      	ldr	r3, [r4, #20]
 800a7da:	6a21      	ldr	r1, [r4, #32]
 800a7dc:	6022      	str	r2, [r4, #0]
 800a7de:	4628      	mov	r0, r5
 800a7e0:	47b0      	blx	r6
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	6060      	str	r0, [r4, #4]
 800a7e6:	dc17      	bgt.n	800a818 <__srefill_r+0xd0>
 800a7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ec:	d116      	bne.n	800a81c <__srefill_r+0xd4>
 800a7ee:	f043 0320 	orr.w	r3, r3, #32
 800a7f2:	e7bf      	b.n	800a774 <__srefill_r+0x2c>
 800a7f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7f6:	2900      	cmp	r1, #0
 800a7f8:	d0d2      	beq.n	800a7a0 <__srefill_r+0x58>
 800a7fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7fe:	4299      	cmp	r1, r3
 800a800:	d002      	beq.n	800a808 <__srefill_r+0xc0>
 800a802:	4628      	mov	r0, r5
 800a804:	f7fd fdf8 	bl	80083f8 <_free_r>
 800a808:	2300      	movs	r3, #0
 800a80a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a80c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a80e:	6063      	str	r3, [r4, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0c5      	beq.n	800a7a0 <__srefill_r+0x58>
 800a814:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a816:	6023      	str	r3, [r4, #0]
 800a818:	2000      	movs	r0, #0
 800a81a:	e7ae      	b.n	800a77a <__srefill_r+0x32>
 800a81c:	2200      	movs	r2, #0
 800a81e:	6062      	str	r2, [r4, #4]
 800a820:	e7a6      	b.n	800a770 <__srefill_r+0x28>
 800a822:	bf00      	nop
 800a824:	2000000c 	.word	0x2000000c
 800a828:	0800a72d 	.word	0x0800a72d
 800a82c:	2000001c 	.word	0x2000001c

0800a830 <__sccl>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	780b      	ldrb	r3, [r1, #0]
 800a834:	4604      	mov	r4, r0
 800a836:	2b5e      	cmp	r3, #94	@ 0x5e
 800a838:	bf0b      	itete	eq
 800a83a:	784b      	ldrbeq	r3, [r1, #1]
 800a83c:	1c4a      	addne	r2, r1, #1
 800a83e:	1c8a      	addeq	r2, r1, #2
 800a840:	2100      	movne	r1, #0
 800a842:	bf08      	it	eq
 800a844:	2101      	moveq	r1, #1
 800a846:	3801      	subs	r0, #1
 800a848:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a84c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a850:	42a8      	cmp	r0, r5
 800a852:	d1fb      	bne.n	800a84c <__sccl+0x1c>
 800a854:	b90b      	cbnz	r3, 800a85a <__sccl+0x2a>
 800a856:	1e50      	subs	r0, r2, #1
 800a858:	bd70      	pop	{r4, r5, r6, pc}
 800a85a:	f081 0101 	eor.w	r1, r1, #1
 800a85e:	54e1      	strb	r1, [r4, r3]
 800a860:	4610      	mov	r0, r2
 800a862:	4602      	mov	r2, r0
 800a864:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a868:	2d2d      	cmp	r5, #45	@ 0x2d
 800a86a:	d005      	beq.n	800a878 <__sccl+0x48>
 800a86c:	2d5d      	cmp	r5, #93	@ 0x5d
 800a86e:	d016      	beq.n	800a89e <__sccl+0x6e>
 800a870:	2d00      	cmp	r5, #0
 800a872:	d0f1      	beq.n	800a858 <__sccl+0x28>
 800a874:	462b      	mov	r3, r5
 800a876:	e7f2      	b.n	800a85e <__sccl+0x2e>
 800a878:	7846      	ldrb	r6, [r0, #1]
 800a87a:	2e5d      	cmp	r6, #93	@ 0x5d
 800a87c:	d0fa      	beq.n	800a874 <__sccl+0x44>
 800a87e:	42b3      	cmp	r3, r6
 800a880:	dcf8      	bgt.n	800a874 <__sccl+0x44>
 800a882:	3002      	adds	r0, #2
 800a884:	461a      	mov	r2, r3
 800a886:	3201      	adds	r2, #1
 800a888:	4296      	cmp	r6, r2
 800a88a:	54a1      	strb	r1, [r4, r2]
 800a88c:	dcfb      	bgt.n	800a886 <__sccl+0x56>
 800a88e:	1af2      	subs	r2, r6, r3
 800a890:	3a01      	subs	r2, #1
 800a892:	1c5d      	adds	r5, r3, #1
 800a894:	42b3      	cmp	r3, r6
 800a896:	bfa8      	it	ge
 800a898:	2200      	movge	r2, #0
 800a89a:	18ab      	adds	r3, r5, r2
 800a89c:	e7e1      	b.n	800a862 <__sccl+0x32>
 800a89e:	4610      	mov	r0, r2
 800a8a0:	e7da      	b.n	800a858 <__sccl+0x28>

0800a8a2 <__submore>:
 800a8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a8aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8ae:	4299      	cmp	r1, r3
 800a8b0:	d11d      	bne.n	800a8ee <__submore+0x4c>
 800a8b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a8b6:	f7fd fe13 	bl	80084e0 <_malloc_r>
 800a8ba:	b918      	cbnz	r0, 800a8c4 <__submore+0x22>
 800a8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a8ca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a8ce:	6360      	str	r0, [r4, #52]	@ 0x34
 800a8d0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a8d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a8d8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a8dc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a8e0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a8e4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a8e8:	6020      	str	r0, [r4, #0]
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	e7e8      	b.n	800a8c0 <__submore+0x1e>
 800a8ee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a8f0:	0077      	lsls	r7, r6, #1
 800a8f2:	463a      	mov	r2, r7
 800a8f4:	f000 fc81 	bl	800b1fa <_realloc_r>
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d0de      	beq.n	800a8bc <__submore+0x1a>
 800a8fe:	eb00 0806 	add.w	r8, r0, r6
 800a902:	4601      	mov	r1, r0
 800a904:	4632      	mov	r2, r6
 800a906:	4640      	mov	r0, r8
 800a908:	f000 f8e2 	bl	800aad0 <memcpy>
 800a90c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a910:	f8c4 8000 	str.w	r8, [r4]
 800a914:	e7e9      	b.n	800a8ea <__submore+0x48>

0800a916 <_ungetc_r>:
 800a916:	b570      	push	{r4, r5, r6, lr}
 800a918:	460d      	mov	r5, r1
 800a91a:	1c69      	adds	r1, r5, #1
 800a91c:	4606      	mov	r6, r0
 800a91e:	4614      	mov	r4, r2
 800a920:	d01e      	beq.n	800a960 <_ungetc_r+0x4a>
 800a922:	b118      	cbz	r0, 800a92c <_ungetc_r+0x16>
 800a924:	6a03      	ldr	r3, [r0, #32]
 800a926:	b90b      	cbnz	r3, 800a92c <_ungetc_r+0x16>
 800a928:	f7fc fcb0 	bl	800728c <__sinit>
 800a92c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a92e:	07da      	lsls	r2, r3, #31
 800a930:	d405      	bmi.n	800a93e <_ungetc_r+0x28>
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	059b      	lsls	r3, r3, #22
 800a936:	d402      	bmi.n	800a93e <_ungetc_r+0x28>
 800a938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a93a:	f7fc ff06 	bl	800774a <__retarget_lock_acquire_recursive>
 800a93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a942:	f023 0220 	bic.w	r2, r3, #32
 800a946:	0758      	lsls	r0, r3, #29
 800a948:	81a2      	strh	r2, [r4, #12]
 800a94a:	d422      	bmi.n	800a992 <_ungetc_r+0x7c>
 800a94c:	06d9      	lsls	r1, r3, #27
 800a94e:	d40a      	bmi.n	800a966 <_ungetc_r+0x50>
 800a950:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a952:	07d2      	lsls	r2, r2, #31
 800a954:	d404      	bmi.n	800a960 <_ungetc_r+0x4a>
 800a956:	0599      	lsls	r1, r3, #22
 800a958:	d402      	bmi.n	800a960 <_ungetc_r+0x4a>
 800a95a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a95c:	f7fc fef6 	bl	800774c <__retarget_lock_release_recursive>
 800a960:	f04f 35ff 	mov.w	r5, #4294967295
 800a964:	e046      	b.n	800a9f4 <_ungetc_r+0xde>
 800a966:	071b      	lsls	r3, r3, #28
 800a968:	d50f      	bpl.n	800a98a <_ungetc_r+0x74>
 800a96a:	4621      	mov	r1, r4
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7ff fe53 	bl	800a618 <_fflush_r>
 800a972:	b120      	cbz	r0, 800a97e <_ungetc_r+0x68>
 800a974:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a976:	07d8      	lsls	r0, r3, #31
 800a978:	d4f2      	bmi.n	800a960 <_ungetc_r+0x4a>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	e7eb      	b.n	800a956 <_ungetc_r+0x40>
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	60a0      	str	r0, [r4, #8]
 800a982:	f023 0308 	bic.w	r3, r3, #8
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	61a0      	str	r0, [r4, #24]
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	f043 0304 	orr.w	r3, r3, #4
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a994:	6862      	ldr	r2, [r4, #4]
 800a996:	b2ed      	uxtb	r5, r5
 800a998:	b1d3      	cbz	r3, 800a9d0 <_ungetc_r+0xba>
 800a99a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a99c:	4293      	cmp	r3, r2
 800a99e:	dc05      	bgt.n	800a9ac <_ungetc_r+0x96>
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff ff7d 	bl	800a8a2 <__submore>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d1e3      	bne.n	800a974 <_ungetc_r+0x5e>
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	1e5a      	subs	r2, r3, #1
 800a9b0:	6022      	str	r2, [r4, #0]
 800a9b2:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a9b6:	6863      	ldr	r3, [r4, #4]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	6063      	str	r3, [r4, #4]
 800a9bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9be:	07da      	lsls	r2, r3, #31
 800a9c0:	d418      	bmi.n	800a9f4 <_ungetc_r+0xde>
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	059b      	lsls	r3, r3, #22
 800a9c6:	d415      	bmi.n	800a9f4 <_ungetc_r+0xde>
 800a9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ca:	f7fc febf 	bl	800774c <__retarget_lock_release_recursive>
 800a9ce:	e011      	b.n	800a9f4 <_ungetc_r+0xde>
 800a9d0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800a9d2:	6920      	ldr	r0, [r4, #16]
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	f001 0101 	and.w	r1, r1, #1
 800a9da:	b168      	cbz	r0, 800a9f8 <_ungetc_r+0xe2>
 800a9dc:	4298      	cmp	r0, r3
 800a9de:	d20b      	bcs.n	800a9f8 <_ungetc_r+0xe2>
 800a9e0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800a9e4:	42a8      	cmp	r0, r5
 800a9e6:	d107      	bne.n	800a9f8 <_ungetc_r+0xe2>
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	3201      	adds	r2, #1
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	6062      	str	r2, [r4, #4]
 800a9f0:	2900      	cmp	r1, #0
 800a9f2:	d0e6      	beq.n	800a9c2 <_ungetc_r+0xac>
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}
 800a9f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a9fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa00:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa02:	2303      	movs	r3, #3
 800aa04:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aa06:	4623      	mov	r3, r4
 800aa08:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	2301      	movs	r3, #1
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	e7ed      	b.n	800a9f0 <_ungetc_r+0xda>

0800aa14 <memmove>:
 800aa14:	4288      	cmp	r0, r1
 800aa16:	b510      	push	{r4, lr}
 800aa18:	eb01 0402 	add.w	r4, r1, r2
 800aa1c:	d902      	bls.n	800aa24 <memmove+0x10>
 800aa1e:	4284      	cmp	r4, r0
 800aa20:	4623      	mov	r3, r4
 800aa22:	d807      	bhi.n	800aa34 <memmove+0x20>
 800aa24:	1e43      	subs	r3, r0, #1
 800aa26:	42a1      	cmp	r1, r4
 800aa28:	d008      	beq.n	800aa3c <memmove+0x28>
 800aa2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa32:	e7f8      	b.n	800aa26 <memmove+0x12>
 800aa34:	4402      	add	r2, r0
 800aa36:	4601      	mov	r1, r0
 800aa38:	428a      	cmp	r2, r1
 800aa3a:	d100      	bne.n	800aa3e <memmove+0x2a>
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa46:	e7f7      	b.n	800aa38 <memmove+0x24>

0800aa48 <strncmp>:
 800aa48:	b510      	push	{r4, lr}
 800aa4a:	b16a      	cbz	r2, 800aa68 <strncmp+0x20>
 800aa4c:	3901      	subs	r1, #1
 800aa4e:	1884      	adds	r4, r0, r2
 800aa50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d103      	bne.n	800aa64 <strncmp+0x1c>
 800aa5c:	42a0      	cmp	r0, r4
 800aa5e:	d001      	beq.n	800aa64 <strncmp+0x1c>
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	d1f5      	bne.n	800aa50 <strncmp+0x8>
 800aa64:	1ad0      	subs	r0, r2, r3
 800aa66:	bd10      	pop	{r4, pc}
 800aa68:	4610      	mov	r0, r2
 800aa6a:	e7fc      	b.n	800aa66 <strncmp+0x1e>

0800aa6c <_fstat_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d07      	ldr	r5, [pc, #28]	@ (800aa8c <_fstat_r+0x20>)
 800aa70:	2300      	movs	r3, #0
 800aa72:	4604      	mov	r4, r0
 800aa74:	4608      	mov	r0, r1
 800aa76:	4611      	mov	r1, r2
 800aa78:	602b      	str	r3, [r5, #0]
 800aa7a:	f7f7 fc95 	bl	80023a8 <_fstat>
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	d102      	bne.n	800aa88 <_fstat_r+0x1c>
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	b103      	cbz	r3, 800aa88 <_fstat_r+0x1c>
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	bd38      	pop	{r3, r4, r5, pc}
 800aa8a:	bf00      	nop
 800aa8c:	200004b8 	.word	0x200004b8

0800aa90 <_isatty_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4d06      	ldr	r5, [pc, #24]	@ (800aaac <_isatty_r+0x1c>)
 800aa94:	2300      	movs	r3, #0
 800aa96:	4604      	mov	r4, r0
 800aa98:	4608      	mov	r0, r1
 800aa9a:	602b      	str	r3, [r5, #0]
 800aa9c:	f7f7 fc94 	bl	80023c8 <_isatty>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d102      	bne.n	800aaaa <_isatty_r+0x1a>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	b103      	cbz	r3, 800aaaa <_isatty_r+0x1a>
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	200004b8 	.word	0x200004b8

0800aab0 <_sbrk_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d06      	ldr	r5, [pc, #24]	@ (800aacc <_sbrk_r+0x1c>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	f7f7 fc9c 	bl	80023f8 <_sbrk>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_sbrk_r+0x1a>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_sbrk_r+0x1a>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	200004b8 	.word	0x200004b8

0800aad0 <memcpy>:
 800aad0:	440a      	add	r2, r1
 800aad2:	4291      	cmp	r1, r2
 800aad4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aad8:	d100      	bne.n	800aadc <memcpy+0xc>
 800aada:	4770      	bx	lr
 800aadc:	b510      	push	{r4, lr}
 800aade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aae6:	4291      	cmp	r1, r2
 800aae8:	d1f9      	bne.n	800aade <memcpy+0xe>
 800aaea:	bd10      	pop	{r4, pc}
 800aaec:	0000      	movs	r0, r0
	...

0800aaf0 <nan>:
 800aaf0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aaf8 <nan+0x8>
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	00000000 	.word	0x00000000
 800aafc:	7ff80000 	.word	0x7ff80000

0800ab00 <__assert_func>:
 800ab00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab02:	4614      	mov	r4, r2
 800ab04:	461a      	mov	r2, r3
 800ab06:	4b09      	ldr	r3, [pc, #36]	@ (800ab2c <__assert_func+0x2c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	68d8      	ldr	r0, [r3, #12]
 800ab0e:	b954      	cbnz	r4, 800ab26 <__assert_func+0x26>
 800ab10:	4b07      	ldr	r3, [pc, #28]	@ (800ab30 <__assert_func+0x30>)
 800ab12:	461c      	mov	r4, r3
 800ab14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab18:	9100      	str	r1, [sp, #0]
 800ab1a:	462b      	mov	r3, r5
 800ab1c:	4905      	ldr	r1, [pc, #20]	@ (800ab34 <__assert_func+0x34>)
 800ab1e:	f000 fc19 	bl	800b354 <fiprintf>
 800ab22:	f000 fc29 	bl	800b378 <abort>
 800ab26:	4b04      	ldr	r3, [pc, #16]	@ (800ab38 <__assert_func+0x38>)
 800ab28:	e7f4      	b.n	800ab14 <__assert_func+0x14>
 800ab2a:	bf00      	nop
 800ab2c:	20000018 	.word	0x20000018
 800ab30:	0800c6c0 	.word	0x0800c6c0
 800ab34:	0800c692 	.word	0x0800c692
 800ab38:	0800c685 	.word	0x0800c685

0800ab3c <_calloc_r>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	fba1 5402 	umull	r5, r4, r1, r2
 800ab42:	b93c      	cbnz	r4, 800ab54 <_calloc_r+0x18>
 800ab44:	4629      	mov	r1, r5
 800ab46:	f7fd fccb 	bl	80084e0 <_malloc_r>
 800ab4a:	4606      	mov	r6, r0
 800ab4c:	b928      	cbnz	r0, 800ab5a <_calloc_r+0x1e>
 800ab4e:	2600      	movs	r6, #0
 800ab50:	4630      	mov	r0, r6
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	220c      	movs	r2, #12
 800ab56:	6002      	str	r2, [r0, #0]
 800ab58:	e7f9      	b.n	800ab4e <_calloc_r+0x12>
 800ab5a:	462a      	mov	r2, r5
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	f7fc fd67 	bl	8007630 <memset>
 800ab62:	e7f5      	b.n	800ab50 <_calloc_r+0x14>

0800ab64 <rshift>:
 800ab64:	6903      	ldr	r3, [r0, #16]
 800ab66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab72:	f100 0414 	add.w	r4, r0, #20
 800ab76:	dd45      	ble.n	800ac04 <rshift+0xa0>
 800ab78:	f011 011f 	ands.w	r1, r1, #31
 800ab7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab84:	d10c      	bne.n	800aba0 <rshift+0x3c>
 800ab86:	f100 0710 	add.w	r7, r0, #16
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	42b1      	cmp	r1, r6
 800ab8e:	d334      	bcc.n	800abfa <rshift+0x96>
 800ab90:	1a9b      	subs	r3, r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	1eea      	subs	r2, r5, #3
 800ab96:	4296      	cmp	r6, r2
 800ab98:	bf38      	it	cc
 800ab9a:	2300      	movcc	r3, #0
 800ab9c:	4423      	add	r3, r4
 800ab9e:	e015      	b.n	800abcc <rshift+0x68>
 800aba0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aba4:	f1c1 0820 	rsb	r8, r1, #32
 800aba8:	40cf      	lsrs	r7, r1
 800abaa:	f105 0e04 	add.w	lr, r5, #4
 800abae:	46a1      	mov	r9, r4
 800abb0:	4576      	cmp	r6, lr
 800abb2:	46f4      	mov	ip, lr
 800abb4:	d815      	bhi.n	800abe2 <rshift+0x7e>
 800abb6:	1a9a      	subs	r2, r3, r2
 800abb8:	0092      	lsls	r2, r2, #2
 800abba:	3a04      	subs	r2, #4
 800abbc:	3501      	adds	r5, #1
 800abbe:	42ae      	cmp	r6, r5
 800abc0:	bf38      	it	cc
 800abc2:	2200      	movcc	r2, #0
 800abc4:	18a3      	adds	r3, r4, r2
 800abc6:	50a7      	str	r7, [r4, r2]
 800abc8:	b107      	cbz	r7, 800abcc <rshift+0x68>
 800abca:	3304      	adds	r3, #4
 800abcc:	1b1a      	subs	r2, r3, r4
 800abce:	42a3      	cmp	r3, r4
 800abd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abd4:	bf08      	it	eq
 800abd6:	2300      	moveq	r3, #0
 800abd8:	6102      	str	r2, [r0, #16]
 800abda:	bf08      	it	eq
 800abdc:	6143      	streq	r3, [r0, #20]
 800abde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abe2:	f8dc c000 	ldr.w	ip, [ip]
 800abe6:	fa0c fc08 	lsl.w	ip, ip, r8
 800abea:	ea4c 0707 	orr.w	r7, ip, r7
 800abee:	f849 7b04 	str.w	r7, [r9], #4
 800abf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abf6:	40cf      	lsrs	r7, r1
 800abf8:	e7da      	b.n	800abb0 <rshift+0x4c>
 800abfa:	f851 cb04 	ldr.w	ip, [r1], #4
 800abfe:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac02:	e7c3      	b.n	800ab8c <rshift+0x28>
 800ac04:	4623      	mov	r3, r4
 800ac06:	e7e1      	b.n	800abcc <rshift+0x68>

0800ac08 <__hexdig_fun>:
 800ac08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac0c:	2b09      	cmp	r3, #9
 800ac0e:	d802      	bhi.n	800ac16 <__hexdig_fun+0xe>
 800ac10:	3820      	subs	r0, #32
 800ac12:	b2c0      	uxtb	r0, r0
 800ac14:	4770      	bx	lr
 800ac16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac1a:	2b05      	cmp	r3, #5
 800ac1c:	d801      	bhi.n	800ac22 <__hexdig_fun+0x1a>
 800ac1e:	3847      	subs	r0, #71	@ 0x47
 800ac20:	e7f7      	b.n	800ac12 <__hexdig_fun+0xa>
 800ac22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac26:	2b05      	cmp	r3, #5
 800ac28:	d801      	bhi.n	800ac2e <__hexdig_fun+0x26>
 800ac2a:	3827      	subs	r0, #39	@ 0x27
 800ac2c:	e7f1      	b.n	800ac12 <__hexdig_fun+0xa>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	4770      	bx	lr
	...

0800ac34 <__gethex>:
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	b085      	sub	sp, #20
 800ac3a:	468a      	mov	sl, r1
 800ac3c:	9302      	str	r3, [sp, #8]
 800ac3e:	680b      	ldr	r3, [r1, #0]
 800ac40:	9001      	str	r0, [sp, #4]
 800ac42:	4690      	mov	r8, r2
 800ac44:	1c9c      	adds	r4, r3, #2
 800ac46:	46a1      	mov	r9, r4
 800ac48:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac4c:	2830      	cmp	r0, #48	@ 0x30
 800ac4e:	d0fa      	beq.n	800ac46 <__gethex+0x12>
 800ac50:	eba9 0303 	sub.w	r3, r9, r3
 800ac54:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac58:	f7ff ffd6 	bl	800ac08 <__hexdig_fun>
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d168      	bne.n	800ad34 <__gethex+0x100>
 800ac62:	49a0      	ldr	r1, [pc, #640]	@ (800aee4 <__gethex+0x2b0>)
 800ac64:	2201      	movs	r2, #1
 800ac66:	4648      	mov	r0, r9
 800ac68:	f7ff feee 	bl	800aa48 <strncmp>
 800ac6c:	4607      	mov	r7, r0
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d167      	bne.n	800ad42 <__gethex+0x10e>
 800ac72:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac76:	4626      	mov	r6, r4
 800ac78:	f7ff ffc6 	bl	800ac08 <__hexdig_fun>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d062      	beq.n	800ad46 <__gethex+0x112>
 800ac80:	4623      	mov	r3, r4
 800ac82:	7818      	ldrb	r0, [r3, #0]
 800ac84:	2830      	cmp	r0, #48	@ 0x30
 800ac86:	4699      	mov	r9, r3
 800ac88:	f103 0301 	add.w	r3, r3, #1
 800ac8c:	d0f9      	beq.n	800ac82 <__gethex+0x4e>
 800ac8e:	f7ff ffbb 	bl	800ac08 <__hexdig_fun>
 800ac92:	fab0 f580 	clz	r5, r0
 800ac96:	096d      	lsrs	r5, r5, #5
 800ac98:	f04f 0b01 	mov.w	fp, #1
 800ac9c:	464a      	mov	r2, r9
 800ac9e:	4616      	mov	r6, r2
 800aca0:	3201      	adds	r2, #1
 800aca2:	7830      	ldrb	r0, [r6, #0]
 800aca4:	f7ff ffb0 	bl	800ac08 <__hexdig_fun>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1f8      	bne.n	800ac9e <__gethex+0x6a>
 800acac:	498d      	ldr	r1, [pc, #564]	@ (800aee4 <__gethex+0x2b0>)
 800acae:	2201      	movs	r2, #1
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff fec9 	bl	800aa48 <strncmp>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d13f      	bne.n	800ad3a <__gethex+0x106>
 800acba:	b944      	cbnz	r4, 800acce <__gethex+0x9a>
 800acbc:	1c74      	adds	r4, r6, #1
 800acbe:	4622      	mov	r2, r4
 800acc0:	4616      	mov	r6, r2
 800acc2:	3201      	adds	r2, #1
 800acc4:	7830      	ldrb	r0, [r6, #0]
 800acc6:	f7ff ff9f 	bl	800ac08 <__hexdig_fun>
 800acca:	2800      	cmp	r0, #0
 800accc:	d1f8      	bne.n	800acc0 <__gethex+0x8c>
 800acce:	1ba4      	subs	r4, r4, r6
 800acd0:	00a7      	lsls	r7, r4, #2
 800acd2:	7833      	ldrb	r3, [r6, #0]
 800acd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800acd8:	2b50      	cmp	r3, #80	@ 0x50
 800acda:	d13e      	bne.n	800ad5a <__gethex+0x126>
 800acdc:	7873      	ldrb	r3, [r6, #1]
 800acde:	2b2b      	cmp	r3, #43	@ 0x2b
 800ace0:	d033      	beq.n	800ad4a <__gethex+0x116>
 800ace2:	2b2d      	cmp	r3, #45	@ 0x2d
 800ace4:	d034      	beq.n	800ad50 <__gethex+0x11c>
 800ace6:	1c71      	adds	r1, r6, #1
 800ace8:	2400      	movs	r4, #0
 800acea:	7808      	ldrb	r0, [r1, #0]
 800acec:	f7ff ff8c 	bl	800ac08 <__hexdig_fun>
 800acf0:	1e43      	subs	r3, r0, #1
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	2b18      	cmp	r3, #24
 800acf6:	d830      	bhi.n	800ad5a <__gethex+0x126>
 800acf8:	f1a0 0210 	sub.w	r2, r0, #16
 800acfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad00:	f7ff ff82 	bl	800ac08 <__hexdig_fun>
 800ad04:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad08:	fa5f fc8c 	uxtb.w	ip, ip
 800ad0c:	f1bc 0f18 	cmp.w	ip, #24
 800ad10:	f04f 030a 	mov.w	r3, #10
 800ad14:	d91e      	bls.n	800ad54 <__gethex+0x120>
 800ad16:	b104      	cbz	r4, 800ad1a <__gethex+0xe6>
 800ad18:	4252      	negs	r2, r2
 800ad1a:	4417      	add	r7, r2
 800ad1c:	f8ca 1000 	str.w	r1, [sl]
 800ad20:	b1ed      	cbz	r5, 800ad5e <__gethex+0x12a>
 800ad22:	f1bb 0f00 	cmp.w	fp, #0
 800ad26:	bf0c      	ite	eq
 800ad28:	2506      	moveq	r5, #6
 800ad2a:	2500      	movne	r5, #0
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	b005      	add	sp, #20
 800ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad34:	2500      	movs	r5, #0
 800ad36:	462c      	mov	r4, r5
 800ad38:	e7b0      	b.n	800ac9c <__gethex+0x68>
 800ad3a:	2c00      	cmp	r4, #0
 800ad3c:	d1c7      	bne.n	800acce <__gethex+0x9a>
 800ad3e:	4627      	mov	r7, r4
 800ad40:	e7c7      	b.n	800acd2 <__gethex+0x9e>
 800ad42:	464e      	mov	r6, r9
 800ad44:	462f      	mov	r7, r5
 800ad46:	2501      	movs	r5, #1
 800ad48:	e7c3      	b.n	800acd2 <__gethex+0x9e>
 800ad4a:	2400      	movs	r4, #0
 800ad4c:	1cb1      	adds	r1, r6, #2
 800ad4e:	e7cc      	b.n	800acea <__gethex+0xb6>
 800ad50:	2401      	movs	r4, #1
 800ad52:	e7fb      	b.n	800ad4c <__gethex+0x118>
 800ad54:	fb03 0002 	mla	r0, r3, r2, r0
 800ad58:	e7ce      	b.n	800acf8 <__gethex+0xc4>
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	e7de      	b.n	800ad1c <__gethex+0xe8>
 800ad5e:	eba6 0309 	sub.w	r3, r6, r9
 800ad62:	3b01      	subs	r3, #1
 800ad64:	4629      	mov	r1, r5
 800ad66:	2b07      	cmp	r3, #7
 800ad68:	dc0a      	bgt.n	800ad80 <__gethex+0x14c>
 800ad6a:	9801      	ldr	r0, [sp, #4]
 800ad6c:	f7fd fc44 	bl	80085f8 <_Balloc>
 800ad70:	4604      	mov	r4, r0
 800ad72:	b940      	cbnz	r0, 800ad86 <__gethex+0x152>
 800ad74:	4b5c      	ldr	r3, [pc, #368]	@ (800aee8 <__gethex+0x2b4>)
 800ad76:	4602      	mov	r2, r0
 800ad78:	21e4      	movs	r1, #228	@ 0xe4
 800ad7a:	485c      	ldr	r0, [pc, #368]	@ (800aeec <__gethex+0x2b8>)
 800ad7c:	f7ff fec0 	bl	800ab00 <__assert_func>
 800ad80:	3101      	adds	r1, #1
 800ad82:	105b      	asrs	r3, r3, #1
 800ad84:	e7ef      	b.n	800ad66 <__gethex+0x132>
 800ad86:	f100 0a14 	add.w	sl, r0, #20
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	4655      	mov	r5, sl
 800ad8e:	469b      	mov	fp, r3
 800ad90:	45b1      	cmp	r9, r6
 800ad92:	d337      	bcc.n	800ae04 <__gethex+0x1d0>
 800ad94:	f845 bb04 	str.w	fp, [r5], #4
 800ad98:	eba5 050a 	sub.w	r5, r5, sl
 800ad9c:	10ad      	asrs	r5, r5, #2
 800ad9e:	6125      	str	r5, [r4, #16]
 800ada0:	4658      	mov	r0, fp
 800ada2:	f7fd fd1b 	bl	80087dc <__hi0bits>
 800ada6:	016d      	lsls	r5, r5, #5
 800ada8:	f8d8 6000 	ldr.w	r6, [r8]
 800adac:	1a2d      	subs	r5, r5, r0
 800adae:	42b5      	cmp	r5, r6
 800adb0:	dd54      	ble.n	800ae5c <__gethex+0x228>
 800adb2:	1bad      	subs	r5, r5, r6
 800adb4:	4629      	mov	r1, r5
 800adb6:	4620      	mov	r0, r4
 800adb8:	f7fe f8af 	bl	8008f1a <__any_on>
 800adbc:	4681      	mov	r9, r0
 800adbe:	b178      	cbz	r0, 800ade0 <__gethex+0x1ac>
 800adc0:	1e6b      	subs	r3, r5, #1
 800adc2:	1159      	asrs	r1, r3, #5
 800adc4:	f003 021f 	and.w	r2, r3, #31
 800adc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800adcc:	f04f 0901 	mov.w	r9, #1
 800add0:	fa09 f202 	lsl.w	r2, r9, r2
 800add4:	420a      	tst	r2, r1
 800add6:	d003      	beq.n	800ade0 <__gethex+0x1ac>
 800add8:	454b      	cmp	r3, r9
 800adda:	dc36      	bgt.n	800ae4a <__gethex+0x216>
 800addc:	f04f 0902 	mov.w	r9, #2
 800ade0:	4629      	mov	r1, r5
 800ade2:	4620      	mov	r0, r4
 800ade4:	f7ff febe 	bl	800ab64 <rshift>
 800ade8:	442f      	add	r7, r5
 800adea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adee:	42bb      	cmp	r3, r7
 800adf0:	da42      	bge.n	800ae78 <__gethex+0x244>
 800adf2:	9801      	ldr	r0, [sp, #4]
 800adf4:	4621      	mov	r1, r4
 800adf6:	f7fd fc3f 	bl	8008678 <_Bfree>
 800adfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adfc:	2300      	movs	r3, #0
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	25a3      	movs	r5, #163	@ 0xa3
 800ae02:	e793      	b.n	800ad2c <__gethex+0xf8>
 800ae04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae08:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae0a:	d012      	beq.n	800ae32 <__gethex+0x1fe>
 800ae0c:	2b20      	cmp	r3, #32
 800ae0e:	d104      	bne.n	800ae1a <__gethex+0x1e6>
 800ae10:	f845 bb04 	str.w	fp, [r5], #4
 800ae14:	f04f 0b00 	mov.w	fp, #0
 800ae18:	465b      	mov	r3, fp
 800ae1a:	7830      	ldrb	r0, [r6, #0]
 800ae1c:	9303      	str	r3, [sp, #12]
 800ae1e:	f7ff fef3 	bl	800ac08 <__hexdig_fun>
 800ae22:	9b03      	ldr	r3, [sp, #12]
 800ae24:	f000 000f 	and.w	r0, r0, #15
 800ae28:	4098      	lsls	r0, r3
 800ae2a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae2e:	3304      	adds	r3, #4
 800ae30:	e7ae      	b.n	800ad90 <__gethex+0x15c>
 800ae32:	45b1      	cmp	r9, r6
 800ae34:	d8ea      	bhi.n	800ae0c <__gethex+0x1d8>
 800ae36:	492b      	ldr	r1, [pc, #172]	@ (800aee4 <__gethex+0x2b0>)
 800ae38:	9303      	str	r3, [sp, #12]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f7ff fe03 	bl	800aa48 <strncmp>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d1e1      	bne.n	800ae0c <__gethex+0x1d8>
 800ae48:	e7a2      	b.n	800ad90 <__gethex+0x15c>
 800ae4a:	1ea9      	subs	r1, r5, #2
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f7fe f864 	bl	8008f1a <__any_on>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d0c2      	beq.n	800addc <__gethex+0x1a8>
 800ae56:	f04f 0903 	mov.w	r9, #3
 800ae5a:	e7c1      	b.n	800ade0 <__gethex+0x1ac>
 800ae5c:	da09      	bge.n	800ae72 <__gethex+0x23e>
 800ae5e:	1b75      	subs	r5, r6, r5
 800ae60:	4621      	mov	r1, r4
 800ae62:	9801      	ldr	r0, [sp, #4]
 800ae64:	462a      	mov	r2, r5
 800ae66:	f7fd fe1f 	bl	8008aa8 <__lshift>
 800ae6a:	1b7f      	subs	r7, r7, r5
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	f100 0a14 	add.w	sl, r0, #20
 800ae72:	f04f 0900 	mov.w	r9, #0
 800ae76:	e7b8      	b.n	800adea <__gethex+0x1b6>
 800ae78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae7c:	42bd      	cmp	r5, r7
 800ae7e:	dd6f      	ble.n	800af60 <__gethex+0x32c>
 800ae80:	1bed      	subs	r5, r5, r7
 800ae82:	42ae      	cmp	r6, r5
 800ae84:	dc34      	bgt.n	800aef0 <__gethex+0x2bc>
 800ae86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d022      	beq.n	800aed4 <__gethex+0x2a0>
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d024      	beq.n	800aedc <__gethex+0x2a8>
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d115      	bne.n	800aec2 <__gethex+0x28e>
 800ae96:	42ae      	cmp	r6, r5
 800ae98:	d113      	bne.n	800aec2 <__gethex+0x28e>
 800ae9a:	2e01      	cmp	r6, #1
 800ae9c:	d10b      	bne.n	800aeb6 <__gethex+0x282>
 800ae9e:	9a02      	ldr	r2, [sp, #8]
 800aea0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aea4:	6013      	str	r3, [r2, #0]
 800aea6:	2301      	movs	r3, #1
 800aea8:	6123      	str	r3, [r4, #16]
 800aeaa:	f8ca 3000 	str.w	r3, [sl]
 800aeae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeb0:	2562      	movs	r5, #98	@ 0x62
 800aeb2:	601c      	str	r4, [r3, #0]
 800aeb4:	e73a      	b.n	800ad2c <__gethex+0xf8>
 800aeb6:	1e71      	subs	r1, r6, #1
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f7fe f82e 	bl	8008f1a <__any_on>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d1ed      	bne.n	800ae9e <__gethex+0x26a>
 800aec2:	9801      	ldr	r0, [sp, #4]
 800aec4:	4621      	mov	r1, r4
 800aec6:	f7fd fbd7 	bl	8008678 <_Bfree>
 800aeca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aecc:	2300      	movs	r3, #0
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	2550      	movs	r5, #80	@ 0x50
 800aed2:	e72b      	b.n	800ad2c <__gethex+0xf8>
 800aed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1f3      	bne.n	800aec2 <__gethex+0x28e>
 800aeda:	e7e0      	b.n	800ae9e <__gethex+0x26a>
 800aedc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1dd      	bne.n	800ae9e <__gethex+0x26a>
 800aee2:	e7ee      	b.n	800aec2 <__gethex+0x28e>
 800aee4:	0800c4f8 	.word	0x0800c4f8
 800aee8:	0800c38f 	.word	0x0800c38f
 800aeec:	0800c6c1 	.word	0x0800c6c1
 800aef0:	1e6f      	subs	r7, r5, #1
 800aef2:	f1b9 0f00 	cmp.w	r9, #0
 800aef6:	d130      	bne.n	800af5a <__gethex+0x326>
 800aef8:	b127      	cbz	r7, 800af04 <__gethex+0x2d0>
 800aefa:	4639      	mov	r1, r7
 800aefc:	4620      	mov	r0, r4
 800aefe:	f7fe f80c 	bl	8008f1a <__any_on>
 800af02:	4681      	mov	r9, r0
 800af04:	117a      	asrs	r2, r7, #5
 800af06:	2301      	movs	r3, #1
 800af08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af0c:	f007 071f 	and.w	r7, r7, #31
 800af10:	40bb      	lsls	r3, r7
 800af12:	4213      	tst	r3, r2
 800af14:	4629      	mov	r1, r5
 800af16:	4620      	mov	r0, r4
 800af18:	bf18      	it	ne
 800af1a:	f049 0902 	orrne.w	r9, r9, #2
 800af1e:	f7ff fe21 	bl	800ab64 <rshift>
 800af22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af26:	1b76      	subs	r6, r6, r5
 800af28:	2502      	movs	r5, #2
 800af2a:	f1b9 0f00 	cmp.w	r9, #0
 800af2e:	d047      	beq.n	800afc0 <__gethex+0x38c>
 800af30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af34:	2b02      	cmp	r3, #2
 800af36:	d015      	beq.n	800af64 <__gethex+0x330>
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d017      	beq.n	800af6c <__gethex+0x338>
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d109      	bne.n	800af54 <__gethex+0x320>
 800af40:	f019 0f02 	tst.w	r9, #2
 800af44:	d006      	beq.n	800af54 <__gethex+0x320>
 800af46:	f8da 3000 	ldr.w	r3, [sl]
 800af4a:	ea49 0903 	orr.w	r9, r9, r3
 800af4e:	f019 0f01 	tst.w	r9, #1
 800af52:	d10e      	bne.n	800af72 <__gethex+0x33e>
 800af54:	f045 0510 	orr.w	r5, r5, #16
 800af58:	e032      	b.n	800afc0 <__gethex+0x38c>
 800af5a:	f04f 0901 	mov.w	r9, #1
 800af5e:	e7d1      	b.n	800af04 <__gethex+0x2d0>
 800af60:	2501      	movs	r5, #1
 800af62:	e7e2      	b.n	800af2a <__gethex+0x2f6>
 800af64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af66:	f1c3 0301 	rsb	r3, r3, #1
 800af6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0f0      	beq.n	800af54 <__gethex+0x320>
 800af72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af76:	f104 0314 	add.w	r3, r4, #20
 800af7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af82:	f04f 0c00 	mov.w	ip, #0
 800af86:	4618      	mov	r0, r3
 800af88:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af90:	d01b      	beq.n	800afca <__gethex+0x396>
 800af92:	3201      	adds	r2, #1
 800af94:	6002      	str	r2, [r0, #0]
 800af96:	2d02      	cmp	r5, #2
 800af98:	f104 0314 	add.w	r3, r4, #20
 800af9c:	d13c      	bne.n	800b018 <__gethex+0x3e4>
 800af9e:	f8d8 2000 	ldr.w	r2, [r8]
 800afa2:	3a01      	subs	r2, #1
 800afa4:	42b2      	cmp	r2, r6
 800afa6:	d109      	bne.n	800afbc <__gethex+0x388>
 800afa8:	1171      	asrs	r1, r6, #5
 800afaa:	2201      	movs	r2, #1
 800afac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afb0:	f006 061f 	and.w	r6, r6, #31
 800afb4:	fa02 f606 	lsl.w	r6, r2, r6
 800afb8:	421e      	tst	r6, r3
 800afba:	d13a      	bne.n	800b032 <__gethex+0x3fe>
 800afbc:	f045 0520 	orr.w	r5, r5, #32
 800afc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc2:	601c      	str	r4, [r3, #0]
 800afc4:	9b02      	ldr	r3, [sp, #8]
 800afc6:	601f      	str	r7, [r3, #0]
 800afc8:	e6b0      	b.n	800ad2c <__gethex+0xf8>
 800afca:	4299      	cmp	r1, r3
 800afcc:	f843 cc04 	str.w	ip, [r3, #-4]
 800afd0:	d8d9      	bhi.n	800af86 <__gethex+0x352>
 800afd2:	68a3      	ldr	r3, [r4, #8]
 800afd4:	459b      	cmp	fp, r3
 800afd6:	db17      	blt.n	800b008 <__gethex+0x3d4>
 800afd8:	6861      	ldr	r1, [r4, #4]
 800afda:	9801      	ldr	r0, [sp, #4]
 800afdc:	3101      	adds	r1, #1
 800afde:	f7fd fb0b 	bl	80085f8 <_Balloc>
 800afe2:	4681      	mov	r9, r0
 800afe4:	b918      	cbnz	r0, 800afee <__gethex+0x3ba>
 800afe6:	4b1a      	ldr	r3, [pc, #104]	@ (800b050 <__gethex+0x41c>)
 800afe8:	4602      	mov	r2, r0
 800afea:	2184      	movs	r1, #132	@ 0x84
 800afec:	e6c5      	b.n	800ad7a <__gethex+0x146>
 800afee:	6922      	ldr	r2, [r4, #16]
 800aff0:	3202      	adds	r2, #2
 800aff2:	f104 010c 	add.w	r1, r4, #12
 800aff6:	0092      	lsls	r2, r2, #2
 800aff8:	300c      	adds	r0, #12
 800affa:	f7ff fd69 	bl	800aad0 <memcpy>
 800affe:	4621      	mov	r1, r4
 800b000:	9801      	ldr	r0, [sp, #4]
 800b002:	f7fd fb39 	bl	8008678 <_Bfree>
 800b006:	464c      	mov	r4, r9
 800b008:	6923      	ldr	r3, [r4, #16]
 800b00a:	1c5a      	adds	r2, r3, #1
 800b00c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b010:	6122      	str	r2, [r4, #16]
 800b012:	2201      	movs	r2, #1
 800b014:	615a      	str	r2, [r3, #20]
 800b016:	e7be      	b.n	800af96 <__gethex+0x362>
 800b018:	6922      	ldr	r2, [r4, #16]
 800b01a:	455a      	cmp	r2, fp
 800b01c:	dd0b      	ble.n	800b036 <__gethex+0x402>
 800b01e:	2101      	movs	r1, #1
 800b020:	4620      	mov	r0, r4
 800b022:	f7ff fd9f 	bl	800ab64 <rshift>
 800b026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b02a:	3701      	adds	r7, #1
 800b02c:	42bb      	cmp	r3, r7
 800b02e:	f6ff aee0 	blt.w	800adf2 <__gethex+0x1be>
 800b032:	2501      	movs	r5, #1
 800b034:	e7c2      	b.n	800afbc <__gethex+0x388>
 800b036:	f016 061f 	ands.w	r6, r6, #31
 800b03a:	d0fa      	beq.n	800b032 <__gethex+0x3fe>
 800b03c:	4453      	add	r3, sl
 800b03e:	f1c6 0620 	rsb	r6, r6, #32
 800b042:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b046:	f7fd fbc9 	bl	80087dc <__hi0bits>
 800b04a:	42b0      	cmp	r0, r6
 800b04c:	dbe7      	blt.n	800b01e <__gethex+0x3ea>
 800b04e:	e7f0      	b.n	800b032 <__gethex+0x3fe>
 800b050:	0800c38f 	.word	0x0800c38f

0800b054 <L_shift>:
 800b054:	f1c2 0208 	rsb	r2, r2, #8
 800b058:	0092      	lsls	r2, r2, #2
 800b05a:	b570      	push	{r4, r5, r6, lr}
 800b05c:	f1c2 0620 	rsb	r6, r2, #32
 800b060:	6843      	ldr	r3, [r0, #4]
 800b062:	6804      	ldr	r4, [r0, #0]
 800b064:	fa03 f506 	lsl.w	r5, r3, r6
 800b068:	432c      	orrs	r4, r5
 800b06a:	40d3      	lsrs	r3, r2
 800b06c:	6004      	str	r4, [r0, #0]
 800b06e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b072:	4288      	cmp	r0, r1
 800b074:	d3f4      	bcc.n	800b060 <L_shift+0xc>
 800b076:	bd70      	pop	{r4, r5, r6, pc}

0800b078 <__match>:
 800b078:	b530      	push	{r4, r5, lr}
 800b07a:	6803      	ldr	r3, [r0, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b082:	b914      	cbnz	r4, 800b08a <__match+0x12>
 800b084:	6003      	str	r3, [r0, #0]
 800b086:	2001      	movs	r0, #1
 800b088:	bd30      	pop	{r4, r5, pc}
 800b08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b08e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b092:	2d19      	cmp	r5, #25
 800b094:	bf98      	it	ls
 800b096:	3220      	addls	r2, #32
 800b098:	42a2      	cmp	r2, r4
 800b09a:	d0f0      	beq.n	800b07e <__match+0x6>
 800b09c:	2000      	movs	r0, #0
 800b09e:	e7f3      	b.n	800b088 <__match+0x10>

0800b0a0 <__hexnan>:
 800b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	680b      	ldr	r3, [r1, #0]
 800b0a6:	6801      	ldr	r1, [r0, #0]
 800b0a8:	115e      	asrs	r6, r3, #5
 800b0aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0ae:	f013 031f 	ands.w	r3, r3, #31
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	bf18      	it	ne
 800b0b6:	3604      	addne	r6, #4
 800b0b8:	2500      	movs	r5, #0
 800b0ba:	1f37      	subs	r7, r6, #4
 800b0bc:	4682      	mov	sl, r0
 800b0be:	4690      	mov	r8, r2
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0c6:	46b9      	mov	r9, r7
 800b0c8:	463c      	mov	r4, r7
 800b0ca:	9502      	str	r5, [sp, #8]
 800b0cc:	46ab      	mov	fp, r5
 800b0ce:	784a      	ldrb	r2, [r1, #1]
 800b0d0:	1c4b      	adds	r3, r1, #1
 800b0d2:	9303      	str	r3, [sp, #12]
 800b0d4:	b342      	cbz	r2, 800b128 <__hexnan+0x88>
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	9105      	str	r1, [sp, #20]
 800b0da:	9204      	str	r2, [sp, #16]
 800b0dc:	f7ff fd94 	bl	800ac08 <__hexdig_fun>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d151      	bne.n	800b188 <__hexnan+0xe8>
 800b0e4:	9a04      	ldr	r2, [sp, #16]
 800b0e6:	9905      	ldr	r1, [sp, #20]
 800b0e8:	2a20      	cmp	r2, #32
 800b0ea:	d818      	bhi.n	800b11e <__hexnan+0x7e>
 800b0ec:	9b02      	ldr	r3, [sp, #8]
 800b0ee:	459b      	cmp	fp, r3
 800b0f0:	dd13      	ble.n	800b11a <__hexnan+0x7a>
 800b0f2:	454c      	cmp	r4, r9
 800b0f4:	d206      	bcs.n	800b104 <__hexnan+0x64>
 800b0f6:	2d07      	cmp	r5, #7
 800b0f8:	dc04      	bgt.n	800b104 <__hexnan+0x64>
 800b0fa:	462a      	mov	r2, r5
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7ff ffa8 	bl	800b054 <L_shift>
 800b104:	4544      	cmp	r4, r8
 800b106:	d952      	bls.n	800b1ae <__hexnan+0x10e>
 800b108:	2300      	movs	r3, #0
 800b10a:	f1a4 0904 	sub.w	r9, r4, #4
 800b10e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b112:	f8cd b008 	str.w	fp, [sp, #8]
 800b116:	464c      	mov	r4, r9
 800b118:	461d      	mov	r5, r3
 800b11a:	9903      	ldr	r1, [sp, #12]
 800b11c:	e7d7      	b.n	800b0ce <__hexnan+0x2e>
 800b11e:	2a29      	cmp	r2, #41	@ 0x29
 800b120:	d157      	bne.n	800b1d2 <__hexnan+0x132>
 800b122:	3102      	adds	r1, #2
 800b124:	f8ca 1000 	str.w	r1, [sl]
 800b128:	f1bb 0f00 	cmp.w	fp, #0
 800b12c:	d051      	beq.n	800b1d2 <__hexnan+0x132>
 800b12e:	454c      	cmp	r4, r9
 800b130:	d206      	bcs.n	800b140 <__hexnan+0xa0>
 800b132:	2d07      	cmp	r5, #7
 800b134:	dc04      	bgt.n	800b140 <__hexnan+0xa0>
 800b136:	462a      	mov	r2, r5
 800b138:	4649      	mov	r1, r9
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7ff ff8a 	bl	800b054 <L_shift>
 800b140:	4544      	cmp	r4, r8
 800b142:	d936      	bls.n	800b1b2 <__hexnan+0x112>
 800b144:	f1a8 0204 	sub.w	r2, r8, #4
 800b148:	4623      	mov	r3, r4
 800b14a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b14e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b152:	429f      	cmp	r7, r3
 800b154:	d2f9      	bcs.n	800b14a <__hexnan+0xaa>
 800b156:	1b3b      	subs	r3, r7, r4
 800b158:	f023 0303 	bic.w	r3, r3, #3
 800b15c:	3304      	adds	r3, #4
 800b15e:	3401      	adds	r4, #1
 800b160:	3e03      	subs	r6, #3
 800b162:	42b4      	cmp	r4, r6
 800b164:	bf88      	it	hi
 800b166:	2304      	movhi	r3, #4
 800b168:	4443      	add	r3, r8
 800b16a:	2200      	movs	r2, #0
 800b16c:	f843 2b04 	str.w	r2, [r3], #4
 800b170:	429f      	cmp	r7, r3
 800b172:	d2fb      	bcs.n	800b16c <__hexnan+0xcc>
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	b91b      	cbnz	r3, 800b180 <__hexnan+0xe0>
 800b178:	4547      	cmp	r7, r8
 800b17a:	d128      	bne.n	800b1ce <__hexnan+0x12e>
 800b17c:	2301      	movs	r3, #1
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	2005      	movs	r0, #5
 800b182:	b007      	add	sp, #28
 800b184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b188:	3501      	adds	r5, #1
 800b18a:	2d08      	cmp	r5, #8
 800b18c:	f10b 0b01 	add.w	fp, fp, #1
 800b190:	dd06      	ble.n	800b1a0 <__hexnan+0x100>
 800b192:	4544      	cmp	r4, r8
 800b194:	d9c1      	bls.n	800b11a <__hexnan+0x7a>
 800b196:	2300      	movs	r3, #0
 800b198:	f844 3c04 	str.w	r3, [r4, #-4]
 800b19c:	2501      	movs	r5, #1
 800b19e:	3c04      	subs	r4, #4
 800b1a0:	6822      	ldr	r2, [r4, #0]
 800b1a2:	f000 000f 	and.w	r0, r0, #15
 800b1a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1aa:	6020      	str	r0, [r4, #0]
 800b1ac:	e7b5      	b.n	800b11a <__hexnan+0x7a>
 800b1ae:	2508      	movs	r5, #8
 800b1b0:	e7b3      	b.n	800b11a <__hexnan+0x7a>
 800b1b2:	9b01      	ldr	r3, [sp, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d0dd      	beq.n	800b174 <__hexnan+0xd4>
 800b1b8:	f1c3 0320 	rsb	r3, r3, #32
 800b1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c0:	40da      	lsrs	r2, r3
 800b1c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1cc:	e7d2      	b.n	800b174 <__hexnan+0xd4>
 800b1ce:	3f04      	subs	r7, #4
 800b1d0:	e7d0      	b.n	800b174 <__hexnan+0xd4>
 800b1d2:	2004      	movs	r0, #4
 800b1d4:	e7d5      	b.n	800b182 <__hexnan+0xe2>

0800b1d6 <__ascii_mbtowc>:
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	b901      	cbnz	r1, 800b1dc <__ascii_mbtowc+0x6>
 800b1da:	a901      	add	r1, sp, #4
 800b1dc:	b142      	cbz	r2, 800b1f0 <__ascii_mbtowc+0x1a>
 800b1de:	b14b      	cbz	r3, 800b1f4 <__ascii_mbtowc+0x1e>
 800b1e0:	7813      	ldrb	r3, [r2, #0]
 800b1e2:	600b      	str	r3, [r1, #0]
 800b1e4:	7812      	ldrb	r2, [r2, #0]
 800b1e6:	1e10      	subs	r0, r2, #0
 800b1e8:	bf18      	it	ne
 800b1ea:	2001      	movne	r0, #1
 800b1ec:	b002      	add	sp, #8
 800b1ee:	4770      	bx	lr
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	e7fb      	b.n	800b1ec <__ascii_mbtowc+0x16>
 800b1f4:	f06f 0001 	mvn.w	r0, #1
 800b1f8:	e7f8      	b.n	800b1ec <__ascii_mbtowc+0x16>

0800b1fa <_realloc_r>:
 800b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fe:	4680      	mov	r8, r0
 800b200:	4615      	mov	r5, r2
 800b202:	460c      	mov	r4, r1
 800b204:	b921      	cbnz	r1, 800b210 <_realloc_r+0x16>
 800b206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b20a:	4611      	mov	r1, r2
 800b20c:	f7fd b968 	b.w	80084e0 <_malloc_r>
 800b210:	b92a      	cbnz	r2, 800b21e <_realloc_r+0x24>
 800b212:	f7fd f8f1 	bl	80083f8 <_free_r>
 800b216:	2400      	movs	r4, #0
 800b218:	4620      	mov	r0, r4
 800b21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b21e:	f000 f8b2 	bl	800b386 <_malloc_usable_size_r>
 800b222:	4285      	cmp	r5, r0
 800b224:	4606      	mov	r6, r0
 800b226:	d802      	bhi.n	800b22e <_realloc_r+0x34>
 800b228:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b22c:	d8f4      	bhi.n	800b218 <_realloc_r+0x1e>
 800b22e:	4629      	mov	r1, r5
 800b230:	4640      	mov	r0, r8
 800b232:	f7fd f955 	bl	80084e0 <_malloc_r>
 800b236:	4607      	mov	r7, r0
 800b238:	2800      	cmp	r0, #0
 800b23a:	d0ec      	beq.n	800b216 <_realloc_r+0x1c>
 800b23c:	42b5      	cmp	r5, r6
 800b23e:	462a      	mov	r2, r5
 800b240:	4621      	mov	r1, r4
 800b242:	bf28      	it	cs
 800b244:	4632      	movcs	r2, r6
 800b246:	f7ff fc43 	bl	800aad0 <memcpy>
 800b24a:	4621      	mov	r1, r4
 800b24c:	4640      	mov	r0, r8
 800b24e:	f7fd f8d3 	bl	80083f8 <_free_r>
 800b252:	463c      	mov	r4, r7
 800b254:	e7e0      	b.n	800b218 <_realloc_r+0x1e>
	...

0800b258 <_strtoul_l.constprop.0>:
 800b258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b25c:	4e34      	ldr	r6, [pc, #208]	@ (800b330 <_strtoul_l.constprop.0+0xd8>)
 800b25e:	4686      	mov	lr, r0
 800b260:	460d      	mov	r5, r1
 800b262:	4628      	mov	r0, r5
 800b264:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b268:	5d37      	ldrb	r7, [r6, r4]
 800b26a:	f017 0708 	ands.w	r7, r7, #8
 800b26e:	d1f8      	bne.n	800b262 <_strtoul_l.constprop.0+0xa>
 800b270:	2c2d      	cmp	r4, #45	@ 0x2d
 800b272:	d12f      	bne.n	800b2d4 <_strtoul_l.constprop.0+0x7c>
 800b274:	782c      	ldrb	r4, [r5, #0]
 800b276:	2701      	movs	r7, #1
 800b278:	1c85      	adds	r5, r0, #2
 800b27a:	f033 0010 	bics.w	r0, r3, #16
 800b27e:	d109      	bne.n	800b294 <_strtoul_l.constprop.0+0x3c>
 800b280:	2c30      	cmp	r4, #48	@ 0x30
 800b282:	d12c      	bne.n	800b2de <_strtoul_l.constprop.0+0x86>
 800b284:	7828      	ldrb	r0, [r5, #0]
 800b286:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b28a:	2858      	cmp	r0, #88	@ 0x58
 800b28c:	d127      	bne.n	800b2de <_strtoul_l.constprop.0+0x86>
 800b28e:	786c      	ldrb	r4, [r5, #1]
 800b290:	2310      	movs	r3, #16
 800b292:	3502      	adds	r5, #2
 800b294:	f04f 38ff 	mov.w	r8, #4294967295
 800b298:	2600      	movs	r6, #0
 800b29a:	fbb8 f8f3 	udiv	r8, r8, r3
 800b29e:	fb03 f908 	mul.w	r9, r3, r8
 800b2a2:	ea6f 0909 	mvn.w	r9, r9
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b2ac:	f1bc 0f09 	cmp.w	ip, #9
 800b2b0:	d81c      	bhi.n	800b2ec <_strtoul_l.constprop.0+0x94>
 800b2b2:	4664      	mov	r4, ip
 800b2b4:	42a3      	cmp	r3, r4
 800b2b6:	dd2a      	ble.n	800b30e <_strtoul_l.constprop.0+0xb6>
 800b2b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b2bc:	d007      	beq.n	800b2ce <_strtoul_l.constprop.0+0x76>
 800b2be:	4580      	cmp	r8, r0
 800b2c0:	d322      	bcc.n	800b308 <_strtoul_l.constprop.0+0xb0>
 800b2c2:	d101      	bne.n	800b2c8 <_strtoul_l.constprop.0+0x70>
 800b2c4:	45a1      	cmp	r9, r4
 800b2c6:	db1f      	blt.n	800b308 <_strtoul_l.constprop.0+0xb0>
 800b2c8:	fb00 4003 	mla	r0, r0, r3, r4
 800b2cc:	2601      	movs	r6, #1
 800b2ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2d2:	e7e9      	b.n	800b2a8 <_strtoul_l.constprop.0+0x50>
 800b2d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2d6:	bf04      	itt	eq
 800b2d8:	782c      	ldrbeq	r4, [r5, #0]
 800b2da:	1c85      	addeq	r5, r0, #2
 800b2dc:	e7cd      	b.n	800b27a <_strtoul_l.constprop.0+0x22>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1d8      	bne.n	800b294 <_strtoul_l.constprop.0+0x3c>
 800b2e2:	2c30      	cmp	r4, #48	@ 0x30
 800b2e4:	bf0c      	ite	eq
 800b2e6:	2308      	moveq	r3, #8
 800b2e8:	230a      	movne	r3, #10
 800b2ea:	e7d3      	b.n	800b294 <_strtoul_l.constprop.0+0x3c>
 800b2ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b2f0:	f1bc 0f19 	cmp.w	ip, #25
 800b2f4:	d801      	bhi.n	800b2fa <_strtoul_l.constprop.0+0xa2>
 800b2f6:	3c37      	subs	r4, #55	@ 0x37
 800b2f8:	e7dc      	b.n	800b2b4 <_strtoul_l.constprop.0+0x5c>
 800b2fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b2fe:	f1bc 0f19 	cmp.w	ip, #25
 800b302:	d804      	bhi.n	800b30e <_strtoul_l.constprop.0+0xb6>
 800b304:	3c57      	subs	r4, #87	@ 0x57
 800b306:	e7d5      	b.n	800b2b4 <_strtoul_l.constprop.0+0x5c>
 800b308:	f04f 36ff 	mov.w	r6, #4294967295
 800b30c:	e7df      	b.n	800b2ce <_strtoul_l.constprop.0+0x76>
 800b30e:	1c73      	adds	r3, r6, #1
 800b310:	d106      	bne.n	800b320 <_strtoul_l.constprop.0+0xc8>
 800b312:	2322      	movs	r3, #34	@ 0x22
 800b314:	f8ce 3000 	str.w	r3, [lr]
 800b318:	4630      	mov	r0, r6
 800b31a:	b932      	cbnz	r2, 800b32a <_strtoul_l.constprop.0+0xd2>
 800b31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b320:	b107      	cbz	r7, 800b324 <_strtoul_l.constprop.0+0xcc>
 800b322:	4240      	negs	r0, r0
 800b324:	2a00      	cmp	r2, #0
 800b326:	d0f9      	beq.n	800b31c <_strtoul_l.constprop.0+0xc4>
 800b328:	b106      	cbz	r6, 800b32c <_strtoul_l.constprop.0+0xd4>
 800b32a:	1e69      	subs	r1, r5, #1
 800b32c:	6011      	str	r1, [r2, #0]
 800b32e:	e7f5      	b.n	800b31c <_strtoul_l.constprop.0+0xc4>
 800b330:	0800c551 	.word	0x0800c551

0800b334 <_strtoul_r>:
 800b334:	f7ff bf90 	b.w	800b258 <_strtoul_l.constprop.0>

0800b338 <__ascii_wctomb>:
 800b338:	4603      	mov	r3, r0
 800b33a:	4608      	mov	r0, r1
 800b33c:	b141      	cbz	r1, 800b350 <__ascii_wctomb+0x18>
 800b33e:	2aff      	cmp	r2, #255	@ 0xff
 800b340:	d904      	bls.n	800b34c <__ascii_wctomb+0x14>
 800b342:	228a      	movs	r2, #138	@ 0x8a
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	f04f 30ff 	mov.w	r0, #4294967295
 800b34a:	4770      	bx	lr
 800b34c:	700a      	strb	r2, [r1, #0]
 800b34e:	2001      	movs	r0, #1
 800b350:	4770      	bx	lr
	...

0800b354 <fiprintf>:
 800b354:	b40e      	push	{r1, r2, r3}
 800b356:	b503      	push	{r0, r1, lr}
 800b358:	4601      	mov	r1, r0
 800b35a:	ab03      	add	r3, sp, #12
 800b35c:	4805      	ldr	r0, [pc, #20]	@ (800b374 <fiprintf+0x20>)
 800b35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b362:	6800      	ldr	r0, [r0, #0]
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	f000 f83f 	bl	800b3e8 <_vfiprintf_r>
 800b36a:	b002      	add	sp, #8
 800b36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b370:	b003      	add	sp, #12
 800b372:	4770      	bx	lr
 800b374:	20000018 	.word	0x20000018

0800b378 <abort>:
 800b378:	b508      	push	{r3, lr}
 800b37a:	2006      	movs	r0, #6
 800b37c:	f000 f974 	bl	800b668 <raise>
 800b380:	2001      	movs	r0, #1
 800b382:	f7f6 ffb7 	bl	80022f4 <_exit>

0800b386 <_malloc_usable_size_r>:
 800b386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38a:	1f18      	subs	r0, r3, #4
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	bfbc      	itt	lt
 800b390:	580b      	ldrlt	r3, [r1, r0]
 800b392:	18c0      	addlt	r0, r0, r3
 800b394:	4770      	bx	lr

0800b396 <__sfputc_r>:
 800b396:	6893      	ldr	r3, [r2, #8]
 800b398:	3b01      	subs	r3, #1
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	b410      	push	{r4}
 800b39e:	6093      	str	r3, [r2, #8]
 800b3a0:	da08      	bge.n	800b3b4 <__sfputc_r+0x1e>
 800b3a2:	6994      	ldr	r4, [r2, #24]
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	db01      	blt.n	800b3ac <__sfputc_r+0x16>
 800b3a8:	290a      	cmp	r1, #10
 800b3aa:	d103      	bne.n	800b3b4 <__sfputc_r+0x1e>
 800b3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b0:	f7fc b8a9 	b.w	8007506 <__swbuf_r>
 800b3b4:	6813      	ldr	r3, [r2, #0]
 800b3b6:	1c58      	adds	r0, r3, #1
 800b3b8:	6010      	str	r0, [r2, #0]
 800b3ba:	7019      	strb	r1, [r3, #0]
 800b3bc:	4608      	mov	r0, r1
 800b3be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <__sfputs_r>:
 800b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	4614      	mov	r4, r2
 800b3cc:	18d5      	adds	r5, r2, r3
 800b3ce:	42ac      	cmp	r4, r5
 800b3d0:	d101      	bne.n	800b3d6 <__sfputs_r+0x12>
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	e007      	b.n	800b3e6 <__sfputs_r+0x22>
 800b3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3da:	463a      	mov	r2, r7
 800b3dc:	4630      	mov	r0, r6
 800b3de:	f7ff ffda 	bl	800b396 <__sfputc_r>
 800b3e2:	1c43      	adds	r3, r0, #1
 800b3e4:	d1f3      	bne.n	800b3ce <__sfputs_r+0xa>
 800b3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3e8 <_vfiprintf_r>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	460d      	mov	r5, r1
 800b3ee:	b09d      	sub	sp, #116	@ 0x74
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	4698      	mov	r8, r3
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	b118      	cbz	r0, 800b400 <_vfiprintf_r+0x18>
 800b3f8:	6a03      	ldr	r3, [r0, #32]
 800b3fa:	b90b      	cbnz	r3, 800b400 <_vfiprintf_r+0x18>
 800b3fc:	f7fb ff46 	bl	800728c <__sinit>
 800b400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b402:	07d9      	lsls	r1, r3, #31
 800b404:	d405      	bmi.n	800b412 <_vfiprintf_r+0x2a>
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	059a      	lsls	r2, r3, #22
 800b40a:	d402      	bmi.n	800b412 <_vfiprintf_r+0x2a>
 800b40c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b40e:	f7fc f99c 	bl	800774a <__retarget_lock_acquire_recursive>
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	071b      	lsls	r3, r3, #28
 800b416:	d501      	bpl.n	800b41c <_vfiprintf_r+0x34>
 800b418:	692b      	ldr	r3, [r5, #16]
 800b41a:	b99b      	cbnz	r3, 800b444 <_vfiprintf_r+0x5c>
 800b41c:	4629      	mov	r1, r5
 800b41e:	4630      	mov	r0, r6
 800b420:	f7fc f8b0 	bl	8007584 <__swsetup_r>
 800b424:	b170      	cbz	r0, 800b444 <_vfiprintf_r+0x5c>
 800b426:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b428:	07dc      	lsls	r4, r3, #31
 800b42a:	d504      	bpl.n	800b436 <_vfiprintf_r+0x4e>
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295
 800b430:	b01d      	add	sp, #116	@ 0x74
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b436:	89ab      	ldrh	r3, [r5, #12]
 800b438:	0598      	lsls	r0, r3, #22
 800b43a:	d4f7      	bmi.n	800b42c <_vfiprintf_r+0x44>
 800b43c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b43e:	f7fc f985 	bl	800774c <__retarget_lock_release_recursive>
 800b442:	e7f3      	b.n	800b42c <_vfiprintf_r+0x44>
 800b444:	2300      	movs	r3, #0
 800b446:	9309      	str	r3, [sp, #36]	@ 0x24
 800b448:	2320      	movs	r3, #32
 800b44a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b44e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b452:	2330      	movs	r3, #48	@ 0x30
 800b454:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b604 <_vfiprintf_r+0x21c>
 800b458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b45c:	f04f 0901 	mov.w	r9, #1
 800b460:	4623      	mov	r3, r4
 800b462:	469a      	mov	sl, r3
 800b464:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b468:	b10a      	cbz	r2, 800b46e <_vfiprintf_r+0x86>
 800b46a:	2a25      	cmp	r2, #37	@ 0x25
 800b46c:	d1f9      	bne.n	800b462 <_vfiprintf_r+0x7a>
 800b46e:	ebba 0b04 	subs.w	fp, sl, r4
 800b472:	d00b      	beq.n	800b48c <_vfiprintf_r+0xa4>
 800b474:	465b      	mov	r3, fp
 800b476:	4622      	mov	r2, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	4630      	mov	r0, r6
 800b47c:	f7ff ffa2 	bl	800b3c4 <__sfputs_r>
 800b480:	3001      	adds	r0, #1
 800b482:	f000 80a7 	beq.w	800b5d4 <_vfiprintf_r+0x1ec>
 800b486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b488:	445a      	add	r2, fp
 800b48a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b48c:	f89a 3000 	ldrb.w	r3, [sl]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 809f 	beq.w	800b5d4 <_vfiprintf_r+0x1ec>
 800b496:	2300      	movs	r3, #0
 800b498:	f04f 32ff 	mov.w	r2, #4294967295
 800b49c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a0:	f10a 0a01 	add.w	sl, sl, #1
 800b4a4:	9304      	str	r3, [sp, #16]
 800b4a6:	9307      	str	r3, [sp, #28]
 800b4a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4ae:	4654      	mov	r4, sl
 800b4b0:	2205      	movs	r2, #5
 800b4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b6:	4853      	ldr	r0, [pc, #332]	@ (800b604 <_vfiprintf_r+0x21c>)
 800b4b8:	f7f4 fe9a 	bl	80001f0 <memchr>
 800b4bc:	9a04      	ldr	r2, [sp, #16]
 800b4be:	b9d8      	cbnz	r0, 800b4f8 <_vfiprintf_r+0x110>
 800b4c0:	06d1      	lsls	r1, r2, #27
 800b4c2:	bf44      	itt	mi
 800b4c4:	2320      	movmi	r3, #32
 800b4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4ca:	0713      	lsls	r3, r2, #28
 800b4cc:	bf44      	itt	mi
 800b4ce:	232b      	movmi	r3, #43	@ 0x2b
 800b4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4da:	d015      	beq.n	800b508 <_vfiprintf_r+0x120>
 800b4dc:	9a07      	ldr	r2, [sp, #28]
 800b4de:	4654      	mov	r4, sl
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	f04f 0c0a 	mov.w	ip, #10
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ec:	3b30      	subs	r3, #48	@ 0x30
 800b4ee:	2b09      	cmp	r3, #9
 800b4f0:	d94b      	bls.n	800b58a <_vfiprintf_r+0x1a2>
 800b4f2:	b1b0      	cbz	r0, 800b522 <_vfiprintf_r+0x13a>
 800b4f4:	9207      	str	r2, [sp, #28]
 800b4f6:	e014      	b.n	800b522 <_vfiprintf_r+0x13a>
 800b4f8:	eba0 0308 	sub.w	r3, r0, r8
 800b4fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b500:	4313      	orrs	r3, r2
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	46a2      	mov	sl, r4
 800b506:	e7d2      	b.n	800b4ae <_vfiprintf_r+0xc6>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	1d19      	adds	r1, r3, #4
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	9103      	str	r1, [sp, #12]
 800b510:	2b00      	cmp	r3, #0
 800b512:	bfbb      	ittet	lt
 800b514:	425b      	neglt	r3, r3
 800b516:	f042 0202 	orrlt.w	r2, r2, #2
 800b51a:	9307      	strge	r3, [sp, #28]
 800b51c:	9307      	strlt	r3, [sp, #28]
 800b51e:	bfb8      	it	lt
 800b520:	9204      	strlt	r2, [sp, #16]
 800b522:	7823      	ldrb	r3, [r4, #0]
 800b524:	2b2e      	cmp	r3, #46	@ 0x2e
 800b526:	d10a      	bne.n	800b53e <_vfiprintf_r+0x156>
 800b528:	7863      	ldrb	r3, [r4, #1]
 800b52a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b52c:	d132      	bne.n	800b594 <_vfiprintf_r+0x1ac>
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	9203      	str	r2, [sp, #12]
 800b536:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b53a:	3402      	adds	r4, #2
 800b53c:	9305      	str	r3, [sp, #20]
 800b53e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b614 <_vfiprintf_r+0x22c>
 800b542:	7821      	ldrb	r1, [r4, #0]
 800b544:	2203      	movs	r2, #3
 800b546:	4650      	mov	r0, sl
 800b548:	f7f4 fe52 	bl	80001f0 <memchr>
 800b54c:	b138      	cbz	r0, 800b55e <_vfiprintf_r+0x176>
 800b54e:	9b04      	ldr	r3, [sp, #16]
 800b550:	eba0 000a 	sub.w	r0, r0, sl
 800b554:	2240      	movs	r2, #64	@ 0x40
 800b556:	4082      	lsls	r2, r0
 800b558:	4313      	orrs	r3, r2
 800b55a:	3401      	adds	r4, #1
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b562:	4829      	ldr	r0, [pc, #164]	@ (800b608 <_vfiprintf_r+0x220>)
 800b564:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b568:	2206      	movs	r2, #6
 800b56a:	f7f4 fe41 	bl	80001f0 <memchr>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d03f      	beq.n	800b5f2 <_vfiprintf_r+0x20a>
 800b572:	4b26      	ldr	r3, [pc, #152]	@ (800b60c <_vfiprintf_r+0x224>)
 800b574:	bb1b      	cbnz	r3, 800b5be <_vfiprintf_r+0x1d6>
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	3307      	adds	r3, #7
 800b57a:	f023 0307 	bic.w	r3, r3, #7
 800b57e:	3308      	adds	r3, #8
 800b580:	9303      	str	r3, [sp, #12]
 800b582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b584:	443b      	add	r3, r7
 800b586:	9309      	str	r3, [sp, #36]	@ 0x24
 800b588:	e76a      	b.n	800b460 <_vfiprintf_r+0x78>
 800b58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b58e:	460c      	mov	r4, r1
 800b590:	2001      	movs	r0, #1
 800b592:	e7a8      	b.n	800b4e6 <_vfiprintf_r+0xfe>
 800b594:	2300      	movs	r3, #0
 800b596:	3401      	adds	r4, #1
 800b598:	9305      	str	r3, [sp, #20]
 800b59a:	4619      	mov	r1, r3
 800b59c:	f04f 0c0a 	mov.w	ip, #10
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a6:	3a30      	subs	r2, #48	@ 0x30
 800b5a8:	2a09      	cmp	r2, #9
 800b5aa:	d903      	bls.n	800b5b4 <_vfiprintf_r+0x1cc>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0c6      	beq.n	800b53e <_vfiprintf_r+0x156>
 800b5b0:	9105      	str	r1, [sp, #20]
 800b5b2:	e7c4      	b.n	800b53e <_vfiprintf_r+0x156>
 800b5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e7f0      	b.n	800b5a0 <_vfiprintf_r+0x1b8>
 800b5be:	ab03      	add	r3, sp, #12
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	462a      	mov	r2, r5
 800b5c4:	4b12      	ldr	r3, [pc, #72]	@ (800b610 <_vfiprintf_r+0x228>)
 800b5c6:	a904      	add	r1, sp, #16
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7fb f807 	bl	80065dc <_printf_float>
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	1c78      	adds	r0, r7, #1
 800b5d2:	d1d6      	bne.n	800b582 <_vfiprintf_r+0x19a>
 800b5d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5d6:	07d9      	lsls	r1, r3, #31
 800b5d8:	d405      	bmi.n	800b5e6 <_vfiprintf_r+0x1fe>
 800b5da:	89ab      	ldrh	r3, [r5, #12]
 800b5dc:	059a      	lsls	r2, r3, #22
 800b5de:	d402      	bmi.n	800b5e6 <_vfiprintf_r+0x1fe>
 800b5e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5e2:	f7fc f8b3 	bl	800774c <__retarget_lock_release_recursive>
 800b5e6:	89ab      	ldrh	r3, [r5, #12]
 800b5e8:	065b      	lsls	r3, r3, #25
 800b5ea:	f53f af1f 	bmi.w	800b42c <_vfiprintf_r+0x44>
 800b5ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5f0:	e71e      	b.n	800b430 <_vfiprintf_r+0x48>
 800b5f2:	ab03      	add	r3, sp, #12
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	462a      	mov	r2, r5
 800b5f8:	4b05      	ldr	r3, [pc, #20]	@ (800b610 <_vfiprintf_r+0x228>)
 800b5fa:	a904      	add	r1, sp, #16
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7fb fa85 	bl	8006b0c <_printf_i>
 800b602:	e7e4      	b.n	800b5ce <_vfiprintf_r+0x1e6>
 800b604:	0800c651 	.word	0x0800c651
 800b608:	0800c65b 	.word	0x0800c65b
 800b60c:	080065dd 	.word	0x080065dd
 800b610:	0800b3c5 	.word	0x0800b3c5
 800b614:	0800c657 	.word	0x0800c657

0800b618 <_raise_r>:
 800b618:	291f      	cmp	r1, #31
 800b61a:	b538      	push	{r3, r4, r5, lr}
 800b61c:	4605      	mov	r5, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	d904      	bls.n	800b62c <_raise_r+0x14>
 800b622:	2316      	movs	r3, #22
 800b624:	6003      	str	r3, [r0, #0]
 800b626:	f04f 30ff 	mov.w	r0, #4294967295
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b62e:	b112      	cbz	r2, 800b636 <_raise_r+0x1e>
 800b630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b634:	b94b      	cbnz	r3, 800b64a <_raise_r+0x32>
 800b636:	4628      	mov	r0, r5
 800b638:	f000 f830 	bl	800b69c <_getpid_r>
 800b63c:	4622      	mov	r2, r4
 800b63e:	4601      	mov	r1, r0
 800b640:	4628      	mov	r0, r5
 800b642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b646:	f000 b817 	b.w	800b678 <_kill_r>
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d00a      	beq.n	800b664 <_raise_r+0x4c>
 800b64e:	1c59      	adds	r1, r3, #1
 800b650:	d103      	bne.n	800b65a <_raise_r+0x42>
 800b652:	2316      	movs	r3, #22
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	2001      	movs	r0, #1
 800b658:	e7e7      	b.n	800b62a <_raise_r+0x12>
 800b65a:	2100      	movs	r1, #0
 800b65c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b660:	4620      	mov	r0, r4
 800b662:	4798      	blx	r3
 800b664:	2000      	movs	r0, #0
 800b666:	e7e0      	b.n	800b62a <_raise_r+0x12>

0800b668 <raise>:
 800b668:	4b02      	ldr	r3, [pc, #8]	@ (800b674 <raise+0xc>)
 800b66a:	4601      	mov	r1, r0
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	f7ff bfd3 	b.w	800b618 <_raise_r>
 800b672:	bf00      	nop
 800b674:	20000018 	.word	0x20000018

0800b678 <_kill_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	@ (800b698 <_kill_r+0x20>)
 800b67c:	2300      	movs	r3, #0
 800b67e:	4604      	mov	r4, r0
 800b680:	4608      	mov	r0, r1
 800b682:	4611      	mov	r1, r2
 800b684:	602b      	str	r3, [r5, #0]
 800b686:	f7f6 fe25 	bl	80022d4 <_kill>
 800b68a:	1c43      	adds	r3, r0, #1
 800b68c:	d102      	bne.n	800b694 <_kill_r+0x1c>
 800b68e:	682b      	ldr	r3, [r5, #0]
 800b690:	b103      	cbz	r3, 800b694 <_kill_r+0x1c>
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	bd38      	pop	{r3, r4, r5, pc}
 800b696:	bf00      	nop
 800b698:	200004b8 	.word	0x200004b8

0800b69c <_getpid_r>:
 800b69c:	f7f6 be12 	b.w	80022c4 <_getpid>

0800b6a0 <_init>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	bf00      	nop
 800b6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6a6:	bc08      	pop	{r3}
 800b6a8:	469e      	mov	lr, r3
 800b6aa:	4770      	bx	lr

0800b6ac <_fini>:
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	bf00      	nop
 800b6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6b2:	bc08      	pop	{r3}
 800b6b4:	469e      	mov	lr, r3
 800b6b6:	4770      	bx	lr
