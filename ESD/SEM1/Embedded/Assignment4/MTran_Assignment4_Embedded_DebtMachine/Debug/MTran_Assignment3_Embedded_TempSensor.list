
MTran_Assignment3_Embedded_TempSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  0800bfd0  0800bfd0  0000cfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cec8  0800cec8  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cec8  0800cec8  0000dec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ced0  0800ced0  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ced0  0800ced0  0000ded0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ced4  0800ced4  0000ded4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ced8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001d4  0800d0ac  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800d0ac  0000e52c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161e4  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c19  00000000  00000000  000243e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00027008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000248d0  00000000  00000000  00028490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000179fe  00000000  00000000  0004cd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e0de9  00000000  00000000  0006475e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00145547  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000fef  00000000  00000000  0014558a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c7c  00000000  00000000  0014657c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfb4 	.word	0x0800bfb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800bfb4 	.word	0x0800bfb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <convertBitToTempValue>:
*
* RETURNS :
* float tempCelsius: temperature value in Celsius.
*/
float convertBitToTempValue(uint32_t adcBitValue)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	float adcVoltageValue = 0.0;
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
	float tempCelsius     = 0.0;
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]

	// Convert Bit to Voltage value
	adcVoltageValue = adcBitValue * 3.3 /4095;
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff fa81 	bl	8000504 <__aeabi_ui2d>
 8001002:	a319      	add	r3, pc, #100	@ (adr r3, 8001068 <convertBitToTempValue+0x80>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff faf6 	bl	80005f8 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	a316      	add	r3, pc, #88	@ (adr r3, 8001070 <convertBitToTempValue+0x88>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff fc17 	bl	800084c <__aeabi_ddiv>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fddf 	bl	8000be8 <__aeabi_d2f>
 800102a:	4603      	mov	r3, r0
 800102c:	60fb      	str	r3, [r7, #12]

	// Convert Voltage to Temp value (Celsius)
	tempCelsius = ((adcVoltageValue *1000)-500)/10;
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001060 <convertBitToTempValue+0x78>
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001064 <convertBitToTempValue+0x7c>
 800103e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001042:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104a:	edc7 7a02 	vstr	s15, [r7, #8]
	return tempCelsius;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	ee07 3a90 	vmov	s15, r3
}
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	447a0000 	.word	0x447a0000
 8001064:	43fa0000 	.word	0x43fa0000
 8001068:	66666666 	.word	0x66666666
 800106c:	400a6666 	.word	0x400a6666
 8001070:	00000000 	.word	0x00000000
 8001074:	40affe00 	.word	0x40affe00

08001078 <convertCelsiusToFahren>:
* float tempCelsius: temperature in Celsius.
*
* RETURNS : float (temperature in Fahrenheit
*/
float convertCelsiusToFahren(float tempCelsius)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]
	return tempCelsius * 1.8 + 32;
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fa60 	bl	8000548 <__aeabi_f2d>
 8001088:	a30e      	add	r3, pc, #56	@ (adr r3, 80010c4 <convertCelsiusToFahren+0x4c>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fab3 	bl	80005f8 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <convertCelsiusToFahren+0x48>)
 80010a0:	f7ff f8f4 	bl	800028c <__adddf3>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd9c 	bl	8000be8 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	ee07 3a90 	vmov	s15, r3
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40400000 	.word	0x40400000
 80010c4:	cccccccd 	.word	0xcccccccd
 80010c8:	3ffccccc 	.word	0x3ffccccc

080010cc <displayTemp>:
* uint16_t scale    : scale to tell if it CELSIUS or FAHRENHEIT
*
* RETURNS : VOID
*/
void displayTemp(float temperature, uint16_t scale )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09e      	sub	sp, #120	@ 0x78
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010d6:	4603      	mov	r3, r0
 80010d8:	807b      	strh	r3, [r7, #2]
	char tempStr[100];
	// Convert float to string
	sprintf(tempStr,"%.2f",temperature);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fa34 	bl	8000548 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	f107 000c 	add.w	r0, r7, #12
 80010e8:	4926      	ldr	r1, [pc, #152]	@ (8001184 <displayTemp+0xb8>)
 80010ea:	f007 fb29 	bl	8008740 <siprintf>

	// Check if *C or *F
	if (scale == CELSIUS)
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d119      	bne.n	8001128 <displayTemp+0x5c>
	{
		sprintf(tempStr,"%.2f",temperature);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fa27 	bl	8000548 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	f107 000c 	add.w	r0, r7, #12
 8001102:	4920      	ldr	r1, [pc, #128]	@ (8001184 <displayTemp+0xb8>)
 8001104:	f007 fb1c 	bl	8008740 <siprintf>
		strcat(tempStr,"C ");
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f8af 	bl	8000270 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4413      	add	r3, r2
 800111c:	4a1a      	ldr	r2, [pc, #104]	@ (8001188 <displayTemp+0xbc>)
 800111e:	8811      	ldrh	r1, [r2, #0]
 8001120:	7892      	ldrb	r2, [r2, #2]
 8001122:	8019      	strh	r1, [r3, #0]
 8001124:	709a      	strb	r2, [r3, #2]
 8001126:	e01e      	b.n	8001166 <displayTemp+0x9a>
	}
	else
	{
		temperature = convertCelsiusToFahren(temperature);
 8001128:	ed97 0a01 	vldr	s0, [r7, #4]
 800112c:	f7ff ffa4 	bl	8001078 <convertCelsiusToFahren>
 8001130:	ed87 0a01 	vstr	s0, [r7, #4]
		sprintf(tempStr,"%.2f",temperature);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff fa07 	bl	8000548 <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	f107 000c 	add.w	r0, r7, #12
 8001142:	4910      	ldr	r1, [pc, #64]	@ (8001184 <displayTemp+0xb8>)
 8001144:	f007 fafc 	bl	8008740 <siprintf>
		strcat(tempStr,"F");
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f88f 	bl	8000270 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4413      	add	r3, r2
 800115c:	490b      	ldr	r1, [pc, #44]	@ (800118c <displayTemp+0xc0>)
 800115e:	461a      	mov	r2, r3
 8001160:	460b      	mov	r3, r1
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	8013      	strh	r3, [r2, #0]
	}
	// Displaying temperature
	ssd1331_display_string(32, 10, tempStr, FONT_1608, RED);
 8001166:	f107 020c 	add.w	r2, r7, #12
 800116a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2310      	movs	r3, #16
 8001172:	210a      	movs	r1, #10
 8001174:	2020      	movs	r0, #32
 8001176:	f000 fdbb 	bl	8001cf0 <ssd1331_display_string>
}
 800117a:	bf00      	nop
 800117c:	3770      	adds	r7, #112	@ 0x70
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800bfd0 	.word	0x0800bfd0
 8001188:	0800bfd8 	.word	0x0800bfd8
 800118c:	0800bfdc 	.word	0x0800bfdc

08001190 <readTempSensor>:
* PARAMETERS : VOID
*
* RETURNS : VOID
*/
uint32_t readTempSensor(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint32_t adcBitValue = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
	/*##-3- Start the conversion process #######################################*/
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800119a:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <readTempSensor+0x48>)
 800119c:	f001 fda6 	bl	8002cec <HAL_ADC_Start>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <readTempSensor+0x1a>
	{
	  /* Start Conversation Error */
		Error_Handler();
 80011a6:	f000 fc19 	bl	80019dc <Error_Handler>

	/*##-4- Wait for the end of conversion #####################################*/
	/*  For simplicity reasons, this example is just waiting till the end of the
	    conversion, but application may perform other tasks while conversion
	    operation is ongoing. */
	if (HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK)
 80011aa:	210a      	movs	r1, #10
 80011ac:	480a      	ldr	r0, [pc, #40]	@ (80011d8 <readTempSensor+0x48>)
 80011ae:	f001 fe33 	bl	8002e18 <HAL_ADC_PollForConversion>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <readTempSensor+0x30>
	{
		/* End Of Conversion flag not set on time */
		Error_Handler();
 80011b8:	f000 fc10 	bl	80019dc <Error_Handler>
	  /*##-5- Get the converted value of regular channel  ########################*/
		adcBitValue = HAL_ADC_GetValue(&hadc1);
		HAL_ADC_Stop(&hadc1);
		return adcBitValue;
	}
	return NOTHING;
 80011bc:	2300      	movs	r3, #0
 80011be:	e007      	b.n	80011d0 <readTempSensor+0x40>
		adcBitValue = HAL_ADC_GetValue(&hadc1);
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <readTempSensor+0x48>)
 80011c2:	f001 feb8 	bl	8002f36 <HAL_ADC_GetValue>
 80011c6:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop(&hadc1);
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <readTempSensor+0x48>)
 80011ca:	f001 fdf2 	bl	8002db2 <HAL_ADC_Stop>
		return adcBitValue;
 80011ce:	687b      	ldr	r3, [r7, #4]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001f0 	.word	0x200001f0

080011dc <setLed>:
* RGBColor ledColor: struct that contain the 3 RGB color value;
*
* RETURNS : VOID
*/
void setLed(RGBColor ledColor)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ledColor.red);
 80011e4:	793a      	ldrb	r2, [r7, #4]
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <setLed+0x2c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ledColor.green);
 80011ec:	797a      	ldrb	r2, [r7, #5]
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <setLed+0x2c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ledColor.blue);
 80011f4:	79ba      	ldrb	r2, [r7, #6]
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <setLed+0x2c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	200002b8 	.word	0x200002b8

0800120c <getLedColor>:
* float temperature: temperature value in Celsius
*
* RETURNS : RGBColor : the duty cycle for each color
*/
RGBColor getLedColor(float temperature)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	ed87 0a01 	vstr	s0, [r7, #4]
	if (temperature > 25.0)
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800121e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	dd06      	ble.n	8001236 <getLedColor+0x2a>
	{
		return RED_LED;
 8001228:	23ff      	movs	r3, #255	@ 0xff
 800122a:	773b      	strb	r3, [r7, #28]
 800122c:	2300      	movs	r3, #0
 800122e:	777b      	strb	r3, [r7, #29]
 8001230:	2300      	movs	r3, #0
 8001232:	77bb      	strb	r3, [r7, #30]
 8001234:	e03e      	b.n	80012b4 <getLedColor+0xa8>
	}
	else if (temperature > 15.0)
 8001236:	edd7 7a01 	vldr	s15, [r7, #4]
 800123a:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800123e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	dd09      	ble.n	800125c <getLedColor+0x50>
	{
		return ORANGE_LED;
 8001248:	4a22      	ldr	r2, [pc, #136]	@ (80012d4 <getLedColor+0xc8>)
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	4611      	mov	r1, r2
 8001252:	8019      	strh	r1, [r3, #0]
 8001254:	3302      	adds	r3, #2
 8001256:	0c12      	lsrs	r2, r2, #16
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e02b      	b.n	80012b4 <getLedColor+0xa8>
	}
	else if (temperature > 5.0)
 800125c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001260:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126c:	dd09      	ble.n	8001282 <getLedColor+0x76>
	{
		return YELLOW_LED;
 800126e:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <getLedColor+0xcc>)
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	4611      	mov	r1, r2
 8001278:	8019      	strh	r1, [r3, #0]
 800127a:	3302      	adds	r3, #2
 800127c:	0c12      	lsrs	r2, r2, #16
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e018      	b.n	80012b4 <getLedColor+0xa8>
	}
	else if (temperature > -15.0)
 8001282:	edd7 7a01 	vldr	s15, [r7, #4]
 8001286:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 800128a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	dd06      	ble.n	80012a2 <getLedColor+0x96>
	{
		return BLUE_LED;
 8001294:	2300      	movs	r3, #0
 8001296:	773b      	strb	r3, [r7, #28]
 8001298:	2300      	movs	r3, #0
 800129a:	777b      	strb	r3, [r7, #29]
 800129c:	23ff      	movs	r3, #255	@ 0xff
 800129e:	77bb      	strb	r3, [r7, #30]
 80012a0:	e008      	b.n	80012b4 <getLedColor+0xa8>
	}
	else
	{
		return WHITE_LED;
 80012a2:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <getLedColor+0xd0>)
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	4611      	mov	r1, r2
 80012ac:	8019      	strh	r1, [r3, #0]
 80012ae:	3302      	adds	r3, #2
 80012b0:	0c12      	lsrs	r2, r2, #16
 80012b2:	701a      	strb	r2, [r3, #0]
	}
}
 80012b4:	2300      	movs	r3, #0
 80012b6:	7f3a      	ldrb	r2, [r7, #28]
 80012b8:	f362 0307 	bfi	r3, r2, #0, #8
 80012bc:	7f7a      	ldrb	r2, [r7, #29]
 80012be:	f362 230f 	bfi	r3, r2, #8, #8
 80012c2:	7fba      	ldrb	r2, [r7, #30]
 80012c4:	f362 4317 	bfi	r3, r2, #16, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	3724      	adds	r7, #36	@ 0x24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	0800bfe0 	.word	0x0800bfe0
 80012d8:	0800bfe4 	.word	0x0800bfe4
 80012dc:	0800bfe8 	.word	0x0800bfe8

080012e0 <setLedFromTemp>:
* float temperature: temperature value in Celsius
*
* RETURNS : VOID
*/
void setLedFromTemp(float temperature)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	ed87 0a01 	vstr	s0, [r7, #4]
	RGBColor Color = getLedColor(temperature);
 80012ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80012ee:	f7ff ff8d 	bl	800120c <getLedColor>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	733a      	strb	r2, [r7, #12]
 80012f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80012fc:	737a      	strb	r2, [r7, #13]
 80012fe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001302:	73bb      	strb	r3, [r7, #14]
	setLed(Color);
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f7ff ff69 	bl	80011dc <setLed>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <buttonCallback>:
*
* RETURNS : VOID
*
*/
void buttonCallback(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	if (tempScale == CELSIUS)
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <buttonCallback+0x2c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <buttonCallback+0x1a>
	{
		tempScale = FAHREN;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <buttonCallback+0x2c>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		tempScale = CELSIUS;
	}
}
 800132c:	e002      	b.n	8001334 <buttonCallback+0x20>
		tempScale = CELSIUS;
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <buttonCallback+0x2c>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200003d4 	.word	0x200003d4

08001344 <HAL_GPIO_EXTI_Callback>:
*
* RETURNS : VOID
*
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7)
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	2b80      	cmp	r3, #128	@ 0x80
 8001352:	d102      	bne.n	800135a <HAL_GPIO_EXTI_Callback+0x16>
    {
        // Start a timer to handle debounce
        HAL_TIM_Base_Start_IT(&htim2);
 8001354:	4803      	ldr	r0, [pc, #12]	@ (8001364 <HAL_GPIO_EXTI_Callback+0x20>)
 8001356:	f004 fbb3 	bl	8005ac0 <HAL_TIM_Base_Start_IT>
    }
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000304 	.word	0x20000304

08001368 <HAL_TIM_PeriodElapsedCallback>:
*
* RETURNS : VOID
*
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001378:	d10c      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x2c>
        // Stop the timer
        HAL_TIM_Base_Stop_IT(&htim2);
 800137a:	4808      	ldr	r0, [pc, #32]	@ (800139c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800137c:	f004 fbf4 	bl	8005b68 <HAL_TIM_Base_Stop_IT>

        // Check the button state after debounce time
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET)
 8001380:	2180      	movs	r1, #128	@ 0x80
 8001382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001386:	f002 fde1 	bl	8003f4c <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x2c>
        {
        	// Button is still pressed, call the buttonCallback function
        	buttonCallback();
 8001390:	f7ff ffc0 	bl	8001314 <buttonCallback>
        }
    }
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000304 	.word	0x20000304

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t tempADC;
	float    tempValue;
	uint16_t printFlag = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	81fb      	strh	r3, [r7, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013aa:	f001 f8a8 	bl	80024fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ae:	f000 f849 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b2:	f000 fab3 	bl	800191c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013b6:	f000 fa81 	bl	80018bc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013ba:	f000 f909 	bl	80015d0 <MX_SPI1_Init>
  MX_ADC1_Init();
 80013be:	f000 f8a3 	bl	8001508 <MX_ADC1_Init>
  MX_TIM1_Init();
 80013c2:	f000 f943 	bl	800164c <MX_TIM1_Init>
  MX_TIM2_Init();
 80013c6:	f000 fa05 	bl	80017d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Start timer 1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013ca:	2100      	movs	r1, #0
 80013cc:	481b      	ldr	r0, [pc, #108]	@ (800143c <main+0x9c>)
 80013ce:	f004 fc5b 	bl	8005c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013d2:	2104      	movs	r1, #4
 80013d4:	4819      	ldr	r0, [pc, #100]	@ (800143c <main+0x9c>)
 80013d6:	f004 fc57 	bl	8005c88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013da:	2108      	movs	r1, #8
 80013dc:	4817      	ldr	r0, [pc, #92]	@ (800143c <main+0x9c>)
 80013de:	f004 fc53 	bl	8005c88 <HAL_TIM_PWM_Start>

  // Start OLed and Display a green rectangle
  ssd1331_init();
 80013e2:	f000 fcf3 	bl	8001dcc <ssd1331_init>
  ssd1331_clear_screen(BLACK);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 fccb 	bl	8001d82 <ssd1331_clear_screen>
  ssd1331_draw_rect(0, 0, 90, 60, GREEN);
 80013ec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	233c      	movs	r3, #60	@ 0x3c
 80013f4:	225a      	movs	r2, #90	@ 0x5a
 80013f6:	2100      	movs	r1, #0
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 fbc9 	bl	8001b90 <ssd1331_draw_rect>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get ADC Value
	  tempADC = readTempSensor();
 80013fe:	f7ff fec7 	bl	8001190 <readTempSensor>
 8001402:	60b8      	str	r0, [r7, #8]

	  // Convert ADC value to Temperature value (Celsius)
	  tempValue = convertBitToTempValue(tempADC);
 8001404:	68b8      	ldr	r0, [r7, #8]
 8001406:	f7ff fdef 	bl	8000fe8 <convertBitToTempValue>
 800140a:	ed87 0a01 	vstr	s0, [r7, #4]

	  // Display/Update temperature on OLed every 100ms
	  printFlag++;
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	3301      	adds	r3, #1
 8001412:	81fb      	strh	r3, [r7, #14]
	  if (printFlag == 100)
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	2b64      	cmp	r3, #100	@ 0x64
 8001418:	d108      	bne.n	800142c <main+0x8c>
	  {
		  displayTemp(tempValue,tempScale);
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <main+0xa0>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	ed97 0a01 	vldr	s0, [r7, #4]
 8001424:	f7ff fe52 	bl	80010cc <displayTemp>
		  printFlag = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	81fb      	strh	r3, [r7, #14]
	  }
	  HAL_Delay(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f001 f8db 	bl	80025e8 <HAL_Delay>

	  // Set LED Color
	  setLedFromTemp(tempValue);
 8001432:	ed97 0a01 	vldr	s0, [r7, #4]
 8001436:	f7ff ff53 	bl	80012e0 <setLedFromTemp>
	  tempADC = readTempSensor();
 800143a:	e7e0      	b.n	80013fe <main+0x5e>
 800143c:	200002b8 	.word	0x200002b8
 8001440:	200003d4 	.word	0x200003d4

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b096      	sub	sp, #88	@ 0x58
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2244      	movs	r2, #68	@ 0x44
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f007 f9d7 	bl	8008806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001466:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800146a:	f002 fdd5 	bl	8004018 <HAL_PWREx_ControlVoltageScaling>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001474:	f000 fab2 	bl	80019dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001478:	f002 fdb0 	bl	8003fdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800147c:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <SystemClock_Config+0xc0>)
 800147e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001482:	4a20      	ldr	r2, [pc, #128]	@ (8001504 <SystemClock_Config+0xc0>)
 8001484:	f023 0318 	bic.w	r3, r3, #24
 8001488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800148c:	2314      	movs	r3, #20
 800148e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001490:	2301      	movs	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800149c:	2360      	movs	r3, #96	@ 0x60
 800149e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014a4:	2301      	movs	r3, #1
 80014a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80014ac:	2310      	movs	r3, #16
 80014ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014b0:	2307      	movs	r3, #7
 80014b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fdff 	bl	80040c4 <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80014cc:	f000 fa86 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	230f      	movs	r3, #15
 80014d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2303      	movs	r3, #3
 80014d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	2101      	movs	r1, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 f9ff 	bl	80048ec <HAL_RCC_ClockConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014f4:	f000 fa72 	bl	80019dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014f8:	f003 fe12 	bl	8005120 <HAL_RCCEx_EnableMSIPLLMode>
}
 80014fc:	bf00      	nop
 80014fe:	3758      	adds	r7, #88	@ 0x58
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000

08001508 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800151e:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001520:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <MX_ADC1_Init+0xc0>)
 8001522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001524:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152a:	4b26      	ldr	r3, [pc, #152]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001530:	4b24      	ldr	r3, [pc, #144]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001536:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153c:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 800153e:	2204      	movs	r2, #4
 8001540:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001542:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001544:	2200      	movs	r2, #0
 8001546:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001548:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 800154a:	2200      	movs	r2, #0
 800154c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800154e:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001550:	2201      	movs	r2, #1
 8001552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001564:	2200      	movs	r2, #0
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001568:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001572:	2200      	movs	r2, #0
 8001574:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001576:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157e:	4811      	ldr	r0, [pc, #68]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 8001580:	f001 fa6c 	bl	8002a5c <HAL_ADC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800158a:	f000 fa27 	bl	80019dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_ADC1_Init+0xc4>)
 8001590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001592:	2306      	movs	r3, #6
 8001594:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800159a:	237f      	movs	r3, #127	@ 0x7f
 800159c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800159e:	2304      	movs	r3, #4
 80015a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a6:	463b      	mov	r3, r7
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <MX_ADC1_Init+0xbc>)
 80015ac:	f001 fcd0 	bl	8002f50 <HAL_ADC_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80015b6:	f000 fa11 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200001f0 	.word	0x200001f0
 80015c8:	50040000 	.word	0x50040000
 80015cc:	19200040 	.word	0x19200040

080015d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <MX_SPI1_Init+0x74>)
 80015d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001648 <MX_SPI1_Init+0x78>)
 80015d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_SPI1_Init+0x74>)
 80015dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_SPI1_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e8:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <MX_SPI1_Init+0x74>)
 80015ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <MX_SPI1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f6:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <MX_SPI1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <MX_SPI1_Init+0x74>)
 80015fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001602:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001604:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <MX_SPI1_Init+0x74>)
 8001606:	2210      	movs	r2, #16
 8001608:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <MX_SPI1_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_SPI1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <MX_SPI1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_SPI1_Init+0x74>)
 800161e:	2207      	movs	r2, #7
 8001620:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <MX_SPI1_Init+0x74>)
 800162a:	2208      	movs	r2, #8
 800162c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_SPI1_Init+0x74>)
 8001630:	f003 fe78 	bl	8005324 <HAL_SPI_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800163a:	f000 f9cf 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000254 	.word	0x20000254
 8001648:	40013000 	.word	0x40013000

0800164c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b09a      	sub	sp, #104	@ 0x68
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	615a      	str	r2, [r3, #20]
 800167e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	222c      	movs	r2, #44	@ 0x2c
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f007 f8bd 	bl	8008806 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168c:	4b4f      	ldr	r3, [pc, #316]	@ (80017cc <MX_TIM1_Init+0x180>)
 800168e:	4a50      	ldr	r2, [pc, #320]	@ (80017d0 <MX_TIM1_Init+0x184>)
 8001690:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12;
 8001692:	4b4e      	ldr	r3, [pc, #312]	@ (80017cc <MX_TIM1_Init+0x180>)
 8001694:	220c      	movs	r2, #12
 8001696:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <MX_TIM1_Init+0x180>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800169e:	4b4b      	ldr	r3, [pc, #300]	@ (80017cc <MX_TIM1_Init+0x180>)
 80016a0:	22ff      	movs	r2, #255	@ 0xff
 80016a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b49      	ldr	r3, [pc, #292]	@ (80017cc <MX_TIM1_Init+0x180>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016aa:	4b48      	ldr	r3, [pc, #288]	@ (80017cc <MX_TIM1_Init+0x180>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b46      	ldr	r3, [pc, #280]	@ (80017cc <MX_TIM1_Init+0x180>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016b6:	4845      	ldr	r0, [pc, #276]	@ (80017cc <MX_TIM1_Init+0x180>)
 80016b8:	f004 f9aa 	bl	8005a10 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016c2:	f000 f98b 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016d0:	4619      	mov	r1, r3
 80016d2:	483e      	ldr	r0, [pc, #248]	@ (80017cc <MX_TIM1_Init+0x180>)
 80016d4:	f004 fdea 	bl	80062ac <HAL_TIM_ConfigClockSource>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016de:	f000 f97d 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016e2:	483a      	ldr	r0, [pc, #232]	@ (80017cc <MX_TIM1_Init+0x180>)
 80016e4:	f004 fa6f 	bl	8005bc6 <HAL_TIM_PWM_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016ee:	f000 f975 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001702:	4619      	mov	r1, r3
 8001704:	4831      	ldr	r0, [pc, #196]	@ (80017cc <MX_TIM1_Init+0x180>)
 8001706:	f005 fa65 	bl	8006bd4 <HAL_TIMEx_MasterConfigSynchronization>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001710:	f000 f964 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001714:	2360      	movs	r3, #96	@ 0x60
 8001716:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171c:	2300      	movs	r3, #0
 800171e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001720:	2300      	movs	r3, #0
 8001722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001730:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	4824      	ldr	r0, [pc, #144]	@ (80017cc <MX_TIM1_Init+0x180>)
 800173a:	f004 fca3 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001744:	f000 f94a 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001748:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800174c:	2204      	movs	r2, #4
 800174e:	4619      	mov	r1, r3
 8001750:	481e      	ldr	r0, [pc, #120]	@ (80017cc <MX_TIM1_Init+0x180>)
 8001752:	f004 fc97 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800175c:	f000 f93e 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001760:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001764:	2208      	movs	r2, #8
 8001766:	4619      	mov	r1, r3
 8001768:	4818      	ldr	r0, [pc, #96]	@ (80017cc <MX_TIM1_Init+0x180>)
 800176a:	f004 fc8b 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001774:	f000 f932 	bl	80019dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800178c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001790:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800179a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <MX_TIM1_Init+0x180>)
 80017ae:	f005 fa77 	bl	8006ca0 <HAL_TIMEx_ConfigBreakDeadTime>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80017b8:	f000 f910 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017bc:	4803      	ldr	r0, [pc, #12]	@ (80017cc <MX_TIM1_Init+0x180>)
 80017be:	f000 fcb5 	bl	800212c <HAL_TIM_MspPostInit>

}
 80017c2:	bf00      	nop
 80017c4:	3768      	adds	r7, #104	@ 0x68
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200002b8 	.word	0x200002b8
 80017d0:	40012c00 	.word	0x40012c00

080017d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08e      	sub	sp, #56	@ 0x38
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001806:	4b2c      	ldr	r3, [pc, #176]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 8001808:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800180c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 800180e:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 8001810:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8001814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 800181e:	2213      	movs	r2, #19
 8001820:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b25      	ldr	r3, [pc, #148]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800182e:	4822      	ldr	r0, [pc, #136]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 8001830:	f004 f8ee 	bl	8005a10 <HAL_TIM_Base_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800183a:	f000 f8cf 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001844:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001848:	4619      	mov	r1, r3
 800184a:	481b      	ldr	r0, [pc, #108]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 800184c:	f004 fd2e 	bl	80062ac <HAL_TIM_ConfigClockSource>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001856:	f000 f8c1 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800185a:	4817      	ldr	r0, [pc, #92]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 800185c:	f004 f9b3 	bl	8005bc6 <HAL_TIM_PWM_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001866:	f000 f8b9 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	480f      	ldr	r0, [pc, #60]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 800187a:	f005 f9ab 	bl	8006bd4 <HAL_TIMEx_MasterConfigSynchronization>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001884:	f000 f8aa 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001888:	2360      	movs	r3, #96	@ 0x60
 800188a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <MX_TIM2_Init+0xe4>)
 80018a0:	f004 fbf0 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80018aa:	f000 f897 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	3738      	adds	r7, #56	@ 0x38
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000304 	.word	0x20000304

080018bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018c2:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <MX_USART2_UART_Init+0x5c>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART2_UART_Init+0x58>)
 8001900:	f005 fa64 	bl	8006dcc <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800190a:	f000 f867 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000350 	.word	0x20000350
 8001918:	40004400 	.word	0x40004400

0800191c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <MX_GPIO_Init+0xb8>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	4a27      	ldr	r2, [pc, #156]	@ (80019d4 <MX_GPIO_Init+0xb8>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193e:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <MX_GPIO_Init+0xb8>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <MX_GPIO_Init+0xb8>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <MX_GPIO_Init+0xb8>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001956:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <MX_GPIO_Init+0xb8>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <MX_GPIO_Init+0xb8>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <MX_GPIO_Init+0xb8>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196e:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <MX_GPIO_Init+0xb8>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2178      	movs	r1, #120	@ 0x78
 800197e:	4816      	ldr	r0, [pc, #88]	@ (80019d8 <MX_GPIO_Init+0xbc>)
 8001980:	f002 fafc 	bl	8003f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001988:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800198c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198e:	2301      	movs	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199c:	f002 f96c 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 80019a0:	2378      	movs	r3, #120	@ 0x78
 80019a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	4619      	mov	r1, r3
 80019b6:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <MX_GPIO_Init+0xbc>)
 80019b8:	f002 f95e 	bl	8003c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2017      	movs	r0, #23
 80019c2:	f002 f922 	bl	8003c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019c6:	2017      	movs	r0, #23
 80019c8:	f002 f93b 	bl	8003c42 <HAL_NVIC_EnableIRQ>

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	48000400 	.word	0x48000400

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	460a      	mov	r2, r1
 80019f2:	71fb      	strb	r3, [r7, #7]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 80019fe:	2201      	movs	r2, #1
 8001a00:	2120      	movs	r1, #32
 8001a02:	4811      	ldr	r0, [pc, #68]	@ (8001a48 <ssd1331_write_byte+0x60>)
 8001a04:	f002 faba 	bl	8003f7c <HAL_GPIO_WritePin>
 8001a08:	e004      	b.n	8001a14 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	480e      	ldr	r0, [pc, #56]	@ (8001a48 <ssd1331_write_byte+0x60>)
 8001a10:	f002 fab4 	bl	8003f7c <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8001a14:	2200      	movs	r2, #0
 8001a16:	2110      	movs	r1, #16
 8001a18:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <ssd1331_write_byte+0x60>)
 8001a1a:	f002 faaf 	bl	8003f7c <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001a1e:	1df9      	adds	r1, r7, #7
 8001a20:	2364      	movs	r3, #100	@ 0x64
 8001a22:	2201      	movs	r2, #1
 8001a24:	4809      	ldr	r0, [pc, #36]	@ (8001a4c <ssd1331_write_byte+0x64>)
 8001a26:	f003 fd20 	bl	800546a <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	4806      	ldr	r0, [pc, #24]	@ (8001a48 <ssd1331_write_byte+0x60>)
 8001a30:	f002 faa4 	bl	8003f7c <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001a34:	2201      	movs	r2, #1
 8001a36:	2120      	movs	r1, #32
 8001a38:	4803      	ldr	r0, [pc, #12]	@ (8001a48 <ssd1331_write_byte+0x60>)
 8001a3a:	f002 fa9f 	bl	8003f7c <HAL_GPIO_WritePin>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	20000254 	.word	0x20000254

08001a50 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	71bb      	strb	r3, [r7, #6]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b5f      	cmp	r3, #95	@ 0x5f
 8001a66:	d82b      	bhi.n	8001ac0 <ssd1331_draw_point+0x70>
 8001a68:	79bb      	ldrb	r3, [r7, #6]
 8001a6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a6c:	d828      	bhi.n	8001ac0 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2015      	movs	r0, #21
 8001a72:	f7ff ffb9 	bl	80019e8 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ffb4 	bl	80019e8 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8001a80:	2100      	movs	r1, #0
 8001a82:	205f      	movs	r0, #95	@ 0x5f
 8001a84:	f7ff ffb0 	bl	80019e8 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2075      	movs	r0, #117	@ 0x75
 8001a8c:	f7ff ffac 	bl	80019e8 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ffa7 	bl	80019e8 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	203f      	movs	r0, #63	@ 0x3f
 8001a9e:	f7ff ffa3 	bl	80019e8 <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff9b 	bl	80019e8 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff95 	bl	80019e8 <ssd1331_write_byte>
 8001abe:	e000      	b.n	8001ac2 <ssd1331_draw_point+0x72>
		return;
 8001ac0:	bf00      	nop
}
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <ssd1331_draw_v_line>:
        }
    }
}

void ssd1331_draw_v_line(uint8_t chXpos, uint8_t chYpos, uint8_t chHeight, uint16_t hwColor)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	4603      	mov	r3, r0
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	717b      	strb	r3, [r7, #5]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	807b      	strh	r3, [r7, #2]
  uint16_t i, y1 = MIN(chYpos + chHeight, OLED_HEIGHT - 1);
 8001ae6:	79ba      	ldrb	r2, [r7, #6]
 8001ae8:	797b      	ldrb	r3, [r7, #5]
 8001aea:	4413      	add	r3, r2
 8001aec:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aee:	bfa8      	it	ge
 8001af0:	233f      	movge	r3, #63	@ 0x3f
 8001af2:	81bb      	strh	r3, [r7, #12]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2b5f      	cmp	r3, #95	@ 0x5f
 8001af8:	d814      	bhi.n	8001b24 <ssd1331_draw_v_line+0x5c>
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001afe:	d811      	bhi.n	8001b24 <ssd1331_draw_v_line+0x5c>
		return;
	}

    for (i = chYpos; i < y1; i ++) {
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	81fb      	strh	r3, [r7, #14]
 8001b04:	e009      	b.n	8001b1a <ssd1331_draw_v_line+0x52>
        ssd1331_draw_point(chXpos, i, hwColor);
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	b2d9      	uxtb	r1, r3
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff9e 	bl	8001a50 <ssd1331_draw_point>
    for (i = chYpos; i < y1; i ++) {
 8001b14:	89fb      	ldrh	r3, [r7, #14]
 8001b16:	3301      	adds	r3, #1
 8001b18:	81fb      	strh	r3, [r7, #14]
 8001b1a:	89fa      	ldrh	r2, [r7, #14]
 8001b1c:	89bb      	ldrh	r3, [r7, #12]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d3f1      	bcc.n	8001b06 <ssd1331_draw_v_line+0x3e>
 8001b22:	e000      	b.n	8001b26 <ssd1331_draw_v_line+0x5e>
		return;
 8001b24:	bf00      	nop
    }
}
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}

08001b2c <ssd1331_draw_h_line>:

void ssd1331_draw_h_line(uint8_t chXpos, uint8_t chYpos, uint8_t chWidth, uint16_t hwColor)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71bb      	strb	r3, [r7, #6]
 8001b42:	460b      	mov	r3, r1
 8001b44:	717b      	strb	r3, [r7, #5]
 8001b46:	4613      	mov	r3, r2
 8001b48:	807b      	strh	r3, [r7, #2]
	uint16_t i, x1 = MIN(chXpos + chWidth, OLED_WIDTH- 1);
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	797b      	ldrb	r3, [r7, #5]
 8001b4e:	4413      	add	r3, r2
 8001b50:	2b5f      	cmp	r3, #95	@ 0x5f
 8001b52:	bfa8      	it	ge
 8001b54:	235f      	movge	r3, #95	@ 0x5f
 8001b56:	81bb      	strh	r3, [r7, #12]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	2b5f      	cmp	r3, #95	@ 0x5f
 8001b5c:	d814      	bhi.n	8001b88 <ssd1331_draw_h_line+0x5c>
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b62:	d811      	bhi.n	8001b88 <ssd1331_draw_h_line+0x5c>
		return;
	}

    for (i = chXpos; i < x1; i ++) {
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	81fb      	strh	r3, [r7, #14]
 8001b68:	e009      	b.n	8001b7e <ssd1331_draw_h_line+0x52>
        ssd1331_draw_point(i, chYpos, hwColor);
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	79b9      	ldrb	r1, [r7, #6]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff6c 	bl	8001a50 <ssd1331_draw_point>
    for (i = chXpos; i < x1; i ++) {
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	81fb      	strh	r3, [r7, #14]
 8001b7e:	89fa      	ldrh	r2, [r7, #14]
 8001b80:	89bb      	ldrh	r3, [r7, #12]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3f1      	bcc.n	8001b6a <ssd1331_draw_h_line+0x3e>
 8001b86:	e000      	b.n	8001b8a <ssd1331_draw_h_line+0x5e>
		return;
 8001b88:	bf00      	nop
    }
}
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <ssd1331_draw_rect>:

void ssd1331_draw_rect(uint8_t chXpos, uint8_t chYpos, uint8_t chWidth, uint8_t chHeight, uint16_t hwColor)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4604      	mov	r4, r0
 8001b98:	4608      	mov	r0, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4623      	mov	r3, r4
 8001ba0:	71fb      	strb	r3, [r7, #7]
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71bb      	strb	r3, [r7, #6]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	717b      	strb	r3, [r7, #5]
 8001baa:	4613      	mov	r3, r2
 8001bac:	713b      	strb	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b5f      	cmp	r3, #95	@ 0x5f
 8001bb2:	d823      	bhi.n	8001bfc <ssd1331_draw_rect+0x6c>
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bb8:	d820      	bhi.n	8001bfc <ssd1331_draw_rect+0x6c>
		return;
	}

	ssd1331_draw_h_line(chXpos, chYpos, chWidth, hwColor);
 8001bba:	8b3b      	ldrh	r3, [r7, #24]
 8001bbc:	797a      	ldrb	r2, [r7, #5]
 8001bbe:	79b9      	ldrb	r1, [r7, #6]
 8001bc0:	79f8      	ldrb	r0, [r7, #7]
 8001bc2:	f7ff ffb3 	bl	8001b2c <ssd1331_draw_h_line>
	ssd1331_draw_h_line(chXpos, chYpos + chHeight, chWidth, hwColor);
 8001bc6:	79ba      	ldrb	r2, [r7, #6]
 8001bc8:	793b      	ldrb	r3, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2d9      	uxtb	r1, r3
 8001bce:	8b3b      	ldrh	r3, [r7, #24]
 8001bd0:	797a      	ldrb	r2, [r7, #5]
 8001bd2:	79f8      	ldrb	r0, [r7, #7]
 8001bd4:	f7ff ffaa 	bl	8001b2c <ssd1331_draw_h_line>
	ssd1331_draw_v_line(chXpos, chYpos, chHeight, hwColor);
 8001bd8:	8b3b      	ldrh	r3, [r7, #24]
 8001bda:	793a      	ldrb	r2, [r7, #4]
 8001bdc:	79b9      	ldrb	r1, [r7, #6]
 8001bde:	79f8      	ldrb	r0, [r7, #7]
 8001be0:	f7ff ff72 	bl	8001ac8 <ssd1331_draw_v_line>
	ssd1331_draw_v_line(chXpos + chWidth, chYpos, chHeight + 1, hwColor);
 8001be4:	79fa      	ldrb	r2, [r7, #7]
 8001be6:	797b      	ldrb	r3, [r7, #5]
 8001be8:	4413      	add	r3, r2
 8001bea:	b2d8      	uxtb	r0, r3
 8001bec:	793b      	ldrb	r3, [r7, #4]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	8b3b      	ldrh	r3, [r7, #24]
 8001bf4:	79b9      	ldrb	r1, [r7, #6]
 8001bf6:	f7ff ff67 	bl	8001ac8 <ssd1331_draw_v_line>
 8001bfa:	e000      	b.n	8001bfe <ssd1331_draw_rect+0x6e>
		return;
 8001bfc:	bf00      	nop
}
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd90      	pop	{r4, r7, pc}

08001c04 <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4623      	mov	r3, r4
 8001c14:	71fb      	strb	r3, [r7, #7]
 8001c16:	4603      	mov	r3, r0
 8001c18:	71bb      	strb	r3, [r7, #6]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	717b      	strb	r3, [r7, #5]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8001c22:	79bb      	ldrb	r3, [r7, #6]
 8001c24:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b5f      	cmp	r3, #95	@ 0x5f
 8001c2e:	d857      	bhi.n	8001ce0 <ssd1331_display_char+0xdc>
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c34:	d854      	bhi.n	8001ce0 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
 8001c3a:	e04c      	b.n	8001cd6 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001c3c:	793b      	ldrb	r3, [r7, #4]
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d10d      	bne.n	8001c5e <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8001c42:	797b      	ldrb	r3, [r7, #5]
 8001c44:	f1a3 0220 	sub.w	r2, r3, #32
 8001c48:	7bf9      	ldrb	r1, [r7, #15]
 8001c4a:	4827      	ldr	r0, [pc, #156]	@ (8001ce8 <ssd1331_display_char+0xe4>)
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4403      	add	r3, r0
 8001c56:	440b      	add	r3, r1
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	737b      	strb	r3, [r7, #13]
 8001c5c:	e00c      	b.n	8001c78 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8001c5e:	793b      	ldrb	r3, [r7, #4]
 8001c60:	2b10      	cmp	r3, #16
 8001c62:	d109      	bne.n	8001c78 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001c64:	797b      	ldrb	r3, [r7, #5]
 8001c66:	f1a3 0220 	sub.w	r2, r3, #32
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	491f      	ldr	r1, [pc, #124]	@ (8001cec <ssd1331_display_char+0xe8>)
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	440a      	add	r2, r1
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73bb      	strb	r3, [r7, #14]
 8001c7c:	e025      	b.n	8001cca <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001c7e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da06      	bge.n	8001c94 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001c86:	8c3a      	ldrh	r2, [r7, #32]
 8001c88:	79b9      	ldrb	r1, [r7, #6]
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fedf 	bl	8001a50 <ssd1331_draw_point>
 8001c92:	e005      	b.n	8001ca0 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001c94:	79b9      	ldrb	r1, [r7, #6]
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fed8 	bl	8001a50 <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8001ca0:	7b7b      	ldrb	r3, [r7, #13]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001ca6:	79bb      	ldrb	r3, [r7, #6]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8001cac:	79ba      	ldrb	r2, [r7, #6]
 8001cae:	7b3b      	ldrb	r3, [r7, #12]
 8001cb0:	1ad2      	subs	r2, r2, r3
 8001cb2:	793b      	ldrb	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d105      	bne.n	8001cc4 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001cb8:	7b3b      	ldrb	r3, [r7, #12]
 8001cba:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	71fb      	strb	r3, [r7, #7]
				break;
 8001cc2:	e005      	b.n	8001cd0 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001cc4:	7bbb      	ldrb	r3, [r7, #14]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	73bb      	strb	r3, [r7, #14]
 8001cca:	7bbb      	ldrb	r3, [r7, #14]
 8001ccc:	2b07      	cmp	r3, #7
 8001cce:	d9d6      	bls.n	8001c7e <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	793b      	ldrb	r3, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d3ae      	bcc.n	8001c3c <ssd1331_display_char+0x38>
 8001cde:	e000      	b.n	8001ce2 <ssd1331_display_char+0xde>
		return;
 8001ce0:	bf00      	nop
			}
		}
    }
}
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	0800bfec 	.word	0x0800bfec
 8001cec:	0800c460 	.word	0x0800c460

08001cf0 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	603a      	str	r2, [r7, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	71bb      	strb	r3, [r7, #6]
 8001d02:	4613      	mov	r3, r2
 8001d04:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	2b5f      	cmp	r3, #95	@ 0x5f
 8001d0a:	d836      	bhi.n	8001d7a <ssd1331_display_string+0x8a>
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d10:	d833      	bhi.n	8001d7a <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8001d12:	e02d      	b.n	8001d70 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	797b      	ldrb	r3, [r7, #5]
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f1c3 0360 	rsb	r3, r3, #96	@ 0x60
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dd12      	ble.n	8001d4a <ssd1331_display_string+0x5a>
			chXpos = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001d28:	79ba      	ldrb	r2, [r7, #6]
 8001d2a:	797b      	ldrb	r3, [r7, #5]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8001d30:	79ba      	ldrb	r2, [r7, #6]
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dd06      	ble.n	8001d4a <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f000 f81c 	bl	8001d82 <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	797c      	ldrb	r4, [r7, #5]
 8001d50:	79b9      	ldrb	r1, [r7, #6]
 8001d52:	79f8      	ldrb	r0, [r7, #7]
 8001d54:	8b3b      	ldrh	r3, [r7, #24]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4623      	mov	r3, r4
 8001d5a:	f7ff ff53 	bl	8001c04 <ssd1331_display_char>
        chXpos += chSize / 2;
 8001d5e:	797b      	ldrb	r3, [r7, #5]
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	4413      	add	r3, r2
 8001d68:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1cd      	bne.n	8001d14 <ssd1331_display_string+0x24>
 8001d78:	e000      	b.n	8001d7c <ssd1331_display_string+0x8c>
		return;
 8001d7a:	bf00      	nop
    }
}
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}

08001d82 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	81fb      	strh	r3, [r7, #14]
 8001d90:	e013      	b.n	8001dba <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001d92:	2300      	movs	r3, #0
 8001d94:	81bb      	strh	r3, [r7, #12]
 8001d96:	e00a      	b.n	8001dae <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001d98:	89bb      	ldrh	r3, [r7, #12]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	89fa      	ldrh	r2, [r7, #14]
 8001d9e:	b2d1      	uxtb	r1, r2
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fe54 	bl	8001a50 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001da8:	89bb      	ldrh	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	81bb      	strh	r3, [r7, #12]
 8001dae:	89bb      	ldrh	r3, [r7, #12]
 8001db0:	2b5f      	cmp	r3, #95	@ 0x5f
 8001db2:	d9f1      	bls.n	8001d98 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	3301      	adds	r3, #1
 8001db8:	81fb      	strh	r3, [r7, #14]
 8001dba:	89fb      	ldrh	r3, [r7, #14]
 8001dbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dbe:	d9e8      	bls.n	8001d92 <ssd1331_clear_screen+0x10>
		}
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <ssd1331_init>:


void ssd1331_init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2140      	movs	r1, #64	@ 0x40
 8001dd4:	4852      	ldr	r0, [pc, #328]	@ (8001f20 <ssd1331_init+0x154>)
 8001dd6:	f002 f8d1 	bl	8003f7c <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2110      	movs	r1, #16
 8001dde:	4850      	ldr	r0, [pc, #320]	@ (8001f20 <ssd1331_init+0x154>)
 8001de0:	f002 f8cc 	bl	8003f7c <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001de4:	2100      	movs	r1, #0
 8001de6:	20ae      	movs	r0, #174	@ 0xae
 8001de8:	f7ff fdfe 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001dec:	2100      	movs	r1, #0
 8001dee:	2081      	movs	r0, #129	@ 0x81
 8001df0:	f7ff fdfa 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001df4:	2100      	movs	r1, #0
 8001df6:	20ff      	movs	r0, #255	@ 0xff
 8001df8:	f7ff fdf6 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2082      	movs	r0, #130	@ 0x82
 8001e00:	f7ff fdf2 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001e04:	2100      	movs	r1, #0
 8001e06:	20ff      	movs	r0, #255	@ 0xff
 8001e08:	f7ff fdee 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2083      	movs	r0, #131	@ 0x83
 8001e10:	f7ff fdea 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001e14:	2100      	movs	r1, #0
 8001e16:	20ff      	movs	r0, #255	@ 0xff
 8001e18:	f7ff fde6 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2087      	movs	r0, #135	@ 0x87
 8001e20:	f7ff fde2 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001e24:	2100      	movs	r1, #0
 8001e26:	2006      	movs	r0, #6
 8001e28:	f7ff fdde 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	208a      	movs	r0, #138	@ 0x8a
 8001e30:	f7ff fdda 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001e34:	2100      	movs	r1, #0
 8001e36:	2064      	movs	r0, #100	@ 0x64
 8001e38:	f7ff fdd6 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	208b      	movs	r0, #139	@ 0x8b
 8001e40:	f7ff fdd2 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001e44:	2100      	movs	r1, #0
 8001e46:	2078      	movs	r0, #120	@ 0x78
 8001e48:	f7ff fdce 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	208c      	movs	r0, #140	@ 0x8c
 8001e50:	f7ff fdca 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001e54:	2100      	movs	r1, #0
 8001e56:	2064      	movs	r0, #100	@ 0x64
 8001e58:	f7ff fdc6 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	20a0      	movs	r0, #160	@ 0xa0
 8001e60:	f7ff fdc2 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8001e64:	2100      	movs	r1, #0
 8001e66:	2072      	movs	r0, #114	@ 0x72
 8001e68:	f7ff fdbe 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	20a1      	movs	r0, #161	@ 0xa1
 8001e70:	f7ff fdba 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001e74:	2100      	movs	r1, #0
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7ff fdb6 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	20a2      	movs	r0, #162	@ 0xa2
 8001e80:	f7ff fdb2 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001e84:	2100      	movs	r1, #0
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff fdae 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	20a4      	movs	r0, #164	@ 0xa4
 8001e90:	f7ff fdaa 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001e94:	2100      	movs	r1, #0
 8001e96:	20a8      	movs	r0, #168	@ 0xa8
 8001e98:	f7ff fda6 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	203f      	movs	r0, #63	@ 0x3f
 8001ea0:	f7ff fda2 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	20ad      	movs	r0, #173	@ 0xad
 8001ea8:	f7ff fd9e 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8001eac:	2100      	movs	r1, #0
 8001eae:	208e      	movs	r0, #142	@ 0x8e
 8001eb0:	f7ff fd9a 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	20b0      	movs	r0, #176	@ 0xb0
 8001eb8:	f7ff fd96 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff fd92 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	20b1      	movs	r0, #177	@ 0xb1
 8001ec8:	f7ff fd8e 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2031      	movs	r0, #49	@ 0x31
 8001ed0:	f7ff fd8a 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	20b3      	movs	r0, #179	@ 0xb3
 8001ed8:	f7ff fd86 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8001edc:	2100      	movs	r1, #0
 8001ede:	20f0      	movs	r0, #240	@ 0xf0
 8001ee0:	f7ff fd82 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	20bb      	movs	r0, #187	@ 0xbb
 8001ee8:	f7ff fd7e 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8001eec:	2100      	movs	r1, #0
 8001eee:	203a      	movs	r0, #58	@ 0x3a
 8001ef0:	f7ff fd7a 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	20be      	movs	r0, #190	@ 0xbe
 8001ef8:	f7ff fd76 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8001efc:	2100      	movs	r1, #0
 8001efe:	203e      	movs	r0, #62	@ 0x3e
 8001f00:	f7ff fd72 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8001f04:	2100      	movs	r1, #0
 8001f06:	202e      	movs	r0, #46	@ 0x2e
 8001f08:	f7ff fd6e 	bl	80019e8 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	20af      	movs	r0, #175	@ 0xaf
 8001f10:	f7ff fd6a 	bl	80019e8 <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff ff34 	bl	8001d82 <ssd1331_clear_screen>
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	48000400 	.word	0x48000400

08001f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <HAL_MspInit+0x44>)
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <HAL_MspInit+0x44>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_MspInit+0x44>)
 8001f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_MspInit+0x44>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <HAL_MspInit+0x44>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_MspInit+0x44>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b09e      	sub	sp, #120	@ 0x78
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2254      	movs	r2, #84	@ 0x54
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f006 fc3a 	bl	8008806 <memset>
  if(hadc->Instance==ADC1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a25      	ldr	r2, [pc, #148]	@ (800202c <HAL_ADC_MspInit+0xc0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d143      	bne.n	8002024 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fa0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001fa2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001fa6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001fb0:	2310      	movs	r3, #16
 8001fb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001fb4:	2307      	movs	r3, #7
 8001fb6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001fc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 feb2 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001fd6:	f7ff fd01 	bl	80019dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_ADC_MspInit+0xc4>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <HAL_ADC_MspInit+0xc4>)
 8001fe0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_ADC_MspInit+0xc4>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <HAL_ADC_MspInit+0xc4>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8002030 <HAL_ADC_MspInit+0xc4>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <HAL_ADC_MspInit+0xc4>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800200a:	2302      	movs	r3, #2
 800200c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800200e:	230b      	movs	r3, #11
 8002010:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800201a:	4619      	mov	r1, r3
 800201c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002020:	f001 fe2a 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002024:	bf00      	nop
 8002026:	3778      	adds	r7, #120	@ 0x78
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	50040000 	.word	0x50040000
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	@ 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_SPI_MspInit+0x80>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d129      	bne.n	80020aa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002056:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <HAL_SPI_MspInit+0x84>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	4a17      	ldr	r2, [pc, #92]	@ (80020b8 <HAL_SPI_MspInit+0x84>)
 800205c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002060:	6613      	str	r3, [r2, #96]	@ 0x60
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <HAL_SPI_MspInit+0x84>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_SPI_MspInit+0x84>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	4a11      	ldr	r2, [pc, #68]	@ (80020b8 <HAL_SPI_MspInit+0x84>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207a:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <HAL_SPI_MspInit+0x84>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8002086:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002098:	2305      	movs	r3, #5
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a6:	f001 fde7 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	@ 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40013000 	.word	0x40013000
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a16      	ldr	r2, [pc, #88]	@ (8002124 <HAL_TIM_Base_MspInit+0x68>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d10c      	bne.n	80020e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ce:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <HAL_TIM_Base_MspInit+0x6c>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d2:	4a15      	ldr	r2, [pc, #84]	@ (8002128 <HAL_TIM_Base_MspInit+0x6c>)
 80020d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020da:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <HAL_TIM_Base_MspInit+0x6c>)
 80020dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020e6:	e018      	b.n	800211a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f0:	d113      	bne.n	800211a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <HAL_TIM_Base_MspInit+0x6c>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002128 <HAL_TIM_Base_MspInit+0x6c>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <HAL_TIM_Base_MspInit+0x6c>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	201c      	movs	r0, #28
 8002110:	f001 fd7b 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002114:	201c      	movs	r0, #28
 8002116:	f001 fd94 	bl	8003c42 <HAL_NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <HAL_TIM_MspPostInit+0x68>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11d      	bne.n	800218a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_TIM_MspPostInit+0x6c>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_TIM_MspPostInit+0x6c>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_TIM_MspPostInit+0x6c>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002166:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800216a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002178:	2301      	movs	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	4619      	mov	r1, r3
 8002182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002186:	f001 fd77 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40012c00 	.word	0x40012c00
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b09e      	sub	sp, #120	@ 0x78
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	2254      	movs	r2, #84	@ 0x54
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f006 fb22 	bl	8008806 <memset>
  if(huart->Instance==USART2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a28      	ldr	r2, [pc, #160]	@ (8002268 <HAL_UART_MspInit+0xcc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d148      	bne.n	800225e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fdab 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021e4:	f7ff fbfa 	bl	80019dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e8:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_UART_MspInit+0xd0>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	4a1f      	ldr	r2, [pc, #124]	@ (800226c <HAL_UART_MspInit+0xd0>)
 80021ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f4:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <HAL_UART_MspInit+0xd0>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <HAL_UART_MspInit+0xd0>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002204:	4a19      	ldr	r2, [pc, #100]	@ (800226c <HAL_UART_MspInit+0xd0>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220c:	4b17      	ldr	r3, [pc, #92]	@ (800226c <HAL_UART_MspInit+0xd0>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002218:	2304      	movs	r3, #4
 800221a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002228:	2307      	movs	r3, #7
 800222a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800222c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002230:	4619      	mov	r1, r3
 8002232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002236:	f001 fd1f 	bl	8003c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800223a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800223e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800224c:	2303      	movs	r3, #3
 800224e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002254:	4619      	mov	r1, r3
 8002256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800225a:	f001 fd0d 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3778      	adds	r7, #120	@ 0x78
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40004400 	.word	0x40004400
 800226c:	40021000 	.word	0x40021000

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <NMI_Handler+0x4>

08002276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <MemManage_Handler+0x4>

08002282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <BusFault_Handler+0x4>

08002288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <UsageFault_Handler+0x4>

0800228e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022bc:	f000 f974 	bl	80025a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80022c8:	2080      	movs	r0, #128	@ 0x80
 80022ca:	f001 fe6f 	bl	8003fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <TIM2_IRQHandler+0x10>)
 80022da:	f003 fdb3 	bl	8005e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000304 	.word	0x20000304

080022e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_kill>:

int _kill(int pid, int sig)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002302:	f006 fad3 	bl	80088ac <__errno>
 8002306:	4603      	mov	r3, r0
 8002308:	2216      	movs	r2, #22
 800230a:	601a      	str	r2, [r3, #0]
  return -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_exit>:

void _exit (int status)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ffe7 	bl	80022f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800232a:	e7fe      	b.n	800232a <_exit+0x12>

0800232c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
//  }
//
//  return len;
  extern UART_HandleTypeDef huart2;

  HAL_StatusTypeDef result = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]

  len = 1;
 800233c:	2301      	movs	r3, #1
 800233e:	607b      	str	r3, [r7, #4]

  result = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	b29a      	uxth	r2, r3
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	4808      	ldr	r0, [pc, #32]	@ (800236c <_read+0x40>)
 800234c:	f004 fe1f 	bl	8006f8e <HAL_UART_Receive>
 8002350:	4603      	mov	r3, r0
 8002352:	75fb      	strb	r3, [r7, #23]
  if (result != HAL_OK)
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <_read+0x34>
  {
	  len = EOF;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	607b      	str	r3, [r7, #4]
  }
  return len;
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000350 	.word	0x20000350

08002370 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
//  {
//    __io_putchar(*ptr++);
//  }
  extern UART_HandleTypeDef huart2;

  HAL_StatusTypeDef result = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]

  result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	b29a      	uxth	r2, r3
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	4809      	ldr	r0, [pc, #36]	@ (80023b0 <_write+0x40>)
 800238c:	f004 fd6c 	bl	8006e68 <HAL_UART_Transmit>
 8002390:	4603      	mov	r3, r0
 8002392:	75fb      	strb	r3, [r7, #23]
  if (result == HAL_ERROR || result == HAL_BUSY)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d002      	beq.n	80023a0 <_write+0x30>
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d101      	bne.n	80023a4 <_write+0x34>
  {
	  Error_Handler();
 80023a0:	f7ff fb1c 	bl	80019dc <Error_Handler>
  }
  return len;
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000350 	.word	0x20000350

080023b4 <_close>:

int _close(int file)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023dc:	605a      	str	r2, [r3, #4]
  return 0;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_isatty>:

int _isatty(int file)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	@ (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f006 fa2e 	bl	80088ac <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20010000 	.word	0x20010000
 800247c:	00000400 	.word	0x00000400
 8002480:	200003d8 	.word	0x200003d8
 8002484:	20000530 	.word	0x20000530

08002488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024b0:	f7ff ffea 	bl	8002488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b4:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024b6:	490d      	ldr	r1, [pc, #52]	@ (80024ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b8:	4a0d      	ldr	r2, [pc, #52]	@ (80024f0 <LoopForever+0xe>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024cc:	4c0a      	ldr	r4, [pc, #40]	@ (80024f8 <LoopForever+0x16>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024da:	f006 f9ed 	bl	80088b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024de:	f7fe ff5f 	bl	80013a0 <main>

080024e2 <LoopForever>:

LoopForever:
    b LoopForever
 80024e2:	e7fe      	b.n	80024e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80024f0:	0800ced8 	.word	0x0800ced8
  ldr r2, =_sbss
 80024f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80024f8:	2000052c 	.word	0x2000052c

080024fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC1_IRQHandler>

080024fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002508:	2003      	movs	r0, #3
 800250a:	f001 fb73 	bl	8003bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250e:	2000      	movs	r0, #0
 8002510:	f000 f80e 	bl	8002530 <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	e001      	b.n	8002524 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002520:	f7ff fd00 	bl	8001f24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002524:	79fb      	ldrb	r3, [r7, #7]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800253c:	4b17      	ldr	r3, [pc, #92]	@ (800259c <HAL_InitTick+0x6c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d023      	beq.n	800258c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002544:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <HAL_InitTick+0x70>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <HAL_InitTick+0x6c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002552:	fbb3 f3f1 	udiv	r3, r3, r1
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	4618      	mov	r0, r3
 800255c:	f001 fb7f 	bl	8003c5e <HAL_SYSTICK_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10f      	bne.n	8002586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d809      	bhi.n	8002580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f001 fb49 	bl	8003c0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002578:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <HAL_InitTick+0x74>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e007      	b.n	8002590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e004      	b.n	8002590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e001      	b.n	8002590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000008 	.word	0x20000008
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000008 	.word	0x20000008
 80025cc:	200003dc 	.word	0x200003dc

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	200003dc 	.word	0x200003dc

080025e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff ffee 	bl	80025d0 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d005      	beq.n	800260e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_Delay+0x44>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260e:	bf00      	nop
 8002610:	f7ff ffde 	bl	80025d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8f7      	bhi.n	8002610 <HAL_Delay+0x28>
  {
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000008 	.word	0x20000008

08002630 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	609a      	str	r2, [r3, #8]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3360      	adds	r3, #96	@ 0x60
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <LL_ADC_SetOffset+0x44>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026d0:	bf00      	nop
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	03fff000 	.word	0x03fff000

080026e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3360      	adds	r3, #96	@ 0x60
 80026ee:	461a      	mov	r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3360      	adds	r3, #96	@ 0x60
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	431a      	orrs	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3330      	adds	r3, #48	@ 0x30
 8002778:	461a      	mov	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	4413      	add	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	211f      	movs	r1, #31
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	401a      	ands	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	f003 011f 	and.w	r1, r3, #31
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	431a      	orrs	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3314      	adds	r3, #20
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	0e5b      	lsrs	r3, r3, #25
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	4413      	add	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	0d1b      	lsrs	r3, r3, #20
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2107      	movs	r1, #7
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	401a      	ands	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	0d1b      	lsrs	r3, r3, #20
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	431a      	orrs	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002830:	43db      	mvns	r3, r3
 8002832:	401a      	ands	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0318 	and.w	r3, r3, #24
 800283a:	4908      	ldr	r1, [pc, #32]	@ (800285c <LL_ADC_SetChannelSingleDiff+0x44>)
 800283c:	40d9      	lsrs	r1, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	400b      	ands	r3, r1
 8002842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002846:	431a      	orrs	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	0007ffff 	.word	0x0007ffff

08002860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6093      	str	r3, [r2, #8]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002898:	d101      	bne.n	800289e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028e8:	d101      	bne.n	80028ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800290c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002938:	f043 0202 	orr.w	r2, r3, #2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <LL_ADC_IsEnabled+0x18>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <LL_ADC_IsEnabled+0x1a>
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d101      	bne.n	800298a <LL_ADC_IsDisableOngoing+0x18>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <LL_ADC_IsDisableOngoing+0x1a>
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029ac:	f043 0204 	orr.w	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029d4:	f043 0210 	orr.w	r2, r3, #16
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d101      	bne.n	8002a00 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d101      	bne.n	8002a4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e12c      	b.n	8002cd0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff fa71 	bl	8001f6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fef1 	bl	8002884 <LL_ADC_IsDeepPowerDownEnabled>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d004      	beq.n	8002ab2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fed7 	bl	8002860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff0c 	bl	80028d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d115      	bne.n	8002aee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fef0 	bl	80028ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002acc:	4b82      	ldr	r3, [pc, #520]	@ (8002cd8 <HAL_ADC_Init+0x27c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	4a82      	ldr	r2, [pc, #520]	@ (8002cdc <HAL_ADC_Init+0x280>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff feee 	bl	80028d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b02:	f043 0210 	orr.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff62 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8002b24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f040 80c5 	bne.w	8002cbe <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 80c1 	bne.w	8002cbe <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b44:	f043 0202 	orr.w	r2, r3, #2
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fefb 	bl	800294c <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b5c:	4860      	ldr	r0, [pc, #384]	@ (8002ce0 <HAL_ADC_Init+0x284>)
 8002b5e:	f7ff fef5 	bl	800294c <LL_ADC_IsEnabled>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	485d      	ldr	r0, [pc, #372]	@ (8002ce4 <HAL_ADC_Init+0x288>)
 8002b70:	f7ff fd5e 	bl	8002630 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7e5b      	ldrb	r3, [r3, #25]
 8002b78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b92:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d106      	bne.n	8002bb0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	045b      	lsls	r3, r3, #17
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	4b45      	ldr	r3, [pc, #276]	@ (8002ce8 <HAL_ADC_Init+0x28c>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	69b9      	ldr	r1, [r7, #24]
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff feff 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8002bea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff20 	bl	8002a36 <LL_ADC_INJ_IsConversionOngoing>
 8002bf6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d13d      	bne.n	8002c7a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d13a      	bne.n	8002c7a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c08:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c10:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c20:	f023 0302 	bic.w	r3, r3, #2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	69b9      	ldr	r1, [r7, #24]
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d118      	bne.n	8002c6a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c42:	f023 0304 	bic.w	r3, r3, #4
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c54:	4311      	orrs	r1, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	611a      	str	r2, [r3, #16]
 8002c68:	e007      	b.n	8002c7a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d10c      	bne.n	8002c9c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	f023 010f 	bic.w	r1, r3, #15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	1e5a      	subs	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9a:	e007      	b.n	8002cac <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 020f 	bic.w	r2, r2, #15
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	f023 0303 	bic.w	r3, r3, #3
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54
 8002cbc:	e007      	b.n	8002cce <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	f043 0210 	orr.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cce:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	053e2d63 	.word	0x053e2d63
 8002ce0:	50040000 	.word	0x50040000
 8002ce4:	50040300 	.word	0x50040300
 8002ce8:	fff0c007 	.word	0xfff0c007

08002cec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fe75 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d14f      	bne.n	8002da4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_Start+0x26>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e04b      	b.n	8002daa <HAL_ADC_Start+0xbe>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fdb4 	bl	8003888 <ADC_Enable>
 8002d20:	4603      	mov	r3, r0
 8002d22:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d137      	bne.n	8002d9a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4a:	d106      	bne.n	8002d5a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	f023 0206 	bic.w	r2, r3, #6
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d58:	e002      	b.n	8002d60 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	221c      	movs	r2, #28
 8002d66:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d82:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d86:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fe00 	bl	8002998 <LL_ADC_REG_StartConversion>
 8002d98:	e006      	b.n	8002da8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002da2:	e001      	b.n	8002da8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
 8002da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_Stop+0x16>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e023      	b.n	8002e10 <HAL_ADC_Stop+0x5e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fc9c 	bl	8003710 <ADC_ConversionStop>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d111      	bne.n	8002e06 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fdd6 	bl	8003994 <ADC_Disable>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d102      	bne.n	8002e30 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e010      	b.n	8002e52 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06f      	b.n	8002f2e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002e4e:	2304      	movs	r3, #4
 8002e50:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e52:	f7ff fbbd 	bl	80025d0 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e58:	e021      	b.n	8002e9e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d01d      	beq.n	8002e9e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e62:	f7ff fbb5 	bl	80025d0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <HAL_ADC_PollForConversion+0x60>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d112      	bne.n	8002e9e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	f043 0204 	orr.w	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e047      	b.n	8002f2e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0d6      	beq.n	8002e5a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fc40 	bl	8002742 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01c      	beq.n	8002f02 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7e5b      	ldrb	r3, [r3, #25]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d118      	bne.n	8002f02 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d111      	bne.n	8002f02 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d104      	bne.n	8002f1a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2208      	movs	r2, #8
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e008      	b.n	8002f2c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	220c      	movs	r2, #12
 8002f2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0b6      	sub	sp, #216	@ 0xd8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x22>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e3b9      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x796>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fd32 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 839e 	bne.w	80036c8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d824      	bhi.n	8002fde <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	3b02      	subs	r3, #2
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d81b      	bhi.n	8002fd6 <HAL_ADC_ConfigChannel+0x86>
 8002f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <HAL_ADC_ConfigChannel+0x54>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fbd 	.word	0x08002fbd
 8002fac:	08002fc5 	.word	0x08002fc5
 8002fb0:	08002fcd 	.word	0x08002fcd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	605a      	str	r2, [r3, #4]
          break;
 8002fba:	e010      	b.n	8002fde <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2212      	movs	r2, #18
 8002fc0:	605a      	str	r2, [r3, #4]
          break;
 8002fc2:	e00c      	b.n	8002fde <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2218      	movs	r2, #24
 8002fc8:	605a      	str	r2, [r3, #4]
          break;
 8002fca:	e008      	b.n	8002fde <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fd2:	605a      	str	r2, [r3, #4]
          break;
 8002fd4:	e003      	b.n	8002fde <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2206      	movs	r2, #6
 8002fda:	605a      	str	r2, [r3, #4]
          break;
 8002fdc:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f7ff fbbc 	bl	8002768 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fcf7 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 8002ffa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fd17 	bl	8002a36 <LL_ADC_INJ_IsConversionOngoing>
 8003008:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800300c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003010:	2b00      	cmp	r3, #0
 8003012:	f040 81a6 	bne.w	8003362 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 81a1 	bne.w	8003362 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6819      	ldr	r1, [r3, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	461a      	mov	r2, r3
 800302e:	f7ff fbc7 	bl	80027c0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d00a      	beq.n	800306a <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6919      	ldr	r1, [r3, #16]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003064:	f7ff fb18 	bl	8002698 <LL_ADC_SetOffset>
 8003068:	e17b      	b.n	8003362 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fb35 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x146>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fb2a 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 800308c:	4603      	mov	r3, r0
 800308e:	0e9b      	lsrs	r3, r3, #26
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	e01e      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x184>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fb1f 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80030b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 80030c4:	2320      	movs	r3, #32
 80030c6:	e004      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 80030c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x19c>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	0e9b      	lsrs	r3, r3, #26
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	e018      	b.n	800311e <HAL_ADC_ConfigChannel+0x1ce>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003108:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8003110:	2320      	movs	r3, #32
 8003112:	e004      	b.n	800311e <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8003114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800311e:	429a      	cmp	r2, r3
 8003120:	d106      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff faee 	bl	800270c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fad2 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <HAL_ADC_ConfigChannel+0x20c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fac7 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 8003152:	4603      	mov	r3, r0
 8003154:	0e9b      	lsrs	r3, r3, #26
 8003156:	f003 021f 	and.w	r2, r3, #31
 800315a:	e01e      	b.n	800319a <HAL_ADC_ConfigChannel+0x24a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fabc 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 8003168:	4603      	mov	r3, r0
 800316a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800317a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800317e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 800318a:	2320      	movs	r3, #32
 800318c:	e004      	b.n	8003198 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800318e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d105      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x262>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	0e9b      	lsrs	r3, r3, #26
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	e018      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x294>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80031c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80031ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 80031d6:	2320      	movs	r3, #32
 80031d8:	e004      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80031da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d106      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2200      	movs	r2, #0
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fa8b 	bl	800270c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2102      	movs	r1, #2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fa6f 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 8003202:	4603      	mov	r3, r0
 8003204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x2d2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2102      	movs	r1, #2
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fa64 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 8003218:	4603      	mov	r3, r0
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	e01e      	b.n	8003260 <HAL_ADC_ConfigChannel+0x310>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2102      	movs	r1, #2
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fa59 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 800322e:	4603      	mov	r3, r0
 8003230:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003240:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003244:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003248:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003250:	2320      	movs	r3, #32
 8003252:	e004      	b.n	800325e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003254:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x328>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	e016      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x356>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800328a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800328c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003290:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e004      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 800329c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d106      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	2102      	movs	r1, #2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fa2a 	bl	800270c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2103      	movs	r1, #3
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fa0e 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x394>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2103      	movs	r1, #3
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fa03 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 80032da:	4603      	mov	r3, r0
 80032dc:	0e9b      	lsrs	r3, r3, #26
 80032de:	f003 021f 	and.w	r2, r3, #31
 80032e2:	e017      	b.n	8003314 <HAL_ADC_ConfigChannel+0x3c4>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2103      	movs	r1, #3
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f9f8 	bl	80026e0 <LL_ADC_GetOffsetChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80032fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032fe:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e003      	b.n	8003312 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 800330a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_ADC_ConfigChannel+0x3dc>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	0e9b      	lsrs	r3, r3, #26
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	e011      	b.n	8003350 <HAL_ADC_ConfigChannel+0x400>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800333a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800333c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800333e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	e003      	b.n	8003350 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8003348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003350:	429a      	cmp	r2, r3
 8003352:	d106      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	2103      	movs	r1, #3
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff f9d5 	bl	800270c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff faf0 	bl	800294c <LL_ADC_IsEnabled>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 8140 	bne.w	80035f4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	461a      	mov	r2, r3
 8003382:	f7ff fa49 	bl	8002818 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	4a8f      	ldr	r2, [pc, #572]	@ (80035c8 <HAL_ADC_ConfigChannel+0x678>)
 800338c:	4293      	cmp	r3, r2
 800338e:	f040 8131 	bne.w	80035f4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x46a>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	3301      	adds	r3, #1
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	2b09      	cmp	r3, #9
 80033b0:	bf94      	ite	ls
 80033b2:	2301      	movls	r3, #1
 80033b4:	2300      	movhi	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e019      	b.n	80033ee <HAL_ADC_ConfigChannel+0x49e>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80033c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033ca:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80033cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e003      	b.n	80033de <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 80033d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	bf94      	ite	ls
 80033e8:	2301      	movls	r3, #1
 80033ea:	2300      	movhi	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d079      	beq.n	80034e6 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_ADC_ConfigChannel+0x4be>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	3301      	adds	r3, #1
 8003406:	069b      	lsls	r3, r3, #26
 8003408:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800340c:	e015      	b.n	800343a <HAL_ADC_ConfigChannel+0x4ea>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800341c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800341e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e003      	b.n	8003432 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800342a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	3301      	adds	r3, #1
 8003434:	069b      	lsls	r3, r3, #26
 8003436:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_ADC_ConfigChannel+0x50a>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0e9b      	lsrs	r3, r3, #26
 800344c:	3301      	adds	r3, #1
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f303 	lsl.w	r3, r1, r3
 8003458:	e017      	b.n	800348a <HAL_ADC_ConfigChannel+0x53a>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800346c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8003472:	2320      	movs	r3, #32
 8003474:	e003      	b.n	800347e <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8003476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	ea42 0103 	orr.w	r1, r2, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10a      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x560>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	0e9b      	lsrs	r3, r3, #26
 80034a0:	3301      	adds	r3, #1
 80034a2:	f003 021f 	and.w	r2, r3, #31
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	051b      	lsls	r3, r3, #20
 80034ae:	e018      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x592>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80034c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80034c8:	2320      	movs	r3, #32
 80034ca:	e003      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80034cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	f003 021f 	and.w	r2, r3, #31
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e2:	430b      	orrs	r3, r1
 80034e4:	e081      	b.n	80035ea <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d107      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x5b2>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	3301      	adds	r3, #1
 80034fa:	069b      	lsls	r3, r3, #26
 80034fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003500:	e015      	b.n	800352e <HAL_ADC_ConfigChannel+0x5de>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003512:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 800351a:	2320      	movs	r3, #32
 800351c:	e003      	b.n	8003526 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	3301      	adds	r3, #1
 8003528:	069b      	lsls	r3, r3, #26
 800352a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_ADC_ConfigChannel+0x5fe>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0e9b      	lsrs	r3, r3, #26
 8003540:	3301      	adds	r3, #1
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	e017      	b.n	800357e <HAL_ADC_ConfigChannel+0x62e>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	61fb      	str	r3, [r7, #28]
  return result;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003566:	2320      	movs	r3, #32
 8003568:	e003      	b.n	8003572 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	ea42 0103 	orr.w	r1, r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10d      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x65a>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	0e9b      	lsrs	r3, r3, #26
 8003594:	3301      	adds	r3, #1
 8003596:	f003 021f 	and.w	r2, r3, #31
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	3b1e      	subs	r3, #30
 80035a2:	051b      	lsls	r3, r3, #20
 80035a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035a8:	e01e      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x698>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	613b      	str	r3, [r7, #16]
  return result;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e006      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x684>
 80035c6:	bf00      	nop
 80035c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	3301      	adds	r3, #1
 80035d6:	f003 021f 	and.w	r2, r3, #31
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	3b1e      	subs	r3, #30
 80035e2:	051b      	lsls	r3, r3, #20
 80035e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e8:	430b      	orrs	r3, r1
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	6892      	ldr	r2, [r2, #8]
 80035ee:	4619      	mov	r1, r3
 80035f0:	f7ff f8e6 	bl	80027c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b3d      	ldr	r3, [pc, #244]	@ (80036f0 <HAL_ADC_ConfigChannel+0x7a0>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d06c      	beq.n	80036da <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003600:	483c      	ldr	r0, [pc, #240]	@ (80036f4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003602:	f7ff f83b 	bl	800267c <LL_ADC_GetCommonPathInternalCh>
 8003606:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a3a      	ldr	r2, [pc, #232]	@ (80036f8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d127      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d121      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a35      	ldr	r2, [pc, #212]	@ (80036fc <HAL_ADC_ConfigChannel+0x7ac>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d157      	bne.n	80036da <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800362a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800362e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003632:	4619      	mov	r1, r3
 8003634:	482f      	ldr	r0, [pc, #188]	@ (80036f4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003636:	f7ff f80e 	bl	8002656 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800363a:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <HAL_ADC_ConfigChannel+0x7b0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	099b      	lsrs	r3, r3, #6
 8003640:	4a30      	ldr	r2, [pc, #192]	@ (8003704 <HAL_ADC_ConfigChannel+0x7b4>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	099b      	lsrs	r3, r3, #6
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003654:	e002      	b.n	800365c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3b01      	subs	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f9      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003662:	e03a      	b.n	80036da <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a27      	ldr	r2, [pc, #156]	@ (8003708 <HAL_ADC_ConfigChannel+0x7b8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d113      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x746>
 800366e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10d      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1f      	ldr	r2, [pc, #124]	@ (80036fc <HAL_ADC_ConfigChannel+0x7ac>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d12a      	bne.n	80036da <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003688:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800368c:	4619      	mov	r1, r3
 800368e:	4819      	ldr	r0, [pc, #100]	@ (80036f4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003690:	f7fe ffe1 	bl	8002656 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003694:	e021      	b.n	80036da <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <HAL_ADC_ConfigChannel+0x7bc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d11c      	bne.n	80036da <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d116      	bne.n	80036da <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a12      	ldr	r2, [pc, #72]	@ (80036fc <HAL_ADC_ConfigChannel+0x7ac>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d111      	bne.n	80036da <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036be:	4619      	mov	r1, r3
 80036c0:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <HAL_ADC_ConfigChannel+0x7a4>)
 80036c2:	f7fe ffc8 	bl	8002656 <LL_ADC_SetCommonPathInternalCh>
 80036c6:	e008      	b.n	80036da <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	37d8      	adds	r7, #216	@ 0xd8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	80080000 	.word	0x80080000
 80036f4:	50040300 	.word	0x50040300
 80036f8:	c7520000 	.word	0xc7520000
 80036fc:	50040000 	.word	0x50040000
 8003700:	20000000 	.word	0x20000000
 8003704:	053e2d63 	.word	0x053e2d63
 8003708:	cb840000 	.word	0xcb840000
 800370c:	80000001 	.word	0x80000001

08003710 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f95e 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 800372c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f97f 	bl	8002a36 <LL_ADC_INJ_IsConversionOngoing>
 8003738:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8098 	beq.w	8003878 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02a      	beq.n	80037ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7e5b      	ldrb	r3, [r3, #25]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d126      	bne.n	80037ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7e1b      	ldrb	r3, [r3, #24]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d122      	bne.n	80037ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800376a:	e014      	b.n	8003796 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4a45      	ldr	r2, [pc, #276]	@ (8003884 <ADC_ConversionStop+0x174>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d90d      	bls.n	8003790 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003778:	f043 0210 	orr.w	r2, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e074      	b.n	800387a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	3301      	adds	r3, #1
 8003794:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b40      	cmp	r3, #64	@ 0x40
 80037a2:	d1e3      	bne.n	800376c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2240      	movs	r2, #64	@ 0x40
 80037aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d014      	beq.n	80037dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff f916 	bl	80029e8 <LL_ADC_REG_IsConversionOngoing>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff f8d3 	bl	8002972 <LL_ADC_IsDisableOngoing>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d104      	bne.n	80037dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f8f2 	bl	80029c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d014      	beq.n	800380c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff f925 	bl	8002a36 <LL_ADC_INJ_IsConversionOngoing>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff f8bb 	bl	8002972 <LL_ADC_IsDisableOngoing>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d104      	bne.n	800380c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f901 	bl	8002a0e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d005      	beq.n	800381e <ADC_ConversionStop+0x10e>
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d105      	bne.n	8003824 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003818:	230c      	movs	r3, #12
 800381a:	617b      	str	r3, [r7, #20]
        break;
 800381c:	e005      	b.n	800382a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800381e:	2308      	movs	r3, #8
 8003820:	617b      	str	r3, [r7, #20]
        break;
 8003822:	e002      	b.n	800382a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003824:	2304      	movs	r3, #4
 8003826:	617b      	str	r3, [r7, #20]
        break;
 8003828:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800382a:	f7fe fed1 	bl	80025d0 <HAL_GetTick>
 800382e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003830:	e01b      	b.n	800386a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003832:	f7fe fecd 	bl	80025d0 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b05      	cmp	r3, #5
 800383e:	d914      	bls.n	800386a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	f043 0210 	orr.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e007      	b.n	800387a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1dc      	bne.n	8003832 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	a33fffff 	.word	0xa33fffff

08003888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff f857 	bl	800294c <LL_ADC_IsEnabled>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d169      	bne.n	8003978 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	4b36      	ldr	r3, [pc, #216]	@ (8003984 <ADC_Enable+0xfc>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e055      	b.n	800397a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff f812 	bl	80028fc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038d8:	482b      	ldr	r0, [pc, #172]	@ (8003988 <ADC_Enable+0x100>)
 80038da:	f7fe fecf 	bl	800267c <LL_ADC_GetCommonPathInternalCh>
 80038de:	4603      	mov	r3, r0
 80038e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e8:	4b28      	ldr	r3, [pc, #160]	@ (800398c <ADC_Enable+0x104>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	4a28      	ldr	r2, [pc, #160]	@ (8003990 <ADC_Enable+0x108>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003902:	e002      	b.n	800390a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	3b01      	subs	r3, #1
 8003908:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003910:	f7fe fe5e 	bl	80025d0 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003916:	e028      	b.n	800396a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f815 	bl	800294c <LL_ADC_IsEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe ffe5 	bl	80028fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003932:	f7fe fe4d 	bl	80025d0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d914      	bls.n	800396a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d00d      	beq.n	800396a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003952:	f043 0210 	orr.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e007      	b.n	800397a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d1cf      	bne.n	8003918 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	8000003f 	.word	0x8000003f
 8003988:	50040300 	.word	0x50040300
 800398c:	20000000 	.word	0x20000000
 8003990:	053e2d63 	.word	0x053e2d63

08003994 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe ffe6 	bl	8002972 <LL_ADC_IsDisableOngoing>
 80039a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe ffcd 	bl	800294c <LL_ADC_IsEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d047      	beq.n	8003a48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d144      	bne.n	8003a48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030d 	and.w	r3, r3, #13
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10c      	bne.n	80039e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe ffa7 	bl	8002924 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2203      	movs	r2, #3
 80039dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039de:	f7fe fdf7 	bl	80025d0 <HAL_GetTick>
 80039e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039e4:	e029      	b.n	8003a3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ea:	f043 0210 	orr.w	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e023      	b.n	8003a4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a02:	f7fe fde5 	bl	80025d0 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d914      	bls.n	8003a3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e007      	b.n	8003a4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1dc      	bne.n	8003a02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a70:	4013      	ands	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a86:	4a04      	ldr	r2, [pc, #16]	@ (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	60d3      	str	r3, [r2, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa0:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	f003 0307 	and.w	r3, r3, #7
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	db0b      	blt.n	8003ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	4907      	ldr	r1, [pc, #28]	@ (8003af0 <__NVIC_EnableIRQ+0x38>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2001      	movs	r0, #1
 8003ada:	fa00 f202 	lsl.w	r2, r0, r2
 8003ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000e100 	.word	0xe000e100

08003af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db0a      	blt.n	8003b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	490c      	ldr	r1, [pc, #48]	@ (8003b40 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	0112      	lsls	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	440b      	add	r3, r1
 8003b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b1c:	e00a      	b.n	8003b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4908      	ldr	r1, [pc, #32]	@ (8003b44 <__NVIC_SetPriority+0x50>)
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	761a      	strb	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	@ 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f1c3 0307 	rsb	r3, r3, #7
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf28      	it	cs
 8003b66:	2304      	movcs	r3, #4
 8003b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d902      	bls.n	8003b78 <NVIC_EncodePriority+0x30>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3b03      	subs	r3, #3
 8003b76:	e000      	b.n	8003b7a <NVIC_EncodePriority+0x32>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43d9      	mvns	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	4313      	orrs	r3, r2
         );
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	@ 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bc0:	d301      	bcc.n	8003bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e00f      	b.n	8003be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf0 <SysTick_Config+0x40>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bce:	210f      	movs	r1, #15
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	f7ff ff8e 	bl	8003af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <SysTick_Config+0x40>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bde:	4b04      	ldr	r3, [pc, #16]	@ (8003bf0 <SysTick_Config+0x40>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	e000e010 	.word	0xe000e010

08003bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff29 	bl	8003a54 <__NVIC_SetPriorityGrouping>
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	4603      	mov	r3, r0
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c1c:	f7ff ff3e 	bl	8003a9c <__NVIC_GetPriorityGrouping>
 8003c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	6978      	ldr	r0, [r7, #20]
 8003c28:	f7ff ff8e 	bl	8003b48 <NVIC_EncodePriority>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff ff5d 	bl	8003af4 <__NVIC_SetPriority>
}
 8003c3a:	bf00      	nop
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff31 	bl	8003ab8 <__NVIC_EnableIRQ>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffa2 	bl	8003bb0 <SysTick_Config>
 8003c6c:	4603      	mov	r3, r0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c86:	e148      	b.n	8003f1a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 813a 	beq.w	8003f14 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d005      	beq.n	8003cb8 <HAL_GPIO_Init+0x40>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d130      	bne.n	8003d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cee:	2201      	movs	r2, #1
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	f003 0201 	and.w	r2, r3, #1
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d017      	beq.n	8003d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d123      	bne.n	8003daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	08da      	lsrs	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3208      	adds	r2, #8
 8003d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	220f      	movs	r2, #15
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	08da      	lsrs	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3208      	adds	r2, #8
 8003da4:	6939      	ldr	r1, [r7, #16]
 8003da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	2203      	movs	r2, #3
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0203 	and.w	r2, r3, #3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8094 	beq.w	8003f14 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dec:	4b52      	ldr	r3, [pc, #328]	@ (8003f38 <HAL_GPIO_Init+0x2c0>)
 8003dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df0:	4a51      	ldr	r2, [pc, #324]	@ (8003f38 <HAL_GPIO_Init+0x2c0>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003df8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f38 <HAL_GPIO_Init+0x2c0>)
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e04:	4a4d      	ldr	r2, [pc, #308]	@ (8003f3c <HAL_GPIO_Init+0x2c4>)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e2e:	d00d      	beq.n	8003e4c <HAL_GPIO_Init+0x1d4>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a43      	ldr	r2, [pc, #268]	@ (8003f40 <HAL_GPIO_Init+0x2c8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <HAL_GPIO_Init+0x1d0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a42      	ldr	r2, [pc, #264]	@ (8003f44 <HAL_GPIO_Init+0x2cc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_GPIO_Init+0x1cc>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e004      	b.n	8003e4e <HAL_GPIO_Init+0x1d6>
 8003e44:	2307      	movs	r3, #7
 8003e46:	e002      	b.n	8003e4e <HAL_GPIO_Init+0x1d6>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <HAL_GPIO_Init+0x1d6>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	f002 0203 	and.w	r2, r2, #3
 8003e54:	0092      	lsls	r2, r2, #2
 8003e56:	4093      	lsls	r3, r2
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e5e:	4937      	ldr	r1, [pc, #220]	@ (8003f3c <HAL_GPIO_Init+0x2c4>)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	3302      	adds	r3, #2
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e6c:	4b36      	ldr	r3, [pc, #216]	@ (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e90:	4a2d      	ldr	r2, [pc, #180]	@ (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e96:	4b2c      	ldr	r3, [pc, #176]	@ (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eba:	4a23      	ldr	r2, [pc, #140]	@ (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ec0:	4b21      	ldr	r3, [pc, #132]	@ (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ee4:	4a18      	ldr	r2, [pc, #96]	@ (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003eea:	4b17      	ldr	r3, [pc, #92]	@ (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f48 <HAL_GPIO_Init+0x2d0>)
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3301      	adds	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f47f aeaf 	bne.w	8003c88 <HAL_GPIO_Init+0x10>
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	48000400 	.word	0x48000400
 8003f44:	48000800 	.word	0x48000800
 8003f48:	40010400 	.word	0x40010400

08003f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	887b      	ldrh	r3, [r7, #2]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	e001      	b.n	8003f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	807b      	strh	r3, [r7, #2]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f8c:	787b      	ldrb	r3, [r7, #1]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f98:	e002      	b.n	8003fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fb6:	4b08      	ldr	r3, [pc, #32]	@ (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d006      	beq.n	8003fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fc2:	4a05      	ldr	r2, [pc, #20]	@ (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd f9ba 	bl	8001344 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40010400 	.word	0x40010400

08003fdc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe0:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fea:	6013      	str	r3, [r2, #0]
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40007000 	.word	0x40007000

08003ffc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004000:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <HAL_PWREx_GetVoltageRange+0x18>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40007000 	.word	0x40007000

08004018 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004026:	d130      	bne.n	800408a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004028:	4b23      	ldr	r3, [pc, #140]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004034:	d038      	beq.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004036:	4b20      	ldr	r3, [pc, #128]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800403e:	4a1e      	ldr	r2, [pc, #120]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004040:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004044:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004046:	4b1d      	ldr	r3, [pc, #116]	@ (80040bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2232      	movs	r2, #50	@ 0x32
 800404c:	fb02 f303 	mul.w	r3, r2, r3
 8004050:	4a1b      	ldr	r2, [pc, #108]	@ (80040c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	0c9b      	lsrs	r3, r3, #18
 8004058:	3301      	adds	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800405c:	e002      	b.n	8004064 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b01      	subs	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004064:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004070:	d102      	bne.n	8004078 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f2      	bne.n	800405e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004078:	4b0f      	ldr	r3, [pc, #60]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004084:	d110      	bne.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e00f      	b.n	80040aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800408a:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004096:	d007      	beq.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004098:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040a0:	4a05      	ldr	r2, [pc, #20]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40007000 	.word	0x40007000
 80040bc:	20000000 	.word	0x20000000
 80040c0:	431bde83 	.word	0x431bde83

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f000 bc02 	b.w	80048dc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d8:	4b96      	ldr	r3, [pc, #600]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e2:	4b94      	ldr	r3, [pc, #592]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80e4 	beq.w	80042c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_RCC_OscConfig+0x4c>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	f040 808b 	bne.w	800421e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b01      	cmp	r3, #1
 800410c:	f040 8087 	bne.w	800421e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004110:	4b88      	ldr	r3, [pc, #544]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_OscConfig+0x64>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e3d9      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	4b81      	ldr	r3, [pc, #516]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_RCC_OscConfig+0x7e>
 8004138:	4b7e      	ldr	r3, [pc, #504]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004140:	e005      	b.n	800414e <HAL_RCC_OscConfig+0x8a>
 8004142:	4b7c      	ldr	r3, [pc, #496]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800414e:	4293      	cmp	r3, r2
 8004150:	d223      	bcs.n	800419a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fd8c 	bl	8004c74 <RCC_SetFlashLatencyFromMSIRange>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e3ba      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004166:	4b73      	ldr	r3, [pc, #460]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a72      	ldr	r2, [pc, #456]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800416c:	f043 0308 	orr.w	r3, r3, #8
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	4b70      	ldr	r3, [pc, #448]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	496d      	ldr	r1, [pc, #436]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004184:	4b6b      	ldr	r3, [pc, #428]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	4968      	ldr	r1, [pc, #416]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
 8004198:	e025      	b.n	80041e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800419a:	4b66      	ldr	r3, [pc, #408]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a65      	ldr	r2, [pc, #404]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80041a0:	f043 0308 	orr.w	r3, r3, #8
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b63      	ldr	r3, [pc, #396]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	4960      	ldr	r1, [pc, #384]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	495b      	ldr	r1, [pc, #364]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fd4c 	bl	8004c74 <RCC_SetFlashLatencyFromMSIRange>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e37a      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041e6:	f000 fc81 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 80041ea:	4602      	mov	r2, r0
 80041ec:	4b51      	ldr	r3, [pc, #324]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	4950      	ldr	r1, [pc, #320]	@ (8004338 <HAL_RCC_OscConfig+0x274>)
 80041f8:	5ccb      	ldrb	r3, [r1, r3]
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a4e      	ldr	r2, [pc, #312]	@ (800433c <HAL_RCC_OscConfig+0x278>)
 8004204:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004206:	4b4e      	ldr	r3, [pc, #312]	@ (8004340 <HAL_RCC_OscConfig+0x27c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe f990 	bl	8002530 <HAL_InitTick>
 8004210:	4603      	mov	r3, r0
 8004212:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d052      	beq.n	80042c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	e35e      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d032      	beq.n	800428c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004226:	4b43      	ldr	r3, [pc, #268]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a42      	ldr	r2, [pc, #264]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004232:	f7fe f9cd 	bl	80025d0 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800423a:	f7fe f9c9 	bl	80025d0 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e347      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800424c:	4b39      	ldr	r3, [pc, #228]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004258:	4b36      	ldr	r3, [pc, #216]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a35      	ldr	r2, [pc, #212]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800425e:	f043 0308 	orr.w	r3, r3, #8
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b33      	ldr	r3, [pc, #204]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	4930      	ldr	r1, [pc, #192]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004276:	4b2f      	ldr	r3, [pc, #188]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	492b      	ldr	r1, [pc, #172]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
 800428a:	e01a      	b.n	80042c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800428c:	4b29      	ldr	r3, [pc, #164]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a28      	ldr	r2, [pc, #160]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004298:	f7fe f99a 	bl	80025d0 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a0:	f7fe f996 	bl	80025d0 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e314      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042b2:	4b20      	ldr	r3, [pc, #128]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x1dc>
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d073      	beq.n	80043b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_OscConfig+0x21c>
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d10e      	bne.n	80042f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d10b      	bne.n	80042f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	4b14      	ldr	r3, [pc, #80]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d063      	beq.n	80043b4 <HAL_RCC_OscConfig+0x2f0>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d15f      	bne.n	80043b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e2f1      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004300:	d106      	bne.n	8004310 <HAL_RCC_OscConfig+0x24c>
 8004302:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a0b      	ldr	r2, [pc, #44]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e025      	b.n	800435c <HAL_RCC_OscConfig+0x298>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004318:	d114      	bne.n	8004344 <HAL_RCC_OscConfig+0x280>
 800431a:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a05      	ldr	r2, [pc, #20]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b03      	ldr	r3, [pc, #12]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a02      	ldr	r2, [pc, #8]	@ (8004334 <HAL_RCC_OscConfig+0x270>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e013      	b.n	800435c <HAL_RCC_OscConfig+0x298>
 8004334:	40021000 	.word	0x40021000
 8004338:	0800ca50 	.word	0x0800ca50
 800433c:	20000000 	.word	0x20000000
 8004340:	20000004 	.word	0x20000004
 8004344:	4ba0      	ldr	r3, [pc, #640]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a9f      	ldr	r2, [pc, #636]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800434a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4b9d      	ldr	r3, [pc, #628]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a9c      	ldr	r2, [pc, #624]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800435a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d013      	beq.n	800438c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fe f934 	bl	80025d0 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800436c:	f7fe f930 	bl	80025d0 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	@ 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e2ae      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800437e:	4b92      	ldr	r3, [pc, #584]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x2a8>
 800438a:	e014      	b.n	80043b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fe f920 	bl	80025d0 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004394:	f7fe f91c 	bl	80025d0 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	@ 0x64
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e29a      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043a6:	4b88      	ldr	r3, [pc, #544]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x2d0>
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d060      	beq.n	8004484 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_OscConfig+0x310>
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d119      	bne.n	8004402 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d116      	bne.n	8004402 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d4:	4b7c      	ldr	r3, [pc, #496]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_OscConfig+0x328>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e277      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b76      	ldr	r3, [pc, #472]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	4973      	ldr	r1, [pc, #460]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004400:	e040      	b.n	8004484 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d023      	beq.n	8004452 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800440a:	4b6f      	ldr	r3, [pc, #444]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a6e      	ldr	r2, [pc, #440]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fe f8db 	bl	80025d0 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441e:	f7fe f8d7 	bl	80025d0 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e255      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004430:	4b65      	ldr	r3, [pc, #404]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443c:	4b62      	ldr	r3, [pc, #392]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	495f      	ldr	r1, [pc, #380]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
 8004450:	e018      	b.n	8004484 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004452:	4b5d      	ldr	r3, [pc, #372]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5c      	ldr	r2, [pc, #368]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800445c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fe f8b7 	bl	80025d0 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004466:	f7fe f8b3 	bl	80025d0 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e231      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004478:	4b53      	ldr	r3, [pc, #332]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d03c      	beq.n	800450a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004498:	4b4b      	ldr	r3, [pc, #300]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449e:	4a4a      	ldr	r2, [pc, #296]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fe f892 	bl	80025d0 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b0:	f7fe f88e 	bl	80025d0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e20c      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c2:	4b41      	ldr	r3, [pc, #260]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ef      	beq.n	80044b0 <HAL_RCC_OscConfig+0x3ec>
 80044d0:	e01b      	b.n	800450a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d2:	4b3d      	ldr	r3, [pc, #244]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044d8:	4a3b      	ldr	r2, [pc, #236]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e2:	f7fe f875 	bl	80025d0 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fe f871 	bl	80025d0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e1ef      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044fc:	4b32      	ldr	r3, [pc, #200]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80044fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ef      	bne.n	80044ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80a6 	beq.w	8004664 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004518:	2300      	movs	r3, #0
 800451a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800451c:	4b2a      	ldr	r3, [pc, #168]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10d      	bne.n	8004544 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004528:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452c:	4a26      	ldr	r2, [pc, #152]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	@ 0x58
 8004534:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004540:	2301      	movs	r3, #1
 8004542:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004544:	4b21      	ldr	r3, [pc, #132]	@ (80045cc <HAL_RCC_OscConfig+0x508>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d118      	bne.n	8004582 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004550:	4b1e      	ldr	r3, [pc, #120]	@ (80045cc <HAL_RCC_OscConfig+0x508>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1d      	ldr	r2, [pc, #116]	@ (80045cc <HAL_RCC_OscConfig+0x508>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455c:	f7fe f838 	bl	80025d0 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004564:	f7fe f834 	bl	80025d0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e1b2      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004576:	4b15      	ldr	r3, [pc, #84]	@ (80045cc <HAL_RCC_OscConfig+0x508>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d108      	bne.n	800459c <HAL_RCC_OscConfig+0x4d8>
 800458a:	4b0f      	ldr	r3, [pc, #60]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004590:	4a0d      	ldr	r2, [pc, #52]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800459a:	e029      	b.n	80045f0 <HAL_RCC_OscConfig+0x52c>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d115      	bne.n	80045d0 <HAL_RCC_OscConfig+0x50c>
 80045a4:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	4a07      	ldr	r2, [pc, #28]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045b4:	4b04      	ldr	r3, [pc, #16]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ba:	4a03      	ldr	r2, [pc, #12]	@ (80045c8 <HAL_RCC_OscConfig+0x504>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045c4:	e014      	b.n	80045f0 <HAL_RCC_OscConfig+0x52c>
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40007000 	.word	0x40007000
 80045d0:	4b9a      	ldr	r3, [pc, #616]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	4a99      	ldr	r2, [pc, #612]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045e0:	4b96      	ldr	r3, [pc, #600]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e6:	4a95      	ldr	r2, [pc, #596]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d016      	beq.n	8004626 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fd ffea 	bl	80025d0 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fd ffe6 	bl	80025d0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e162      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004616:	4b89      	ldr	r3, [pc, #548]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ed      	beq.n	8004600 <HAL_RCC_OscConfig+0x53c>
 8004624:	e015      	b.n	8004652 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fd ffd3 	bl	80025d0 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800462c:	e00a      	b.n	8004644 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fd ffcf 	bl	80025d0 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e14b      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004644:	4b7d      	ldr	r3, [pc, #500]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1ed      	bne.n	800462e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004652:	7ffb      	ldrb	r3, [r7, #31]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004658:	4b78      	ldr	r3, [pc, #480]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 800465a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465c:	4a77      	ldr	r2, [pc, #476]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 800465e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004662:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d03c      	beq.n	80046ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01c      	beq.n	80046b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004678:	4b70      	ldr	r3, [pc, #448]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 800467a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800467e:	4a6f      	ldr	r2, [pc, #444]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fd ffa2 	bl	80025d0 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004690:	f7fd ff9e 	bl	80025d0 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e11c      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046a2:	4b66      	ldr	r3, [pc, #408]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80046a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0ef      	beq.n	8004690 <HAL_RCC_OscConfig+0x5cc>
 80046b0:	e01b      	b.n	80046ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046b2:	4b62      	ldr	r3, [pc, #392]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80046b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046b8:	4a60      	ldr	r2, [pc, #384]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c2:	f7fd ff85 	bl	80025d0 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ca:	f7fd ff81 	bl	80025d0 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0ff      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046dc:	4b57      	ldr	r3, [pc, #348]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80046de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ef      	bne.n	80046ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80f3 	beq.w	80048da <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	f040 80c9 	bne.w	8004890 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046fe:	4b4f      	ldr	r3, [pc, #316]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f003 0203 	and.w	r2, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470e:	429a      	cmp	r2, r3
 8004710:	d12c      	bne.n	800476c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	3b01      	subs	r3, #1
 800471e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d123      	bne.n	800476c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800472e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d11b      	bne.n	800476c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d113      	bne.n	800476c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	3b01      	subs	r3, #1
 8004752:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d109      	bne.n	800476c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	3b01      	subs	r3, #1
 8004766:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d06b      	beq.n	8004844 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d062      	beq.n	8004838 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004772:	4b32      	ldr	r3, [pc, #200]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0ac      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004782:	4b2e      	ldr	r3, [pc, #184]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2d      	ldr	r2, [pc, #180]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 8004788:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800478c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800478e:	f7fd ff1f 	bl	80025d0 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004796:	f7fd ff1b 	bl	80025d0 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e099      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a8:	4b24      	ldr	r3, [pc, #144]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b4:	4b21      	ldr	r3, [pc, #132]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	4b21      	ldr	r3, [pc, #132]	@ (8004840 <HAL_RCC_OscConfig+0x77c>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047c4:	3a01      	subs	r2, #1
 80047c6:	0112      	lsls	r2, r2, #4
 80047c8:	4311      	orrs	r1, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047ce:	0212      	lsls	r2, r2, #8
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047d6:	0852      	lsrs	r2, r2, #1
 80047d8:	3a01      	subs	r2, #1
 80047da:	0552      	lsls	r2, r2, #21
 80047dc:	4311      	orrs	r1, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047e2:	0852      	lsrs	r2, r2, #1
 80047e4:	3a01      	subs	r2, #1
 80047e6:	0652      	lsls	r2, r2, #25
 80047e8:	4311      	orrs	r1, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047ee:	06d2      	lsls	r2, r2, #27
 80047f0:	430a      	orrs	r2, r1
 80047f2:	4912      	ldr	r1, [pc, #72]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047f8:	4b10      	ldr	r3, [pc, #64]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a0f      	ldr	r2, [pc, #60]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 80047fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004804:	4b0d      	ldr	r3, [pc, #52]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a0c      	ldr	r2, [pc, #48]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 800480a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800480e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004810:	f7fd fede 	bl	80025d0 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fd feda 	bl	80025d0 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e058      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482a:	4b04      	ldr	r3, [pc, #16]	@ (800483c <HAL_RCC_OscConfig+0x778>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004836:	e050      	b.n	80048da <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e04f      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
 800483c:	40021000 	.word	0x40021000
 8004840:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004844:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d144      	bne.n	80048da <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004850:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a23      	ldr	r2, [pc, #140]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800485c:	4b21      	ldr	r3, [pc, #132]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a20      	ldr	r2, [pc, #128]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 8004862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004866:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004868:	f7fd feb2 	bl	80025d0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fd feae 	bl	80025d0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e02c      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004882:	4b18      	ldr	r3, [pc, #96]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x7ac>
 800488e:	e024      	b.n	80048da <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b0c      	cmp	r3, #12
 8004894:	d01f      	beq.n	80048d6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004896:	4b13      	ldr	r3, [pc, #76]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a12      	ldr	r2, [pc, #72]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 800489c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fd fe95 	bl	80025d0 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048aa:	f7fd fe91 	bl	80025d0 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e00f      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048bc:	4b09      	ldr	r3, [pc, #36]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80048c8:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	4905      	ldr	r1, [pc, #20]	@ (80048e4 <HAL_RCC_OscConfig+0x820>)
 80048ce:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <HAL_RCC_OscConfig+0x824>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	60cb      	str	r3, [r1, #12]
 80048d4:	e001      	b.n	80048da <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	feeefffc 	.word	0xfeeefffc

080048ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0e7      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004900:	4b75      	ldr	r3, [pc, #468]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d910      	bls.n	8004930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b72      	ldr	r3, [pc, #456]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 0207 	bic.w	r2, r3, #7
 8004916:	4970      	ldr	r1, [pc, #448]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0cf      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d010      	beq.n	800495e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	4b66      	ldr	r3, [pc, #408]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004948:	429a      	cmp	r2, r3
 800494a:	d908      	bls.n	800495e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494c:	4b63      	ldr	r3, [pc, #396]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4960      	ldr	r1, [pc, #384]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d04c      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b03      	cmp	r3, #3
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004972:	4b5a      	ldr	r3, [pc, #360]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d121      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0a6      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800498a:	4b54      	ldr	r3, [pc, #336]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d115      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e09a      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049a2:	4b4e      	ldr	r3, [pc, #312]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e08e      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b2:	4b4a      	ldr	r3, [pc, #296]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e086      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049c2:	4b46      	ldr	r3, [pc, #280]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4943      	ldr	r1, [pc, #268]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d4:	f7fd fdfc 	bl	80025d0 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fd fdf8 	bl	80025d0 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e06e      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	4b3a      	ldr	r3, [pc, #232]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 020c 	and.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d1eb      	bne.n	80049dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	4b31      	ldr	r3, [pc, #196]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d208      	bcs.n	8004a32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b2e      	ldr	r3, [pc, #184]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	492b      	ldr	r1, [pc, #172]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a32:	4b29      	ldr	r3, [pc, #164]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d210      	bcs.n	8004a62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a40:	4b25      	ldr	r3, [pc, #148]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f023 0207 	bic.w	r2, r3, #7
 8004a48:	4923      	ldr	r1, [pc, #140]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a50:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e036      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	4918      	ldr	r1, [pc, #96]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a8c:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4910      	ldr	r1, [pc, #64]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aa0:	f000 f824 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <HAL_RCC_ClockConfig+0x1f0>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	490b      	ldr	r1, [pc, #44]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1f4>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	4a09      	ldr	r2, [pc, #36]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1f8>)
 8004abe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ac0:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1fc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd fd33 	bl	8002530 <HAL_InitTick>
 8004aca:	4603      	mov	r3, r0
 8004acc:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ace:	7afb      	ldrb	r3, [r7, #11]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40022000 	.word	0x40022000
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	0800ca50 	.word	0x0800ca50
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	20000004 	.word	0x20000004

08004aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	@ 0x24
 8004af0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	2300      	movs	r3, #0
 8004af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afa:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b04:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x34>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d121      	bne.n	8004b5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d11e      	bne.n	8004b5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b20:	4b34      	ldr	r3, [pc, #208]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b2c:	4b31      	ldr	r3, [pc, #196]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	e005      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b48:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10d      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d102      	bne.n	8004b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b64:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e004      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b70:	4b23      	ldr	r3, [pc, #140]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d134      	bne.n	8004be4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d003      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0xac>
 8004b90:	e005      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b92:	4b1a      	ldr	r3, [pc, #104]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b94:	617b      	str	r3, [r7, #20]
      break;
 8004b96:	e005      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b98:	4b19      	ldr	r3, [pc, #100]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b9a:	617b      	str	r3, [r7, #20]
      break;
 8004b9c:	e002      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	617b      	str	r3, [r7, #20]
      break;
 8004ba2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ba4:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	3301      	adds	r3, #1
 8004bb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bb2:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	fb03 f202 	mul.w	r2, r3, r2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bca:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	0e5b      	lsrs	r3, r3, #25
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004be4:	69bb      	ldr	r3, [r7, #24]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	@ 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	0800ca68 	.word	0x0800ca68
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	@ (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000000 	.word	0x20000000

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4904      	ldr	r1, [pc, #16]	@ (8004c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	0800ca60 	.word	0x0800ca60

08004c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c4c:	f7ff ffda 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	0adb      	lsrs	r3, r3, #11
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4904      	ldr	r1, [pc, #16]	@ (8004c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	0800ca60 	.word	0x0800ca60

08004c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c80:	4b2a      	ldr	r3, [pc, #168]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c8c:	f7ff f9b6 	bl	8003ffc <HAL_PWREx_GetVoltageRange>
 8004c90:	6178      	str	r0, [r7, #20]
 8004c92:	e014      	b.n	8004cbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c94:	4b25      	ldr	r3, [pc, #148]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	4a24      	ldr	r2, [pc, #144]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ca0:	4b22      	ldr	r3, [pc, #136]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cac:	f7ff f9a6 	bl	8003ffc <HAL_PWREx_GetVoltageRange>
 8004cb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cc4:	d10b      	bne.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b80      	cmp	r3, #128	@ 0x80
 8004cca:	d919      	bls.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2ba0      	cmp	r3, #160	@ 0xa0
 8004cd0:	d902      	bls.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	e013      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd8:	2301      	movs	r3, #1
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e010      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b80      	cmp	r3, #128	@ 0x80
 8004ce2:	d902      	bls.n	8004cea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e00a      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b80      	cmp	r3, #128	@ 0x80
 8004cee:	d102      	bne.n	8004cf6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e004      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b70      	cmp	r3, #112	@ 0x70
 8004cfa:	d101      	bne.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 0207 	bic.w	r2, r3, #7
 8004d08:	4909      	ldr	r1, [pc, #36]	@ (8004d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d10:	4b07      	ldr	r3, [pc, #28]	@ (8004d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d001      	beq.n	8004d22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40022000 	.word	0x40022000

08004d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d40:	2300      	movs	r3, #0
 8004d42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d031      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d58:	d01a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d5e:	d814      	bhi.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d68:	d10f      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d76:	e00c      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f9de 	bl	8005140 <RCCEx_PLLSAI1_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d88:	e003      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d8e:	e000      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d98:	4b51      	ldr	r3, [pc, #324]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da6:	494e      	ldr	r1, [pc, #312]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004dae:	e001      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 809e 	beq.w	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dc6:	4b46      	ldr	r3, [pc, #280]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b40      	ldr	r3, [pc, #256]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004de8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df4:	2301      	movs	r3, #1
 8004df6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004df8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a39      	ldr	r2, [pc, #228]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e04:	f7fd fbe4 	bl	80025d0 <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e0a:	e009      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0c:	f7fd fbe0 	bl	80025d0 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d902      	bls.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e1e:	e005      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e20:	4b30      	ldr	r3, [pc, #192]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ef      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d15a      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e32:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01e      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d019      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e5a:	4b21      	ldr	r3, [pc, #132]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e70:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e7a:	4a19      	ldr	r2, [pc, #100]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d016      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fd fba0 	bl	80025d0 <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e92:	e00b      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fd fb9c 	bl	80025d0 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d902      	bls.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	74fb      	strb	r3, [r7, #19]
            break;
 8004eaa:	e006      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0ec      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec0:	4b07      	ldr	r3, [pc, #28]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ece:	4904      	ldr	r1, [pc, #16]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ed6:	e009      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
 8004edc:	e006      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eec:	7c7b      	ldrb	r3, [r7, #17]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d105      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef2:	4b8a      	ldr	r3, [pc, #552]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef6:	4a89      	ldr	r2, [pc, #548]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004efc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f0a:	4b84      	ldr	r3, [pc, #528]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f10:	f023 0203 	bic.w	r2, r3, #3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	4980      	ldr	r1, [pc, #512]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f2c:	4b7b      	ldr	r3, [pc, #492]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f32:	f023 020c 	bic.w	r2, r3, #12
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	4978      	ldr	r1, [pc, #480]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f4e:	4b73      	ldr	r3, [pc, #460]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f54:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	496f      	ldr	r1, [pc, #444]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f70:	4b6a      	ldr	r3, [pc, #424]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f76:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7e:	4967      	ldr	r1, [pc, #412]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f92:	4b62      	ldr	r3, [pc, #392]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f98:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	495e      	ldr	r1, [pc, #376]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fb4:	4b59      	ldr	r3, [pc, #356]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc2:	4956      	ldr	r1, [pc, #344]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fd6:	4b51      	ldr	r3, [pc, #324]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe4:	494d      	ldr	r1, [pc, #308]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d028      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ff8:	4b48      	ldr	r3, [pc, #288]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	4945      	ldr	r1, [pc, #276]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005016:	d106      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005018:	4b40      	ldr	r3, [pc, #256]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4a3f      	ldr	r2, [pc, #252]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800501e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005022:	60d3      	str	r3, [r2, #12]
 8005024:	e011      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800502e:	d10c      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	2101      	movs	r1, #1
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f882 	bl	8005140 <RCCEx_PLLSAI1_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d028      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005056:	4b31      	ldr	r3, [pc, #196]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005064:	492d      	ldr	r1, [pc, #180]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005074:	d106      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005076:	4b29      	ldr	r3, [pc, #164]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	4a28      	ldr	r2, [pc, #160]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800507c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005080:	60d3      	str	r3, [r2, #12]
 8005082:	e011      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005088:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800508c:	d10c      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3304      	adds	r3, #4
 8005092:	2101      	movs	r1, #1
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f853 	bl	8005140 <RCCEx_PLLSAI1_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800509e:	7cfb      	ldrb	r3, [r7, #19]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
 80050a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01c      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050b4:	4b19      	ldr	r3, [pc, #100]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c2:	4916      	ldr	r1, [pc, #88]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050d2:	d10c      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	2102      	movs	r1, #2
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f830 	bl	8005140 <RCCEx_PLLSAI1_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050fa:	4b08      	ldr	r3, [pc, #32]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005108:	4904      	ldr	r1, [pc, #16]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005110:	7cbb      	ldrb	r3, [r7, #18]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000

08005120 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005124:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a04      	ldr	r2, [pc, #16]	@ (800513c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	6013      	str	r3, [r2, #0]
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000

08005140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800514e:	4b74      	ldr	r3, [pc, #464]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d018      	beq.n	800518c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800515a:	4b71      	ldr	r3, [pc, #452]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0203 	and.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d10d      	bne.n	8005186 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
       ||
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005172:	4b6b      	ldr	r3, [pc, #428]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
       ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d047      	beq.n	8005216 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
 800518a:	e044      	b.n	8005216 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d018      	beq.n	80051c6 <RCCEx_PLLSAI1_Config+0x86>
 8005194:	2b03      	cmp	r3, #3
 8005196:	d825      	bhi.n	80051e4 <RCCEx_PLLSAI1_Config+0xa4>
 8005198:	2b01      	cmp	r3, #1
 800519a:	d002      	beq.n	80051a2 <RCCEx_PLLSAI1_Config+0x62>
 800519c:	2b02      	cmp	r3, #2
 800519e:	d009      	beq.n	80051b4 <RCCEx_PLLSAI1_Config+0x74>
 80051a0:	e020      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d11d      	bne.n	80051ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b2:	e01a      	b.n	80051ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d116      	bne.n	80051ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c4:	e013      	b.n	80051ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051c6:	4b56      	ldr	r3, [pc, #344]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051d2:	4b53      	ldr	r3, [pc, #332]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051e2:	e006      	b.n	80051f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      break;
 80051e8:	e004      	b.n	80051f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051ea:	bf00      	nop
 80051ec:	e002      	b.n	80051f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10d      	bne.n	8005216 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051fa:	4b49      	ldr	r3, [pc, #292]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6819      	ldr	r1, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	3b01      	subs	r3, #1
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	430b      	orrs	r3, r1
 8005210:	4943      	ldr	r1, [pc, #268]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005212:	4313      	orrs	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d17c      	bne.n	8005316 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800521c:	4b40      	ldr	r3, [pc, #256]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a3f      	ldr	r2, [pc, #252]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005222:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005228:	f7fd f9d2 	bl	80025d0 <HAL_GetTick>
 800522c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800522e:	e009      	b.n	8005244 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005230:	f7fd f9ce 	bl	80025d0 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d902      	bls.n	8005244 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	73fb      	strb	r3, [r7, #15]
        break;
 8005242:	e005      	b.n	8005250 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005244:	4b36      	ldr	r3, [pc, #216]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1ef      	bne.n	8005230 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d15f      	bne.n	8005316 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d110      	bne.n	800527e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800525c:	4b30      	ldr	r3, [pc, #192]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005264:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6892      	ldr	r2, [r2, #8]
 800526c:	0211      	lsls	r1, r2, #8
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68d2      	ldr	r2, [r2, #12]
 8005272:	06d2      	lsls	r2, r2, #27
 8005274:	430a      	orrs	r2, r1
 8005276:	492a      	ldr	r1, [pc, #168]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005278:	4313      	orrs	r3, r2
 800527a:	610b      	str	r3, [r1, #16]
 800527c:	e027      	b.n	80052ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d112      	bne.n	80052aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005284:	4b26      	ldr	r3, [pc, #152]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800528c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6892      	ldr	r2, [r2, #8]
 8005294:	0211      	lsls	r1, r2, #8
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6912      	ldr	r2, [r2, #16]
 800529a:	0852      	lsrs	r2, r2, #1
 800529c:	3a01      	subs	r2, #1
 800529e:	0552      	lsls	r2, r2, #21
 80052a0:	430a      	orrs	r2, r1
 80052a2:	491f      	ldr	r1, [pc, #124]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	610b      	str	r3, [r1, #16]
 80052a8:	e011      	b.n	80052ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6892      	ldr	r2, [r2, #8]
 80052ba:	0211      	lsls	r1, r2, #8
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6952      	ldr	r2, [r2, #20]
 80052c0:	0852      	lsrs	r2, r2, #1
 80052c2:	3a01      	subs	r2, #1
 80052c4:	0652      	lsls	r2, r2, #25
 80052c6:	430a      	orrs	r2, r1
 80052c8:	4915      	ldr	r1, [pc, #84]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052ce:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a13      	ldr	r2, [pc, #76]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052da:	f7fd f979 	bl	80025d0 <HAL_GetTick>
 80052de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052e0:	e009      	b.n	80052f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052e2:	f7fd f975 	bl	80025d0 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d902      	bls.n	80052f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	73fb      	strb	r3, [r7, #15]
          break;
 80052f4:	e005      	b.n	8005302 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0ef      	beq.n	80052e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005308:	4b05      	ldr	r3, [pc, #20]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	4903      	ldr	r1, [pc, #12]	@ (8005320 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005312:	4313      	orrs	r3, r2
 8005314:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40021000 	.word	0x40021000

08005324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e095      	b.n	8005462 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	2b00      	cmp	r3, #0
 800533c:	d108      	bne.n	8005350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005346:	d009      	beq.n	800535c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	61da      	str	r2, [r3, #28]
 800534e:	e005      	b.n	800535c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc fe5c 	bl	8002034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005392:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800539c:	d902      	bls.n	80053a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e002      	b.n	80053aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053b2:	d007      	beq.n	80053c4 <HAL_SPI_Init+0xa0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053bc:	d002      	beq.n	80053c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005406:	ea42 0103 	orr.w	r1, r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	f003 0204 	and.w	r2, r3, #4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005440:	ea42 0103 	orr.w	r1, r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b088      	sub	sp, #32
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_SPI_Transmit+0x22>
 8005488:	2302      	movs	r3, #2
 800548a:	e158      	b.n	800573e <HAL_SPI_Transmit+0x2d4>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005494:	f7fd f89c 	bl	80025d0 <HAL_GetTick>
 8005498:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d002      	beq.n	80054b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054aa:	2302      	movs	r3, #2
 80054ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ae:	e13d      	b.n	800572c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_SPI_Transmit+0x52>
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054c0:	e134      	b.n	800572c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2203      	movs	r2, #3
 80054c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	88fa      	ldrh	r2, [r7, #6]
 80054da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	88fa      	ldrh	r2, [r7, #6]
 80054e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800550c:	d10f      	bne.n	800552e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800551c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800552c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b40      	cmp	r3, #64	@ 0x40
 800553a:	d007      	beq.n	800554c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800554a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005554:	d94b      	bls.n	80055ee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_SPI_Transmit+0xfa>
 800555e:	8afb      	ldrh	r3, [r7, #22]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d13e      	bne.n	80055e2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005568:	881a      	ldrh	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005588:	e02b      	b.n	80055e2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d112      	bne.n	80055be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	1c9a      	adds	r2, r3, #2
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055bc:	e011      	b.n	80055e2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055be:	f7fd f807 	bl	80025d0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d803      	bhi.n	80055d6 <HAL_SPI_Transmit+0x16c>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d102      	bne.n	80055dc <HAL_SPI_Transmit+0x172>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055e0:	e0a4      	b.n	800572c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1ce      	bne.n	800558a <HAL_SPI_Transmit+0x120>
 80055ec:	e07c      	b.n	80056e8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_SPI_Transmit+0x192>
 80055f6:	8afb      	ldrh	r3, [r7, #22]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d170      	bne.n	80056de <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	d912      	bls.n	800562c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560a:	881a      	ldrh	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005616:	1c9a      	adds	r2, r3, #2
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b02      	subs	r3, #2
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800562a:	e058      	b.n	80056de <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	7812      	ldrb	r2, [r2, #0]
 8005638:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005652:	e044      	b.n	80056de <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b02      	cmp	r3, #2
 8005660:	d12b      	bne.n	80056ba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d912      	bls.n	8005692 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	881a      	ldrh	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	1c9a      	adds	r2, r3, #2
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b02      	subs	r3, #2
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005690:	e025      	b.n	80056de <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056b8:	e011      	b.n	80056de <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ba:	f7fc ff89 	bl	80025d0 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d803      	bhi.n	80056d2 <HAL_SPI_Transmit+0x268>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d102      	bne.n	80056d8 <HAL_SPI_Transmit+0x26e>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056dc:	e026      	b.n	800572c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1b5      	bne.n	8005654 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	6839      	ldr	r1, [r7, #0]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f949 	bl	8005984 <SPI_EndRxTxTransaction>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e000      	b.n	800572c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800572a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800573c:	7ffb      	ldrb	r3, [r7, #31]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	4613      	mov	r3, r2
 8005756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005758:	f7fc ff3a 	bl	80025d0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	4413      	add	r3, r2
 8005766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005768:	f7fc ff32 	bl	80025d0 <HAL_GetTick>
 800576c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800576e:	4b39      	ldr	r3, [pc, #228]	@ (8005854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	015b      	lsls	r3, r3, #5
 8005774:	0d1b      	lsrs	r3, r3, #20
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	fb02 f303 	mul.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800577e:	e054      	b.n	800582a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d050      	beq.n	800582a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005788:	f7fc ff22 	bl	80025d0 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	429a      	cmp	r2, r3
 8005796:	d902      	bls.n	800579e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d13d      	bne.n	800581a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057b6:	d111      	bne.n	80057dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c0:	d004      	beq.n	80057cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ca:	d107      	bne.n	80057dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057e4:	d10f      	bne.n	8005806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e017      	b.n	800584a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	3b01      	subs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4013      	ands	r3, r2
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	bf0c      	ite	eq
 800583a:	2301      	moveq	r3, #1
 800583c:	2300      	movne	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	429a      	cmp	r2, r3
 8005846:	d19b      	bne.n	8005780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000000 	.word	0x20000000

08005858 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	@ 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800586a:	f7fc feb1 	bl	80025d0 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	4413      	add	r3, r2
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800587a:	f7fc fea9 	bl	80025d0 <HAL_GetTick>
 800587e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005888:	4b3d      	ldr	r3, [pc, #244]	@ (8005980 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	00da      	lsls	r2, r3, #3
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	0d1b      	lsrs	r3, r3, #20
 8005898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80058a0:	e060      	b.n	8005964 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80058a8:	d107      	bne.n	80058ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d050      	beq.n	8005964 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058c2:	f7fc fe85 	bl	80025d0 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d902      	bls.n	80058d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d13d      	bne.n	8005954 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058f0:	d111      	bne.n	8005916 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058fa:	d004      	beq.n	8005906 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005904:	d107      	bne.n	8005916 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005914:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800591e:	d10f      	bne.n	8005940 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800593e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e010      	b.n	8005976 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	3b01      	subs	r3, #1
 8005962:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4013      	ands	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d196      	bne.n	80058a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3728      	adds	r7, #40	@ 0x28
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000000 	.word	0x20000000

08005984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af02      	add	r7, sp, #8
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ff5b 	bl	8005858 <SPI_WaitFifoStateUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e027      	b.n	8005a08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	2180      	movs	r1, #128	@ 0x80
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7ff fec0 	bl	8005748 <SPI_WaitFlagStateUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e014      	b.n	8005a08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff ff34 	bl	8005858 <SPI_WaitFifoStateUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e000      	b.n	8005a08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e049      	b.n	8005ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fc fb40 	bl	80020bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f000 fd1e 	bl	8006490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d001      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e03b      	b.n	8005b50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a19      	ldr	r2, [pc, #100]	@ (8005b5c <HAL_TIM_Base_Start_IT+0x9c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d009      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x4e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b02:	d004      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x4e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a15      	ldr	r2, [pc, #84]	@ (8005b60 <HAL_TIM_Base_Start_IT+0xa0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d115      	bne.n	8005b3a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	4b13      	ldr	r3, [pc, #76]	@ (8005b64 <HAL_TIM_Base_Start_IT+0xa4>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d015      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0x8c>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b26:	d011      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b38:	e008      	b.n	8005b4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 0201 	orr.w	r2, r2, #1
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e000      	b.n	8005b4e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40014000 	.word	0x40014000
 8005b64:	00010007 	.word	0x00010007

08005b68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6a1a      	ldr	r2, [r3, #32]
 8005b86:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10f      	bne.n	8005bb0 <HAL_TIM_Base_Stop_IT+0x48>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	f240 4344 	movw	r3, #1092	@ 0x444
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d107      	bne.n	8005bb0 <HAL_TIM_Base_Stop_IT+0x48>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0201 	bic.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e049      	b.n	8005c6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f841 	bl	8005c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f000 fc43 	bl	8006490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <HAL_TIM_PWM_Start+0x24>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e03c      	b.n	8005d26 <HAL_TIM_PWM_Start+0x9e>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d109      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0x3e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	bf14      	ite	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	2300      	moveq	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	e02f      	b.n	8005d26 <HAL_TIM_PWM_Start+0x9e>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d109      	bne.n	8005ce0 <HAL_TIM_PWM_Start+0x58>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e022      	b.n	8005d26 <HAL_TIM_PWM_Start+0x9e>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b0c      	cmp	r3, #12
 8005ce4:	d109      	bne.n	8005cfa <HAL_TIM_PWM_Start+0x72>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	bf14      	ite	ne
 8005cf2:	2301      	movne	r3, #1
 8005cf4:	2300      	moveq	r3, #0
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	e015      	b.n	8005d26 <HAL_TIM_PWM_Start+0x9e>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d109      	bne.n	8005d14 <HAL_TIM_PWM_Start+0x8c>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	bf14      	ite	ne
 8005d0c:	2301      	movne	r3, #1
 8005d0e:	2300      	moveq	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	e008      	b.n	8005d26 <HAL_TIM_PWM_Start+0x9e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e07e      	b.n	8005e2c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <HAL_TIM_PWM_Start+0xb6>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d3c:	e023      	b.n	8005d86 <HAL_TIM_PWM_Start+0xfe>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d104      	bne.n	8005d4e <HAL_TIM_PWM_Start+0xc6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d4c:	e01b      	b.n	8005d86 <HAL_TIM_PWM_Start+0xfe>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d104      	bne.n	8005d5e <HAL_TIM_PWM_Start+0xd6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d5c:	e013      	b.n	8005d86 <HAL_TIM_PWM_Start+0xfe>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b0c      	cmp	r3, #12
 8005d62:	d104      	bne.n	8005d6e <HAL_TIM_PWM_Start+0xe6>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d6c:	e00b      	b.n	8005d86 <HAL_TIM_PWM_Start+0xfe>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d104      	bne.n	8005d7e <HAL_TIM_PWM_Start+0xf6>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d7c:	e003      	b.n	8005d86 <HAL_TIM_PWM_Start+0xfe>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fefa 	bl	8006b88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a26      	ldr	r2, [pc, #152]	@ (8005e34 <HAL_TIM_PWM_Start+0x1ac>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x12a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a25      	ldr	r2, [pc, #148]	@ (8005e38 <HAL_TIM_PWM_Start+0x1b0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x12a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a23      	ldr	r2, [pc, #140]	@ (8005e3c <HAL_TIM_PWM_Start+0x1b4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_PWM_Start+0x12e>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_PWM_Start+0x130>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a18      	ldr	r2, [pc, #96]	@ (8005e34 <HAL_TIM_PWM_Start+0x1ac>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <HAL_TIM_PWM_Start+0x162>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dde:	d004      	beq.n	8005dea <HAL_TIM_PWM_Start+0x162>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a14      	ldr	r2, [pc, #80]	@ (8005e38 <HAL_TIM_PWM_Start+0x1b0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d115      	bne.n	8005e16 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <HAL_TIM_PWM_Start+0x1b8>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b06      	cmp	r3, #6
 8005dfa:	d015      	beq.n	8005e28 <HAL_TIM_PWM_Start+0x1a0>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e02:	d011      	beq.n	8005e28 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e14:	e008      	b.n	8005e28 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0201 	orr.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e000      	b.n	8005e2a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	00010007 	.word	0x00010007

08005e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d122      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0202 	mvn.w	r2, #2
 8005e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fae3 	bl	8006452 <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fad5 	bl	800643e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fae6 	bl	8006466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0204 	mvn.w	r2, #4
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fab9 	bl	8006452 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 faab 	bl	800643e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fabc 	bl	8006466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0208 	mvn.w	r2, #8
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fa8f 	bl	8006452 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa81 	bl	800643e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa92 	bl	8006466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d122      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d11b      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0210 	mvn.w	r2, #16
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2208      	movs	r2, #8
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa65 	bl	8006452 <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa57 	bl	800643e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fa68 	bl	8006466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0201 	mvn.w	r2, #1
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fb f9d0 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd2:	2b80      	cmp	r3, #128	@ 0x80
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe0:	2b80      	cmp	r3, #128	@ 0x80
 8005fe2:	d107      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fed8 	bl	8006da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006002:	d10e      	bne.n	8006022 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600e:	2b80      	cmp	r3, #128	@ 0x80
 8006010:	d107      	bne.n	8006022 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800601a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fecb 	bl	8006db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602c:	2b40      	cmp	r3, #64	@ 0x40
 800602e:	d10e      	bne.n	800604e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603a:	2b40      	cmp	r3, #64	@ 0x40
 800603c:	d107      	bne.n	800604e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fa16 	bl	800647a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b20      	cmp	r3, #32
 800605a:	d10e      	bne.n	800607a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b20      	cmp	r3, #32
 8006068:	d107      	bne.n	800607a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f06f 0220 	mvn.w	r2, #32
 8006072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fe8b 	bl	8006d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800609e:	2302      	movs	r3, #2
 80060a0:	e0ff      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b14      	cmp	r3, #20
 80060ae:	f200 80f0 	bhi.w	8006292 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060b2:	a201      	add	r2, pc, #4	@ (adr r2, 80060b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006293 	.word	0x08006293
 80060c0:	08006293 	.word	0x08006293
 80060c4:	08006293 	.word	0x08006293
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	08006293 	.word	0x08006293
 80060d0:	08006293 	.word	0x08006293
 80060d4:	08006293 	.word	0x08006293
 80060d8:	0800618f 	.word	0x0800618f
 80060dc:	08006293 	.word	0x08006293
 80060e0:	08006293 	.word	0x08006293
 80060e4:	08006293 	.word	0x08006293
 80060e8:	080061cf 	.word	0x080061cf
 80060ec:	08006293 	.word	0x08006293
 80060f0:	08006293 	.word	0x08006293
 80060f4:	08006293 	.word	0x08006293
 80060f8:	08006211 	.word	0x08006211
 80060fc:	08006293 	.word	0x08006293
 8006100:	08006293 	.word	0x08006293
 8006104:	08006293 	.word	0x08006293
 8006108:	08006251 	.word	0x08006251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fa20 	bl	8006558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0208 	orr.w	r2, r2, #8
 8006126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0204 	bic.w	r2, r2, #4
 8006136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6999      	ldr	r1, [r3, #24]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	619a      	str	r2, [r3, #24]
      break;
 800614a:	e0a5      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fa7c 	bl	8006650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	619a      	str	r2, [r3, #24]
      break;
 800618c:	e084      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fad5 	bl	8006744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0208 	orr.w	r2, r2, #8
 80061a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0204 	bic.w	r2, r2, #4
 80061b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69d9      	ldr	r1, [r3, #28]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	61da      	str	r2, [r3, #28]
      break;
 80061cc:	e064      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fb2d 	bl	8006834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	021a      	lsls	r2, r3, #8
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	61da      	str	r2, [r3, #28]
      break;
 800620e:	e043      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fb6a 	bl	80068f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0208 	orr.w	r2, r2, #8
 800622a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0204 	bic.w	r2, r2, #4
 800623a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800624e:	e023      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fba2 	bl	80069a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800626a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800627a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006290:	e002      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
      break;
 8006296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop

080062ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_ConfigClockSource+0x1c>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e0b6      	b.n	8006436 <HAL_TIM_ConfigClockSource+0x18a>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006304:	d03e      	beq.n	8006384 <HAL_TIM_ConfigClockSource+0xd8>
 8006306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800630a:	f200 8087 	bhi.w	800641c <HAL_TIM_ConfigClockSource+0x170>
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006312:	f000 8086 	beq.w	8006422 <HAL_TIM_ConfigClockSource+0x176>
 8006316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800631a:	d87f      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x170>
 800631c:	2b70      	cmp	r3, #112	@ 0x70
 800631e:	d01a      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0xaa>
 8006320:	2b70      	cmp	r3, #112	@ 0x70
 8006322:	d87b      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x170>
 8006324:	2b60      	cmp	r3, #96	@ 0x60
 8006326:	d050      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x11e>
 8006328:	2b60      	cmp	r3, #96	@ 0x60
 800632a:	d877      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x170>
 800632c:	2b50      	cmp	r3, #80	@ 0x50
 800632e:	d03c      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0xfe>
 8006330:	2b50      	cmp	r3, #80	@ 0x50
 8006332:	d873      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x170>
 8006334:	2b40      	cmp	r3, #64	@ 0x40
 8006336:	d058      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x13e>
 8006338:	2b40      	cmp	r3, #64	@ 0x40
 800633a:	d86f      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x170>
 800633c:	2b30      	cmp	r3, #48	@ 0x30
 800633e:	d064      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15e>
 8006340:	2b30      	cmp	r3, #48	@ 0x30
 8006342:	d86b      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x170>
 8006344:	2b20      	cmp	r3, #32
 8006346:	d060      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15e>
 8006348:	2b20      	cmp	r3, #32
 800634a:	d867      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x170>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d05c      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15e>
 8006350:	2b10      	cmp	r3, #16
 8006352:	d05a      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15e>
 8006354:	e062      	b.n	800641c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006366:	f000 fbef 	bl	8006b48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	609a      	str	r2, [r3, #8]
      break;
 8006382:	e04f      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006394:	f000 fbd8 	bl	8006b48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063a6:	609a      	str	r2, [r3, #8]
      break;
 80063a8:	e03c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 fb4c 	bl	8006a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2150      	movs	r1, #80	@ 0x50
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fba5 	bl	8006b12 <TIM_ITRx_SetConfig>
      break;
 80063c8:	e02c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fb6b 	bl	8006ab2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2160      	movs	r1, #96	@ 0x60
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fb95 	bl	8006b12 <TIM_ITRx_SetConfig>
      break;
 80063e8:	e01c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fb2c 	bl	8006a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2140      	movs	r1, #64	@ 0x40
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fb85 	bl	8006b12 <TIM_ITRx_SetConfig>
      break;
 8006408:	e00c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f000 fb7c 	bl	8006b12 <TIM_ITRx_SetConfig>
      break;
 800641a:	e003      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
      break;
 8006420:	e000      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a2a      	ldr	r2, [pc, #168]	@ (800654c <TIM_Base_SetConfig+0xbc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_Base_SetConfig+0x20>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ae:	d108      	bne.n	80064c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a21      	ldr	r2, [pc, #132]	@ (800654c <TIM_Base_SetConfig+0xbc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00b      	beq.n	80064e2 <TIM_Base_SetConfig+0x52>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d0:	d007      	beq.n	80064e2 <TIM_Base_SetConfig+0x52>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006550 <TIM_Base_SetConfig+0xc0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d003      	beq.n	80064e2 <TIM_Base_SetConfig+0x52>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006554 <TIM_Base_SetConfig+0xc4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d108      	bne.n	80064f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a0c      	ldr	r2, [pc, #48]	@ (800654c <TIM_Base_SetConfig+0xbc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d007      	beq.n	8006530 <TIM_Base_SetConfig+0xa0>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a0b      	ldr	r2, [pc, #44]	@ (8006550 <TIM_Base_SetConfig+0xc0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_Base_SetConfig+0xa0>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a0a      	ldr	r2, [pc, #40]	@ (8006554 <TIM_Base_SetConfig+0xc4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d103      	bne.n	8006538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	615a      	str	r2, [r3, #20]
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400

08006558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f023 0201 	bic.w	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0303 	bic.w	r3, r3, #3
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f023 0302 	bic.w	r3, r3, #2
 80065a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a24      	ldr	r2, [pc, #144]	@ (8006644 <TIM_OC1_SetConfig+0xec>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d007      	beq.n	80065c8 <TIM_OC1_SetConfig+0x70>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a23      	ldr	r2, [pc, #140]	@ (8006648 <TIM_OC1_SetConfig+0xf0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_OC1_SetConfig+0x70>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a22      	ldr	r2, [pc, #136]	@ (800664c <TIM_OC1_SetConfig+0xf4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d10c      	bne.n	80065e2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0308 	bic.w	r3, r3, #8
 80065ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f023 0304 	bic.w	r3, r3, #4
 80065e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a17      	ldr	r2, [pc, #92]	@ (8006644 <TIM_OC1_SetConfig+0xec>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <TIM_OC1_SetConfig+0xa2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a16      	ldr	r2, [pc, #88]	@ (8006648 <TIM_OC1_SetConfig+0xf0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_OC1_SetConfig+0xa2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a15      	ldr	r2, [pc, #84]	@ (800664c <TIM_OC1_SetConfig+0xf4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d111      	bne.n	800661e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	621a      	str	r2, [r3, #32]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400

08006650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f023 0210 	bic.w	r2, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800668a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0320 	bic.w	r3, r3, #32
 800669e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a22      	ldr	r2, [pc, #136]	@ (8006738 <TIM_OC2_SetConfig+0xe8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d10d      	bne.n	80066d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <TIM_OC2_SetConfig+0xe8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_OC2_SetConfig+0x98>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a18      	ldr	r2, [pc, #96]	@ (800673c <TIM_OC2_SetConfig+0xec>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC2_SetConfig+0x98>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a17      	ldr	r2, [pc, #92]	@ (8006740 <TIM_OC2_SetConfig+0xf0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d113      	bne.n	8006710 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40014000 	.word	0x40014000
 8006740:	40014400 	.word	0x40014400

08006744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a21      	ldr	r2, [pc, #132]	@ (8006828 <TIM_OC3_SetConfig+0xe4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10d      	bne.n	80067c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a18      	ldr	r2, [pc, #96]	@ (8006828 <TIM_OC3_SetConfig+0xe4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d007      	beq.n	80067da <TIM_OC3_SetConfig+0x96>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a17      	ldr	r2, [pc, #92]	@ (800682c <TIM_OC3_SetConfig+0xe8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_OC3_SetConfig+0x96>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a16      	ldr	r2, [pc, #88]	@ (8006830 <TIM_OC3_SetConfig+0xec>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d113      	bne.n	8006802 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400

08006834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800686e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	031b      	lsls	r3, r3, #12
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a14      	ldr	r2, [pc, #80]	@ (80068e4 <TIM_OC4_SetConfig+0xb0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_OC4_SetConfig+0x74>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a13      	ldr	r2, [pc, #76]	@ (80068e8 <TIM_OC4_SetConfig+0xb4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_OC4_SetConfig+0x74>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a12      	ldr	r2, [pc, #72]	@ (80068ec <TIM_OC4_SetConfig+0xb8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d109      	bne.n	80068bc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40014400 	.word	0x40014400

080068f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800691e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006934:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	041b      	lsls	r3, r3, #16
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a13      	ldr	r2, [pc, #76]	@ (8006994 <TIM_OC5_SetConfig+0xa4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d007      	beq.n	800695a <TIM_OC5_SetConfig+0x6a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a12      	ldr	r2, [pc, #72]	@ (8006998 <TIM_OC5_SetConfig+0xa8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC5_SetConfig+0x6a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a11      	ldr	r2, [pc, #68]	@ (800699c <TIM_OC5_SetConfig+0xac>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d109      	bne.n	800696e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400

080069a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	021b      	lsls	r3, r3, #8
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	051b      	lsls	r3, r3, #20
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a14      	ldr	r2, [pc, #80]	@ (8006a48 <TIM_OC6_SetConfig+0xa8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d007      	beq.n	8006a0c <TIM_OC6_SetConfig+0x6c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a13      	ldr	r2, [pc, #76]	@ (8006a4c <TIM_OC6_SetConfig+0xac>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d003      	beq.n	8006a0c <TIM_OC6_SetConfig+0x6c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a12      	ldr	r2, [pc, #72]	@ (8006a50 <TIM_OC6_SetConfig+0xb0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d109      	bne.n	8006a20 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	029b      	lsls	r3, r3, #10
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40014400 	.word	0x40014400

08006a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	f023 0201 	bic.w	r2, r3, #1
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f023 030a 	bic.w	r3, r3, #10
 8006a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b087      	sub	sp, #28
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f023 0210 	bic.w	r2, r3, #16
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	031b      	lsls	r3, r3, #12
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	621a      	str	r2, [r3, #32]
}
 8006b06:	bf00      	nop
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f043 0307 	orr.w	r3, r3, #7
 8006b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	609a      	str	r2, [r3, #8]
}
 8006b3c:	bf00      	nop
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	021a      	lsls	r2, r3, #8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	609a      	str	r2, [r3, #8]
}
 8006b7c:	bf00      	nop
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 031f 	and.w	r3, r3, #31
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a1a      	ldr	r2, [r3, #32]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	401a      	ands	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a1a      	ldr	r2, [r3, #32]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
	...

08006bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d101      	bne.n	8006bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006be8:	2302      	movs	r3, #2
 8006bea:	e04f      	b.n	8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a21      	ldr	r2, [pc, #132]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d108      	bne.n	8006c28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a14      	ldr	r2, [pc, #80]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d009      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c54:	d004      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a10      	ldr	r2, [pc, #64]	@ (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10c      	bne.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	40014000 	.word	0x40014000

08006ca0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e060      	b.n	8006d7e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a14      	ldr	r2, [pc, #80]	@ (8006d8c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d115      	bne.n	8006d6c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	051b      	lsls	r3, r3, #20
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40012c00 	.word	0x40012c00

08006d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e040      	b.n	8006e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fb f9d4 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2224      	movs	r2, #36	@ 0x24
 8006df8:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f990 	bl	8007130 <UART_SetConfig>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e022      	b.n	8006e60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fbb0 	bl	8007588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc37 	bl	80076cc <UART_CheckIdleState>
 8006e5e:	4603      	mov	r3, r0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	@ 0x28
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	4613      	mov	r3, r2
 8006e76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	f040 8081 	bne.w	8006f84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <HAL_UART_Transmit+0x26>
 8006e88:	88fb      	ldrh	r3, [r7, #6]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e079      	b.n	8006f86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_UART_Transmit+0x38>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e072      	b.n	8006f86 <HAL_UART_Transmit+0x11e>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2221      	movs	r2, #33	@ 0x21
 8006eb4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eb6:	f7fb fb8b 	bl	80025d0 <HAL_GetTick>
 8006eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	88fa      	ldrh	r2, [r7, #6]
 8006ec0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	88fa      	ldrh	r2, [r7, #6]
 8006ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed4:	d108      	bne.n	8006ee8 <HAL_UART_Transmit+0x80>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d104      	bne.n	8006ee8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	e003      	b.n	8006ef0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 8006ef8:	e02c      	b.n	8006f54 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2200      	movs	r2, #0
 8006f02:	2180      	movs	r1, #128	@ 0x80
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fc2a 	bl	800775e <UART_WaitOnFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e038      	b.n	8006f86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10b      	bne.n	8006f32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	881a      	ldrh	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f26:	b292      	uxth	r2, r2
 8006f28:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	3302      	adds	r3, #2
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	e007      	b.n	8006f42 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1cc      	bne.n	8006efa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	2140      	movs	r1, #64	@ 0x40
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fbf7 	bl	800775e <UART_WaitOnFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e005      	b.n	8006f86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	e000      	b.n	8006f86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006f84:	2302      	movs	r3, #2
  }
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3720      	adds	r7, #32
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b08a      	sub	sp, #40	@ 0x28
 8006f92:	af02      	add	r7, sp, #8
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	f040 80bf 	bne.w	8007126 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_UART_Receive+0x26>
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0b7      	b.n	8007128 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_UART_Receive+0x38>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e0b0      	b.n	8007128 <HAL_UART_Receive+0x19a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2222      	movs	r2, #34	@ 0x22
 8006fda:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fe2:	f7fb faf5 	bl	80025d0 <HAL_GetTick>
 8006fe6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007000:	d10e      	bne.n	8007020 <HAL_UART_Receive+0x92>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d105      	bne.n	8007016 <HAL_UART_Receive+0x88>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007010:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007014:	e02d      	b.n	8007072 <HAL_UART_Receive+0xe4>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	22ff      	movs	r2, #255	@ 0xff
 800701a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800701e:	e028      	b.n	8007072 <HAL_UART_Receive+0xe4>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10d      	bne.n	8007044 <HAL_UART_Receive+0xb6>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <HAL_UART_Receive+0xac>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	22ff      	movs	r2, #255	@ 0xff
 8007034:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007038:	e01b      	b.n	8007072 <HAL_UART_Receive+0xe4>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	227f      	movs	r2, #127	@ 0x7f
 800703e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007042:	e016      	b.n	8007072 <HAL_UART_Receive+0xe4>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800704c:	d10d      	bne.n	800706a <HAL_UART_Receive+0xdc>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <HAL_UART_Receive+0xd2>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	227f      	movs	r2, #127	@ 0x7f
 800705a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800705e:	e008      	b.n	8007072 <HAL_UART_Receive+0xe4>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	223f      	movs	r2, #63	@ 0x3f
 8007064:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007068:	e003      	b.n	8007072 <HAL_UART_Receive+0xe4>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007078:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007082:	d108      	bne.n	8007096 <HAL_UART_Receive+0x108>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d104      	bne.n	8007096 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	61bb      	str	r3, [r7, #24]
 8007094:	e003      	b.n	800709e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80070a6:	e033      	b.n	8007110 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2200      	movs	r2, #0
 80070b0:	2120      	movs	r1, #32
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fb53 	bl	800775e <UART_WaitOnFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e032      	b.n	8007128 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10c      	bne.n	80070e2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	8a7b      	ldrh	r3, [r7, #18]
 80070d2:	4013      	ands	r3, r2
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	3302      	adds	r3, #2
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	e00d      	b.n	80070fe <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	8a7b      	ldrh	r3, [r7, #18]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	4013      	ands	r3, r2
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	3301      	adds	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1c5      	bne.n	80070a8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	e000      	b.n	8007128 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007126:	2302      	movs	r3, #2
  }
}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007134:	b08a      	sub	sp, #40	@ 0x28
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	431a      	orrs	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	431a      	orrs	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	4313      	orrs	r3, r2
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4bb4      	ldr	r3, [pc, #720]	@ (8007430 <UART_SetConfig+0x300>)
 8007160:	4013      	ands	r3, r2
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007168:	430b      	orrs	r3, r1
 800716a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4aa9      	ldr	r2, [pc, #676]	@ (8007434 <UART_SetConfig+0x304>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d004      	beq.n	800719c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007198:	4313      	orrs	r3, r2
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ac:	430a      	orrs	r2, r1
 80071ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4aa0      	ldr	r2, [pc, #640]	@ (8007438 <UART_SetConfig+0x308>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d126      	bne.n	8007208 <UART_SetConfig+0xd8>
 80071ba:	4ba0      	ldr	r3, [pc, #640]	@ (800743c <UART_SetConfig+0x30c>)
 80071bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d81b      	bhi.n	8007200 <UART_SetConfig+0xd0>
 80071c8:	a201      	add	r2, pc, #4	@ (adr r2, 80071d0 <UART_SetConfig+0xa0>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071f1 	.word	0x080071f1
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	080071f9 	.word	0x080071f9
 80071e0:	2301      	movs	r3, #1
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e6:	e080      	b.n	80072ea <UART_SetConfig+0x1ba>
 80071e8:	2302      	movs	r3, #2
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ee:	e07c      	b.n	80072ea <UART_SetConfig+0x1ba>
 80071f0:	2304      	movs	r3, #4
 80071f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f6:	e078      	b.n	80072ea <UART_SetConfig+0x1ba>
 80071f8:	2308      	movs	r3, #8
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fe:	e074      	b.n	80072ea <UART_SetConfig+0x1ba>
 8007200:	2310      	movs	r3, #16
 8007202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007206:	e070      	b.n	80072ea <UART_SetConfig+0x1ba>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a8c      	ldr	r2, [pc, #560]	@ (8007440 <UART_SetConfig+0x310>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d138      	bne.n	8007284 <UART_SetConfig+0x154>
 8007212:	4b8a      	ldr	r3, [pc, #552]	@ (800743c <UART_SetConfig+0x30c>)
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007218:	f003 030c 	and.w	r3, r3, #12
 800721c:	2b0c      	cmp	r3, #12
 800721e:	d82d      	bhi.n	800727c <UART_SetConfig+0x14c>
 8007220:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <UART_SetConfig+0xf8>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	0800725d 	.word	0x0800725d
 800722c:	0800727d 	.word	0x0800727d
 8007230:	0800727d 	.word	0x0800727d
 8007234:	0800727d 	.word	0x0800727d
 8007238:	0800726d 	.word	0x0800726d
 800723c:	0800727d 	.word	0x0800727d
 8007240:	0800727d 	.word	0x0800727d
 8007244:	0800727d 	.word	0x0800727d
 8007248:	08007265 	.word	0x08007265
 800724c:	0800727d 	.word	0x0800727d
 8007250:	0800727d 	.word	0x0800727d
 8007254:	0800727d 	.word	0x0800727d
 8007258:	08007275 	.word	0x08007275
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007262:	e042      	b.n	80072ea <UART_SetConfig+0x1ba>
 8007264:	2302      	movs	r3, #2
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800726a:	e03e      	b.n	80072ea <UART_SetConfig+0x1ba>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007272:	e03a      	b.n	80072ea <UART_SetConfig+0x1ba>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800727a:	e036      	b.n	80072ea <UART_SetConfig+0x1ba>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007282:	e032      	b.n	80072ea <UART_SetConfig+0x1ba>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a6a      	ldr	r2, [pc, #424]	@ (8007434 <UART_SetConfig+0x304>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d12a      	bne.n	80072e4 <UART_SetConfig+0x1b4>
 800728e:	4b6b      	ldr	r3, [pc, #428]	@ (800743c <UART_SetConfig+0x30c>)
 8007290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007294:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007298:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800729c:	d01a      	beq.n	80072d4 <UART_SetConfig+0x1a4>
 800729e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072a2:	d81b      	bhi.n	80072dc <UART_SetConfig+0x1ac>
 80072a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a8:	d00c      	beq.n	80072c4 <UART_SetConfig+0x194>
 80072aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072ae:	d815      	bhi.n	80072dc <UART_SetConfig+0x1ac>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <UART_SetConfig+0x18c>
 80072b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072b8:	d008      	beq.n	80072cc <UART_SetConfig+0x19c>
 80072ba:	e00f      	b.n	80072dc <UART_SetConfig+0x1ac>
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072c2:	e012      	b.n	80072ea <UART_SetConfig+0x1ba>
 80072c4:	2302      	movs	r3, #2
 80072c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ca:	e00e      	b.n	80072ea <UART_SetConfig+0x1ba>
 80072cc:	2304      	movs	r3, #4
 80072ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072d2:	e00a      	b.n	80072ea <UART_SetConfig+0x1ba>
 80072d4:	2308      	movs	r3, #8
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072da:	e006      	b.n	80072ea <UART_SetConfig+0x1ba>
 80072dc:	2310      	movs	r3, #16
 80072de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072e2:	e002      	b.n	80072ea <UART_SetConfig+0x1ba>
 80072e4:	2310      	movs	r3, #16
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a51      	ldr	r2, [pc, #324]	@ (8007434 <UART_SetConfig+0x304>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d17a      	bne.n	80073ea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d824      	bhi.n	8007346 <UART_SetConfig+0x216>
 80072fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <UART_SetConfig+0x1d4>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007329 	.word	0x08007329
 8007308:	08007347 	.word	0x08007347
 800730c:	08007331 	.word	0x08007331
 8007310:	08007347 	.word	0x08007347
 8007314:	08007337 	.word	0x08007337
 8007318:	08007347 	.word	0x08007347
 800731c:	08007347 	.word	0x08007347
 8007320:	08007347 	.word	0x08007347
 8007324:	0800733f 	.word	0x0800733f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007328:	f7fd fc78 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 800732c:	61f8      	str	r0, [r7, #28]
        break;
 800732e:	e010      	b.n	8007352 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007330:	4b44      	ldr	r3, [pc, #272]	@ (8007444 <UART_SetConfig+0x314>)
 8007332:	61fb      	str	r3, [r7, #28]
        break;
 8007334:	e00d      	b.n	8007352 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007336:	f7fd fbd9 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 800733a:	61f8      	str	r0, [r7, #28]
        break;
 800733c:	e009      	b.n	8007352 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800733e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007342:	61fb      	str	r3, [r7, #28]
        break;
 8007344:	e005      	b.n	8007352 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8107 	beq.w	8007568 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	4413      	add	r3, r2
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	429a      	cmp	r2, r3
 8007368:	d305      	bcc.n	8007376 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	429a      	cmp	r2, r3
 8007374:	d903      	bls.n	800737e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800737c:	e0f4      	b.n	8007568 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	2200      	movs	r2, #0
 8007382:	461c      	mov	r4, r3
 8007384:	4615      	mov	r5, r2
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	022b      	lsls	r3, r5, #8
 8007390:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007394:	0222      	lsls	r2, r4, #8
 8007396:	68f9      	ldr	r1, [r7, #12]
 8007398:	6849      	ldr	r1, [r1, #4]
 800739a:	0849      	lsrs	r1, r1, #1
 800739c:	2000      	movs	r0, #0
 800739e:	4688      	mov	r8, r1
 80073a0:	4681      	mov	r9, r0
 80073a2:	eb12 0a08 	adds.w	sl, r2, r8
 80073a6:	eb43 0b09 	adc.w	fp, r3, r9
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b8:	4650      	mov	r0, sl
 80073ba:	4659      	mov	r1, fp
 80073bc:	f7f9 fc64 	bl	8000c88 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4613      	mov	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ce:	d308      	bcc.n	80073e2 <UART_SetConfig+0x2b2>
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073d6:	d204      	bcs.n	80073e2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	60da      	str	r2, [r3, #12]
 80073e0:	e0c2      	b.n	8007568 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073e8:	e0be      	b.n	8007568 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073f2:	d16a      	bne.n	80074ca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80073f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d834      	bhi.n	8007466 <UART_SetConfig+0x336>
 80073fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0x2d4>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007429 	.word	0x08007429
 8007408:	08007449 	.word	0x08007449
 800740c:	08007451 	.word	0x08007451
 8007410:	08007467 	.word	0x08007467
 8007414:	08007457 	.word	0x08007457
 8007418:	08007467 	.word	0x08007467
 800741c:	08007467 	.word	0x08007467
 8007420:	08007467 	.word	0x08007467
 8007424:	0800745f 	.word	0x0800745f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fd fbf8 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 800742c:	61f8      	str	r0, [r7, #28]
        break;
 800742e:	e020      	b.n	8007472 <UART_SetConfig+0x342>
 8007430:	efff69f3 	.word	0xefff69f3
 8007434:	40008000 	.word	0x40008000
 8007438:	40013800 	.word	0x40013800
 800743c:	40021000 	.word	0x40021000
 8007440:	40004400 	.word	0x40004400
 8007444:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007448:	f7fd fbfe 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 800744c:	61f8      	str	r0, [r7, #28]
        break;
 800744e:	e010      	b.n	8007472 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007450:	4b4c      	ldr	r3, [pc, #304]	@ (8007584 <UART_SetConfig+0x454>)
 8007452:	61fb      	str	r3, [r7, #28]
        break;
 8007454:	e00d      	b.n	8007472 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007456:	f7fd fb49 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 800745a:	61f8      	str	r0, [r7, #28]
        break;
 800745c:	e009      	b.n	8007472 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007462:	61fb      	str	r3, [r7, #28]
        break;
 8007464:	e005      	b.n	8007472 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d077      	beq.n	8007568 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	005a      	lsls	r2, r3, #1
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	441a      	add	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	fbb2 f3f3 	udiv	r3, r2, r3
 800748c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b0f      	cmp	r3, #15
 8007492:	d916      	bls.n	80074c2 <UART_SetConfig+0x392>
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800749a:	d212      	bcs.n	80074c2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f023 030f 	bic.w	r3, r3, #15
 80074a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	085b      	lsrs	r3, r3, #1
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	8afb      	ldrh	r3, [r7, #22]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	8afa      	ldrh	r2, [r7, #22]
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	e052      	b.n	8007568 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80074c8:	e04e      	b.n	8007568 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d827      	bhi.n	8007522 <UART_SetConfig+0x3f2>
 80074d2:	a201      	add	r2, pc, #4	@ (adr r2, 80074d8 <UART_SetConfig+0x3a8>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	08007523 	.word	0x08007523
 80074e8:	08007513 	.word	0x08007513
 80074ec:	08007523 	.word	0x08007523
 80074f0:	08007523 	.word	0x08007523
 80074f4:	08007523 	.word	0x08007523
 80074f8:	0800751b 	.word	0x0800751b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fc:	f7fd fb8e 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8007500:	61f8      	str	r0, [r7, #28]
        break;
 8007502:	e014      	b.n	800752e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007504:	f7fd fba0 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8007508:	61f8      	str	r0, [r7, #28]
        break;
 800750a:	e010      	b.n	800752e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800750c:	4b1d      	ldr	r3, [pc, #116]	@ (8007584 <UART_SetConfig+0x454>)
 800750e:	61fb      	str	r3, [r7, #28]
        break;
 8007510:	e00d      	b.n	800752e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007512:	f7fd faeb 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8007516:	61f8      	str	r0, [r7, #28]
        break;
 8007518:	e009      	b.n	800752e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800751e:	61fb      	str	r3, [r7, #28]
        break;
 8007520:	e005      	b.n	800752e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800752c:	bf00      	nop
    }

    if (pclk != 0U)
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d019      	beq.n	8007568 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	085a      	lsrs	r2, r3, #1
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	441a      	add	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	fbb2 f3f3 	udiv	r3, r2, r3
 8007546:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b0f      	cmp	r3, #15
 800754c:	d909      	bls.n	8007562 <UART_SetConfig+0x432>
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007554:	d205      	bcs.n	8007562 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60da      	str	r2, [r3, #12]
 8007560:	e002      	b.n	8007568 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8007574:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	@ 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007582:	bf00      	nop
 8007584:	00f42400 	.word	0x00f42400

08007588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01a      	beq.n	800769e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007686:	d10a      	bne.n	800769e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	605a      	str	r2, [r3, #4]
  }
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076dc:	f7fa ff78 	bl	80025d0 <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d10e      	bne.n	800770e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f82d 	bl	800775e <UART_WaitOnFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e023      	b.n	8007756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b04      	cmp	r3, #4
 800771a:	d10e      	bne.n	800773a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800771c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f817 	bl	800775e <UART_WaitOnFlagUntilTimeout>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e00d      	b.n	8007756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b09c      	sub	sp, #112	@ 0x70
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	603b      	str	r3, [r7, #0]
 800776a:	4613      	mov	r3, r2
 800776c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800776e:	e0a5      	b.n	80078bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007770:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007776:	f000 80a1 	beq.w	80078bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777a:	f7fa ff29 	bl	80025d0 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007786:	429a      	cmp	r2, r3
 8007788:	d302      	bcc.n	8007790 <UART_WaitOnFlagUntilTimeout+0x32>
 800778a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800778c:	2b00      	cmp	r3, #0
 800778e:	d13e      	bne.n	800780e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800779e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077a0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80077a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80077bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e6      	bne.n	8007790 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d4:	f023 0301 	bic.w	r3, r3, #1
 80077d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077e2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80077e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80077f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e5      	bne.n	80077c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2220      	movs	r2, #32
 8007800:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e067      	b.n	80078de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	d04f      	beq.n	80078bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800782a:	d147      	bne.n	80078bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007834:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007846:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800784a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007854:	637b      	str	r3, [r7, #52]	@ 0x34
 8007856:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800785a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e6      	bne.n	8007836 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	613b      	str	r3, [r7, #16]
   return(result);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f023 0301 	bic.w	r3, r3, #1
 800787e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3308      	adds	r3, #8
 8007886:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007888:	623a      	str	r2, [r7, #32]
 800788a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	69f9      	ldr	r1, [r7, #28]
 800788e:	6a3a      	ldr	r2, [r7, #32]
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	61bb      	str	r3, [r7, #24]
   return(result);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e5      	bne.n	8007868 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2220      	movs	r2, #32
 80078a6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e010      	b.n	80078de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69da      	ldr	r2, [r3, #28]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	4013      	ands	r3, r2
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	bf0c      	ite	eq
 80078cc:	2301      	moveq	r3, #1
 80078ce:	2300      	movne	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	461a      	mov	r2, r3
 80078d4:	79fb      	ldrb	r3, [r7, #7]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	f43f af4a 	beq.w	8007770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3770      	adds	r7, #112	@ 0x70
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <__cvt>:
 80078e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078ea:	ec57 6b10 	vmov	r6, r7, d0
 80078ee:	2f00      	cmp	r7, #0
 80078f0:	460c      	mov	r4, r1
 80078f2:	4619      	mov	r1, r3
 80078f4:	463b      	mov	r3, r7
 80078f6:	bfbb      	ittet	lt
 80078f8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80078fc:	461f      	movlt	r7, r3
 80078fe:	2300      	movge	r3, #0
 8007900:	232d      	movlt	r3, #45	@ 0x2d
 8007902:	700b      	strb	r3, [r1, #0]
 8007904:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007906:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800790a:	4691      	mov	r9, r2
 800790c:	f023 0820 	bic.w	r8, r3, #32
 8007910:	bfbc      	itt	lt
 8007912:	4632      	movlt	r2, r6
 8007914:	4616      	movlt	r6, r2
 8007916:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800791a:	d005      	beq.n	8007928 <__cvt+0x42>
 800791c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007920:	d100      	bne.n	8007924 <__cvt+0x3e>
 8007922:	3401      	adds	r4, #1
 8007924:	2102      	movs	r1, #2
 8007926:	e000      	b.n	800792a <__cvt+0x44>
 8007928:	2103      	movs	r1, #3
 800792a:	ab03      	add	r3, sp, #12
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	ab02      	add	r3, sp, #8
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	ec47 6b10 	vmov	d0, r6, r7
 8007936:	4653      	mov	r3, sl
 8007938:	4622      	mov	r2, r4
 800793a:	f001 f875 	bl	8008a28 <_dtoa_r>
 800793e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007942:	4605      	mov	r5, r0
 8007944:	d119      	bne.n	800797a <__cvt+0x94>
 8007946:	f019 0f01 	tst.w	r9, #1
 800794a:	d00e      	beq.n	800796a <__cvt+0x84>
 800794c:	eb00 0904 	add.w	r9, r0, r4
 8007950:	2200      	movs	r2, #0
 8007952:	2300      	movs	r3, #0
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f7f9 f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800795c:	b108      	cbz	r0, 8007962 <__cvt+0x7c>
 800795e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007962:	2230      	movs	r2, #48	@ 0x30
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	454b      	cmp	r3, r9
 8007968:	d31e      	bcc.n	80079a8 <__cvt+0xc2>
 800796a:	9b03      	ldr	r3, [sp, #12]
 800796c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800796e:	1b5b      	subs	r3, r3, r5
 8007970:	4628      	mov	r0, r5
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	b004      	add	sp, #16
 8007976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800797e:	eb00 0904 	add.w	r9, r0, r4
 8007982:	d1e5      	bne.n	8007950 <__cvt+0x6a>
 8007984:	7803      	ldrb	r3, [r0, #0]
 8007986:	2b30      	cmp	r3, #48	@ 0x30
 8007988:	d10a      	bne.n	80079a0 <__cvt+0xba>
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f9 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8007996:	b918      	cbnz	r0, 80079a0 <__cvt+0xba>
 8007998:	f1c4 0401 	rsb	r4, r4, #1
 800799c:	f8ca 4000 	str.w	r4, [sl]
 80079a0:	f8da 3000 	ldr.w	r3, [sl]
 80079a4:	4499      	add	r9, r3
 80079a6:	e7d3      	b.n	8007950 <__cvt+0x6a>
 80079a8:	1c59      	adds	r1, r3, #1
 80079aa:	9103      	str	r1, [sp, #12]
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e7d9      	b.n	8007964 <__cvt+0x7e>

080079b0 <__exponent>:
 80079b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079b2:	2900      	cmp	r1, #0
 80079b4:	bfba      	itte	lt
 80079b6:	4249      	neglt	r1, r1
 80079b8:	232d      	movlt	r3, #45	@ 0x2d
 80079ba:	232b      	movge	r3, #43	@ 0x2b
 80079bc:	2909      	cmp	r1, #9
 80079be:	7002      	strb	r2, [r0, #0]
 80079c0:	7043      	strb	r3, [r0, #1]
 80079c2:	dd29      	ble.n	8007a18 <__exponent+0x68>
 80079c4:	f10d 0307 	add.w	r3, sp, #7
 80079c8:	461d      	mov	r5, r3
 80079ca:	270a      	movs	r7, #10
 80079cc:	461a      	mov	r2, r3
 80079ce:	fbb1 f6f7 	udiv	r6, r1, r7
 80079d2:	fb07 1416 	mls	r4, r7, r6, r1
 80079d6:	3430      	adds	r4, #48	@ 0x30
 80079d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80079dc:	460c      	mov	r4, r1
 80079de:	2c63      	cmp	r4, #99	@ 0x63
 80079e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80079e4:	4631      	mov	r1, r6
 80079e6:	dcf1      	bgt.n	80079cc <__exponent+0x1c>
 80079e8:	3130      	adds	r1, #48	@ 0x30
 80079ea:	1e94      	subs	r4, r2, #2
 80079ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80079f0:	1c41      	adds	r1, r0, #1
 80079f2:	4623      	mov	r3, r4
 80079f4:	42ab      	cmp	r3, r5
 80079f6:	d30a      	bcc.n	8007a0e <__exponent+0x5e>
 80079f8:	f10d 0309 	add.w	r3, sp, #9
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	42ac      	cmp	r4, r5
 8007a00:	bf88      	it	hi
 8007a02:	2300      	movhi	r3, #0
 8007a04:	3302      	adds	r3, #2
 8007a06:	4403      	add	r3, r0
 8007a08:	1a18      	subs	r0, r3, r0
 8007a0a:	b003      	add	sp, #12
 8007a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a12:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a16:	e7ed      	b.n	80079f4 <__exponent+0x44>
 8007a18:	2330      	movs	r3, #48	@ 0x30
 8007a1a:	3130      	adds	r1, #48	@ 0x30
 8007a1c:	7083      	strb	r3, [r0, #2]
 8007a1e:	70c1      	strb	r1, [r0, #3]
 8007a20:	1d03      	adds	r3, r0, #4
 8007a22:	e7f1      	b.n	8007a08 <__exponent+0x58>

08007a24 <_printf_float>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	b08d      	sub	sp, #52	@ 0x34
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a30:	4616      	mov	r6, r2
 8007a32:	461f      	mov	r7, r3
 8007a34:	4605      	mov	r5, r0
 8007a36:	f000 feef 	bl	8008818 <_localeconv_r>
 8007a3a:	6803      	ldr	r3, [r0, #0]
 8007a3c:	9304      	str	r3, [sp, #16]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7f8 fc16 	bl	8000270 <strlen>
 8007a44:	2300      	movs	r3, #0
 8007a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a48:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4c:	9005      	str	r0, [sp, #20]
 8007a4e:	3307      	adds	r3, #7
 8007a50:	f023 0307 	bic.w	r3, r3, #7
 8007a54:	f103 0208 	add.w	r2, r3, #8
 8007a58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a5c:	f8d4 b000 	ldr.w	fp, [r4]
 8007a60:	f8c8 2000 	str.w	r2, [r8]
 8007a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a6c:	9307      	str	r3, [sp, #28]
 8007a6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a7a:	4b9c      	ldr	r3, [pc, #624]	@ (8007cec <_printf_float+0x2c8>)
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a80:	f7f9 f854 	bl	8000b2c <__aeabi_dcmpun>
 8007a84:	bb70      	cbnz	r0, 8007ae4 <_printf_float+0xc0>
 8007a86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a8a:	4b98      	ldr	r3, [pc, #608]	@ (8007cec <_printf_float+0x2c8>)
 8007a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a90:	f7f9 f82e 	bl	8000af0 <__aeabi_dcmple>
 8007a94:	bb30      	cbnz	r0, 8007ae4 <_printf_float+0xc0>
 8007a96:	2200      	movs	r2, #0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	f7f9 f81d 	bl	8000adc <__aeabi_dcmplt>
 8007aa2:	b110      	cbz	r0, 8007aaa <_printf_float+0x86>
 8007aa4:	232d      	movs	r3, #45	@ 0x2d
 8007aa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aaa:	4a91      	ldr	r2, [pc, #580]	@ (8007cf0 <_printf_float+0x2cc>)
 8007aac:	4b91      	ldr	r3, [pc, #580]	@ (8007cf4 <_printf_float+0x2d0>)
 8007aae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ab2:	bf94      	ite	ls
 8007ab4:	4690      	movls	r8, r2
 8007ab6:	4698      	movhi	r8, r3
 8007ab8:	2303      	movs	r3, #3
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	f02b 0304 	bic.w	r3, fp, #4
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	f04f 0900 	mov.w	r9, #0
 8007ac6:	9700      	str	r7, [sp, #0]
 8007ac8:	4633      	mov	r3, r6
 8007aca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007acc:	4621      	mov	r1, r4
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f000 f9d2 	bl	8007e78 <_printf_common>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f040 808d 	bne.w	8007bf4 <_printf_float+0x1d0>
 8007ada:	f04f 30ff 	mov.w	r0, #4294967295
 8007ade:	b00d      	add	sp, #52	@ 0x34
 8007ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4649      	mov	r1, r9
 8007aec:	f7f9 f81e 	bl	8000b2c <__aeabi_dcmpun>
 8007af0:	b140      	cbz	r0, 8007b04 <_printf_float+0xe0>
 8007af2:	464b      	mov	r3, r9
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfbc      	itt	lt
 8007af8:	232d      	movlt	r3, #45	@ 0x2d
 8007afa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007afe:	4a7e      	ldr	r2, [pc, #504]	@ (8007cf8 <_printf_float+0x2d4>)
 8007b00:	4b7e      	ldr	r3, [pc, #504]	@ (8007cfc <_printf_float+0x2d8>)
 8007b02:	e7d4      	b.n	8007aae <_printf_float+0x8a>
 8007b04:	6863      	ldr	r3, [r4, #4]
 8007b06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b0a:	9206      	str	r2, [sp, #24]
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	d13b      	bne.n	8007b88 <_printf_float+0x164>
 8007b10:	2306      	movs	r3, #6
 8007b12:	6063      	str	r3, [r4, #4]
 8007b14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b18:	2300      	movs	r3, #0
 8007b1a:	6022      	str	r2, [r4, #0]
 8007b1c:	9303      	str	r3, [sp, #12]
 8007b1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b24:	ab09      	add	r3, sp, #36	@ 0x24
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	6861      	ldr	r1, [r4, #4]
 8007b2a:	ec49 8b10 	vmov	d0, r8, r9
 8007b2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b32:	4628      	mov	r0, r5
 8007b34:	f7ff fed7 	bl	80078e6 <__cvt>
 8007b38:	9b06      	ldr	r3, [sp, #24]
 8007b3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b3c:	2b47      	cmp	r3, #71	@ 0x47
 8007b3e:	4680      	mov	r8, r0
 8007b40:	d129      	bne.n	8007b96 <_printf_float+0x172>
 8007b42:	1cc8      	adds	r0, r1, #3
 8007b44:	db02      	blt.n	8007b4c <_printf_float+0x128>
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	4299      	cmp	r1, r3
 8007b4a:	dd41      	ble.n	8007bd0 <_printf_float+0x1ac>
 8007b4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b50:	fa5f fa8a 	uxtb.w	sl, sl
 8007b54:	3901      	subs	r1, #1
 8007b56:	4652      	mov	r2, sl
 8007b58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b5e:	f7ff ff27 	bl	80079b0 <__exponent>
 8007b62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b64:	1813      	adds	r3, r2, r0
 8007b66:	2a01      	cmp	r2, #1
 8007b68:	4681      	mov	r9, r0
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	dc02      	bgt.n	8007b74 <_printf_float+0x150>
 8007b6e:	6822      	ldr	r2, [r4, #0]
 8007b70:	07d2      	lsls	r2, r2, #31
 8007b72:	d501      	bpl.n	8007b78 <_printf_float+0x154>
 8007b74:	3301      	adds	r3, #1
 8007b76:	6123      	str	r3, [r4, #16]
 8007b78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0a2      	beq.n	8007ac6 <_printf_float+0xa2>
 8007b80:	232d      	movs	r3, #45	@ 0x2d
 8007b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b86:	e79e      	b.n	8007ac6 <_printf_float+0xa2>
 8007b88:	9a06      	ldr	r2, [sp, #24]
 8007b8a:	2a47      	cmp	r2, #71	@ 0x47
 8007b8c:	d1c2      	bne.n	8007b14 <_printf_float+0xf0>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1c0      	bne.n	8007b14 <_printf_float+0xf0>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e7bd      	b.n	8007b12 <_printf_float+0xee>
 8007b96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b9a:	d9db      	bls.n	8007b54 <_printf_float+0x130>
 8007b9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ba0:	d118      	bne.n	8007bd4 <_printf_float+0x1b0>
 8007ba2:	2900      	cmp	r1, #0
 8007ba4:	6863      	ldr	r3, [r4, #4]
 8007ba6:	dd0b      	ble.n	8007bc0 <_printf_float+0x19c>
 8007ba8:	6121      	str	r1, [r4, #16]
 8007baa:	b913      	cbnz	r3, 8007bb2 <_printf_float+0x18e>
 8007bac:	6822      	ldr	r2, [r4, #0]
 8007bae:	07d0      	lsls	r0, r2, #31
 8007bb0:	d502      	bpl.n	8007bb8 <_printf_float+0x194>
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	440b      	add	r3, r1
 8007bb6:	6123      	str	r3, [r4, #16]
 8007bb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007bba:	f04f 0900 	mov.w	r9, #0
 8007bbe:	e7db      	b.n	8007b78 <_printf_float+0x154>
 8007bc0:	b913      	cbnz	r3, 8007bc8 <_printf_float+0x1a4>
 8007bc2:	6822      	ldr	r2, [r4, #0]
 8007bc4:	07d2      	lsls	r2, r2, #31
 8007bc6:	d501      	bpl.n	8007bcc <_printf_float+0x1a8>
 8007bc8:	3302      	adds	r3, #2
 8007bca:	e7f4      	b.n	8007bb6 <_printf_float+0x192>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e7f2      	b.n	8007bb6 <_printf_float+0x192>
 8007bd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	db05      	blt.n	8007be6 <_printf_float+0x1c2>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	6121      	str	r1, [r4, #16]
 8007bde:	07d8      	lsls	r0, r3, #31
 8007be0:	d5ea      	bpl.n	8007bb8 <_printf_float+0x194>
 8007be2:	1c4b      	adds	r3, r1, #1
 8007be4:	e7e7      	b.n	8007bb6 <_printf_float+0x192>
 8007be6:	2900      	cmp	r1, #0
 8007be8:	bfd4      	ite	le
 8007bea:	f1c1 0202 	rsble	r2, r1, #2
 8007bee:	2201      	movgt	r2, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	e7e0      	b.n	8007bb6 <_printf_float+0x192>
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	055a      	lsls	r2, r3, #21
 8007bf8:	d407      	bmi.n	8007c0a <_printf_float+0x1e6>
 8007bfa:	6923      	ldr	r3, [r4, #16]
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	d12b      	bne.n	8007c60 <_printf_float+0x23c>
 8007c08:	e767      	b.n	8007ada <_printf_float+0xb6>
 8007c0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c0e:	f240 80dd 	bls.w	8007dcc <_printf_float+0x3a8>
 8007c12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c16:	2200      	movs	r2, #0
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f7f8 ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d033      	beq.n	8007c8a <_printf_float+0x266>
 8007c22:	4a37      	ldr	r2, [pc, #220]	@ (8007d00 <_printf_float+0x2dc>)
 8007c24:	2301      	movs	r3, #1
 8007c26:	4631      	mov	r1, r6
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b8      	blx	r7
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	f43f af54 	beq.w	8007ada <_printf_float+0xb6>
 8007c32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c36:	4543      	cmp	r3, r8
 8007c38:	db02      	blt.n	8007c40 <_printf_float+0x21c>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	07d8      	lsls	r0, r3, #31
 8007c3e:	d50f      	bpl.n	8007c60 <_printf_float+0x23c>
 8007c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c44:	4631      	mov	r1, r6
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b8      	blx	r7
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	f43f af45 	beq.w	8007ada <_printf_float+0xb6>
 8007c50:	f04f 0900 	mov.w	r9, #0
 8007c54:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c58:	f104 0a1a 	add.w	sl, r4, #26
 8007c5c:	45c8      	cmp	r8, r9
 8007c5e:	dc09      	bgt.n	8007c74 <_printf_float+0x250>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	079b      	lsls	r3, r3, #30
 8007c64:	f100 8103 	bmi.w	8007e6e <_printf_float+0x44a>
 8007c68:	68e0      	ldr	r0, [r4, #12]
 8007c6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c6c:	4298      	cmp	r0, r3
 8007c6e:	bfb8      	it	lt
 8007c70:	4618      	movlt	r0, r3
 8007c72:	e734      	b.n	8007ade <_printf_float+0xba>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4652      	mov	r2, sl
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f af2b 	beq.w	8007ada <_printf_float+0xb6>
 8007c84:	f109 0901 	add.w	r9, r9, #1
 8007c88:	e7e8      	b.n	8007c5c <_printf_float+0x238>
 8007c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dc39      	bgt.n	8007d04 <_printf_float+0x2e0>
 8007c90:	4a1b      	ldr	r2, [pc, #108]	@ (8007d00 <_printf_float+0x2dc>)
 8007c92:	2301      	movs	r3, #1
 8007c94:	4631      	mov	r1, r6
 8007c96:	4628      	mov	r0, r5
 8007c98:	47b8      	blx	r7
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	f43f af1d 	beq.w	8007ada <_printf_float+0xb6>
 8007ca0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ca4:	ea59 0303 	orrs.w	r3, r9, r3
 8007ca8:	d102      	bne.n	8007cb0 <_printf_float+0x28c>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	07d9      	lsls	r1, r3, #31
 8007cae:	d5d7      	bpl.n	8007c60 <_printf_float+0x23c>
 8007cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	f43f af0d 	beq.w	8007ada <_printf_float+0xb6>
 8007cc0:	f04f 0a00 	mov.w	sl, #0
 8007cc4:	f104 0b1a 	add.w	fp, r4, #26
 8007cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cca:	425b      	negs	r3, r3
 8007ccc:	4553      	cmp	r3, sl
 8007cce:	dc01      	bgt.n	8007cd4 <_printf_float+0x2b0>
 8007cd0:	464b      	mov	r3, r9
 8007cd2:	e793      	b.n	8007bfc <_printf_float+0x1d8>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	465a      	mov	r2, fp
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f aefb 	beq.w	8007ada <_printf_float+0xb6>
 8007ce4:	f10a 0a01 	add.w	sl, sl, #1
 8007ce8:	e7ee      	b.n	8007cc8 <_printf_float+0x2a4>
 8007cea:	bf00      	nop
 8007cec:	7fefffff 	.word	0x7fefffff
 8007cf0:	0800ca98 	.word	0x0800ca98
 8007cf4:	0800ca9c 	.word	0x0800ca9c
 8007cf8:	0800caa0 	.word	0x0800caa0
 8007cfc:	0800caa4 	.word	0x0800caa4
 8007d00:	0800caa8 	.word	0x0800caa8
 8007d04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d0a:	4553      	cmp	r3, sl
 8007d0c:	bfa8      	it	ge
 8007d0e:	4653      	movge	r3, sl
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	4699      	mov	r9, r3
 8007d14:	dc36      	bgt.n	8007d84 <_printf_float+0x360>
 8007d16:	f04f 0b00 	mov.w	fp, #0
 8007d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d1e:	f104 021a 	add.w	r2, r4, #26
 8007d22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d24:	9306      	str	r3, [sp, #24]
 8007d26:	eba3 0309 	sub.w	r3, r3, r9
 8007d2a:	455b      	cmp	r3, fp
 8007d2c:	dc31      	bgt.n	8007d92 <_printf_float+0x36e>
 8007d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d30:	459a      	cmp	sl, r3
 8007d32:	dc3a      	bgt.n	8007daa <_printf_float+0x386>
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	07da      	lsls	r2, r3, #31
 8007d38:	d437      	bmi.n	8007daa <_printf_float+0x386>
 8007d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d3c:	ebaa 0903 	sub.w	r9, sl, r3
 8007d40:	9b06      	ldr	r3, [sp, #24]
 8007d42:	ebaa 0303 	sub.w	r3, sl, r3
 8007d46:	4599      	cmp	r9, r3
 8007d48:	bfa8      	it	ge
 8007d4a:	4699      	movge	r9, r3
 8007d4c:	f1b9 0f00 	cmp.w	r9, #0
 8007d50:	dc33      	bgt.n	8007dba <_printf_float+0x396>
 8007d52:	f04f 0800 	mov.w	r8, #0
 8007d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d5a:	f104 0b1a 	add.w	fp, r4, #26
 8007d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d60:	ebaa 0303 	sub.w	r3, sl, r3
 8007d64:	eba3 0309 	sub.w	r3, r3, r9
 8007d68:	4543      	cmp	r3, r8
 8007d6a:	f77f af79 	ble.w	8007c60 <_printf_float+0x23c>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	465a      	mov	r2, fp
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f aeae 	beq.w	8007ada <_printf_float+0xb6>
 8007d7e:	f108 0801 	add.w	r8, r8, #1
 8007d82:	e7ec      	b.n	8007d5e <_printf_float+0x33a>
 8007d84:	4642      	mov	r2, r8
 8007d86:	4631      	mov	r1, r6
 8007d88:	4628      	mov	r0, r5
 8007d8a:	47b8      	blx	r7
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d1c2      	bne.n	8007d16 <_printf_float+0x2f2>
 8007d90:	e6a3      	b.n	8007ada <_printf_float+0xb6>
 8007d92:	2301      	movs	r3, #1
 8007d94:	4631      	mov	r1, r6
 8007d96:	4628      	mov	r0, r5
 8007d98:	9206      	str	r2, [sp, #24]
 8007d9a:	47b8      	blx	r7
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	f43f ae9c 	beq.w	8007ada <_printf_float+0xb6>
 8007da2:	9a06      	ldr	r2, [sp, #24]
 8007da4:	f10b 0b01 	add.w	fp, fp, #1
 8007da8:	e7bb      	b.n	8007d22 <_printf_float+0x2fe>
 8007daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dae:	4631      	mov	r1, r6
 8007db0:	4628      	mov	r0, r5
 8007db2:	47b8      	blx	r7
 8007db4:	3001      	adds	r0, #1
 8007db6:	d1c0      	bne.n	8007d3a <_printf_float+0x316>
 8007db8:	e68f      	b.n	8007ada <_printf_float+0xb6>
 8007dba:	9a06      	ldr	r2, [sp, #24]
 8007dbc:	464b      	mov	r3, r9
 8007dbe:	4442      	add	r2, r8
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	47b8      	blx	r7
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	d1c3      	bne.n	8007d52 <_printf_float+0x32e>
 8007dca:	e686      	b.n	8007ada <_printf_float+0xb6>
 8007dcc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007dd0:	f1ba 0f01 	cmp.w	sl, #1
 8007dd4:	dc01      	bgt.n	8007dda <_printf_float+0x3b6>
 8007dd6:	07db      	lsls	r3, r3, #31
 8007dd8:	d536      	bpl.n	8007e48 <_printf_float+0x424>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4642      	mov	r2, r8
 8007dde:	4631      	mov	r1, r6
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	f43f ae78 	beq.w	8007ada <_printf_float+0xb6>
 8007dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dee:	4631      	mov	r1, r6
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b8      	blx	r7
 8007df4:	3001      	adds	r0, #1
 8007df6:	f43f ae70 	beq.w	8007ada <_printf_float+0xb6>
 8007dfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2300      	movs	r3, #0
 8007e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e06:	f7f8 fe5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e0a:	b9c0      	cbnz	r0, 8007e3e <_printf_float+0x41a>
 8007e0c:	4653      	mov	r3, sl
 8007e0e:	f108 0201 	add.w	r2, r8, #1
 8007e12:	4631      	mov	r1, r6
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b8      	blx	r7
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d10c      	bne.n	8007e36 <_printf_float+0x412>
 8007e1c:	e65d      	b.n	8007ada <_printf_float+0xb6>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	465a      	mov	r2, fp
 8007e22:	4631      	mov	r1, r6
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b8      	blx	r7
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f43f ae56 	beq.w	8007ada <_printf_float+0xb6>
 8007e2e:	f108 0801 	add.w	r8, r8, #1
 8007e32:	45d0      	cmp	r8, sl
 8007e34:	dbf3      	blt.n	8007e1e <_printf_float+0x3fa>
 8007e36:	464b      	mov	r3, r9
 8007e38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e3c:	e6df      	b.n	8007bfe <_printf_float+0x1da>
 8007e3e:	f04f 0800 	mov.w	r8, #0
 8007e42:	f104 0b1a 	add.w	fp, r4, #26
 8007e46:	e7f4      	b.n	8007e32 <_printf_float+0x40e>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4642      	mov	r2, r8
 8007e4c:	e7e1      	b.n	8007e12 <_printf_float+0x3ee>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	464a      	mov	r2, r9
 8007e52:	4631      	mov	r1, r6
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b8      	blx	r7
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f43f ae3e 	beq.w	8007ada <_printf_float+0xb6>
 8007e5e:	f108 0801 	add.w	r8, r8, #1
 8007e62:	68e3      	ldr	r3, [r4, #12]
 8007e64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e66:	1a5b      	subs	r3, r3, r1
 8007e68:	4543      	cmp	r3, r8
 8007e6a:	dcf0      	bgt.n	8007e4e <_printf_float+0x42a>
 8007e6c:	e6fc      	b.n	8007c68 <_printf_float+0x244>
 8007e6e:	f04f 0800 	mov.w	r8, #0
 8007e72:	f104 0919 	add.w	r9, r4, #25
 8007e76:	e7f4      	b.n	8007e62 <_printf_float+0x43e>

08007e78 <_printf_common>:
 8007e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7c:	4616      	mov	r6, r2
 8007e7e:	4698      	mov	r8, r3
 8007e80:	688a      	ldr	r2, [r1, #8]
 8007e82:	690b      	ldr	r3, [r1, #16]
 8007e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	bfb8      	it	lt
 8007e8c:	4613      	movlt	r3, r2
 8007e8e:	6033      	str	r3, [r6, #0]
 8007e90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e94:	4607      	mov	r7, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	b10a      	cbz	r2, 8007e9e <_printf_common+0x26>
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	6033      	str	r3, [r6, #0]
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	0699      	lsls	r1, r3, #26
 8007ea2:	bf42      	ittt	mi
 8007ea4:	6833      	ldrmi	r3, [r6, #0]
 8007ea6:	3302      	addmi	r3, #2
 8007ea8:	6033      	strmi	r3, [r6, #0]
 8007eaa:	6825      	ldr	r5, [r4, #0]
 8007eac:	f015 0506 	ands.w	r5, r5, #6
 8007eb0:	d106      	bne.n	8007ec0 <_printf_common+0x48>
 8007eb2:	f104 0a19 	add.w	sl, r4, #25
 8007eb6:	68e3      	ldr	r3, [r4, #12]
 8007eb8:	6832      	ldr	r2, [r6, #0]
 8007eba:	1a9b      	subs	r3, r3, r2
 8007ebc:	42ab      	cmp	r3, r5
 8007ebe:	dc26      	bgt.n	8007f0e <_printf_common+0x96>
 8007ec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ec4:	6822      	ldr	r2, [r4, #0]
 8007ec6:	3b00      	subs	r3, #0
 8007ec8:	bf18      	it	ne
 8007eca:	2301      	movne	r3, #1
 8007ecc:	0692      	lsls	r2, r2, #26
 8007ece:	d42b      	bmi.n	8007f28 <_printf_common+0xb0>
 8007ed0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ed4:	4641      	mov	r1, r8
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	47c8      	blx	r9
 8007eda:	3001      	adds	r0, #1
 8007edc:	d01e      	beq.n	8007f1c <_printf_common+0xa4>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	6922      	ldr	r2, [r4, #16]
 8007ee2:	f003 0306 	and.w	r3, r3, #6
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	bf02      	ittt	eq
 8007eea:	68e5      	ldreq	r5, [r4, #12]
 8007eec:	6833      	ldreq	r3, [r6, #0]
 8007eee:	1aed      	subeq	r5, r5, r3
 8007ef0:	68a3      	ldr	r3, [r4, #8]
 8007ef2:	bf0c      	ite	eq
 8007ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ef8:	2500      	movne	r5, #0
 8007efa:	4293      	cmp	r3, r2
 8007efc:	bfc4      	itt	gt
 8007efe:	1a9b      	subgt	r3, r3, r2
 8007f00:	18ed      	addgt	r5, r5, r3
 8007f02:	2600      	movs	r6, #0
 8007f04:	341a      	adds	r4, #26
 8007f06:	42b5      	cmp	r5, r6
 8007f08:	d11a      	bne.n	8007f40 <_printf_common+0xc8>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e008      	b.n	8007f20 <_printf_common+0xa8>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4652      	mov	r2, sl
 8007f12:	4641      	mov	r1, r8
 8007f14:	4638      	mov	r0, r7
 8007f16:	47c8      	blx	r9
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d103      	bne.n	8007f24 <_printf_common+0xac>
 8007f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f24:	3501      	adds	r5, #1
 8007f26:	e7c6      	b.n	8007eb6 <_printf_common+0x3e>
 8007f28:	18e1      	adds	r1, r4, r3
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	2030      	movs	r0, #48	@ 0x30
 8007f2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f32:	4422      	add	r2, r4
 8007f34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	e7c7      	b.n	8007ed0 <_printf_common+0x58>
 8007f40:	2301      	movs	r3, #1
 8007f42:	4622      	mov	r2, r4
 8007f44:	4641      	mov	r1, r8
 8007f46:	4638      	mov	r0, r7
 8007f48:	47c8      	blx	r9
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d0e6      	beq.n	8007f1c <_printf_common+0xa4>
 8007f4e:	3601      	adds	r6, #1
 8007f50:	e7d9      	b.n	8007f06 <_printf_common+0x8e>
	...

08007f54 <_printf_i>:
 8007f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f58:	7e0f      	ldrb	r7, [r1, #24]
 8007f5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f5c:	2f78      	cmp	r7, #120	@ 0x78
 8007f5e:	4691      	mov	r9, r2
 8007f60:	4680      	mov	r8, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	469a      	mov	sl, r3
 8007f66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f6a:	d807      	bhi.n	8007f7c <_printf_i+0x28>
 8007f6c:	2f62      	cmp	r7, #98	@ 0x62
 8007f6e:	d80a      	bhi.n	8007f86 <_printf_i+0x32>
 8007f70:	2f00      	cmp	r7, #0
 8007f72:	f000 80d2 	beq.w	800811a <_printf_i+0x1c6>
 8007f76:	2f58      	cmp	r7, #88	@ 0x58
 8007f78:	f000 80b9 	beq.w	80080ee <_printf_i+0x19a>
 8007f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f84:	e03a      	b.n	8007ffc <_printf_i+0xa8>
 8007f86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f8a:	2b15      	cmp	r3, #21
 8007f8c:	d8f6      	bhi.n	8007f7c <_printf_i+0x28>
 8007f8e:	a101      	add	r1, pc, #4	@ (adr r1, 8007f94 <_printf_i+0x40>)
 8007f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f94:	08007fed 	.word	0x08007fed
 8007f98:	08008001 	.word	0x08008001
 8007f9c:	08007f7d 	.word	0x08007f7d
 8007fa0:	08007f7d 	.word	0x08007f7d
 8007fa4:	08007f7d 	.word	0x08007f7d
 8007fa8:	08007f7d 	.word	0x08007f7d
 8007fac:	08008001 	.word	0x08008001
 8007fb0:	08007f7d 	.word	0x08007f7d
 8007fb4:	08007f7d 	.word	0x08007f7d
 8007fb8:	08007f7d 	.word	0x08007f7d
 8007fbc:	08007f7d 	.word	0x08007f7d
 8007fc0:	08008101 	.word	0x08008101
 8007fc4:	0800802b 	.word	0x0800802b
 8007fc8:	080080bb 	.word	0x080080bb
 8007fcc:	08007f7d 	.word	0x08007f7d
 8007fd0:	08007f7d 	.word	0x08007f7d
 8007fd4:	08008123 	.word	0x08008123
 8007fd8:	08007f7d 	.word	0x08007f7d
 8007fdc:	0800802b 	.word	0x0800802b
 8007fe0:	08007f7d 	.word	0x08007f7d
 8007fe4:	08007f7d 	.word	0x08007f7d
 8007fe8:	080080c3 	.word	0x080080c3
 8007fec:	6833      	ldr	r3, [r6, #0]
 8007fee:	1d1a      	adds	r2, r3, #4
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6032      	str	r2, [r6, #0]
 8007ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e09d      	b.n	800813c <_printf_i+0x1e8>
 8008000:	6833      	ldr	r3, [r6, #0]
 8008002:	6820      	ldr	r0, [r4, #0]
 8008004:	1d19      	adds	r1, r3, #4
 8008006:	6031      	str	r1, [r6, #0]
 8008008:	0606      	lsls	r6, r0, #24
 800800a:	d501      	bpl.n	8008010 <_printf_i+0xbc>
 800800c:	681d      	ldr	r5, [r3, #0]
 800800e:	e003      	b.n	8008018 <_printf_i+0xc4>
 8008010:	0645      	lsls	r5, r0, #25
 8008012:	d5fb      	bpl.n	800800c <_printf_i+0xb8>
 8008014:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008018:	2d00      	cmp	r5, #0
 800801a:	da03      	bge.n	8008024 <_printf_i+0xd0>
 800801c:	232d      	movs	r3, #45	@ 0x2d
 800801e:	426d      	negs	r5, r5
 8008020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008024:	4859      	ldr	r0, [pc, #356]	@ (800818c <_printf_i+0x238>)
 8008026:	230a      	movs	r3, #10
 8008028:	e011      	b.n	800804e <_printf_i+0xfa>
 800802a:	6821      	ldr	r1, [r4, #0]
 800802c:	6833      	ldr	r3, [r6, #0]
 800802e:	0608      	lsls	r0, r1, #24
 8008030:	f853 5b04 	ldr.w	r5, [r3], #4
 8008034:	d402      	bmi.n	800803c <_printf_i+0xe8>
 8008036:	0649      	lsls	r1, r1, #25
 8008038:	bf48      	it	mi
 800803a:	b2ad      	uxthmi	r5, r5
 800803c:	2f6f      	cmp	r7, #111	@ 0x6f
 800803e:	4853      	ldr	r0, [pc, #332]	@ (800818c <_printf_i+0x238>)
 8008040:	6033      	str	r3, [r6, #0]
 8008042:	bf14      	ite	ne
 8008044:	230a      	movne	r3, #10
 8008046:	2308      	moveq	r3, #8
 8008048:	2100      	movs	r1, #0
 800804a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800804e:	6866      	ldr	r6, [r4, #4]
 8008050:	60a6      	str	r6, [r4, #8]
 8008052:	2e00      	cmp	r6, #0
 8008054:	bfa2      	ittt	ge
 8008056:	6821      	ldrge	r1, [r4, #0]
 8008058:	f021 0104 	bicge.w	r1, r1, #4
 800805c:	6021      	strge	r1, [r4, #0]
 800805e:	b90d      	cbnz	r5, 8008064 <_printf_i+0x110>
 8008060:	2e00      	cmp	r6, #0
 8008062:	d04b      	beq.n	80080fc <_printf_i+0x1a8>
 8008064:	4616      	mov	r6, r2
 8008066:	fbb5 f1f3 	udiv	r1, r5, r3
 800806a:	fb03 5711 	mls	r7, r3, r1, r5
 800806e:	5dc7      	ldrb	r7, [r0, r7]
 8008070:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008074:	462f      	mov	r7, r5
 8008076:	42bb      	cmp	r3, r7
 8008078:	460d      	mov	r5, r1
 800807a:	d9f4      	bls.n	8008066 <_printf_i+0x112>
 800807c:	2b08      	cmp	r3, #8
 800807e:	d10b      	bne.n	8008098 <_printf_i+0x144>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	07df      	lsls	r7, r3, #31
 8008084:	d508      	bpl.n	8008098 <_printf_i+0x144>
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	6861      	ldr	r1, [r4, #4]
 800808a:	4299      	cmp	r1, r3
 800808c:	bfde      	ittt	le
 800808e:	2330      	movle	r3, #48	@ 0x30
 8008090:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008094:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008098:	1b92      	subs	r2, r2, r6
 800809a:	6122      	str	r2, [r4, #16]
 800809c:	f8cd a000 	str.w	sl, [sp]
 80080a0:	464b      	mov	r3, r9
 80080a2:	aa03      	add	r2, sp, #12
 80080a4:	4621      	mov	r1, r4
 80080a6:	4640      	mov	r0, r8
 80080a8:	f7ff fee6 	bl	8007e78 <_printf_common>
 80080ac:	3001      	adds	r0, #1
 80080ae:	d14a      	bne.n	8008146 <_printf_i+0x1f2>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	b004      	add	sp, #16
 80080b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	f043 0320 	orr.w	r3, r3, #32
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	4833      	ldr	r0, [pc, #204]	@ (8008190 <_printf_i+0x23c>)
 80080c4:	2778      	movs	r7, #120	@ 0x78
 80080c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	6831      	ldr	r1, [r6, #0]
 80080ce:	061f      	lsls	r7, r3, #24
 80080d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80080d4:	d402      	bmi.n	80080dc <_printf_i+0x188>
 80080d6:	065f      	lsls	r7, r3, #25
 80080d8:	bf48      	it	mi
 80080da:	b2ad      	uxthmi	r5, r5
 80080dc:	6031      	str	r1, [r6, #0]
 80080de:	07d9      	lsls	r1, r3, #31
 80080e0:	bf44      	itt	mi
 80080e2:	f043 0320 	orrmi.w	r3, r3, #32
 80080e6:	6023      	strmi	r3, [r4, #0]
 80080e8:	b11d      	cbz	r5, 80080f2 <_printf_i+0x19e>
 80080ea:	2310      	movs	r3, #16
 80080ec:	e7ac      	b.n	8008048 <_printf_i+0xf4>
 80080ee:	4827      	ldr	r0, [pc, #156]	@ (800818c <_printf_i+0x238>)
 80080f0:	e7e9      	b.n	80080c6 <_printf_i+0x172>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	f023 0320 	bic.w	r3, r3, #32
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	e7f6      	b.n	80080ea <_printf_i+0x196>
 80080fc:	4616      	mov	r6, r2
 80080fe:	e7bd      	b.n	800807c <_printf_i+0x128>
 8008100:	6833      	ldr	r3, [r6, #0]
 8008102:	6825      	ldr	r5, [r4, #0]
 8008104:	6961      	ldr	r1, [r4, #20]
 8008106:	1d18      	adds	r0, r3, #4
 8008108:	6030      	str	r0, [r6, #0]
 800810a:	062e      	lsls	r6, r5, #24
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	d501      	bpl.n	8008114 <_printf_i+0x1c0>
 8008110:	6019      	str	r1, [r3, #0]
 8008112:	e002      	b.n	800811a <_printf_i+0x1c6>
 8008114:	0668      	lsls	r0, r5, #25
 8008116:	d5fb      	bpl.n	8008110 <_printf_i+0x1bc>
 8008118:	8019      	strh	r1, [r3, #0]
 800811a:	2300      	movs	r3, #0
 800811c:	6123      	str	r3, [r4, #16]
 800811e:	4616      	mov	r6, r2
 8008120:	e7bc      	b.n	800809c <_printf_i+0x148>
 8008122:	6833      	ldr	r3, [r6, #0]
 8008124:	1d1a      	adds	r2, r3, #4
 8008126:	6032      	str	r2, [r6, #0]
 8008128:	681e      	ldr	r6, [r3, #0]
 800812a:	6862      	ldr	r2, [r4, #4]
 800812c:	2100      	movs	r1, #0
 800812e:	4630      	mov	r0, r6
 8008130:	f7f8 f84e 	bl	80001d0 <memchr>
 8008134:	b108      	cbz	r0, 800813a <_printf_i+0x1e6>
 8008136:	1b80      	subs	r0, r0, r6
 8008138:	6060      	str	r0, [r4, #4]
 800813a:	6863      	ldr	r3, [r4, #4]
 800813c:	6123      	str	r3, [r4, #16]
 800813e:	2300      	movs	r3, #0
 8008140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008144:	e7aa      	b.n	800809c <_printf_i+0x148>
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	4632      	mov	r2, r6
 800814a:	4649      	mov	r1, r9
 800814c:	4640      	mov	r0, r8
 800814e:	47d0      	blx	sl
 8008150:	3001      	adds	r0, #1
 8008152:	d0ad      	beq.n	80080b0 <_printf_i+0x15c>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	079b      	lsls	r3, r3, #30
 8008158:	d413      	bmi.n	8008182 <_printf_i+0x22e>
 800815a:	68e0      	ldr	r0, [r4, #12]
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	4298      	cmp	r0, r3
 8008160:	bfb8      	it	lt
 8008162:	4618      	movlt	r0, r3
 8008164:	e7a6      	b.n	80080b4 <_printf_i+0x160>
 8008166:	2301      	movs	r3, #1
 8008168:	4632      	mov	r2, r6
 800816a:	4649      	mov	r1, r9
 800816c:	4640      	mov	r0, r8
 800816e:	47d0      	blx	sl
 8008170:	3001      	adds	r0, #1
 8008172:	d09d      	beq.n	80080b0 <_printf_i+0x15c>
 8008174:	3501      	adds	r5, #1
 8008176:	68e3      	ldr	r3, [r4, #12]
 8008178:	9903      	ldr	r1, [sp, #12]
 800817a:	1a5b      	subs	r3, r3, r1
 800817c:	42ab      	cmp	r3, r5
 800817e:	dcf2      	bgt.n	8008166 <_printf_i+0x212>
 8008180:	e7eb      	b.n	800815a <_printf_i+0x206>
 8008182:	2500      	movs	r5, #0
 8008184:	f104 0619 	add.w	r6, r4, #25
 8008188:	e7f5      	b.n	8008176 <_printf_i+0x222>
 800818a:	bf00      	nop
 800818c:	0800caaa 	.word	0x0800caaa
 8008190:	0800cabb 	.word	0x0800cabb

08008194 <_scanf_float>:
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	b087      	sub	sp, #28
 800819a:	4617      	mov	r7, r2
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	688b      	ldr	r3, [r1, #8]
 80081a0:	1e5a      	subs	r2, r3, #1
 80081a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80081a6:	bf81      	itttt	hi
 80081a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80081ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80081b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80081b4:	608b      	strhi	r3, [r1, #8]
 80081b6:	680b      	ldr	r3, [r1, #0]
 80081b8:	460a      	mov	r2, r1
 80081ba:	f04f 0500 	mov.w	r5, #0
 80081be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80081c2:	f842 3b1c 	str.w	r3, [r2], #28
 80081c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081ca:	4680      	mov	r8, r0
 80081cc:	460c      	mov	r4, r1
 80081ce:	bf98      	it	ls
 80081d0:	f04f 0b00 	movls.w	fp, #0
 80081d4:	9201      	str	r2, [sp, #4]
 80081d6:	4616      	mov	r6, r2
 80081d8:	46aa      	mov	sl, r5
 80081da:	46a9      	mov	r9, r5
 80081dc:	9502      	str	r5, [sp, #8]
 80081de:	68a2      	ldr	r2, [r4, #8]
 80081e0:	b152      	cbz	r2, 80081f8 <_scanf_float+0x64>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80081e8:	d864      	bhi.n	80082b4 <_scanf_float+0x120>
 80081ea:	2b40      	cmp	r3, #64	@ 0x40
 80081ec:	d83c      	bhi.n	8008268 <_scanf_float+0xd4>
 80081ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80081f2:	b2c8      	uxtb	r0, r1
 80081f4:	280e      	cmp	r0, #14
 80081f6:	d93a      	bls.n	800826e <_scanf_float+0xda>
 80081f8:	f1b9 0f00 	cmp.w	r9, #0
 80081fc:	d003      	beq.n	8008206 <_scanf_float+0x72>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	f10a 3aff 	add.w	sl, sl, #4294967295
 800820a:	f1ba 0f01 	cmp.w	sl, #1
 800820e:	f200 8117 	bhi.w	8008440 <_scanf_float+0x2ac>
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	429e      	cmp	r6, r3
 8008216:	f200 8108 	bhi.w	800842a <_scanf_float+0x296>
 800821a:	2001      	movs	r0, #1
 800821c:	b007      	add	sp, #28
 800821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008222:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008226:	2a0d      	cmp	r2, #13
 8008228:	d8e6      	bhi.n	80081f8 <_scanf_float+0x64>
 800822a:	a101      	add	r1, pc, #4	@ (adr r1, 8008230 <_scanf_float+0x9c>)
 800822c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008230:	08008377 	.word	0x08008377
 8008234:	080081f9 	.word	0x080081f9
 8008238:	080081f9 	.word	0x080081f9
 800823c:	080081f9 	.word	0x080081f9
 8008240:	080083d7 	.word	0x080083d7
 8008244:	080083af 	.word	0x080083af
 8008248:	080081f9 	.word	0x080081f9
 800824c:	080081f9 	.word	0x080081f9
 8008250:	08008385 	.word	0x08008385
 8008254:	080081f9 	.word	0x080081f9
 8008258:	080081f9 	.word	0x080081f9
 800825c:	080081f9 	.word	0x080081f9
 8008260:	080081f9 	.word	0x080081f9
 8008264:	0800833d 	.word	0x0800833d
 8008268:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800826c:	e7db      	b.n	8008226 <_scanf_float+0x92>
 800826e:	290e      	cmp	r1, #14
 8008270:	d8c2      	bhi.n	80081f8 <_scanf_float+0x64>
 8008272:	a001      	add	r0, pc, #4	@ (adr r0, 8008278 <_scanf_float+0xe4>)
 8008274:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008278:	0800832d 	.word	0x0800832d
 800827c:	080081f9 	.word	0x080081f9
 8008280:	0800832d 	.word	0x0800832d
 8008284:	080083c3 	.word	0x080083c3
 8008288:	080081f9 	.word	0x080081f9
 800828c:	080082d5 	.word	0x080082d5
 8008290:	08008313 	.word	0x08008313
 8008294:	08008313 	.word	0x08008313
 8008298:	08008313 	.word	0x08008313
 800829c:	08008313 	.word	0x08008313
 80082a0:	08008313 	.word	0x08008313
 80082a4:	08008313 	.word	0x08008313
 80082a8:	08008313 	.word	0x08008313
 80082ac:	08008313 	.word	0x08008313
 80082b0:	08008313 	.word	0x08008313
 80082b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80082b6:	d809      	bhi.n	80082cc <_scanf_float+0x138>
 80082b8:	2b60      	cmp	r3, #96	@ 0x60
 80082ba:	d8b2      	bhi.n	8008222 <_scanf_float+0x8e>
 80082bc:	2b54      	cmp	r3, #84	@ 0x54
 80082be:	d07b      	beq.n	80083b8 <_scanf_float+0x224>
 80082c0:	2b59      	cmp	r3, #89	@ 0x59
 80082c2:	d199      	bne.n	80081f8 <_scanf_float+0x64>
 80082c4:	2d07      	cmp	r5, #7
 80082c6:	d197      	bne.n	80081f8 <_scanf_float+0x64>
 80082c8:	2508      	movs	r5, #8
 80082ca:	e02c      	b.n	8008326 <_scanf_float+0x192>
 80082cc:	2b74      	cmp	r3, #116	@ 0x74
 80082ce:	d073      	beq.n	80083b8 <_scanf_float+0x224>
 80082d0:	2b79      	cmp	r3, #121	@ 0x79
 80082d2:	e7f6      	b.n	80082c2 <_scanf_float+0x12e>
 80082d4:	6821      	ldr	r1, [r4, #0]
 80082d6:	05c8      	lsls	r0, r1, #23
 80082d8:	d51b      	bpl.n	8008312 <_scanf_float+0x17e>
 80082da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80082de:	6021      	str	r1, [r4, #0]
 80082e0:	f109 0901 	add.w	r9, r9, #1
 80082e4:	f1bb 0f00 	cmp.w	fp, #0
 80082e8:	d003      	beq.n	80082f2 <_scanf_float+0x15e>
 80082ea:	3201      	adds	r2, #1
 80082ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082f0:	60a2      	str	r2, [r4, #8]
 80082f2:	68a3      	ldr	r3, [r4, #8]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	60a3      	str	r3, [r4, #8]
 80082f8:	6923      	ldr	r3, [r4, #16]
 80082fa:	3301      	adds	r3, #1
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3b01      	subs	r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	607b      	str	r3, [r7, #4]
 8008306:	f340 8087 	ble.w	8008418 <_scanf_float+0x284>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	3301      	adds	r3, #1
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	e765      	b.n	80081de <_scanf_float+0x4a>
 8008312:	eb1a 0105 	adds.w	r1, sl, r5
 8008316:	f47f af6f 	bne.w	80081f8 <_scanf_float+0x64>
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008320:	6022      	str	r2, [r4, #0]
 8008322:	460d      	mov	r5, r1
 8008324:	468a      	mov	sl, r1
 8008326:	f806 3b01 	strb.w	r3, [r6], #1
 800832a:	e7e2      	b.n	80082f2 <_scanf_float+0x15e>
 800832c:	6822      	ldr	r2, [r4, #0]
 800832e:	0610      	lsls	r0, r2, #24
 8008330:	f57f af62 	bpl.w	80081f8 <_scanf_float+0x64>
 8008334:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008338:	6022      	str	r2, [r4, #0]
 800833a:	e7f4      	b.n	8008326 <_scanf_float+0x192>
 800833c:	f1ba 0f00 	cmp.w	sl, #0
 8008340:	d10e      	bne.n	8008360 <_scanf_float+0x1cc>
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	d10e      	bne.n	8008366 <_scanf_float+0x1d2>
 8008348:	6822      	ldr	r2, [r4, #0]
 800834a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800834e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008352:	d108      	bne.n	8008366 <_scanf_float+0x1d2>
 8008354:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008358:	6022      	str	r2, [r4, #0]
 800835a:	f04f 0a01 	mov.w	sl, #1
 800835e:	e7e2      	b.n	8008326 <_scanf_float+0x192>
 8008360:	f1ba 0f02 	cmp.w	sl, #2
 8008364:	d055      	beq.n	8008412 <_scanf_float+0x27e>
 8008366:	2d01      	cmp	r5, #1
 8008368:	d002      	beq.n	8008370 <_scanf_float+0x1dc>
 800836a:	2d04      	cmp	r5, #4
 800836c:	f47f af44 	bne.w	80081f8 <_scanf_float+0x64>
 8008370:	3501      	adds	r5, #1
 8008372:	b2ed      	uxtb	r5, r5
 8008374:	e7d7      	b.n	8008326 <_scanf_float+0x192>
 8008376:	f1ba 0f01 	cmp.w	sl, #1
 800837a:	f47f af3d 	bne.w	80081f8 <_scanf_float+0x64>
 800837e:	f04f 0a02 	mov.w	sl, #2
 8008382:	e7d0      	b.n	8008326 <_scanf_float+0x192>
 8008384:	b97d      	cbnz	r5, 80083a6 <_scanf_float+0x212>
 8008386:	f1b9 0f00 	cmp.w	r9, #0
 800838a:	f47f af38 	bne.w	80081fe <_scanf_float+0x6a>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008394:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008398:	f040 8108 	bne.w	80085ac <_scanf_float+0x418>
 800839c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083a0:	6022      	str	r2, [r4, #0]
 80083a2:	2501      	movs	r5, #1
 80083a4:	e7bf      	b.n	8008326 <_scanf_float+0x192>
 80083a6:	2d03      	cmp	r5, #3
 80083a8:	d0e2      	beq.n	8008370 <_scanf_float+0x1dc>
 80083aa:	2d05      	cmp	r5, #5
 80083ac:	e7de      	b.n	800836c <_scanf_float+0x1d8>
 80083ae:	2d02      	cmp	r5, #2
 80083b0:	f47f af22 	bne.w	80081f8 <_scanf_float+0x64>
 80083b4:	2503      	movs	r5, #3
 80083b6:	e7b6      	b.n	8008326 <_scanf_float+0x192>
 80083b8:	2d06      	cmp	r5, #6
 80083ba:	f47f af1d 	bne.w	80081f8 <_scanf_float+0x64>
 80083be:	2507      	movs	r5, #7
 80083c0:	e7b1      	b.n	8008326 <_scanf_float+0x192>
 80083c2:	6822      	ldr	r2, [r4, #0]
 80083c4:	0591      	lsls	r1, r2, #22
 80083c6:	f57f af17 	bpl.w	80081f8 <_scanf_float+0x64>
 80083ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80083ce:	6022      	str	r2, [r4, #0]
 80083d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80083d4:	e7a7      	b.n	8008326 <_scanf_float+0x192>
 80083d6:	6822      	ldr	r2, [r4, #0]
 80083d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80083dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80083e0:	d006      	beq.n	80083f0 <_scanf_float+0x25c>
 80083e2:	0550      	lsls	r0, r2, #21
 80083e4:	f57f af08 	bpl.w	80081f8 <_scanf_float+0x64>
 80083e8:	f1b9 0f00 	cmp.w	r9, #0
 80083ec:	f000 80de 	beq.w	80085ac <_scanf_float+0x418>
 80083f0:	0591      	lsls	r1, r2, #22
 80083f2:	bf58      	it	pl
 80083f4:	9902      	ldrpl	r1, [sp, #8]
 80083f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083fa:	bf58      	it	pl
 80083fc:	eba9 0101 	subpl.w	r1, r9, r1
 8008400:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008404:	bf58      	it	pl
 8008406:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800840a:	6022      	str	r2, [r4, #0]
 800840c:	f04f 0900 	mov.w	r9, #0
 8008410:	e789      	b.n	8008326 <_scanf_float+0x192>
 8008412:	f04f 0a03 	mov.w	sl, #3
 8008416:	e786      	b.n	8008326 <_scanf_float+0x192>
 8008418:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800841c:	4639      	mov	r1, r7
 800841e:	4640      	mov	r0, r8
 8008420:	4798      	blx	r3
 8008422:	2800      	cmp	r0, #0
 8008424:	f43f aedb 	beq.w	80081de <_scanf_float+0x4a>
 8008428:	e6e6      	b.n	80081f8 <_scanf_float+0x64>
 800842a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800842e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008432:	463a      	mov	r2, r7
 8008434:	4640      	mov	r0, r8
 8008436:	4798      	blx	r3
 8008438:	6923      	ldr	r3, [r4, #16]
 800843a:	3b01      	subs	r3, #1
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	e6e8      	b.n	8008212 <_scanf_float+0x7e>
 8008440:	1e6b      	subs	r3, r5, #1
 8008442:	2b06      	cmp	r3, #6
 8008444:	d824      	bhi.n	8008490 <_scanf_float+0x2fc>
 8008446:	2d02      	cmp	r5, #2
 8008448:	d836      	bhi.n	80084b8 <_scanf_float+0x324>
 800844a:	9b01      	ldr	r3, [sp, #4]
 800844c:	429e      	cmp	r6, r3
 800844e:	f67f aee4 	bls.w	800821a <_scanf_float+0x86>
 8008452:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008456:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800845a:	463a      	mov	r2, r7
 800845c:	4640      	mov	r0, r8
 800845e:	4798      	blx	r3
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	3b01      	subs	r3, #1
 8008464:	6123      	str	r3, [r4, #16]
 8008466:	e7f0      	b.n	800844a <_scanf_float+0x2b6>
 8008468:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800846c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008470:	463a      	mov	r2, r7
 8008472:	4640      	mov	r0, r8
 8008474:	4798      	blx	r3
 8008476:	6923      	ldr	r3, [r4, #16]
 8008478:	3b01      	subs	r3, #1
 800847a:	6123      	str	r3, [r4, #16]
 800847c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008480:	fa5f fa8a 	uxtb.w	sl, sl
 8008484:	f1ba 0f02 	cmp.w	sl, #2
 8008488:	d1ee      	bne.n	8008468 <_scanf_float+0x2d4>
 800848a:	3d03      	subs	r5, #3
 800848c:	b2ed      	uxtb	r5, r5
 800848e:	1b76      	subs	r6, r6, r5
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	05da      	lsls	r2, r3, #23
 8008494:	d530      	bpl.n	80084f8 <_scanf_float+0x364>
 8008496:	055b      	lsls	r3, r3, #21
 8008498:	d511      	bpl.n	80084be <_scanf_float+0x32a>
 800849a:	9b01      	ldr	r3, [sp, #4]
 800849c:	429e      	cmp	r6, r3
 800849e:	f67f aebc 	bls.w	800821a <_scanf_float+0x86>
 80084a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084aa:	463a      	mov	r2, r7
 80084ac:	4640      	mov	r0, r8
 80084ae:	4798      	blx	r3
 80084b0:	6923      	ldr	r3, [r4, #16]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	6123      	str	r3, [r4, #16]
 80084b6:	e7f0      	b.n	800849a <_scanf_float+0x306>
 80084b8:	46aa      	mov	sl, r5
 80084ba:	46b3      	mov	fp, r6
 80084bc:	e7de      	b.n	800847c <_scanf_float+0x2e8>
 80084be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084c2:	6923      	ldr	r3, [r4, #16]
 80084c4:	2965      	cmp	r1, #101	@ 0x65
 80084c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80084ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80084ce:	6123      	str	r3, [r4, #16]
 80084d0:	d00c      	beq.n	80084ec <_scanf_float+0x358>
 80084d2:	2945      	cmp	r1, #69	@ 0x45
 80084d4:	d00a      	beq.n	80084ec <_scanf_float+0x358>
 80084d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084da:	463a      	mov	r2, r7
 80084dc:	4640      	mov	r0, r8
 80084de:	4798      	blx	r3
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	1eb5      	subs	r5, r6, #2
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084f0:	463a      	mov	r2, r7
 80084f2:	4640      	mov	r0, r8
 80084f4:	4798      	blx	r3
 80084f6:	462e      	mov	r6, r5
 80084f8:	6822      	ldr	r2, [r4, #0]
 80084fa:	f012 0210 	ands.w	r2, r2, #16
 80084fe:	d001      	beq.n	8008504 <_scanf_float+0x370>
 8008500:	2000      	movs	r0, #0
 8008502:	e68b      	b.n	800821c <_scanf_float+0x88>
 8008504:	7032      	strb	r2, [r6, #0]
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800850c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008510:	d11c      	bne.n	800854c <_scanf_float+0x3b8>
 8008512:	9b02      	ldr	r3, [sp, #8]
 8008514:	454b      	cmp	r3, r9
 8008516:	eba3 0209 	sub.w	r2, r3, r9
 800851a:	d123      	bne.n	8008564 <_scanf_float+0x3d0>
 800851c:	9901      	ldr	r1, [sp, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	4640      	mov	r0, r8
 8008522:	f002 fbf9 	bl	800ad18 <_strtod_r>
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	6821      	ldr	r1, [r4, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f011 0f02 	tst.w	r1, #2
 8008530:	ec57 6b10 	vmov	r6, r7, d0
 8008534:	f103 0204 	add.w	r2, r3, #4
 8008538:	d01f      	beq.n	800857a <_scanf_float+0x3e6>
 800853a:	9903      	ldr	r1, [sp, #12]
 800853c:	600a      	str	r2, [r1, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	e9c3 6700 	strd	r6, r7, [r3]
 8008544:	68e3      	ldr	r3, [r4, #12]
 8008546:	3301      	adds	r3, #1
 8008548:	60e3      	str	r3, [r4, #12]
 800854a:	e7d9      	b.n	8008500 <_scanf_float+0x36c>
 800854c:	9b04      	ldr	r3, [sp, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0e4      	beq.n	800851c <_scanf_float+0x388>
 8008552:	9905      	ldr	r1, [sp, #20]
 8008554:	230a      	movs	r3, #10
 8008556:	3101      	adds	r1, #1
 8008558:	4640      	mov	r0, r8
 800855a:	f002 fc5d 	bl	800ae18 <_strtol_r>
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	9e05      	ldr	r6, [sp, #20]
 8008562:	1ac2      	subs	r2, r0, r3
 8008564:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008568:	429e      	cmp	r6, r3
 800856a:	bf28      	it	cs
 800856c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008570:	4910      	ldr	r1, [pc, #64]	@ (80085b4 <_scanf_float+0x420>)
 8008572:	4630      	mov	r0, r6
 8008574:	f000 f8e4 	bl	8008740 <siprintf>
 8008578:	e7d0      	b.n	800851c <_scanf_float+0x388>
 800857a:	f011 0f04 	tst.w	r1, #4
 800857e:	9903      	ldr	r1, [sp, #12]
 8008580:	600a      	str	r2, [r1, #0]
 8008582:	d1dc      	bne.n	800853e <_scanf_float+0x3aa>
 8008584:	681d      	ldr	r5, [r3, #0]
 8008586:	4632      	mov	r2, r6
 8008588:	463b      	mov	r3, r7
 800858a:	4630      	mov	r0, r6
 800858c:	4639      	mov	r1, r7
 800858e:	f7f8 facd 	bl	8000b2c <__aeabi_dcmpun>
 8008592:	b128      	cbz	r0, 80085a0 <_scanf_float+0x40c>
 8008594:	4808      	ldr	r0, [pc, #32]	@ (80085b8 <_scanf_float+0x424>)
 8008596:	f000 f9b7 	bl	8008908 <nanf>
 800859a:	ed85 0a00 	vstr	s0, [r5]
 800859e:	e7d1      	b.n	8008544 <_scanf_float+0x3b0>
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 fb20 	bl	8000be8 <__aeabi_d2f>
 80085a8:	6028      	str	r0, [r5, #0]
 80085aa:	e7cb      	b.n	8008544 <_scanf_float+0x3b0>
 80085ac:	f04f 0900 	mov.w	r9, #0
 80085b0:	e629      	b.n	8008206 <_scanf_float+0x72>
 80085b2:	bf00      	nop
 80085b4:	0800cacc 	.word	0x0800cacc
 80085b8:	0800ce65 	.word	0x0800ce65

080085bc <std>:
 80085bc:	2300      	movs	r3, #0
 80085be:	b510      	push	{r4, lr}
 80085c0:	4604      	mov	r4, r0
 80085c2:	e9c0 3300 	strd	r3, r3, [r0]
 80085c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085ca:	6083      	str	r3, [r0, #8]
 80085cc:	8181      	strh	r1, [r0, #12]
 80085ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80085d0:	81c2      	strh	r2, [r0, #14]
 80085d2:	6183      	str	r3, [r0, #24]
 80085d4:	4619      	mov	r1, r3
 80085d6:	2208      	movs	r2, #8
 80085d8:	305c      	adds	r0, #92	@ 0x5c
 80085da:	f000 f914 	bl	8008806 <memset>
 80085de:	4b0d      	ldr	r3, [pc, #52]	@ (8008614 <std+0x58>)
 80085e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80085e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008618 <std+0x5c>)
 80085e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085e6:	4b0d      	ldr	r3, [pc, #52]	@ (800861c <std+0x60>)
 80085e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <std+0x64>)
 80085ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80085ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008624 <std+0x68>)
 80085f0:	6224      	str	r4, [r4, #32]
 80085f2:	429c      	cmp	r4, r3
 80085f4:	d006      	beq.n	8008604 <std+0x48>
 80085f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085fa:	4294      	cmp	r4, r2
 80085fc:	d002      	beq.n	8008604 <std+0x48>
 80085fe:	33d0      	adds	r3, #208	@ 0xd0
 8008600:	429c      	cmp	r4, r3
 8008602:	d105      	bne.n	8008610 <std+0x54>
 8008604:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860c:	f000 b978 	b.w	8008900 <__retarget_lock_init_recursive>
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop
 8008614:	08008781 	.word	0x08008781
 8008618:	080087a3 	.word	0x080087a3
 800861c:	080087db 	.word	0x080087db
 8008620:	080087ff 	.word	0x080087ff
 8008624:	200003e0 	.word	0x200003e0

08008628 <stdio_exit_handler>:
 8008628:	4a02      	ldr	r2, [pc, #8]	@ (8008634 <stdio_exit_handler+0xc>)
 800862a:	4903      	ldr	r1, [pc, #12]	@ (8008638 <stdio_exit_handler+0x10>)
 800862c:	4803      	ldr	r0, [pc, #12]	@ (800863c <stdio_exit_handler+0x14>)
 800862e:	f000 b869 	b.w	8008704 <_fwalk_sglue>
 8008632:	bf00      	nop
 8008634:	2000000c 	.word	0x2000000c
 8008638:	0800b1d5 	.word	0x0800b1d5
 800863c:	2000001c 	.word	0x2000001c

08008640 <cleanup_stdio>:
 8008640:	6841      	ldr	r1, [r0, #4]
 8008642:	4b0c      	ldr	r3, [pc, #48]	@ (8008674 <cleanup_stdio+0x34>)
 8008644:	4299      	cmp	r1, r3
 8008646:	b510      	push	{r4, lr}
 8008648:	4604      	mov	r4, r0
 800864a:	d001      	beq.n	8008650 <cleanup_stdio+0x10>
 800864c:	f002 fdc2 	bl	800b1d4 <_fflush_r>
 8008650:	68a1      	ldr	r1, [r4, #8]
 8008652:	4b09      	ldr	r3, [pc, #36]	@ (8008678 <cleanup_stdio+0x38>)
 8008654:	4299      	cmp	r1, r3
 8008656:	d002      	beq.n	800865e <cleanup_stdio+0x1e>
 8008658:	4620      	mov	r0, r4
 800865a:	f002 fdbb 	bl	800b1d4 <_fflush_r>
 800865e:	68e1      	ldr	r1, [r4, #12]
 8008660:	4b06      	ldr	r3, [pc, #24]	@ (800867c <cleanup_stdio+0x3c>)
 8008662:	4299      	cmp	r1, r3
 8008664:	d004      	beq.n	8008670 <cleanup_stdio+0x30>
 8008666:	4620      	mov	r0, r4
 8008668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800866c:	f002 bdb2 	b.w	800b1d4 <_fflush_r>
 8008670:	bd10      	pop	{r4, pc}
 8008672:	bf00      	nop
 8008674:	200003e0 	.word	0x200003e0
 8008678:	20000448 	.word	0x20000448
 800867c:	200004b0 	.word	0x200004b0

08008680 <global_stdio_init.part.0>:
 8008680:	b510      	push	{r4, lr}
 8008682:	4b0b      	ldr	r3, [pc, #44]	@ (80086b0 <global_stdio_init.part.0+0x30>)
 8008684:	4c0b      	ldr	r4, [pc, #44]	@ (80086b4 <global_stdio_init.part.0+0x34>)
 8008686:	4a0c      	ldr	r2, [pc, #48]	@ (80086b8 <global_stdio_init.part.0+0x38>)
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	4620      	mov	r0, r4
 800868c:	2200      	movs	r2, #0
 800868e:	2104      	movs	r1, #4
 8008690:	f7ff ff94 	bl	80085bc <std>
 8008694:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008698:	2201      	movs	r2, #1
 800869a:	2109      	movs	r1, #9
 800869c:	f7ff ff8e 	bl	80085bc <std>
 80086a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086a4:	2202      	movs	r2, #2
 80086a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086aa:	2112      	movs	r1, #18
 80086ac:	f7ff bf86 	b.w	80085bc <std>
 80086b0:	20000518 	.word	0x20000518
 80086b4:	200003e0 	.word	0x200003e0
 80086b8:	08008629 	.word	0x08008629

080086bc <__sfp_lock_acquire>:
 80086bc:	4801      	ldr	r0, [pc, #4]	@ (80086c4 <__sfp_lock_acquire+0x8>)
 80086be:	f000 b920 	b.w	8008902 <__retarget_lock_acquire_recursive>
 80086c2:	bf00      	nop
 80086c4:	20000521 	.word	0x20000521

080086c8 <__sfp_lock_release>:
 80086c8:	4801      	ldr	r0, [pc, #4]	@ (80086d0 <__sfp_lock_release+0x8>)
 80086ca:	f000 b91b 	b.w	8008904 <__retarget_lock_release_recursive>
 80086ce:	bf00      	nop
 80086d0:	20000521 	.word	0x20000521

080086d4 <__sinit>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	4604      	mov	r4, r0
 80086d8:	f7ff fff0 	bl	80086bc <__sfp_lock_acquire>
 80086dc:	6a23      	ldr	r3, [r4, #32]
 80086de:	b11b      	cbz	r3, 80086e8 <__sinit+0x14>
 80086e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e4:	f7ff bff0 	b.w	80086c8 <__sfp_lock_release>
 80086e8:	4b04      	ldr	r3, [pc, #16]	@ (80086fc <__sinit+0x28>)
 80086ea:	6223      	str	r3, [r4, #32]
 80086ec:	4b04      	ldr	r3, [pc, #16]	@ (8008700 <__sinit+0x2c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1f5      	bne.n	80086e0 <__sinit+0xc>
 80086f4:	f7ff ffc4 	bl	8008680 <global_stdio_init.part.0>
 80086f8:	e7f2      	b.n	80086e0 <__sinit+0xc>
 80086fa:	bf00      	nop
 80086fc:	08008641 	.word	0x08008641
 8008700:	20000518 	.word	0x20000518

08008704 <_fwalk_sglue>:
 8008704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008708:	4607      	mov	r7, r0
 800870a:	4688      	mov	r8, r1
 800870c:	4614      	mov	r4, r2
 800870e:	2600      	movs	r6, #0
 8008710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008714:	f1b9 0901 	subs.w	r9, r9, #1
 8008718:	d505      	bpl.n	8008726 <_fwalk_sglue+0x22>
 800871a:	6824      	ldr	r4, [r4, #0]
 800871c:	2c00      	cmp	r4, #0
 800871e:	d1f7      	bne.n	8008710 <_fwalk_sglue+0xc>
 8008720:	4630      	mov	r0, r6
 8008722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008726:	89ab      	ldrh	r3, [r5, #12]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d907      	bls.n	800873c <_fwalk_sglue+0x38>
 800872c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008730:	3301      	adds	r3, #1
 8008732:	d003      	beq.n	800873c <_fwalk_sglue+0x38>
 8008734:	4629      	mov	r1, r5
 8008736:	4638      	mov	r0, r7
 8008738:	47c0      	blx	r8
 800873a:	4306      	orrs	r6, r0
 800873c:	3568      	adds	r5, #104	@ 0x68
 800873e:	e7e9      	b.n	8008714 <_fwalk_sglue+0x10>

08008740 <siprintf>:
 8008740:	b40e      	push	{r1, r2, r3}
 8008742:	b500      	push	{lr}
 8008744:	b09c      	sub	sp, #112	@ 0x70
 8008746:	ab1d      	add	r3, sp, #116	@ 0x74
 8008748:	9002      	str	r0, [sp, #8]
 800874a:	9006      	str	r0, [sp, #24]
 800874c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008750:	4809      	ldr	r0, [pc, #36]	@ (8008778 <siprintf+0x38>)
 8008752:	9107      	str	r1, [sp, #28]
 8008754:	9104      	str	r1, [sp, #16]
 8008756:	4909      	ldr	r1, [pc, #36]	@ (800877c <siprintf+0x3c>)
 8008758:	f853 2b04 	ldr.w	r2, [r3], #4
 800875c:	9105      	str	r1, [sp, #20]
 800875e:	6800      	ldr	r0, [r0, #0]
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	a902      	add	r1, sp, #8
 8008764:	f002 fbb6 	bl	800aed4 <_svfiprintf_r>
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	b01c      	add	sp, #112	@ 0x70
 8008770:	f85d eb04 	ldr.w	lr, [sp], #4
 8008774:	b003      	add	sp, #12
 8008776:	4770      	bx	lr
 8008778:	20000018 	.word	0x20000018
 800877c:	ffff0208 	.word	0xffff0208

08008780 <__sread>:
 8008780:	b510      	push	{r4, lr}
 8008782:	460c      	mov	r4, r1
 8008784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008788:	f000 f86c 	bl	8008864 <_read_r>
 800878c:	2800      	cmp	r0, #0
 800878e:	bfab      	itete	ge
 8008790:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008792:	89a3      	ldrhlt	r3, [r4, #12]
 8008794:	181b      	addge	r3, r3, r0
 8008796:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800879a:	bfac      	ite	ge
 800879c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800879e:	81a3      	strhlt	r3, [r4, #12]
 80087a0:	bd10      	pop	{r4, pc}

080087a2 <__swrite>:
 80087a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a6:	461f      	mov	r7, r3
 80087a8:	898b      	ldrh	r3, [r1, #12]
 80087aa:	05db      	lsls	r3, r3, #23
 80087ac:	4605      	mov	r5, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	4616      	mov	r6, r2
 80087b2:	d505      	bpl.n	80087c0 <__swrite+0x1e>
 80087b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b8:	2302      	movs	r3, #2
 80087ba:	2200      	movs	r2, #0
 80087bc:	f000 f840 	bl	8008840 <_lseek_r>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	4632      	mov	r2, r6
 80087ce:	463b      	mov	r3, r7
 80087d0:	4628      	mov	r0, r5
 80087d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087d6:	f000 b857 	b.w	8008888 <_write_r>

080087da <__sseek>:
 80087da:	b510      	push	{r4, lr}
 80087dc:	460c      	mov	r4, r1
 80087de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e2:	f000 f82d 	bl	8008840 <_lseek_r>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	bf15      	itete	ne
 80087ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087f6:	81a3      	strheq	r3, [r4, #12]
 80087f8:	bf18      	it	ne
 80087fa:	81a3      	strhne	r3, [r4, #12]
 80087fc:	bd10      	pop	{r4, pc}

080087fe <__sclose>:
 80087fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008802:	f000 b80d 	b.w	8008820 <_close_r>

08008806 <memset>:
 8008806:	4402      	add	r2, r0
 8008808:	4603      	mov	r3, r0
 800880a:	4293      	cmp	r3, r2
 800880c:	d100      	bne.n	8008810 <memset+0xa>
 800880e:	4770      	bx	lr
 8008810:	f803 1b01 	strb.w	r1, [r3], #1
 8008814:	e7f9      	b.n	800880a <memset+0x4>
	...

08008818 <_localeconv_r>:
 8008818:	4800      	ldr	r0, [pc, #0]	@ (800881c <_localeconv_r+0x4>)
 800881a:	4770      	bx	lr
 800881c:	20000158 	.word	0x20000158

08008820 <_close_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4d06      	ldr	r5, [pc, #24]	@ (800883c <_close_r+0x1c>)
 8008824:	2300      	movs	r3, #0
 8008826:	4604      	mov	r4, r0
 8008828:	4608      	mov	r0, r1
 800882a:	602b      	str	r3, [r5, #0]
 800882c:	f7f9 fdc2 	bl	80023b4 <_close>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_close_r+0x1a>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_close_r+0x1a>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	2000051c 	.word	0x2000051c

08008840 <_lseek_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4d07      	ldr	r5, [pc, #28]	@ (8008860 <_lseek_r+0x20>)
 8008844:	4604      	mov	r4, r0
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	2200      	movs	r2, #0
 800884c:	602a      	str	r2, [r5, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f7f9 fdd7 	bl	8002402 <_lseek>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_lseek_r+0x1e>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_lseek_r+0x1e>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	2000051c 	.word	0x2000051c

08008864 <_read_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d07      	ldr	r5, [pc, #28]	@ (8008884 <_read_r+0x20>)
 8008868:	4604      	mov	r4, r0
 800886a:	4608      	mov	r0, r1
 800886c:	4611      	mov	r1, r2
 800886e:	2200      	movs	r2, #0
 8008870:	602a      	str	r2, [r5, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	f7f9 fd5a 	bl	800232c <_read>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_read_r+0x1e>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_read_r+0x1e>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	2000051c 	.word	0x2000051c

08008888 <_write_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	@ (80088a8 <_write_r+0x20>)
 800888c:	4604      	mov	r4, r0
 800888e:	4608      	mov	r0, r1
 8008890:	4611      	mov	r1, r2
 8008892:	2200      	movs	r2, #0
 8008894:	602a      	str	r2, [r5, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	f7f9 fd6a 	bl	8002370 <_write>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d102      	bne.n	80088a6 <_write_r+0x1e>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b103      	cbz	r3, 80088a6 <_write_r+0x1e>
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	2000051c 	.word	0x2000051c

080088ac <__errno>:
 80088ac:	4b01      	ldr	r3, [pc, #4]	@ (80088b4 <__errno+0x8>)
 80088ae:	6818      	ldr	r0, [r3, #0]
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20000018 	.word	0x20000018

080088b8 <__libc_init_array>:
 80088b8:	b570      	push	{r4, r5, r6, lr}
 80088ba:	4d0d      	ldr	r5, [pc, #52]	@ (80088f0 <__libc_init_array+0x38>)
 80088bc:	4c0d      	ldr	r4, [pc, #52]	@ (80088f4 <__libc_init_array+0x3c>)
 80088be:	1b64      	subs	r4, r4, r5
 80088c0:	10a4      	asrs	r4, r4, #2
 80088c2:	2600      	movs	r6, #0
 80088c4:	42a6      	cmp	r6, r4
 80088c6:	d109      	bne.n	80088dc <__libc_init_array+0x24>
 80088c8:	4d0b      	ldr	r5, [pc, #44]	@ (80088f8 <__libc_init_array+0x40>)
 80088ca:	4c0c      	ldr	r4, [pc, #48]	@ (80088fc <__libc_init_array+0x44>)
 80088cc:	f003 fb72 	bl	800bfb4 <_init>
 80088d0:	1b64      	subs	r4, r4, r5
 80088d2:	10a4      	asrs	r4, r4, #2
 80088d4:	2600      	movs	r6, #0
 80088d6:	42a6      	cmp	r6, r4
 80088d8:	d105      	bne.n	80088e6 <__libc_init_array+0x2e>
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e0:	4798      	blx	r3
 80088e2:	3601      	adds	r6, #1
 80088e4:	e7ee      	b.n	80088c4 <__libc_init_array+0xc>
 80088e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ea:	4798      	blx	r3
 80088ec:	3601      	adds	r6, #1
 80088ee:	e7f2      	b.n	80088d6 <__libc_init_array+0x1e>
 80088f0:	0800ced0 	.word	0x0800ced0
 80088f4:	0800ced0 	.word	0x0800ced0
 80088f8:	0800ced0 	.word	0x0800ced0
 80088fc:	0800ced4 	.word	0x0800ced4

08008900 <__retarget_lock_init_recursive>:
 8008900:	4770      	bx	lr

08008902 <__retarget_lock_acquire_recursive>:
 8008902:	4770      	bx	lr

08008904 <__retarget_lock_release_recursive>:
 8008904:	4770      	bx	lr
	...

08008908 <nanf>:
 8008908:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008910 <nanf+0x8>
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	7fc00000 	.word	0x7fc00000

08008914 <quorem>:
 8008914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008918:	6903      	ldr	r3, [r0, #16]
 800891a:	690c      	ldr	r4, [r1, #16]
 800891c:	42a3      	cmp	r3, r4
 800891e:	4607      	mov	r7, r0
 8008920:	db7e      	blt.n	8008a20 <quorem+0x10c>
 8008922:	3c01      	subs	r4, #1
 8008924:	f101 0814 	add.w	r8, r1, #20
 8008928:	00a3      	lsls	r3, r4, #2
 800892a:	f100 0514 	add.w	r5, r0, #20
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800893a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800893e:	3301      	adds	r3, #1
 8008940:	429a      	cmp	r2, r3
 8008942:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008946:	fbb2 f6f3 	udiv	r6, r2, r3
 800894a:	d32e      	bcc.n	80089aa <quorem+0x96>
 800894c:	f04f 0a00 	mov.w	sl, #0
 8008950:	46c4      	mov	ip, r8
 8008952:	46ae      	mov	lr, r5
 8008954:	46d3      	mov	fp, sl
 8008956:	f85c 3b04 	ldr.w	r3, [ip], #4
 800895a:	b298      	uxth	r0, r3
 800895c:	fb06 a000 	mla	r0, r6, r0, sl
 8008960:	0c02      	lsrs	r2, r0, #16
 8008962:	0c1b      	lsrs	r3, r3, #16
 8008964:	fb06 2303 	mla	r3, r6, r3, r2
 8008968:	f8de 2000 	ldr.w	r2, [lr]
 800896c:	b280      	uxth	r0, r0
 800896e:	b292      	uxth	r2, r2
 8008970:	1a12      	subs	r2, r2, r0
 8008972:	445a      	add	r2, fp
 8008974:	f8de 0000 	ldr.w	r0, [lr]
 8008978:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800897c:	b29b      	uxth	r3, r3
 800897e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008982:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008986:	b292      	uxth	r2, r2
 8008988:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800898c:	45e1      	cmp	r9, ip
 800898e:	f84e 2b04 	str.w	r2, [lr], #4
 8008992:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008996:	d2de      	bcs.n	8008956 <quorem+0x42>
 8008998:	9b00      	ldr	r3, [sp, #0]
 800899a:	58eb      	ldr	r3, [r5, r3]
 800899c:	b92b      	cbnz	r3, 80089aa <quorem+0x96>
 800899e:	9b01      	ldr	r3, [sp, #4]
 80089a0:	3b04      	subs	r3, #4
 80089a2:	429d      	cmp	r5, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	d32f      	bcc.n	8008a08 <quorem+0xf4>
 80089a8:	613c      	str	r4, [r7, #16]
 80089aa:	4638      	mov	r0, r7
 80089ac:	f001 f9c4 	bl	8009d38 <__mcmp>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	db25      	blt.n	8008a00 <quorem+0xec>
 80089b4:	4629      	mov	r1, r5
 80089b6:	2000      	movs	r0, #0
 80089b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80089bc:	f8d1 c000 	ldr.w	ip, [r1]
 80089c0:	fa1f fe82 	uxth.w	lr, r2
 80089c4:	fa1f f38c 	uxth.w	r3, ip
 80089c8:	eba3 030e 	sub.w	r3, r3, lr
 80089cc:	4403      	add	r3, r0
 80089ce:	0c12      	lsrs	r2, r2, #16
 80089d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80089d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80089d8:	b29b      	uxth	r3, r3
 80089da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089de:	45c1      	cmp	r9, r8
 80089e0:	f841 3b04 	str.w	r3, [r1], #4
 80089e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80089e8:	d2e6      	bcs.n	80089b8 <quorem+0xa4>
 80089ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089f2:	b922      	cbnz	r2, 80089fe <quorem+0xea>
 80089f4:	3b04      	subs	r3, #4
 80089f6:	429d      	cmp	r5, r3
 80089f8:	461a      	mov	r2, r3
 80089fa:	d30b      	bcc.n	8008a14 <quorem+0x100>
 80089fc:	613c      	str	r4, [r7, #16]
 80089fe:	3601      	adds	r6, #1
 8008a00:	4630      	mov	r0, r6
 8008a02:	b003      	add	sp, #12
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	6812      	ldr	r2, [r2, #0]
 8008a0a:	3b04      	subs	r3, #4
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	d1cb      	bne.n	80089a8 <quorem+0x94>
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e7c6      	b.n	80089a2 <quorem+0x8e>
 8008a14:	6812      	ldr	r2, [r2, #0]
 8008a16:	3b04      	subs	r3, #4
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	d1ef      	bne.n	80089fc <quorem+0xe8>
 8008a1c:	3c01      	subs	r4, #1
 8008a1e:	e7ea      	b.n	80089f6 <quorem+0xe2>
 8008a20:	2000      	movs	r0, #0
 8008a22:	e7ee      	b.n	8008a02 <quorem+0xee>
 8008a24:	0000      	movs	r0, r0
	...

08008a28 <_dtoa_r>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	69c7      	ldr	r7, [r0, #28]
 8008a2e:	b099      	sub	sp, #100	@ 0x64
 8008a30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a34:	ec55 4b10 	vmov	r4, r5, d0
 8008a38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008a3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a3c:	4683      	mov	fp, r0
 8008a3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a42:	b97f      	cbnz	r7, 8008a64 <_dtoa_r+0x3c>
 8008a44:	2010      	movs	r0, #16
 8008a46:	f000 fdfd 	bl	8009644 <malloc>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008a50:	b920      	cbnz	r0, 8008a5c <_dtoa_r+0x34>
 8008a52:	4ba7      	ldr	r3, [pc, #668]	@ (8008cf0 <_dtoa_r+0x2c8>)
 8008a54:	21ef      	movs	r1, #239	@ 0xef
 8008a56:	48a7      	ldr	r0, [pc, #668]	@ (8008cf4 <_dtoa_r+0x2cc>)
 8008a58:	f002 fc36 	bl	800b2c8 <__assert_func>
 8008a5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008a60:	6007      	str	r7, [r0, #0]
 8008a62:	60c7      	str	r7, [r0, #12]
 8008a64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a68:	6819      	ldr	r1, [r3, #0]
 8008a6a:	b159      	cbz	r1, 8008a84 <_dtoa_r+0x5c>
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	604a      	str	r2, [r1, #4]
 8008a70:	2301      	movs	r3, #1
 8008a72:	4093      	lsls	r3, r2
 8008a74:	608b      	str	r3, [r1, #8]
 8008a76:	4658      	mov	r0, fp
 8008a78:	f000 feda 	bl	8009830 <_Bfree>
 8008a7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	1e2b      	subs	r3, r5, #0
 8008a86:	bfb9      	ittee	lt
 8008a88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a8c:	9303      	strlt	r3, [sp, #12]
 8008a8e:	2300      	movge	r3, #0
 8008a90:	6033      	strge	r3, [r6, #0]
 8008a92:	9f03      	ldr	r7, [sp, #12]
 8008a94:	4b98      	ldr	r3, [pc, #608]	@ (8008cf8 <_dtoa_r+0x2d0>)
 8008a96:	bfbc      	itt	lt
 8008a98:	2201      	movlt	r2, #1
 8008a9a:	6032      	strlt	r2, [r6, #0]
 8008a9c:	43bb      	bics	r3, r7
 8008a9e:	d112      	bne.n	8008ac6 <_dtoa_r+0x9e>
 8008aa0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008aa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008aac:	4323      	orrs	r3, r4
 8008aae:	f000 854d 	beq.w	800954c <_dtoa_r+0xb24>
 8008ab2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ab4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008d0c <_dtoa_r+0x2e4>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 854f 	beq.w	800955c <_dtoa_r+0xb34>
 8008abe:	f10a 0303 	add.w	r3, sl, #3
 8008ac2:	f000 bd49 	b.w	8009558 <_dtoa_r+0xb30>
 8008ac6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008aca:	2200      	movs	r2, #0
 8008acc:	ec51 0b17 	vmov	r0, r1, d7
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008ad6:	f7f7 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ada:	4680      	mov	r8, r0
 8008adc:	b158      	cbz	r0, 8008af6 <_dtoa_r+0xce>
 8008ade:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ae6:	b113      	cbz	r3, 8008aee <_dtoa_r+0xc6>
 8008ae8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008aea:	4b84      	ldr	r3, [pc, #528]	@ (8008cfc <_dtoa_r+0x2d4>)
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008d10 <_dtoa_r+0x2e8>
 8008af2:	f000 bd33 	b.w	800955c <_dtoa_r+0xb34>
 8008af6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008afa:	aa16      	add	r2, sp, #88	@ 0x58
 8008afc:	a917      	add	r1, sp, #92	@ 0x5c
 8008afe:	4658      	mov	r0, fp
 8008b00:	f001 fa3a 	bl	8009f78 <__d2b>
 8008b04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b08:	4681      	mov	r9, r0
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	d077      	beq.n	8008bfe <_dtoa_r+0x1d6>
 8008b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b28:	4619      	mov	r1, r3
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	4b74      	ldr	r3, [pc, #464]	@ (8008d00 <_dtoa_r+0x2d8>)
 8008b2e:	f7f7 fbab 	bl	8000288 <__aeabi_dsub>
 8008b32:	a369      	add	r3, pc, #420	@ (adr r3, 8008cd8 <_dtoa_r+0x2b0>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fd5e 	bl	80005f8 <__aeabi_dmul>
 8008b3c:	a368      	add	r3, pc, #416	@ (adr r3, 8008ce0 <_dtoa_r+0x2b8>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f7f7 fba3 	bl	800028c <__adddf3>
 8008b46:	4604      	mov	r4, r0
 8008b48:	4630      	mov	r0, r6
 8008b4a:	460d      	mov	r5, r1
 8008b4c:	f7f7 fcea 	bl	8000524 <__aeabi_i2d>
 8008b50:	a365      	add	r3, pc, #404	@ (adr r3, 8008ce8 <_dtoa_r+0x2c0>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f7f7 fd4f 	bl	80005f8 <__aeabi_dmul>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7f7 fb93 	bl	800028c <__adddf3>
 8008b66:	4604      	mov	r4, r0
 8008b68:	460d      	mov	r5, r1
 8008b6a:	f7f7 fff5 	bl	8000b58 <__aeabi_d2iz>
 8008b6e:	2200      	movs	r2, #0
 8008b70:	4607      	mov	r7, r0
 8008b72:	2300      	movs	r3, #0
 8008b74:	4620      	mov	r0, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	f7f7 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8008b7c:	b140      	cbz	r0, 8008b90 <_dtoa_r+0x168>
 8008b7e:	4638      	mov	r0, r7
 8008b80:	f7f7 fcd0 	bl	8000524 <__aeabi_i2d>
 8008b84:	4622      	mov	r2, r4
 8008b86:	462b      	mov	r3, r5
 8008b88:	f7f7 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b8c:	b900      	cbnz	r0, 8008b90 <_dtoa_r+0x168>
 8008b8e:	3f01      	subs	r7, #1
 8008b90:	2f16      	cmp	r7, #22
 8008b92:	d851      	bhi.n	8008c38 <_dtoa_r+0x210>
 8008b94:	4b5b      	ldr	r3, [pc, #364]	@ (8008d04 <_dtoa_r+0x2dc>)
 8008b96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ba2:	f7f7 ff9b 	bl	8000adc <__aeabi_dcmplt>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d048      	beq.n	8008c3c <_dtoa_r+0x214>
 8008baa:	3f01      	subs	r7, #1
 8008bac:	2300      	movs	r3, #0
 8008bae:	9312      	str	r3, [sp, #72]	@ 0x48
 8008bb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008bb2:	1b9b      	subs	r3, r3, r6
 8008bb4:	1e5a      	subs	r2, r3, #1
 8008bb6:	bf44      	itt	mi
 8008bb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008bbc:	2300      	movmi	r3, #0
 8008bbe:	9208      	str	r2, [sp, #32]
 8008bc0:	bf54      	ite	pl
 8008bc2:	f04f 0800 	movpl.w	r8, #0
 8008bc6:	9308      	strmi	r3, [sp, #32]
 8008bc8:	2f00      	cmp	r7, #0
 8008bca:	db39      	blt.n	8008c40 <_dtoa_r+0x218>
 8008bcc:	9b08      	ldr	r3, [sp, #32]
 8008bce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008bd0:	443b      	add	r3, r7
 8008bd2:	9308      	str	r3, [sp, #32]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bda:	2b09      	cmp	r3, #9
 8008bdc:	d864      	bhi.n	8008ca8 <_dtoa_r+0x280>
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	bfc4      	itt	gt
 8008be2:	3b04      	subgt	r3, #4
 8008be4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be8:	f1a3 0302 	sub.w	r3, r3, #2
 8008bec:	bfcc      	ite	gt
 8008bee:	2400      	movgt	r4, #0
 8008bf0:	2401      	movle	r4, #1
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d863      	bhi.n	8008cbe <_dtoa_r+0x296>
 8008bf6:	e8df f003 	tbb	[pc, r3]
 8008bfa:	372a      	.short	0x372a
 8008bfc:	5535      	.short	0x5535
 8008bfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008c02:	441e      	add	r6, r3
 8008c04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	bfc1      	itttt	gt
 8008c0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c10:	409f      	lslgt	r7, r3
 8008c12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c1a:	bfd6      	itet	le
 8008c1c:	f1c3 0320 	rsble	r3, r3, #32
 8008c20:	ea47 0003 	orrgt.w	r0, r7, r3
 8008c24:	fa04 f003 	lslle.w	r0, r4, r3
 8008c28:	f7f7 fc6c 	bl	8000504 <__aeabi_ui2d>
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008c32:	3e01      	subs	r6, #1
 8008c34:	9214      	str	r2, [sp, #80]	@ 0x50
 8008c36:	e777      	b.n	8008b28 <_dtoa_r+0x100>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e7b8      	b.n	8008bae <_dtoa_r+0x186>
 8008c3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008c3e:	e7b7      	b.n	8008bb0 <_dtoa_r+0x188>
 8008c40:	427b      	negs	r3, r7
 8008c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c44:	2300      	movs	r3, #0
 8008c46:	eba8 0807 	sub.w	r8, r8, r7
 8008c4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c4c:	e7c4      	b.n	8008bd8 <_dtoa_r+0x1b0>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dc35      	bgt.n	8008cc4 <_dtoa_r+0x29c>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	9307      	str	r3, [sp, #28]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c62:	e00b      	b.n	8008c7c <_dtoa_r+0x254>
 8008c64:	2301      	movs	r3, #1
 8008c66:	e7f3      	b.n	8008c50 <_dtoa_r+0x228>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c6e:	18fb      	adds	r3, r7, r3
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	3301      	adds	r3, #1
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	9307      	str	r3, [sp, #28]
 8008c78:	bfb8      	it	lt
 8008c7a:	2301      	movlt	r3, #1
 8008c7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008c80:	2100      	movs	r1, #0
 8008c82:	2204      	movs	r2, #4
 8008c84:	f102 0514 	add.w	r5, r2, #20
 8008c88:	429d      	cmp	r5, r3
 8008c8a:	d91f      	bls.n	8008ccc <_dtoa_r+0x2a4>
 8008c8c:	6041      	str	r1, [r0, #4]
 8008c8e:	4658      	mov	r0, fp
 8008c90:	f000 fd8e 	bl	80097b0 <_Balloc>
 8008c94:	4682      	mov	sl, r0
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d13c      	bne.n	8008d14 <_dtoa_r+0x2ec>
 8008c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008d08 <_dtoa_r+0x2e0>)
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ca2:	e6d8      	b.n	8008a56 <_dtoa_r+0x2e>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e7e0      	b.n	8008c6a <_dtoa_r+0x242>
 8008ca8:	2401      	movs	r4, #1
 8008caa:	2300      	movs	r3, #0
 8008cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	9307      	str	r3, [sp, #28]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2312      	movs	r3, #18
 8008cbc:	e7d0      	b.n	8008c60 <_dtoa_r+0x238>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cc2:	e7f5      	b.n	8008cb0 <_dtoa_r+0x288>
 8008cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	9307      	str	r3, [sp, #28]
 8008cca:	e7d7      	b.n	8008c7c <_dtoa_r+0x254>
 8008ccc:	3101      	adds	r1, #1
 8008cce:	0052      	lsls	r2, r2, #1
 8008cd0:	e7d8      	b.n	8008c84 <_dtoa_r+0x25c>
 8008cd2:	bf00      	nop
 8008cd4:	f3af 8000 	nop.w
 8008cd8:	636f4361 	.word	0x636f4361
 8008cdc:	3fd287a7 	.word	0x3fd287a7
 8008ce0:	8b60c8b3 	.word	0x8b60c8b3
 8008ce4:	3fc68a28 	.word	0x3fc68a28
 8008ce8:	509f79fb 	.word	0x509f79fb
 8008cec:	3fd34413 	.word	0x3fd34413
 8008cf0:	0800cade 	.word	0x0800cade
 8008cf4:	0800caf5 	.word	0x0800caf5
 8008cf8:	7ff00000 	.word	0x7ff00000
 8008cfc:	0800caa9 	.word	0x0800caa9
 8008d00:	3ff80000 	.word	0x3ff80000
 8008d04:	0800cbf0 	.word	0x0800cbf0
 8008d08:	0800cb4d 	.word	0x0800cb4d
 8008d0c:	0800cada 	.word	0x0800cada
 8008d10:	0800caa8 	.word	0x0800caa8
 8008d14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d18:	6018      	str	r0, [r3, #0]
 8008d1a:	9b07      	ldr	r3, [sp, #28]
 8008d1c:	2b0e      	cmp	r3, #14
 8008d1e:	f200 80a4 	bhi.w	8008e6a <_dtoa_r+0x442>
 8008d22:	2c00      	cmp	r4, #0
 8008d24:	f000 80a1 	beq.w	8008e6a <_dtoa_r+0x442>
 8008d28:	2f00      	cmp	r7, #0
 8008d2a:	dd33      	ble.n	8008d94 <_dtoa_r+0x36c>
 8008d2c:	4bad      	ldr	r3, [pc, #692]	@ (8008fe4 <_dtoa_r+0x5bc>)
 8008d2e:	f007 020f 	and.w	r2, r7, #15
 8008d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d36:	ed93 7b00 	vldr	d7, [r3]
 8008d3a:	05f8      	lsls	r0, r7, #23
 8008d3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008d40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008d44:	d516      	bpl.n	8008d74 <_dtoa_r+0x34c>
 8008d46:	4ba8      	ldr	r3, [pc, #672]	@ (8008fe8 <_dtoa_r+0x5c0>)
 8008d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d50:	f7f7 fd7c 	bl	800084c <__aeabi_ddiv>
 8008d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d58:	f004 040f 	and.w	r4, r4, #15
 8008d5c:	2603      	movs	r6, #3
 8008d5e:	4da2      	ldr	r5, [pc, #648]	@ (8008fe8 <_dtoa_r+0x5c0>)
 8008d60:	b954      	cbnz	r4, 8008d78 <_dtoa_r+0x350>
 8008d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d6a:	f7f7 fd6f 	bl	800084c <__aeabi_ddiv>
 8008d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d72:	e028      	b.n	8008dc6 <_dtoa_r+0x39e>
 8008d74:	2602      	movs	r6, #2
 8008d76:	e7f2      	b.n	8008d5e <_dtoa_r+0x336>
 8008d78:	07e1      	lsls	r1, r4, #31
 8008d7a:	d508      	bpl.n	8008d8e <_dtoa_r+0x366>
 8008d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d84:	f7f7 fc38 	bl	80005f8 <__aeabi_dmul>
 8008d88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d8c:	3601      	adds	r6, #1
 8008d8e:	1064      	asrs	r4, r4, #1
 8008d90:	3508      	adds	r5, #8
 8008d92:	e7e5      	b.n	8008d60 <_dtoa_r+0x338>
 8008d94:	f000 80d2 	beq.w	8008f3c <_dtoa_r+0x514>
 8008d98:	427c      	negs	r4, r7
 8008d9a:	4b92      	ldr	r3, [pc, #584]	@ (8008fe4 <_dtoa_r+0x5bc>)
 8008d9c:	4d92      	ldr	r5, [pc, #584]	@ (8008fe8 <_dtoa_r+0x5c0>)
 8008d9e:	f004 020f 	and.w	r2, r4, #15
 8008da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008daa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dae:	f7f7 fc23 	bl	80005f8 <__aeabi_dmul>
 8008db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db6:	1124      	asrs	r4, r4, #4
 8008db8:	2300      	movs	r3, #0
 8008dba:	2602      	movs	r6, #2
 8008dbc:	2c00      	cmp	r4, #0
 8008dbe:	f040 80b2 	bne.w	8008f26 <_dtoa_r+0x4fe>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1d3      	bne.n	8008d6e <_dtoa_r+0x346>
 8008dc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008dc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80b7 	beq.w	8008f40 <_dtoa_r+0x518>
 8008dd2:	4b86      	ldr	r3, [pc, #536]	@ (8008fec <_dtoa_r+0x5c4>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4629      	mov	r1, r5
 8008dda:	f7f7 fe7f 	bl	8000adc <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f000 80ae 	beq.w	8008f40 <_dtoa_r+0x518>
 8008de4:	9b07      	ldr	r3, [sp, #28]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 80aa 	beq.w	8008f40 <_dtoa_r+0x518>
 8008dec:	9b00      	ldr	r3, [sp, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	dd37      	ble.n	8008e62 <_dtoa_r+0x43a>
 8008df2:	1e7b      	subs	r3, r7, #1
 8008df4:	9304      	str	r3, [sp, #16]
 8008df6:	4620      	mov	r0, r4
 8008df8:	4b7d      	ldr	r3, [pc, #500]	@ (8008ff0 <_dtoa_r+0x5c8>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	f7f7 fbfb 	bl	80005f8 <__aeabi_dmul>
 8008e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e06:	9c00      	ldr	r4, [sp, #0]
 8008e08:	3601      	adds	r6, #1
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7f7 fb8a 	bl	8000524 <__aeabi_i2d>
 8008e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	4b76      	ldr	r3, [pc, #472]	@ (8008ff4 <_dtoa_r+0x5cc>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f7f7 fa36 	bl	800028c <__adddf3>
 8008e20:	4605      	mov	r5, r0
 8008e22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e26:	2c00      	cmp	r4, #0
 8008e28:	f040 808d 	bne.w	8008f46 <_dtoa_r+0x51e>
 8008e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e30:	4b71      	ldr	r3, [pc, #452]	@ (8008ff8 <_dtoa_r+0x5d0>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	f7f7 fa28 	bl	8000288 <__aeabi_dsub>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e40:	462a      	mov	r2, r5
 8008e42:	4633      	mov	r3, r6
 8008e44:	f7f7 fe68 	bl	8000b18 <__aeabi_dcmpgt>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	f040 828b 	bne.w	8009364 <_dtoa_r+0x93c>
 8008e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e52:	462a      	mov	r2, r5
 8008e54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008e58:	f7f7 fe40 	bl	8000adc <__aeabi_dcmplt>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	f040 8128 	bne.w	80090b2 <_dtoa_r+0x68a>
 8008e62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008e66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008e6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f2c0 815a 	blt.w	8009126 <_dtoa_r+0x6fe>
 8008e72:	2f0e      	cmp	r7, #14
 8008e74:	f300 8157 	bgt.w	8009126 <_dtoa_r+0x6fe>
 8008e78:	4b5a      	ldr	r3, [pc, #360]	@ (8008fe4 <_dtoa_r+0x5bc>)
 8008e7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e7e:	ed93 7b00 	vldr	d7, [r3]
 8008e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	ed8d 7b00 	vstr	d7, [sp]
 8008e8a:	da03      	bge.n	8008e94 <_dtoa_r+0x46c>
 8008e8c:	9b07      	ldr	r3, [sp, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f340 8101 	ble.w	8009096 <_dtoa_r+0x66e>
 8008e94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e98:	4656      	mov	r6, sl
 8008e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 fcd3 	bl	800084c <__aeabi_ddiv>
 8008ea6:	f7f7 fe57 	bl	8000b58 <__aeabi_d2iz>
 8008eaa:	4680      	mov	r8, r0
 8008eac:	f7f7 fb3a 	bl	8000524 <__aeabi_i2d>
 8008eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eb4:	f7f7 fba0 	bl	80005f8 <__aeabi_dmul>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008ec4:	f7f7 f9e0 	bl	8000288 <__aeabi_dsub>
 8008ec8:	f806 4b01 	strb.w	r4, [r6], #1
 8008ecc:	9d07      	ldr	r5, [sp, #28]
 8008ece:	eba6 040a 	sub.w	r4, r6, sl
 8008ed2:	42a5      	cmp	r5, r4
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	f040 8117 	bne.w	800910a <_dtoa_r+0x6e2>
 8008edc:	f7f7 f9d6 	bl	800028c <__adddf3>
 8008ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	460d      	mov	r5, r1
 8008ee8:	f7f7 fe16 	bl	8000b18 <__aeabi_dcmpgt>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	f040 80f9 	bne.w	80090e4 <_dtoa_r+0x6bc>
 8008ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f7f7 fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008efe:	b118      	cbz	r0, 8008f08 <_dtoa_r+0x4e0>
 8008f00:	f018 0f01 	tst.w	r8, #1
 8008f04:	f040 80ee 	bne.w	80090e4 <_dtoa_r+0x6bc>
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4658      	mov	r0, fp
 8008f0c:	f000 fc90 	bl	8009830 <_Bfree>
 8008f10:	2300      	movs	r3, #0
 8008f12:	7033      	strb	r3, [r6, #0]
 8008f14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f16:	3701      	adds	r7, #1
 8008f18:	601f      	str	r7, [r3, #0]
 8008f1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 831d 	beq.w	800955c <_dtoa_r+0xb34>
 8008f22:	601e      	str	r6, [r3, #0]
 8008f24:	e31a      	b.n	800955c <_dtoa_r+0xb34>
 8008f26:	07e2      	lsls	r2, r4, #31
 8008f28:	d505      	bpl.n	8008f36 <_dtoa_r+0x50e>
 8008f2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f2e:	f7f7 fb63 	bl	80005f8 <__aeabi_dmul>
 8008f32:	3601      	adds	r6, #1
 8008f34:	2301      	movs	r3, #1
 8008f36:	1064      	asrs	r4, r4, #1
 8008f38:	3508      	adds	r5, #8
 8008f3a:	e73f      	b.n	8008dbc <_dtoa_r+0x394>
 8008f3c:	2602      	movs	r6, #2
 8008f3e:	e742      	b.n	8008dc6 <_dtoa_r+0x39e>
 8008f40:	9c07      	ldr	r4, [sp, #28]
 8008f42:	9704      	str	r7, [sp, #16]
 8008f44:	e761      	b.n	8008e0a <_dtoa_r+0x3e2>
 8008f46:	4b27      	ldr	r3, [pc, #156]	@ (8008fe4 <_dtoa_r+0x5bc>)
 8008f48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f52:	4454      	add	r4, sl
 8008f54:	2900      	cmp	r1, #0
 8008f56:	d053      	beq.n	8009000 <_dtoa_r+0x5d8>
 8008f58:	4928      	ldr	r1, [pc, #160]	@ (8008ffc <_dtoa_r+0x5d4>)
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f7f7 fc76 	bl	800084c <__aeabi_ddiv>
 8008f60:	4633      	mov	r3, r6
 8008f62:	462a      	mov	r2, r5
 8008f64:	f7f7 f990 	bl	8000288 <__aeabi_dsub>
 8008f68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f6c:	4656      	mov	r6, sl
 8008f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f72:	f7f7 fdf1 	bl	8000b58 <__aeabi_d2iz>
 8008f76:	4605      	mov	r5, r0
 8008f78:	f7f7 fad4 	bl	8000524 <__aeabi_i2d>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f84:	f7f7 f980 	bl	8000288 <__aeabi_dsub>
 8008f88:	3530      	adds	r5, #48	@ 0x30
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f92:	f806 5b01 	strb.w	r5, [r6], #1
 8008f96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f9a:	f7f7 fd9f 	bl	8000adc <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d171      	bne.n	8009086 <_dtoa_r+0x65e>
 8008fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fa6:	4911      	ldr	r1, [pc, #68]	@ (8008fec <_dtoa_r+0x5c4>)
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f7f7 f96d 	bl	8000288 <__aeabi_dsub>
 8008fae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fb2:	f7f7 fd93 	bl	8000adc <__aeabi_dcmplt>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f040 8095 	bne.w	80090e6 <_dtoa_r+0x6be>
 8008fbc:	42a6      	cmp	r6, r4
 8008fbe:	f43f af50 	beq.w	8008e62 <_dtoa_r+0x43a>
 8008fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <_dtoa_r+0x5c8>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f7f7 fb15 	bl	80005f8 <__aeabi_dmul>
 8008fce:	4b08      	ldr	r3, [pc, #32]	@ (8008ff0 <_dtoa_r+0x5c8>)
 8008fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fda:	f7f7 fb0d 	bl	80005f8 <__aeabi_dmul>
 8008fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe2:	e7c4      	b.n	8008f6e <_dtoa_r+0x546>
 8008fe4:	0800cbf0 	.word	0x0800cbf0
 8008fe8:	0800cbc8 	.word	0x0800cbc8
 8008fec:	3ff00000 	.word	0x3ff00000
 8008ff0:	40240000 	.word	0x40240000
 8008ff4:	401c0000 	.word	0x401c0000
 8008ff8:	40140000 	.word	0x40140000
 8008ffc:	3fe00000 	.word	0x3fe00000
 8009000:	4631      	mov	r1, r6
 8009002:	4628      	mov	r0, r5
 8009004:	f7f7 faf8 	bl	80005f8 <__aeabi_dmul>
 8009008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800900c:	9415      	str	r4, [sp, #84]	@ 0x54
 800900e:	4656      	mov	r6, sl
 8009010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009014:	f7f7 fda0 	bl	8000b58 <__aeabi_d2iz>
 8009018:	4605      	mov	r5, r0
 800901a:	f7f7 fa83 	bl	8000524 <__aeabi_i2d>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009026:	f7f7 f92f 	bl	8000288 <__aeabi_dsub>
 800902a:	3530      	adds	r5, #48	@ 0x30
 800902c:	f806 5b01 	strb.w	r5, [r6], #1
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	42a6      	cmp	r6, r4
 8009036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800903a:	f04f 0200 	mov.w	r2, #0
 800903e:	d124      	bne.n	800908a <_dtoa_r+0x662>
 8009040:	4bac      	ldr	r3, [pc, #688]	@ (80092f4 <_dtoa_r+0x8cc>)
 8009042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009046:	f7f7 f921 	bl	800028c <__adddf3>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009052:	f7f7 fd61 	bl	8000b18 <__aeabi_dcmpgt>
 8009056:	2800      	cmp	r0, #0
 8009058:	d145      	bne.n	80090e6 <_dtoa_r+0x6be>
 800905a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800905e:	49a5      	ldr	r1, [pc, #660]	@ (80092f4 <_dtoa_r+0x8cc>)
 8009060:	2000      	movs	r0, #0
 8009062:	f7f7 f911 	bl	8000288 <__aeabi_dsub>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800906e:	f7f7 fd35 	bl	8000adc <__aeabi_dcmplt>
 8009072:	2800      	cmp	r0, #0
 8009074:	f43f aef5 	beq.w	8008e62 <_dtoa_r+0x43a>
 8009078:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800907a:	1e73      	subs	r3, r6, #1
 800907c:	9315      	str	r3, [sp, #84]	@ 0x54
 800907e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009082:	2b30      	cmp	r3, #48	@ 0x30
 8009084:	d0f8      	beq.n	8009078 <_dtoa_r+0x650>
 8009086:	9f04      	ldr	r7, [sp, #16]
 8009088:	e73e      	b.n	8008f08 <_dtoa_r+0x4e0>
 800908a:	4b9b      	ldr	r3, [pc, #620]	@ (80092f8 <_dtoa_r+0x8d0>)
 800908c:	f7f7 fab4 	bl	80005f8 <__aeabi_dmul>
 8009090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009094:	e7bc      	b.n	8009010 <_dtoa_r+0x5e8>
 8009096:	d10c      	bne.n	80090b2 <_dtoa_r+0x68a>
 8009098:	4b98      	ldr	r3, [pc, #608]	@ (80092fc <_dtoa_r+0x8d4>)
 800909a:	2200      	movs	r2, #0
 800909c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090a0:	f7f7 faaa 	bl	80005f8 <__aeabi_dmul>
 80090a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090a8:	f7f7 fd2c 	bl	8000b04 <__aeabi_dcmpge>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	f000 8157 	beq.w	8009360 <_dtoa_r+0x938>
 80090b2:	2400      	movs	r4, #0
 80090b4:	4625      	mov	r5, r4
 80090b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090b8:	43db      	mvns	r3, r3
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	4656      	mov	r6, sl
 80090be:	2700      	movs	r7, #0
 80090c0:	4621      	mov	r1, r4
 80090c2:	4658      	mov	r0, fp
 80090c4:	f000 fbb4 	bl	8009830 <_Bfree>
 80090c8:	2d00      	cmp	r5, #0
 80090ca:	d0dc      	beq.n	8009086 <_dtoa_r+0x65e>
 80090cc:	b12f      	cbz	r7, 80090da <_dtoa_r+0x6b2>
 80090ce:	42af      	cmp	r7, r5
 80090d0:	d003      	beq.n	80090da <_dtoa_r+0x6b2>
 80090d2:	4639      	mov	r1, r7
 80090d4:	4658      	mov	r0, fp
 80090d6:	f000 fbab 	bl	8009830 <_Bfree>
 80090da:	4629      	mov	r1, r5
 80090dc:	4658      	mov	r0, fp
 80090de:	f000 fba7 	bl	8009830 <_Bfree>
 80090e2:	e7d0      	b.n	8009086 <_dtoa_r+0x65e>
 80090e4:	9704      	str	r7, [sp, #16]
 80090e6:	4633      	mov	r3, r6
 80090e8:	461e      	mov	r6, r3
 80090ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090ee:	2a39      	cmp	r2, #57	@ 0x39
 80090f0:	d107      	bne.n	8009102 <_dtoa_r+0x6da>
 80090f2:	459a      	cmp	sl, r3
 80090f4:	d1f8      	bne.n	80090e8 <_dtoa_r+0x6c0>
 80090f6:	9a04      	ldr	r2, [sp, #16]
 80090f8:	3201      	adds	r2, #1
 80090fa:	9204      	str	r2, [sp, #16]
 80090fc:	2230      	movs	r2, #48	@ 0x30
 80090fe:	f88a 2000 	strb.w	r2, [sl]
 8009102:	781a      	ldrb	r2, [r3, #0]
 8009104:	3201      	adds	r2, #1
 8009106:	701a      	strb	r2, [r3, #0]
 8009108:	e7bd      	b.n	8009086 <_dtoa_r+0x65e>
 800910a:	4b7b      	ldr	r3, [pc, #492]	@ (80092f8 <_dtoa_r+0x8d0>)
 800910c:	2200      	movs	r2, #0
 800910e:	f7f7 fa73 	bl	80005f8 <__aeabi_dmul>
 8009112:	2200      	movs	r2, #0
 8009114:	2300      	movs	r3, #0
 8009116:	4604      	mov	r4, r0
 8009118:	460d      	mov	r5, r1
 800911a:	f7f7 fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800911e:	2800      	cmp	r0, #0
 8009120:	f43f aebb 	beq.w	8008e9a <_dtoa_r+0x472>
 8009124:	e6f0      	b.n	8008f08 <_dtoa_r+0x4e0>
 8009126:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009128:	2a00      	cmp	r2, #0
 800912a:	f000 80db 	beq.w	80092e4 <_dtoa_r+0x8bc>
 800912e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009130:	2a01      	cmp	r2, #1
 8009132:	f300 80bf 	bgt.w	80092b4 <_dtoa_r+0x88c>
 8009136:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009138:	2a00      	cmp	r2, #0
 800913a:	f000 80b7 	beq.w	80092ac <_dtoa_r+0x884>
 800913e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009142:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009144:	4646      	mov	r6, r8
 8009146:	9a08      	ldr	r2, [sp, #32]
 8009148:	2101      	movs	r1, #1
 800914a:	441a      	add	r2, r3
 800914c:	4658      	mov	r0, fp
 800914e:	4498      	add	r8, r3
 8009150:	9208      	str	r2, [sp, #32]
 8009152:	f000 fc6b 	bl	8009a2c <__i2b>
 8009156:	4605      	mov	r5, r0
 8009158:	b15e      	cbz	r6, 8009172 <_dtoa_r+0x74a>
 800915a:	9b08      	ldr	r3, [sp, #32]
 800915c:	2b00      	cmp	r3, #0
 800915e:	dd08      	ble.n	8009172 <_dtoa_r+0x74a>
 8009160:	42b3      	cmp	r3, r6
 8009162:	9a08      	ldr	r2, [sp, #32]
 8009164:	bfa8      	it	ge
 8009166:	4633      	movge	r3, r6
 8009168:	eba8 0803 	sub.w	r8, r8, r3
 800916c:	1af6      	subs	r6, r6, r3
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	9308      	str	r3, [sp, #32]
 8009172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009174:	b1f3      	cbz	r3, 80091b4 <_dtoa_r+0x78c>
 8009176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80b7 	beq.w	80092ec <_dtoa_r+0x8c4>
 800917e:	b18c      	cbz	r4, 80091a4 <_dtoa_r+0x77c>
 8009180:	4629      	mov	r1, r5
 8009182:	4622      	mov	r2, r4
 8009184:	4658      	mov	r0, fp
 8009186:	f000 fd11 	bl	8009bac <__pow5mult>
 800918a:	464a      	mov	r2, r9
 800918c:	4601      	mov	r1, r0
 800918e:	4605      	mov	r5, r0
 8009190:	4658      	mov	r0, fp
 8009192:	f000 fc61 	bl	8009a58 <__multiply>
 8009196:	4649      	mov	r1, r9
 8009198:	9004      	str	r0, [sp, #16]
 800919a:	4658      	mov	r0, fp
 800919c:	f000 fb48 	bl	8009830 <_Bfree>
 80091a0:	9b04      	ldr	r3, [sp, #16]
 80091a2:	4699      	mov	r9, r3
 80091a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091a6:	1b1a      	subs	r2, r3, r4
 80091a8:	d004      	beq.n	80091b4 <_dtoa_r+0x78c>
 80091aa:	4649      	mov	r1, r9
 80091ac:	4658      	mov	r0, fp
 80091ae:	f000 fcfd 	bl	8009bac <__pow5mult>
 80091b2:	4681      	mov	r9, r0
 80091b4:	2101      	movs	r1, #1
 80091b6:	4658      	mov	r0, fp
 80091b8:	f000 fc38 	bl	8009a2c <__i2b>
 80091bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091be:	4604      	mov	r4, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 81cf 	beq.w	8009564 <_dtoa_r+0xb3c>
 80091c6:	461a      	mov	r2, r3
 80091c8:	4601      	mov	r1, r0
 80091ca:	4658      	mov	r0, fp
 80091cc:	f000 fcee 	bl	8009bac <__pow5mult>
 80091d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	4604      	mov	r4, r0
 80091d6:	f300 8095 	bgt.w	8009304 <_dtoa_r+0x8dc>
 80091da:	9b02      	ldr	r3, [sp, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f040 8087 	bne.w	80092f0 <_dtoa_r+0x8c8>
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 8089 	bne.w	8009300 <_dtoa_r+0x8d8>
 80091ee:	9b03      	ldr	r3, [sp, #12]
 80091f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091f4:	0d1b      	lsrs	r3, r3, #20
 80091f6:	051b      	lsls	r3, r3, #20
 80091f8:	b12b      	cbz	r3, 8009206 <_dtoa_r+0x7de>
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	3301      	adds	r3, #1
 80091fe:	9308      	str	r3, [sp, #32]
 8009200:	f108 0801 	add.w	r8, r8, #1
 8009204:	2301      	movs	r3, #1
 8009206:	930a      	str	r3, [sp, #40]	@ 0x28
 8009208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 81b0 	beq.w	8009570 <_dtoa_r+0xb48>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009216:	6918      	ldr	r0, [r3, #16]
 8009218:	f000 fbbc 	bl	8009994 <__hi0bits>
 800921c:	f1c0 0020 	rsb	r0, r0, #32
 8009220:	9b08      	ldr	r3, [sp, #32]
 8009222:	4418      	add	r0, r3
 8009224:	f010 001f 	ands.w	r0, r0, #31
 8009228:	d077      	beq.n	800931a <_dtoa_r+0x8f2>
 800922a:	f1c0 0320 	rsb	r3, r0, #32
 800922e:	2b04      	cmp	r3, #4
 8009230:	dd6b      	ble.n	800930a <_dtoa_r+0x8e2>
 8009232:	9b08      	ldr	r3, [sp, #32]
 8009234:	f1c0 001c 	rsb	r0, r0, #28
 8009238:	4403      	add	r3, r0
 800923a:	4480      	add	r8, r0
 800923c:	4406      	add	r6, r0
 800923e:	9308      	str	r3, [sp, #32]
 8009240:	f1b8 0f00 	cmp.w	r8, #0
 8009244:	dd05      	ble.n	8009252 <_dtoa_r+0x82a>
 8009246:	4649      	mov	r1, r9
 8009248:	4642      	mov	r2, r8
 800924a:	4658      	mov	r0, fp
 800924c:	f000 fd08 	bl	8009c60 <__lshift>
 8009250:	4681      	mov	r9, r0
 8009252:	9b08      	ldr	r3, [sp, #32]
 8009254:	2b00      	cmp	r3, #0
 8009256:	dd05      	ble.n	8009264 <_dtoa_r+0x83c>
 8009258:	4621      	mov	r1, r4
 800925a:	461a      	mov	r2, r3
 800925c:	4658      	mov	r0, fp
 800925e:	f000 fcff 	bl	8009c60 <__lshift>
 8009262:	4604      	mov	r4, r0
 8009264:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009266:	2b00      	cmp	r3, #0
 8009268:	d059      	beq.n	800931e <_dtoa_r+0x8f6>
 800926a:	4621      	mov	r1, r4
 800926c:	4648      	mov	r0, r9
 800926e:	f000 fd63 	bl	8009d38 <__mcmp>
 8009272:	2800      	cmp	r0, #0
 8009274:	da53      	bge.n	800931e <_dtoa_r+0x8f6>
 8009276:	1e7b      	subs	r3, r7, #1
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	4649      	mov	r1, r9
 800927c:	2300      	movs	r3, #0
 800927e:	220a      	movs	r2, #10
 8009280:	4658      	mov	r0, fp
 8009282:	f000 faf7 	bl	8009874 <__multadd>
 8009286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009288:	4681      	mov	r9, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 8172 	beq.w	8009574 <_dtoa_r+0xb4c>
 8009290:	2300      	movs	r3, #0
 8009292:	4629      	mov	r1, r5
 8009294:	220a      	movs	r2, #10
 8009296:	4658      	mov	r0, fp
 8009298:	f000 faec 	bl	8009874 <__multadd>
 800929c:	9b00      	ldr	r3, [sp, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	4605      	mov	r5, r0
 80092a2:	dc67      	bgt.n	8009374 <_dtoa_r+0x94c>
 80092a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	dc41      	bgt.n	800932e <_dtoa_r+0x906>
 80092aa:	e063      	b.n	8009374 <_dtoa_r+0x94c>
 80092ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80092b2:	e746      	b.n	8009142 <_dtoa_r+0x71a>
 80092b4:	9b07      	ldr	r3, [sp, #28]
 80092b6:	1e5c      	subs	r4, r3, #1
 80092b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ba:	42a3      	cmp	r3, r4
 80092bc:	bfbf      	itttt	lt
 80092be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80092c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80092c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80092c4:	1ae3      	sublt	r3, r4, r3
 80092c6:	bfb4      	ite	lt
 80092c8:	18d2      	addlt	r2, r2, r3
 80092ca:	1b1c      	subge	r4, r3, r4
 80092cc:	9b07      	ldr	r3, [sp, #28]
 80092ce:	bfbc      	itt	lt
 80092d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80092d2:	2400      	movlt	r4, #0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	bfb5      	itete	lt
 80092d8:	eba8 0603 	sublt.w	r6, r8, r3
 80092dc:	9b07      	ldrge	r3, [sp, #28]
 80092de:	2300      	movlt	r3, #0
 80092e0:	4646      	movge	r6, r8
 80092e2:	e730      	b.n	8009146 <_dtoa_r+0x71e>
 80092e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80092e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80092e8:	4646      	mov	r6, r8
 80092ea:	e735      	b.n	8009158 <_dtoa_r+0x730>
 80092ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092ee:	e75c      	b.n	80091aa <_dtoa_r+0x782>
 80092f0:	2300      	movs	r3, #0
 80092f2:	e788      	b.n	8009206 <_dtoa_r+0x7de>
 80092f4:	3fe00000 	.word	0x3fe00000
 80092f8:	40240000 	.word	0x40240000
 80092fc:	40140000 	.word	0x40140000
 8009300:	9b02      	ldr	r3, [sp, #8]
 8009302:	e780      	b.n	8009206 <_dtoa_r+0x7de>
 8009304:	2300      	movs	r3, #0
 8009306:	930a      	str	r3, [sp, #40]	@ 0x28
 8009308:	e782      	b.n	8009210 <_dtoa_r+0x7e8>
 800930a:	d099      	beq.n	8009240 <_dtoa_r+0x818>
 800930c:	9a08      	ldr	r2, [sp, #32]
 800930e:	331c      	adds	r3, #28
 8009310:	441a      	add	r2, r3
 8009312:	4498      	add	r8, r3
 8009314:	441e      	add	r6, r3
 8009316:	9208      	str	r2, [sp, #32]
 8009318:	e792      	b.n	8009240 <_dtoa_r+0x818>
 800931a:	4603      	mov	r3, r0
 800931c:	e7f6      	b.n	800930c <_dtoa_r+0x8e4>
 800931e:	9b07      	ldr	r3, [sp, #28]
 8009320:	9704      	str	r7, [sp, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	dc20      	bgt.n	8009368 <_dtoa_r+0x940>
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800932a:	2b02      	cmp	r3, #2
 800932c:	dd1e      	ble.n	800936c <_dtoa_r+0x944>
 800932e:	9b00      	ldr	r3, [sp, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	f47f aec0 	bne.w	80090b6 <_dtoa_r+0x68e>
 8009336:	4621      	mov	r1, r4
 8009338:	2205      	movs	r2, #5
 800933a:	4658      	mov	r0, fp
 800933c:	f000 fa9a 	bl	8009874 <__multadd>
 8009340:	4601      	mov	r1, r0
 8009342:	4604      	mov	r4, r0
 8009344:	4648      	mov	r0, r9
 8009346:	f000 fcf7 	bl	8009d38 <__mcmp>
 800934a:	2800      	cmp	r0, #0
 800934c:	f77f aeb3 	ble.w	80090b6 <_dtoa_r+0x68e>
 8009350:	4656      	mov	r6, sl
 8009352:	2331      	movs	r3, #49	@ 0x31
 8009354:	f806 3b01 	strb.w	r3, [r6], #1
 8009358:	9b04      	ldr	r3, [sp, #16]
 800935a:	3301      	adds	r3, #1
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	e6ae      	b.n	80090be <_dtoa_r+0x696>
 8009360:	9c07      	ldr	r4, [sp, #28]
 8009362:	9704      	str	r7, [sp, #16]
 8009364:	4625      	mov	r5, r4
 8009366:	e7f3      	b.n	8009350 <_dtoa_r+0x928>
 8009368:	9b07      	ldr	r3, [sp, #28]
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 8104 	beq.w	800957c <_dtoa_r+0xb54>
 8009374:	2e00      	cmp	r6, #0
 8009376:	dd05      	ble.n	8009384 <_dtoa_r+0x95c>
 8009378:	4629      	mov	r1, r5
 800937a:	4632      	mov	r2, r6
 800937c:	4658      	mov	r0, fp
 800937e:	f000 fc6f 	bl	8009c60 <__lshift>
 8009382:	4605      	mov	r5, r0
 8009384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009386:	2b00      	cmp	r3, #0
 8009388:	d05a      	beq.n	8009440 <_dtoa_r+0xa18>
 800938a:	6869      	ldr	r1, [r5, #4]
 800938c:	4658      	mov	r0, fp
 800938e:	f000 fa0f 	bl	80097b0 <_Balloc>
 8009392:	4606      	mov	r6, r0
 8009394:	b928      	cbnz	r0, 80093a2 <_dtoa_r+0x97a>
 8009396:	4b84      	ldr	r3, [pc, #528]	@ (80095a8 <_dtoa_r+0xb80>)
 8009398:	4602      	mov	r2, r0
 800939a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800939e:	f7ff bb5a 	b.w	8008a56 <_dtoa_r+0x2e>
 80093a2:	692a      	ldr	r2, [r5, #16]
 80093a4:	3202      	adds	r2, #2
 80093a6:	0092      	lsls	r2, r2, #2
 80093a8:	f105 010c 	add.w	r1, r5, #12
 80093ac:	300c      	adds	r0, #12
 80093ae:	f001 ff75 	bl	800b29c <memcpy>
 80093b2:	2201      	movs	r2, #1
 80093b4:	4631      	mov	r1, r6
 80093b6:	4658      	mov	r0, fp
 80093b8:	f000 fc52 	bl	8009c60 <__lshift>
 80093bc:	f10a 0301 	add.w	r3, sl, #1
 80093c0:	9307      	str	r3, [sp, #28]
 80093c2:	9b00      	ldr	r3, [sp, #0]
 80093c4:	4453      	add	r3, sl
 80093c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093c8:	9b02      	ldr	r3, [sp, #8]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	462f      	mov	r7, r5
 80093d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80093d2:	4605      	mov	r5, r0
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	4621      	mov	r1, r4
 80093d8:	3b01      	subs	r3, #1
 80093da:	4648      	mov	r0, r9
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	f7ff fa99 	bl	8008914 <quorem>
 80093e2:	4639      	mov	r1, r7
 80093e4:	9002      	str	r0, [sp, #8]
 80093e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093ea:	4648      	mov	r0, r9
 80093ec:	f000 fca4 	bl	8009d38 <__mcmp>
 80093f0:	462a      	mov	r2, r5
 80093f2:	9008      	str	r0, [sp, #32]
 80093f4:	4621      	mov	r1, r4
 80093f6:	4658      	mov	r0, fp
 80093f8:	f000 fcba 	bl	8009d70 <__mdiff>
 80093fc:	68c2      	ldr	r2, [r0, #12]
 80093fe:	4606      	mov	r6, r0
 8009400:	bb02      	cbnz	r2, 8009444 <_dtoa_r+0xa1c>
 8009402:	4601      	mov	r1, r0
 8009404:	4648      	mov	r0, r9
 8009406:	f000 fc97 	bl	8009d38 <__mcmp>
 800940a:	4602      	mov	r2, r0
 800940c:	4631      	mov	r1, r6
 800940e:	4658      	mov	r0, fp
 8009410:	920e      	str	r2, [sp, #56]	@ 0x38
 8009412:	f000 fa0d 	bl	8009830 <_Bfree>
 8009416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009418:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800941a:	9e07      	ldr	r6, [sp, #28]
 800941c:	ea43 0102 	orr.w	r1, r3, r2
 8009420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009422:	4319      	orrs	r1, r3
 8009424:	d110      	bne.n	8009448 <_dtoa_r+0xa20>
 8009426:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800942a:	d029      	beq.n	8009480 <_dtoa_r+0xa58>
 800942c:	9b08      	ldr	r3, [sp, #32]
 800942e:	2b00      	cmp	r3, #0
 8009430:	dd02      	ble.n	8009438 <_dtoa_r+0xa10>
 8009432:	9b02      	ldr	r3, [sp, #8]
 8009434:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009438:	9b00      	ldr	r3, [sp, #0]
 800943a:	f883 8000 	strb.w	r8, [r3]
 800943e:	e63f      	b.n	80090c0 <_dtoa_r+0x698>
 8009440:	4628      	mov	r0, r5
 8009442:	e7bb      	b.n	80093bc <_dtoa_r+0x994>
 8009444:	2201      	movs	r2, #1
 8009446:	e7e1      	b.n	800940c <_dtoa_r+0x9e4>
 8009448:	9b08      	ldr	r3, [sp, #32]
 800944a:	2b00      	cmp	r3, #0
 800944c:	db04      	blt.n	8009458 <_dtoa_r+0xa30>
 800944e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009450:	430b      	orrs	r3, r1
 8009452:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009454:	430b      	orrs	r3, r1
 8009456:	d120      	bne.n	800949a <_dtoa_r+0xa72>
 8009458:	2a00      	cmp	r2, #0
 800945a:	dded      	ble.n	8009438 <_dtoa_r+0xa10>
 800945c:	4649      	mov	r1, r9
 800945e:	2201      	movs	r2, #1
 8009460:	4658      	mov	r0, fp
 8009462:	f000 fbfd 	bl	8009c60 <__lshift>
 8009466:	4621      	mov	r1, r4
 8009468:	4681      	mov	r9, r0
 800946a:	f000 fc65 	bl	8009d38 <__mcmp>
 800946e:	2800      	cmp	r0, #0
 8009470:	dc03      	bgt.n	800947a <_dtoa_r+0xa52>
 8009472:	d1e1      	bne.n	8009438 <_dtoa_r+0xa10>
 8009474:	f018 0f01 	tst.w	r8, #1
 8009478:	d0de      	beq.n	8009438 <_dtoa_r+0xa10>
 800947a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800947e:	d1d8      	bne.n	8009432 <_dtoa_r+0xa0a>
 8009480:	9a00      	ldr	r2, [sp, #0]
 8009482:	2339      	movs	r3, #57	@ 0x39
 8009484:	7013      	strb	r3, [r2, #0]
 8009486:	4633      	mov	r3, r6
 8009488:	461e      	mov	r6, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009490:	2a39      	cmp	r2, #57	@ 0x39
 8009492:	d052      	beq.n	800953a <_dtoa_r+0xb12>
 8009494:	3201      	adds	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]
 8009498:	e612      	b.n	80090c0 <_dtoa_r+0x698>
 800949a:	2a00      	cmp	r2, #0
 800949c:	dd07      	ble.n	80094ae <_dtoa_r+0xa86>
 800949e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094a2:	d0ed      	beq.n	8009480 <_dtoa_r+0xa58>
 80094a4:	9a00      	ldr	r2, [sp, #0]
 80094a6:	f108 0301 	add.w	r3, r8, #1
 80094aa:	7013      	strb	r3, [r2, #0]
 80094ac:	e608      	b.n	80090c0 <_dtoa_r+0x698>
 80094ae:	9b07      	ldr	r3, [sp, #28]
 80094b0:	9a07      	ldr	r2, [sp, #28]
 80094b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80094b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d028      	beq.n	800950e <_dtoa_r+0xae6>
 80094bc:	4649      	mov	r1, r9
 80094be:	2300      	movs	r3, #0
 80094c0:	220a      	movs	r2, #10
 80094c2:	4658      	mov	r0, fp
 80094c4:	f000 f9d6 	bl	8009874 <__multadd>
 80094c8:	42af      	cmp	r7, r5
 80094ca:	4681      	mov	r9, r0
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	f04f 020a 	mov.w	r2, #10
 80094d4:	4639      	mov	r1, r7
 80094d6:	4658      	mov	r0, fp
 80094d8:	d107      	bne.n	80094ea <_dtoa_r+0xac2>
 80094da:	f000 f9cb 	bl	8009874 <__multadd>
 80094de:	4607      	mov	r7, r0
 80094e0:	4605      	mov	r5, r0
 80094e2:	9b07      	ldr	r3, [sp, #28]
 80094e4:	3301      	adds	r3, #1
 80094e6:	9307      	str	r3, [sp, #28]
 80094e8:	e774      	b.n	80093d4 <_dtoa_r+0x9ac>
 80094ea:	f000 f9c3 	bl	8009874 <__multadd>
 80094ee:	4629      	mov	r1, r5
 80094f0:	4607      	mov	r7, r0
 80094f2:	2300      	movs	r3, #0
 80094f4:	220a      	movs	r2, #10
 80094f6:	4658      	mov	r0, fp
 80094f8:	f000 f9bc 	bl	8009874 <__multadd>
 80094fc:	4605      	mov	r5, r0
 80094fe:	e7f0      	b.n	80094e2 <_dtoa_r+0xaba>
 8009500:	9b00      	ldr	r3, [sp, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	bfcc      	ite	gt
 8009506:	461e      	movgt	r6, r3
 8009508:	2601      	movle	r6, #1
 800950a:	4456      	add	r6, sl
 800950c:	2700      	movs	r7, #0
 800950e:	4649      	mov	r1, r9
 8009510:	2201      	movs	r2, #1
 8009512:	4658      	mov	r0, fp
 8009514:	f000 fba4 	bl	8009c60 <__lshift>
 8009518:	4621      	mov	r1, r4
 800951a:	4681      	mov	r9, r0
 800951c:	f000 fc0c 	bl	8009d38 <__mcmp>
 8009520:	2800      	cmp	r0, #0
 8009522:	dcb0      	bgt.n	8009486 <_dtoa_r+0xa5e>
 8009524:	d102      	bne.n	800952c <_dtoa_r+0xb04>
 8009526:	f018 0f01 	tst.w	r8, #1
 800952a:	d1ac      	bne.n	8009486 <_dtoa_r+0xa5e>
 800952c:	4633      	mov	r3, r6
 800952e:	461e      	mov	r6, r3
 8009530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009534:	2a30      	cmp	r2, #48	@ 0x30
 8009536:	d0fa      	beq.n	800952e <_dtoa_r+0xb06>
 8009538:	e5c2      	b.n	80090c0 <_dtoa_r+0x698>
 800953a:	459a      	cmp	sl, r3
 800953c:	d1a4      	bne.n	8009488 <_dtoa_r+0xa60>
 800953e:	9b04      	ldr	r3, [sp, #16]
 8009540:	3301      	adds	r3, #1
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	2331      	movs	r3, #49	@ 0x31
 8009546:	f88a 3000 	strb.w	r3, [sl]
 800954a:	e5b9      	b.n	80090c0 <_dtoa_r+0x698>
 800954c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800954e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80095ac <_dtoa_r+0xb84>
 8009552:	b11b      	cbz	r3, 800955c <_dtoa_r+0xb34>
 8009554:	f10a 0308 	add.w	r3, sl, #8
 8009558:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	4650      	mov	r0, sl
 800955e:	b019      	add	sp, #100	@ 0x64
 8009560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009566:	2b01      	cmp	r3, #1
 8009568:	f77f ae37 	ble.w	80091da <_dtoa_r+0x7b2>
 800956c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800956e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009570:	2001      	movs	r0, #1
 8009572:	e655      	b.n	8009220 <_dtoa_r+0x7f8>
 8009574:	9b00      	ldr	r3, [sp, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f77f aed6 	ble.w	8009328 <_dtoa_r+0x900>
 800957c:	4656      	mov	r6, sl
 800957e:	4621      	mov	r1, r4
 8009580:	4648      	mov	r0, r9
 8009582:	f7ff f9c7 	bl	8008914 <quorem>
 8009586:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800958a:	f806 8b01 	strb.w	r8, [r6], #1
 800958e:	9b00      	ldr	r3, [sp, #0]
 8009590:	eba6 020a 	sub.w	r2, r6, sl
 8009594:	4293      	cmp	r3, r2
 8009596:	ddb3      	ble.n	8009500 <_dtoa_r+0xad8>
 8009598:	4649      	mov	r1, r9
 800959a:	2300      	movs	r3, #0
 800959c:	220a      	movs	r2, #10
 800959e:	4658      	mov	r0, fp
 80095a0:	f000 f968 	bl	8009874 <__multadd>
 80095a4:	4681      	mov	r9, r0
 80095a6:	e7ea      	b.n	800957e <_dtoa_r+0xb56>
 80095a8:	0800cb4d 	.word	0x0800cb4d
 80095ac:	0800cad1 	.word	0x0800cad1

080095b0 <_free_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4605      	mov	r5, r0
 80095b4:	2900      	cmp	r1, #0
 80095b6:	d041      	beq.n	800963c <_free_r+0x8c>
 80095b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095bc:	1f0c      	subs	r4, r1, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfb8      	it	lt
 80095c2:	18e4      	addlt	r4, r4, r3
 80095c4:	f000 f8e8 	bl	8009798 <__malloc_lock>
 80095c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009640 <_free_r+0x90>)
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	b933      	cbnz	r3, 80095dc <_free_r+0x2c>
 80095ce:	6063      	str	r3, [r4, #4]
 80095d0:	6014      	str	r4, [r2, #0]
 80095d2:	4628      	mov	r0, r5
 80095d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d8:	f000 b8e4 	b.w	80097a4 <__malloc_unlock>
 80095dc:	42a3      	cmp	r3, r4
 80095de:	d908      	bls.n	80095f2 <_free_r+0x42>
 80095e0:	6820      	ldr	r0, [r4, #0]
 80095e2:	1821      	adds	r1, r4, r0
 80095e4:	428b      	cmp	r3, r1
 80095e6:	bf01      	itttt	eq
 80095e8:	6819      	ldreq	r1, [r3, #0]
 80095ea:	685b      	ldreq	r3, [r3, #4]
 80095ec:	1809      	addeq	r1, r1, r0
 80095ee:	6021      	streq	r1, [r4, #0]
 80095f0:	e7ed      	b.n	80095ce <_free_r+0x1e>
 80095f2:	461a      	mov	r2, r3
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	b10b      	cbz	r3, 80095fc <_free_r+0x4c>
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	d9fa      	bls.n	80095f2 <_free_r+0x42>
 80095fc:	6811      	ldr	r1, [r2, #0]
 80095fe:	1850      	adds	r0, r2, r1
 8009600:	42a0      	cmp	r0, r4
 8009602:	d10b      	bne.n	800961c <_free_r+0x6c>
 8009604:	6820      	ldr	r0, [r4, #0]
 8009606:	4401      	add	r1, r0
 8009608:	1850      	adds	r0, r2, r1
 800960a:	4283      	cmp	r3, r0
 800960c:	6011      	str	r1, [r2, #0]
 800960e:	d1e0      	bne.n	80095d2 <_free_r+0x22>
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	6053      	str	r3, [r2, #4]
 8009616:	4408      	add	r0, r1
 8009618:	6010      	str	r0, [r2, #0]
 800961a:	e7da      	b.n	80095d2 <_free_r+0x22>
 800961c:	d902      	bls.n	8009624 <_free_r+0x74>
 800961e:	230c      	movs	r3, #12
 8009620:	602b      	str	r3, [r5, #0]
 8009622:	e7d6      	b.n	80095d2 <_free_r+0x22>
 8009624:	6820      	ldr	r0, [r4, #0]
 8009626:	1821      	adds	r1, r4, r0
 8009628:	428b      	cmp	r3, r1
 800962a:	bf04      	itt	eq
 800962c:	6819      	ldreq	r1, [r3, #0]
 800962e:	685b      	ldreq	r3, [r3, #4]
 8009630:	6063      	str	r3, [r4, #4]
 8009632:	bf04      	itt	eq
 8009634:	1809      	addeq	r1, r1, r0
 8009636:	6021      	streq	r1, [r4, #0]
 8009638:	6054      	str	r4, [r2, #4]
 800963a:	e7ca      	b.n	80095d2 <_free_r+0x22>
 800963c:	bd38      	pop	{r3, r4, r5, pc}
 800963e:	bf00      	nop
 8009640:	20000528 	.word	0x20000528

08009644 <malloc>:
 8009644:	4b02      	ldr	r3, [pc, #8]	@ (8009650 <malloc+0xc>)
 8009646:	4601      	mov	r1, r0
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	f000 b825 	b.w	8009698 <_malloc_r>
 800964e:	bf00      	nop
 8009650:	20000018 	.word	0x20000018

08009654 <sbrk_aligned>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	4e0f      	ldr	r6, [pc, #60]	@ (8009694 <sbrk_aligned+0x40>)
 8009658:	460c      	mov	r4, r1
 800965a:	6831      	ldr	r1, [r6, #0]
 800965c:	4605      	mov	r5, r0
 800965e:	b911      	cbnz	r1, 8009666 <sbrk_aligned+0x12>
 8009660:	f001 fe0c 	bl	800b27c <_sbrk_r>
 8009664:	6030      	str	r0, [r6, #0]
 8009666:	4621      	mov	r1, r4
 8009668:	4628      	mov	r0, r5
 800966a:	f001 fe07 	bl	800b27c <_sbrk_r>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d103      	bne.n	800967a <sbrk_aligned+0x26>
 8009672:	f04f 34ff 	mov.w	r4, #4294967295
 8009676:	4620      	mov	r0, r4
 8009678:	bd70      	pop	{r4, r5, r6, pc}
 800967a:	1cc4      	adds	r4, r0, #3
 800967c:	f024 0403 	bic.w	r4, r4, #3
 8009680:	42a0      	cmp	r0, r4
 8009682:	d0f8      	beq.n	8009676 <sbrk_aligned+0x22>
 8009684:	1a21      	subs	r1, r4, r0
 8009686:	4628      	mov	r0, r5
 8009688:	f001 fdf8 	bl	800b27c <_sbrk_r>
 800968c:	3001      	adds	r0, #1
 800968e:	d1f2      	bne.n	8009676 <sbrk_aligned+0x22>
 8009690:	e7ef      	b.n	8009672 <sbrk_aligned+0x1e>
 8009692:	bf00      	nop
 8009694:	20000524 	.word	0x20000524

08009698 <_malloc_r>:
 8009698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800969c:	1ccd      	adds	r5, r1, #3
 800969e:	f025 0503 	bic.w	r5, r5, #3
 80096a2:	3508      	adds	r5, #8
 80096a4:	2d0c      	cmp	r5, #12
 80096a6:	bf38      	it	cc
 80096a8:	250c      	movcc	r5, #12
 80096aa:	2d00      	cmp	r5, #0
 80096ac:	4606      	mov	r6, r0
 80096ae:	db01      	blt.n	80096b4 <_malloc_r+0x1c>
 80096b0:	42a9      	cmp	r1, r5
 80096b2:	d904      	bls.n	80096be <_malloc_r+0x26>
 80096b4:	230c      	movs	r3, #12
 80096b6:	6033      	str	r3, [r6, #0]
 80096b8:	2000      	movs	r0, #0
 80096ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009794 <_malloc_r+0xfc>
 80096c2:	f000 f869 	bl	8009798 <__malloc_lock>
 80096c6:	f8d8 3000 	ldr.w	r3, [r8]
 80096ca:	461c      	mov	r4, r3
 80096cc:	bb44      	cbnz	r4, 8009720 <_malloc_r+0x88>
 80096ce:	4629      	mov	r1, r5
 80096d0:	4630      	mov	r0, r6
 80096d2:	f7ff ffbf 	bl	8009654 <sbrk_aligned>
 80096d6:	1c43      	adds	r3, r0, #1
 80096d8:	4604      	mov	r4, r0
 80096da:	d158      	bne.n	800978e <_malloc_r+0xf6>
 80096dc:	f8d8 4000 	ldr.w	r4, [r8]
 80096e0:	4627      	mov	r7, r4
 80096e2:	2f00      	cmp	r7, #0
 80096e4:	d143      	bne.n	800976e <_malloc_r+0xd6>
 80096e6:	2c00      	cmp	r4, #0
 80096e8:	d04b      	beq.n	8009782 <_malloc_r+0xea>
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	4639      	mov	r1, r7
 80096ee:	4630      	mov	r0, r6
 80096f0:	eb04 0903 	add.w	r9, r4, r3
 80096f4:	f001 fdc2 	bl	800b27c <_sbrk_r>
 80096f8:	4581      	cmp	r9, r0
 80096fa:	d142      	bne.n	8009782 <_malloc_r+0xea>
 80096fc:	6821      	ldr	r1, [r4, #0]
 80096fe:	1a6d      	subs	r5, r5, r1
 8009700:	4629      	mov	r1, r5
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff ffa6 	bl	8009654 <sbrk_aligned>
 8009708:	3001      	adds	r0, #1
 800970a:	d03a      	beq.n	8009782 <_malloc_r+0xea>
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	442b      	add	r3, r5
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	f8d8 3000 	ldr.w	r3, [r8]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	bb62      	cbnz	r2, 8009774 <_malloc_r+0xdc>
 800971a:	f8c8 7000 	str.w	r7, [r8]
 800971e:	e00f      	b.n	8009740 <_malloc_r+0xa8>
 8009720:	6822      	ldr	r2, [r4, #0]
 8009722:	1b52      	subs	r2, r2, r5
 8009724:	d420      	bmi.n	8009768 <_malloc_r+0xd0>
 8009726:	2a0b      	cmp	r2, #11
 8009728:	d917      	bls.n	800975a <_malloc_r+0xc2>
 800972a:	1961      	adds	r1, r4, r5
 800972c:	42a3      	cmp	r3, r4
 800972e:	6025      	str	r5, [r4, #0]
 8009730:	bf18      	it	ne
 8009732:	6059      	strne	r1, [r3, #4]
 8009734:	6863      	ldr	r3, [r4, #4]
 8009736:	bf08      	it	eq
 8009738:	f8c8 1000 	streq.w	r1, [r8]
 800973c:	5162      	str	r2, [r4, r5]
 800973e:	604b      	str	r3, [r1, #4]
 8009740:	4630      	mov	r0, r6
 8009742:	f000 f82f 	bl	80097a4 <__malloc_unlock>
 8009746:	f104 000b 	add.w	r0, r4, #11
 800974a:	1d23      	adds	r3, r4, #4
 800974c:	f020 0007 	bic.w	r0, r0, #7
 8009750:	1ac2      	subs	r2, r0, r3
 8009752:	bf1c      	itt	ne
 8009754:	1a1b      	subne	r3, r3, r0
 8009756:	50a3      	strne	r3, [r4, r2]
 8009758:	e7af      	b.n	80096ba <_malloc_r+0x22>
 800975a:	6862      	ldr	r2, [r4, #4]
 800975c:	42a3      	cmp	r3, r4
 800975e:	bf0c      	ite	eq
 8009760:	f8c8 2000 	streq.w	r2, [r8]
 8009764:	605a      	strne	r2, [r3, #4]
 8009766:	e7eb      	b.n	8009740 <_malloc_r+0xa8>
 8009768:	4623      	mov	r3, r4
 800976a:	6864      	ldr	r4, [r4, #4]
 800976c:	e7ae      	b.n	80096cc <_malloc_r+0x34>
 800976e:	463c      	mov	r4, r7
 8009770:	687f      	ldr	r7, [r7, #4]
 8009772:	e7b6      	b.n	80096e2 <_malloc_r+0x4a>
 8009774:	461a      	mov	r2, r3
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	42a3      	cmp	r3, r4
 800977a:	d1fb      	bne.n	8009774 <_malloc_r+0xdc>
 800977c:	2300      	movs	r3, #0
 800977e:	6053      	str	r3, [r2, #4]
 8009780:	e7de      	b.n	8009740 <_malloc_r+0xa8>
 8009782:	230c      	movs	r3, #12
 8009784:	6033      	str	r3, [r6, #0]
 8009786:	4630      	mov	r0, r6
 8009788:	f000 f80c 	bl	80097a4 <__malloc_unlock>
 800978c:	e794      	b.n	80096b8 <_malloc_r+0x20>
 800978e:	6005      	str	r5, [r0, #0]
 8009790:	e7d6      	b.n	8009740 <_malloc_r+0xa8>
 8009792:	bf00      	nop
 8009794:	20000528 	.word	0x20000528

08009798 <__malloc_lock>:
 8009798:	4801      	ldr	r0, [pc, #4]	@ (80097a0 <__malloc_lock+0x8>)
 800979a:	f7ff b8b2 	b.w	8008902 <__retarget_lock_acquire_recursive>
 800979e:	bf00      	nop
 80097a0:	20000520 	.word	0x20000520

080097a4 <__malloc_unlock>:
 80097a4:	4801      	ldr	r0, [pc, #4]	@ (80097ac <__malloc_unlock+0x8>)
 80097a6:	f7ff b8ad 	b.w	8008904 <__retarget_lock_release_recursive>
 80097aa:	bf00      	nop
 80097ac:	20000520 	.word	0x20000520

080097b0 <_Balloc>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	69c6      	ldr	r6, [r0, #28]
 80097b4:	4604      	mov	r4, r0
 80097b6:	460d      	mov	r5, r1
 80097b8:	b976      	cbnz	r6, 80097d8 <_Balloc+0x28>
 80097ba:	2010      	movs	r0, #16
 80097bc:	f7ff ff42 	bl	8009644 <malloc>
 80097c0:	4602      	mov	r2, r0
 80097c2:	61e0      	str	r0, [r4, #28]
 80097c4:	b920      	cbnz	r0, 80097d0 <_Balloc+0x20>
 80097c6:	4b18      	ldr	r3, [pc, #96]	@ (8009828 <_Balloc+0x78>)
 80097c8:	4818      	ldr	r0, [pc, #96]	@ (800982c <_Balloc+0x7c>)
 80097ca:	216b      	movs	r1, #107	@ 0x6b
 80097cc:	f001 fd7c 	bl	800b2c8 <__assert_func>
 80097d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097d4:	6006      	str	r6, [r0, #0]
 80097d6:	60c6      	str	r6, [r0, #12]
 80097d8:	69e6      	ldr	r6, [r4, #28]
 80097da:	68f3      	ldr	r3, [r6, #12]
 80097dc:	b183      	cbz	r3, 8009800 <_Balloc+0x50>
 80097de:	69e3      	ldr	r3, [r4, #28]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097e6:	b9b8      	cbnz	r0, 8009818 <_Balloc+0x68>
 80097e8:	2101      	movs	r1, #1
 80097ea:	fa01 f605 	lsl.w	r6, r1, r5
 80097ee:	1d72      	adds	r2, r6, #5
 80097f0:	0092      	lsls	r2, r2, #2
 80097f2:	4620      	mov	r0, r4
 80097f4:	f001 fd86 	bl	800b304 <_calloc_r>
 80097f8:	b160      	cbz	r0, 8009814 <_Balloc+0x64>
 80097fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097fe:	e00e      	b.n	800981e <_Balloc+0x6e>
 8009800:	2221      	movs	r2, #33	@ 0x21
 8009802:	2104      	movs	r1, #4
 8009804:	4620      	mov	r0, r4
 8009806:	f001 fd7d 	bl	800b304 <_calloc_r>
 800980a:	69e3      	ldr	r3, [r4, #28]
 800980c:	60f0      	str	r0, [r6, #12]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e4      	bne.n	80097de <_Balloc+0x2e>
 8009814:	2000      	movs	r0, #0
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	6802      	ldr	r2, [r0, #0]
 800981a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800981e:	2300      	movs	r3, #0
 8009820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009824:	e7f7      	b.n	8009816 <_Balloc+0x66>
 8009826:	bf00      	nop
 8009828:	0800cade 	.word	0x0800cade
 800982c:	0800cb5e 	.word	0x0800cb5e

08009830 <_Bfree>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	69c6      	ldr	r6, [r0, #28]
 8009834:	4605      	mov	r5, r0
 8009836:	460c      	mov	r4, r1
 8009838:	b976      	cbnz	r6, 8009858 <_Bfree+0x28>
 800983a:	2010      	movs	r0, #16
 800983c:	f7ff ff02 	bl	8009644 <malloc>
 8009840:	4602      	mov	r2, r0
 8009842:	61e8      	str	r0, [r5, #28]
 8009844:	b920      	cbnz	r0, 8009850 <_Bfree+0x20>
 8009846:	4b09      	ldr	r3, [pc, #36]	@ (800986c <_Bfree+0x3c>)
 8009848:	4809      	ldr	r0, [pc, #36]	@ (8009870 <_Bfree+0x40>)
 800984a:	218f      	movs	r1, #143	@ 0x8f
 800984c:	f001 fd3c 	bl	800b2c8 <__assert_func>
 8009850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009854:	6006      	str	r6, [r0, #0]
 8009856:	60c6      	str	r6, [r0, #12]
 8009858:	b13c      	cbz	r4, 800986a <_Bfree+0x3a>
 800985a:	69eb      	ldr	r3, [r5, #28]
 800985c:	6862      	ldr	r2, [r4, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009864:	6021      	str	r1, [r4, #0]
 8009866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800986a:	bd70      	pop	{r4, r5, r6, pc}
 800986c:	0800cade 	.word	0x0800cade
 8009870:	0800cb5e 	.word	0x0800cb5e

08009874 <__multadd>:
 8009874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009878:	690d      	ldr	r5, [r1, #16]
 800987a:	4607      	mov	r7, r0
 800987c:	460c      	mov	r4, r1
 800987e:	461e      	mov	r6, r3
 8009880:	f101 0c14 	add.w	ip, r1, #20
 8009884:	2000      	movs	r0, #0
 8009886:	f8dc 3000 	ldr.w	r3, [ip]
 800988a:	b299      	uxth	r1, r3
 800988c:	fb02 6101 	mla	r1, r2, r1, r6
 8009890:	0c1e      	lsrs	r6, r3, #16
 8009892:	0c0b      	lsrs	r3, r1, #16
 8009894:	fb02 3306 	mla	r3, r2, r6, r3
 8009898:	b289      	uxth	r1, r1
 800989a:	3001      	adds	r0, #1
 800989c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098a0:	4285      	cmp	r5, r0
 80098a2:	f84c 1b04 	str.w	r1, [ip], #4
 80098a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098aa:	dcec      	bgt.n	8009886 <__multadd+0x12>
 80098ac:	b30e      	cbz	r6, 80098f2 <__multadd+0x7e>
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	42ab      	cmp	r3, r5
 80098b2:	dc19      	bgt.n	80098e8 <__multadd+0x74>
 80098b4:	6861      	ldr	r1, [r4, #4]
 80098b6:	4638      	mov	r0, r7
 80098b8:	3101      	adds	r1, #1
 80098ba:	f7ff ff79 	bl	80097b0 <_Balloc>
 80098be:	4680      	mov	r8, r0
 80098c0:	b928      	cbnz	r0, 80098ce <__multadd+0x5a>
 80098c2:	4602      	mov	r2, r0
 80098c4:	4b0c      	ldr	r3, [pc, #48]	@ (80098f8 <__multadd+0x84>)
 80098c6:	480d      	ldr	r0, [pc, #52]	@ (80098fc <__multadd+0x88>)
 80098c8:	21ba      	movs	r1, #186	@ 0xba
 80098ca:	f001 fcfd 	bl	800b2c8 <__assert_func>
 80098ce:	6922      	ldr	r2, [r4, #16]
 80098d0:	3202      	adds	r2, #2
 80098d2:	f104 010c 	add.w	r1, r4, #12
 80098d6:	0092      	lsls	r2, r2, #2
 80098d8:	300c      	adds	r0, #12
 80098da:	f001 fcdf 	bl	800b29c <memcpy>
 80098de:	4621      	mov	r1, r4
 80098e0:	4638      	mov	r0, r7
 80098e2:	f7ff ffa5 	bl	8009830 <_Bfree>
 80098e6:	4644      	mov	r4, r8
 80098e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098ec:	3501      	adds	r5, #1
 80098ee:	615e      	str	r6, [r3, #20]
 80098f0:	6125      	str	r5, [r4, #16]
 80098f2:	4620      	mov	r0, r4
 80098f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f8:	0800cb4d 	.word	0x0800cb4d
 80098fc:	0800cb5e 	.word	0x0800cb5e

08009900 <__s2b>:
 8009900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009904:	460c      	mov	r4, r1
 8009906:	4615      	mov	r5, r2
 8009908:	461f      	mov	r7, r3
 800990a:	2209      	movs	r2, #9
 800990c:	3308      	adds	r3, #8
 800990e:	4606      	mov	r6, r0
 8009910:	fb93 f3f2 	sdiv	r3, r3, r2
 8009914:	2100      	movs	r1, #0
 8009916:	2201      	movs	r2, #1
 8009918:	429a      	cmp	r2, r3
 800991a:	db09      	blt.n	8009930 <__s2b+0x30>
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff ff47 	bl	80097b0 <_Balloc>
 8009922:	b940      	cbnz	r0, 8009936 <__s2b+0x36>
 8009924:	4602      	mov	r2, r0
 8009926:	4b19      	ldr	r3, [pc, #100]	@ (800998c <__s2b+0x8c>)
 8009928:	4819      	ldr	r0, [pc, #100]	@ (8009990 <__s2b+0x90>)
 800992a:	21d3      	movs	r1, #211	@ 0xd3
 800992c:	f001 fccc 	bl	800b2c8 <__assert_func>
 8009930:	0052      	lsls	r2, r2, #1
 8009932:	3101      	adds	r1, #1
 8009934:	e7f0      	b.n	8009918 <__s2b+0x18>
 8009936:	9b08      	ldr	r3, [sp, #32]
 8009938:	6143      	str	r3, [r0, #20]
 800993a:	2d09      	cmp	r5, #9
 800993c:	f04f 0301 	mov.w	r3, #1
 8009940:	6103      	str	r3, [r0, #16]
 8009942:	dd16      	ble.n	8009972 <__s2b+0x72>
 8009944:	f104 0909 	add.w	r9, r4, #9
 8009948:	46c8      	mov	r8, r9
 800994a:	442c      	add	r4, r5
 800994c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009950:	4601      	mov	r1, r0
 8009952:	3b30      	subs	r3, #48	@ 0x30
 8009954:	220a      	movs	r2, #10
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff ff8c 	bl	8009874 <__multadd>
 800995c:	45a0      	cmp	r8, r4
 800995e:	d1f5      	bne.n	800994c <__s2b+0x4c>
 8009960:	f1a5 0408 	sub.w	r4, r5, #8
 8009964:	444c      	add	r4, r9
 8009966:	1b2d      	subs	r5, r5, r4
 8009968:	1963      	adds	r3, r4, r5
 800996a:	42bb      	cmp	r3, r7
 800996c:	db04      	blt.n	8009978 <__s2b+0x78>
 800996e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009972:	340a      	adds	r4, #10
 8009974:	2509      	movs	r5, #9
 8009976:	e7f6      	b.n	8009966 <__s2b+0x66>
 8009978:	f814 3b01 	ldrb.w	r3, [r4], #1
 800997c:	4601      	mov	r1, r0
 800997e:	3b30      	subs	r3, #48	@ 0x30
 8009980:	220a      	movs	r2, #10
 8009982:	4630      	mov	r0, r6
 8009984:	f7ff ff76 	bl	8009874 <__multadd>
 8009988:	e7ee      	b.n	8009968 <__s2b+0x68>
 800998a:	bf00      	nop
 800998c:	0800cb4d 	.word	0x0800cb4d
 8009990:	0800cb5e 	.word	0x0800cb5e

08009994 <__hi0bits>:
 8009994:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009998:	4603      	mov	r3, r0
 800999a:	bf36      	itet	cc
 800999c:	0403      	lslcc	r3, r0, #16
 800999e:	2000      	movcs	r0, #0
 80099a0:	2010      	movcc	r0, #16
 80099a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099a6:	bf3c      	itt	cc
 80099a8:	021b      	lslcc	r3, r3, #8
 80099aa:	3008      	addcc	r0, #8
 80099ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099b0:	bf3c      	itt	cc
 80099b2:	011b      	lslcc	r3, r3, #4
 80099b4:	3004      	addcc	r0, #4
 80099b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ba:	bf3c      	itt	cc
 80099bc:	009b      	lslcc	r3, r3, #2
 80099be:	3002      	addcc	r0, #2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	db05      	blt.n	80099d0 <__hi0bits+0x3c>
 80099c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80099c8:	f100 0001 	add.w	r0, r0, #1
 80099cc:	bf08      	it	eq
 80099ce:	2020      	moveq	r0, #32
 80099d0:	4770      	bx	lr

080099d2 <__lo0bits>:
 80099d2:	6803      	ldr	r3, [r0, #0]
 80099d4:	4602      	mov	r2, r0
 80099d6:	f013 0007 	ands.w	r0, r3, #7
 80099da:	d00b      	beq.n	80099f4 <__lo0bits+0x22>
 80099dc:	07d9      	lsls	r1, r3, #31
 80099de:	d421      	bmi.n	8009a24 <__lo0bits+0x52>
 80099e0:	0798      	lsls	r0, r3, #30
 80099e2:	bf49      	itett	mi
 80099e4:	085b      	lsrmi	r3, r3, #1
 80099e6:	089b      	lsrpl	r3, r3, #2
 80099e8:	2001      	movmi	r0, #1
 80099ea:	6013      	strmi	r3, [r2, #0]
 80099ec:	bf5c      	itt	pl
 80099ee:	6013      	strpl	r3, [r2, #0]
 80099f0:	2002      	movpl	r0, #2
 80099f2:	4770      	bx	lr
 80099f4:	b299      	uxth	r1, r3
 80099f6:	b909      	cbnz	r1, 80099fc <__lo0bits+0x2a>
 80099f8:	0c1b      	lsrs	r3, r3, #16
 80099fa:	2010      	movs	r0, #16
 80099fc:	b2d9      	uxtb	r1, r3
 80099fe:	b909      	cbnz	r1, 8009a04 <__lo0bits+0x32>
 8009a00:	3008      	adds	r0, #8
 8009a02:	0a1b      	lsrs	r3, r3, #8
 8009a04:	0719      	lsls	r1, r3, #28
 8009a06:	bf04      	itt	eq
 8009a08:	091b      	lsreq	r3, r3, #4
 8009a0a:	3004      	addeq	r0, #4
 8009a0c:	0799      	lsls	r1, r3, #30
 8009a0e:	bf04      	itt	eq
 8009a10:	089b      	lsreq	r3, r3, #2
 8009a12:	3002      	addeq	r0, #2
 8009a14:	07d9      	lsls	r1, r3, #31
 8009a16:	d403      	bmi.n	8009a20 <__lo0bits+0x4e>
 8009a18:	085b      	lsrs	r3, r3, #1
 8009a1a:	f100 0001 	add.w	r0, r0, #1
 8009a1e:	d003      	beq.n	8009a28 <__lo0bits+0x56>
 8009a20:	6013      	str	r3, [r2, #0]
 8009a22:	4770      	bx	lr
 8009a24:	2000      	movs	r0, #0
 8009a26:	4770      	bx	lr
 8009a28:	2020      	movs	r0, #32
 8009a2a:	4770      	bx	lr

08009a2c <__i2b>:
 8009a2c:	b510      	push	{r4, lr}
 8009a2e:	460c      	mov	r4, r1
 8009a30:	2101      	movs	r1, #1
 8009a32:	f7ff febd 	bl	80097b0 <_Balloc>
 8009a36:	4602      	mov	r2, r0
 8009a38:	b928      	cbnz	r0, 8009a46 <__i2b+0x1a>
 8009a3a:	4b05      	ldr	r3, [pc, #20]	@ (8009a50 <__i2b+0x24>)
 8009a3c:	4805      	ldr	r0, [pc, #20]	@ (8009a54 <__i2b+0x28>)
 8009a3e:	f240 1145 	movw	r1, #325	@ 0x145
 8009a42:	f001 fc41 	bl	800b2c8 <__assert_func>
 8009a46:	2301      	movs	r3, #1
 8009a48:	6144      	str	r4, [r0, #20]
 8009a4a:	6103      	str	r3, [r0, #16]
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	bf00      	nop
 8009a50:	0800cb4d 	.word	0x0800cb4d
 8009a54:	0800cb5e 	.word	0x0800cb5e

08009a58 <__multiply>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	690a      	ldr	r2, [r1, #16]
 8009a60:	6923      	ldr	r3, [r4, #16]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	bfa8      	it	ge
 8009a66:	4623      	movge	r3, r4
 8009a68:	460f      	mov	r7, r1
 8009a6a:	bfa4      	itt	ge
 8009a6c:	460c      	movge	r4, r1
 8009a6e:	461f      	movge	r7, r3
 8009a70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009a74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009a78:	68a3      	ldr	r3, [r4, #8]
 8009a7a:	6861      	ldr	r1, [r4, #4]
 8009a7c:	eb0a 0609 	add.w	r6, sl, r9
 8009a80:	42b3      	cmp	r3, r6
 8009a82:	b085      	sub	sp, #20
 8009a84:	bfb8      	it	lt
 8009a86:	3101      	addlt	r1, #1
 8009a88:	f7ff fe92 	bl	80097b0 <_Balloc>
 8009a8c:	b930      	cbnz	r0, 8009a9c <__multiply+0x44>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	4b44      	ldr	r3, [pc, #272]	@ (8009ba4 <__multiply+0x14c>)
 8009a92:	4845      	ldr	r0, [pc, #276]	@ (8009ba8 <__multiply+0x150>)
 8009a94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a98:	f001 fc16 	bl	800b2c8 <__assert_func>
 8009a9c:	f100 0514 	add.w	r5, r0, #20
 8009aa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009aa4:	462b      	mov	r3, r5
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	4543      	cmp	r3, r8
 8009aaa:	d321      	bcc.n	8009af0 <__multiply+0x98>
 8009aac:	f107 0114 	add.w	r1, r7, #20
 8009ab0:	f104 0214 	add.w	r2, r4, #20
 8009ab4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009ab8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009abc:	9302      	str	r3, [sp, #8]
 8009abe:	1b13      	subs	r3, r2, r4
 8009ac0:	3b15      	subs	r3, #21
 8009ac2:	f023 0303 	bic.w	r3, r3, #3
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	f104 0715 	add.w	r7, r4, #21
 8009acc:	42ba      	cmp	r2, r7
 8009ace:	bf38      	it	cc
 8009ad0:	2304      	movcc	r3, #4
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	9b02      	ldr	r3, [sp, #8]
 8009ad6:	9103      	str	r1, [sp, #12]
 8009ad8:	428b      	cmp	r3, r1
 8009ada:	d80c      	bhi.n	8009af6 <__multiply+0x9e>
 8009adc:	2e00      	cmp	r6, #0
 8009ade:	dd03      	ble.n	8009ae8 <__multiply+0x90>
 8009ae0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d05b      	beq.n	8009ba0 <__multiply+0x148>
 8009ae8:	6106      	str	r6, [r0, #16]
 8009aea:	b005      	add	sp, #20
 8009aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af0:	f843 2b04 	str.w	r2, [r3], #4
 8009af4:	e7d8      	b.n	8009aa8 <__multiply+0x50>
 8009af6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009afa:	f1ba 0f00 	cmp.w	sl, #0
 8009afe:	d024      	beq.n	8009b4a <__multiply+0xf2>
 8009b00:	f104 0e14 	add.w	lr, r4, #20
 8009b04:	46a9      	mov	r9, r5
 8009b06:	f04f 0c00 	mov.w	ip, #0
 8009b0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b0e:	f8d9 3000 	ldr.w	r3, [r9]
 8009b12:	fa1f fb87 	uxth.w	fp, r7
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009b20:	f8d9 7000 	ldr.w	r7, [r9]
 8009b24:	4463      	add	r3, ip
 8009b26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8009b2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b38:	4572      	cmp	r2, lr
 8009b3a:	f849 3b04 	str.w	r3, [r9], #4
 8009b3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b42:	d8e2      	bhi.n	8009b0a <__multiply+0xb2>
 8009b44:	9b01      	ldr	r3, [sp, #4]
 8009b46:	f845 c003 	str.w	ip, [r5, r3]
 8009b4a:	9b03      	ldr	r3, [sp, #12]
 8009b4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b50:	3104      	adds	r1, #4
 8009b52:	f1b9 0f00 	cmp.w	r9, #0
 8009b56:	d021      	beq.n	8009b9c <__multiply+0x144>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	f104 0c14 	add.w	ip, r4, #20
 8009b5e:	46ae      	mov	lr, r5
 8009b60:	f04f 0a00 	mov.w	sl, #0
 8009b64:	f8bc b000 	ldrh.w	fp, [ip]
 8009b68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009b6c:	fb09 770b 	mla	r7, r9, fp, r7
 8009b70:	4457      	add	r7, sl
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b78:	f84e 3b04 	str.w	r3, [lr], #4
 8009b7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b84:	f8be 3000 	ldrh.w	r3, [lr]
 8009b88:	fb09 330a 	mla	r3, r9, sl, r3
 8009b8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b90:	4562      	cmp	r2, ip
 8009b92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b96:	d8e5      	bhi.n	8009b64 <__multiply+0x10c>
 8009b98:	9f01      	ldr	r7, [sp, #4]
 8009b9a:	51eb      	str	r3, [r5, r7]
 8009b9c:	3504      	adds	r5, #4
 8009b9e:	e799      	b.n	8009ad4 <__multiply+0x7c>
 8009ba0:	3e01      	subs	r6, #1
 8009ba2:	e79b      	b.n	8009adc <__multiply+0x84>
 8009ba4:	0800cb4d 	.word	0x0800cb4d
 8009ba8:	0800cb5e 	.word	0x0800cb5e

08009bac <__pow5mult>:
 8009bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb0:	4615      	mov	r5, r2
 8009bb2:	f012 0203 	ands.w	r2, r2, #3
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	460e      	mov	r6, r1
 8009bba:	d007      	beq.n	8009bcc <__pow5mult+0x20>
 8009bbc:	4c25      	ldr	r4, [pc, #148]	@ (8009c54 <__pow5mult+0xa8>)
 8009bbe:	3a01      	subs	r2, #1
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bc6:	f7ff fe55 	bl	8009874 <__multadd>
 8009bca:	4606      	mov	r6, r0
 8009bcc:	10ad      	asrs	r5, r5, #2
 8009bce:	d03d      	beq.n	8009c4c <__pow5mult+0xa0>
 8009bd0:	69fc      	ldr	r4, [r7, #28]
 8009bd2:	b97c      	cbnz	r4, 8009bf4 <__pow5mult+0x48>
 8009bd4:	2010      	movs	r0, #16
 8009bd6:	f7ff fd35 	bl	8009644 <malloc>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	61f8      	str	r0, [r7, #28]
 8009bde:	b928      	cbnz	r0, 8009bec <__pow5mult+0x40>
 8009be0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c58 <__pow5mult+0xac>)
 8009be2:	481e      	ldr	r0, [pc, #120]	@ (8009c5c <__pow5mult+0xb0>)
 8009be4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009be8:	f001 fb6e 	bl	800b2c8 <__assert_func>
 8009bec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bf0:	6004      	str	r4, [r0, #0]
 8009bf2:	60c4      	str	r4, [r0, #12]
 8009bf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009bf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bfc:	b94c      	cbnz	r4, 8009c12 <__pow5mult+0x66>
 8009bfe:	f240 2171 	movw	r1, #625	@ 0x271
 8009c02:	4638      	mov	r0, r7
 8009c04:	f7ff ff12 	bl	8009a2c <__i2b>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c0e:	4604      	mov	r4, r0
 8009c10:	6003      	str	r3, [r0, #0]
 8009c12:	f04f 0900 	mov.w	r9, #0
 8009c16:	07eb      	lsls	r3, r5, #31
 8009c18:	d50a      	bpl.n	8009c30 <__pow5mult+0x84>
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4622      	mov	r2, r4
 8009c1e:	4638      	mov	r0, r7
 8009c20:	f7ff ff1a 	bl	8009a58 <__multiply>
 8009c24:	4631      	mov	r1, r6
 8009c26:	4680      	mov	r8, r0
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7ff fe01 	bl	8009830 <_Bfree>
 8009c2e:	4646      	mov	r6, r8
 8009c30:	106d      	asrs	r5, r5, #1
 8009c32:	d00b      	beq.n	8009c4c <__pow5mult+0xa0>
 8009c34:	6820      	ldr	r0, [r4, #0]
 8009c36:	b938      	cbnz	r0, 8009c48 <__pow5mult+0x9c>
 8009c38:	4622      	mov	r2, r4
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	f7ff ff0b 	bl	8009a58 <__multiply>
 8009c42:	6020      	str	r0, [r4, #0]
 8009c44:	f8c0 9000 	str.w	r9, [r0]
 8009c48:	4604      	mov	r4, r0
 8009c4a:	e7e4      	b.n	8009c16 <__pow5mult+0x6a>
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c52:	bf00      	nop
 8009c54:	0800cbb8 	.word	0x0800cbb8
 8009c58:	0800cade 	.word	0x0800cade
 8009c5c:	0800cb5e 	.word	0x0800cb5e

08009c60 <__lshift>:
 8009c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c64:	460c      	mov	r4, r1
 8009c66:	6849      	ldr	r1, [r1, #4]
 8009c68:	6923      	ldr	r3, [r4, #16]
 8009c6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c6e:	68a3      	ldr	r3, [r4, #8]
 8009c70:	4607      	mov	r7, r0
 8009c72:	4691      	mov	r9, r2
 8009c74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c78:	f108 0601 	add.w	r6, r8, #1
 8009c7c:	42b3      	cmp	r3, r6
 8009c7e:	db0b      	blt.n	8009c98 <__lshift+0x38>
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff fd95 	bl	80097b0 <_Balloc>
 8009c86:	4605      	mov	r5, r0
 8009c88:	b948      	cbnz	r0, 8009c9e <__lshift+0x3e>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	4b28      	ldr	r3, [pc, #160]	@ (8009d30 <__lshift+0xd0>)
 8009c8e:	4829      	ldr	r0, [pc, #164]	@ (8009d34 <__lshift+0xd4>)
 8009c90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c94:	f001 fb18 	bl	800b2c8 <__assert_func>
 8009c98:	3101      	adds	r1, #1
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	e7ee      	b.n	8009c7c <__lshift+0x1c>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f100 0114 	add.w	r1, r0, #20
 8009ca4:	f100 0210 	add.w	r2, r0, #16
 8009ca8:	4618      	mov	r0, r3
 8009caa:	4553      	cmp	r3, sl
 8009cac:	db33      	blt.n	8009d16 <__lshift+0xb6>
 8009cae:	6920      	ldr	r0, [r4, #16]
 8009cb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cb4:	f104 0314 	add.w	r3, r4, #20
 8009cb8:	f019 091f 	ands.w	r9, r9, #31
 8009cbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cc4:	d02b      	beq.n	8009d1e <__lshift+0xbe>
 8009cc6:	f1c9 0e20 	rsb	lr, r9, #32
 8009cca:	468a      	mov	sl, r1
 8009ccc:	2200      	movs	r2, #0
 8009cce:	6818      	ldr	r0, [r3, #0]
 8009cd0:	fa00 f009 	lsl.w	r0, r0, r9
 8009cd4:	4310      	orrs	r0, r2
 8009cd6:	f84a 0b04 	str.w	r0, [sl], #4
 8009cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cde:	459c      	cmp	ip, r3
 8009ce0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ce4:	d8f3      	bhi.n	8009cce <__lshift+0x6e>
 8009ce6:	ebac 0304 	sub.w	r3, ip, r4
 8009cea:	3b15      	subs	r3, #21
 8009cec:	f023 0303 	bic.w	r3, r3, #3
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	f104 0015 	add.w	r0, r4, #21
 8009cf6:	4584      	cmp	ip, r0
 8009cf8:	bf38      	it	cc
 8009cfa:	2304      	movcc	r3, #4
 8009cfc:	50ca      	str	r2, [r1, r3]
 8009cfe:	b10a      	cbz	r2, 8009d04 <__lshift+0xa4>
 8009d00:	f108 0602 	add.w	r6, r8, #2
 8009d04:	3e01      	subs	r6, #1
 8009d06:	4638      	mov	r0, r7
 8009d08:	612e      	str	r6, [r5, #16]
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	f7ff fd90 	bl	8009830 <_Bfree>
 8009d10:	4628      	mov	r0, r5
 8009d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d16:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	e7c5      	b.n	8009caa <__lshift+0x4a>
 8009d1e:	3904      	subs	r1, #4
 8009d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d24:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d28:	459c      	cmp	ip, r3
 8009d2a:	d8f9      	bhi.n	8009d20 <__lshift+0xc0>
 8009d2c:	e7ea      	b.n	8009d04 <__lshift+0xa4>
 8009d2e:	bf00      	nop
 8009d30:	0800cb4d 	.word	0x0800cb4d
 8009d34:	0800cb5e 	.word	0x0800cb5e

08009d38 <__mcmp>:
 8009d38:	690a      	ldr	r2, [r1, #16]
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	6900      	ldr	r0, [r0, #16]
 8009d3e:	1a80      	subs	r0, r0, r2
 8009d40:	b530      	push	{r4, r5, lr}
 8009d42:	d10e      	bne.n	8009d62 <__mcmp+0x2a>
 8009d44:	3314      	adds	r3, #20
 8009d46:	3114      	adds	r1, #20
 8009d48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d58:	4295      	cmp	r5, r2
 8009d5a:	d003      	beq.n	8009d64 <__mcmp+0x2c>
 8009d5c:	d205      	bcs.n	8009d6a <__mcmp+0x32>
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	bd30      	pop	{r4, r5, pc}
 8009d64:	42a3      	cmp	r3, r4
 8009d66:	d3f3      	bcc.n	8009d50 <__mcmp+0x18>
 8009d68:	e7fb      	b.n	8009d62 <__mcmp+0x2a>
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	e7f9      	b.n	8009d62 <__mcmp+0x2a>
	...

08009d70 <__mdiff>:
 8009d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	4689      	mov	r9, r1
 8009d76:	4606      	mov	r6, r0
 8009d78:	4611      	mov	r1, r2
 8009d7a:	4648      	mov	r0, r9
 8009d7c:	4614      	mov	r4, r2
 8009d7e:	f7ff ffdb 	bl	8009d38 <__mcmp>
 8009d82:	1e05      	subs	r5, r0, #0
 8009d84:	d112      	bne.n	8009dac <__mdiff+0x3c>
 8009d86:	4629      	mov	r1, r5
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7ff fd11 	bl	80097b0 <_Balloc>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	b928      	cbnz	r0, 8009d9e <__mdiff+0x2e>
 8009d92:	4b3f      	ldr	r3, [pc, #252]	@ (8009e90 <__mdiff+0x120>)
 8009d94:	f240 2137 	movw	r1, #567	@ 0x237
 8009d98:	483e      	ldr	r0, [pc, #248]	@ (8009e94 <__mdiff+0x124>)
 8009d9a:	f001 fa95 	bl	800b2c8 <__assert_func>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009da4:	4610      	mov	r0, r2
 8009da6:	b003      	add	sp, #12
 8009da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dac:	bfbc      	itt	lt
 8009dae:	464b      	movlt	r3, r9
 8009db0:	46a1      	movlt	r9, r4
 8009db2:	4630      	mov	r0, r6
 8009db4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009db8:	bfba      	itte	lt
 8009dba:	461c      	movlt	r4, r3
 8009dbc:	2501      	movlt	r5, #1
 8009dbe:	2500      	movge	r5, #0
 8009dc0:	f7ff fcf6 	bl	80097b0 <_Balloc>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	b918      	cbnz	r0, 8009dd0 <__mdiff+0x60>
 8009dc8:	4b31      	ldr	r3, [pc, #196]	@ (8009e90 <__mdiff+0x120>)
 8009dca:	f240 2145 	movw	r1, #581	@ 0x245
 8009dce:	e7e3      	b.n	8009d98 <__mdiff+0x28>
 8009dd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009dd4:	6926      	ldr	r6, [r4, #16]
 8009dd6:	60c5      	str	r5, [r0, #12]
 8009dd8:	f109 0310 	add.w	r3, r9, #16
 8009ddc:	f109 0514 	add.w	r5, r9, #20
 8009de0:	f104 0e14 	add.w	lr, r4, #20
 8009de4:	f100 0b14 	add.w	fp, r0, #20
 8009de8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009dec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	46d9      	mov	r9, fp
 8009df4:	f04f 0c00 	mov.w	ip, #0
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009dfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	fa1f f38a 	uxth.w	r3, sl
 8009e08:	4619      	mov	r1, r3
 8009e0a:	b283      	uxth	r3, r0
 8009e0c:	1acb      	subs	r3, r1, r3
 8009e0e:	0c00      	lsrs	r0, r0, #16
 8009e10:	4463      	add	r3, ip
 8009e12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e20:	4576      	cmp	r6, lr
 8009e22:	f849 3b04 	str.w	r3, [r9], #4
 8009e26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e2a:	d8e5      	bhi.n	8009df8 <__mdiff+0x88>
 8009e2c:	1b33      	subs	r3, r6, r4
 8009e2e:	3b15      	subs	r3, #21
 8009e30:	f023 0303 	bic.w	r3, r3, #3
 8009e34:	3415      	adds	r4, #21
 8009e36:	3304      	adds	r3, #4
 8009e38:	42a6      	cmp	r6, r4
 8009e3a:	bf38      	it	cc
 8009e3c:	2304      	movcc	r3, #4
 8009e3e:	441d      	add	r5, r3
 8009e40:	445b      	add	r3, fp
 8009e42:	461e      	mov	r6, r3
 8009e44:	462c      	mov	r4, r5
 8009e46:	4544      	cmp	r4, r8
 8009e48:	d30e      	bcc.n	8009e68 <__mdiff+0xf8>
 8009e4a:	f108 0103 	add.w	r1, r8, #3
 8009e4e:	1b49      	subs	r1, r1, r5
 8009e50:	f021 0103 	bic.w	r1, r1, #3
 8009e54:	3d03      	subs	r5, #3
 8009e56:	45a8      	cmp	r8, r5
 8009e58:	bf38      	it	cc
 8009e5a:	2100      	movcc	r1, #0
 8009e5c:	440b      	add	r3, r1
 8009e5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e62:	b191      	cbz	r1, 8009e8a <__mdiff+0x11a>
 8009e64:	6117      	str	r7, [r2, #16]
 8009e66:	e79d      	b.n	8009da4 <__mdiff+0x34>
 8009e68:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e6c:	46e6      	mov	lr, ip
 8009e6e:	0c08      	lsrs	r0, r1, #16
 8009e70:	fa1c fc81 	uxtah	ip, ip, r1
 8009e74:	4471      	add	r1, lr
 8009e76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e7a:	b289      	uxth	r1, r1
 8009e7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e80:	f846 1b04 	str.w	r1, [r6], #4
 8009e84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e88:	e7dd      	b.n	8009e46 <__mdiff+0xd6>
 8009e8a:	3f01      	subs	r7, #1
 8009e8c:	e7e7      	b.n	8009e5e <__mdiff+0xee>
 8009e8e:	bf00      	nop
 8009e90:	0800cb4d 	.word	0x0800cb4d
 8009e94:	0800cb5e 	.word	0x0800cb5e

08009e98 <__ulp>:
 8009e98:	b082      	sub	sp, #8
 8009e9a:	ed8d 0b00 	vstr	d0, [sp]
 8009e9e:	9a01      	ldr	r2, [sp, #4]
 8009ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee0 <__ulp+0x48>)
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dc08      	bgt.n	8009ebe <__ulp+0x26>
 8009eac:	425b      	negs	r3, r3
 8009eae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009eb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009eb6:	da04      	bge.n	8009ec2 <__ulp+0x2a>
 8009eb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ebc:	4113      	asrs	r3, r2
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	e008      	b.n	8009ed4 <__ulp+0x3c>
 8009ec2:	f1a2 0314 	sub.w	r3, r2, #20
 8009ec6:	2b1e      	cmp	r3, #30
 8009ec8:	bfda      	itte	le
 8009eca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009ece:	40da      	lsrle	r2, r3
 8009ed0:	2201      	movgt	r2, #1
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	ec41 0b10 	vmov	d0, r0, r1
 8009edc:	b002      	add	sp, #8
 8009ede:	4770      	bx	lr
 8009ee0:	7ff00000 	.word	0x7ff00000

08009ee4 <__b2d>:
 8009ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee8:	6906      	ldr	r6, [r0, #16]
 8009eea:	f100 0814 	add.w	r8, r0, #20
 8009eee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009ef2:	1f37      	subs	r7, r6, #4
 8009ef4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7ff fd4b 	bl	8009994 <__hi0bits>
 8009efe:	f1c0 0320 	rsb	r3, r0, #32
 8009f02:	280a      	cmp	r0, #10
 8009f04:	600b      	str	r3, [r1, #0]
 8009f06:	491b      	ldr	r1, [pc, #108]	@ (8009f74 <__b2d+0x90>)
 8009f08:	dc15      	bgt.n	8009f36 <__b2d+0x52>
 8009f0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f12:	45b8      	cmp	r8, r7
 8009f14:	ea43 0501 	orr.w	r5, r3, r1
 8009f18:	bf34      	ite	cc
 8009f1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f1e:	2300      	movcs	r3, #0
 8009f20:	3015      	adds	r0, #21
 8009f22:	fa02 f000 	lsl.w	r0, r2, r0
 8009f26:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f2a:	4303      	orrs	r3, r0
 8009f2c:	461c      	mov	r4, r3
 8009f2e:	ec45 4b10 	vmov	d0, r4, r5
 8009f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f36:	45b8      	cmp	r8, r7
 8009f38:	bf3a      	itte	cc
 8009f3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009f42:	2300      	movcs	r3, #0
 8009f44:	380b      	subs	r0, #11
 8009f46:	d012      	beq.n	8009f6e <__b2d+0x8a>
 8009f48:	f1c0 0120 	rsb	r1, r0, #32
 8009f4c:	fa23 f401 	lsr.w	r4, r3, r1
 8009f50:	4082      	lsls	r2, r0
 8009f52:	4322      	orrs	r2, r4
 8009f54:	4547      	cmp	r7, r8
 8009f56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009f5a:	bf8c      	ite	hi
 8009f5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f60:	2200      	movls	r2, #0
 8009f62:	4083      	lsls	r3, r0
 8009f64:	40ca      	lsrs	r2, r1
 8009f66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	e7de      	b.n	8009f2c <__b2d+0x48>
 8009f6e:	ea42 0501 	orr.w	r5, r2, r1
 8009f72:	e7db      	b.n	8009f2c <__b2d+0x48>
 8009f74:	3ff00000 	.word	0x3ff00000

08009f78 <__d2b>:
 8009f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	2101      	movs	r1, #1
 8009f80:	ec59 8b10 	vmov	r8, r9, d0
 8009f84:	4616      	mov	r6, r2
 8009f86:	f7ff fc13 	bl	80097b0 <_Balloc>
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	b930      	cbnz	r0, 8009f9c <__d2b+0x24>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	4b23      	ldr	r3, [pc, #140]	@ (800a020 <__d2b+0xa8>)
 8009f92:	4824      	ldr	r0, [pc, #144]	@ (800a024 <__d2b+0xac>)
 8009f94:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f98:	f001 f996 	bl	800b2c8 <__assert_func>
 8009f9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fa4:	b10d      	cbz	r5, 8009faa <__d2b+0x32>
 8009fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	f1b8 0300 	subs.w	r3, r8, #0
 8009fb0:	d023      	beq.n	8009ffa <__d2b+0x82>
 8009fb2:	4668      	mov	r0, sp
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	f7ff fd0c 	bl	80099d2 <__lo0bits>
 8009fba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fbe:	b1d0      	cbz	r0, 8009ff6 <__d2b+0x7e>
 8009fc0:	f1c0 0320 	rsb	r3, r0, #32
 8009fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc8:	430b      	orrs	r3, r1
 8009fca:	40c2      	lsrs	r2, r0
 8009fcc:	6163      	str	r3, [r4, #20]
 8009fce:	9201      	str	r2, [sp, #4]
 8009fd0:	9b01      	ldr	r3, [sp, #4]
 8009fd2:	61a3      	str	r3, [r4, #24]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	bf0c      	ite	eq
 8009fd8:	2201      	moveq	r2, #1
 8009fda:	2202      	movne	r2, #2
 8009fdc:	6122      	str	r2, [r4, #16]
 8009fde:	b1a5      	cbz	r5, 800a00a <__d2b+0x92>
 8009fe0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009fe4:	4405      	add	r5, r0
 8009fe6:	603d      	str	r5, [r7, #0]
 8009fe8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009fec:	6030      	str	r0, [r6, #0]
 8009fee:	4620      	mov	r0, r4
 8009ff0:	b003      	add	sp, #12
 8009ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ff6:	6161      	str	r1, [r4, #20]
 8009ff8:	e7ea      	b.n	8009fd0 <__d2b+0x58>
 8009ffa:	a801      	add	r0, sp, #4
 8009ffc:	f7ff fce9 	bl	80099d2 <__lo0bits>
 800a000:	9b01      	ldr	r3, [sp, #4]
 800a002:	6163      	str	r3, [r4, #20]
 800a004:	3020      	adds	r0, #32
 800a006:	2201      	movs	r2, #1
 800a008:	e7e8      	b.n	8009fdc <__d2b+0x64>
 800a00a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a00e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a012:	6038      	str	r0, [r7, #0]
 800a014:	6918      	ldr	r0, [r3, #16]
 800a016:	f7ff fcbd 	bl	8009994 <__hi0bits>
 800a01a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a01e:	e7e5      	b.n	8009fec <__d2b+0x74>
 800a020:	0800cb4d 	.word	0x0800cb4d
 800a024:	0800cb5e 	.word	0x0800cb5e

0800a028 <__ratio>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	b085      	sub	sp, #20
 800a02e:	e9cd 1000 	strd	r1, r0, [sp]
 800a032:	a902      	add	r1, sp, #8
 800a034:	f7ff ff56 	bl	8009ee4 <__b2d>
 800a038:	9800      	ldr	r0, [sp, #0]
 800a03a:	a903      	add	r1, sp, #12
 800a03c:	ec55 4b10 	vmov	r4, r5, d0
 800a040:	f7ff ff50 	bl	8009ee4 <__b2d>
 800a044:	9b01      	ldr	r3, [sp, #4]
 800a046:	6919      	ldr	r1, [r3, #16]
 800a048:	9b00      	ldr	r3, [sp, #0]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	1ac9      	subs	r1, r1, r3
 800a04e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a052:	1a9b      	subs	r3, r3, r2
 800a054:	ec5b ab10 	vmov	sl, fp, d0
 800a058:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bfce      	itee	gt
 800a060:	462a      	movgt	r2, r5
 800a062:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a066:	465a      	movle	r2, fp
 800a068:	462f      	mov	r7, r5
 800a06a:	46d9      	mov	r9, fp
 800a06c:	bfcc      	ite	gt
 800a06e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a072:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a076:	464b      	mov	r3, r9
 800a078:	4652      	mov	r2, sl
 800a07a:	4620      	mov	r0, r4
 800a07c:	4639      	mov	r1, r7
 800a07e:	f7f6 fbe5 	bl	800084c <__aeabi_ddiv>
 800a082:	ec41 0b10 	vmov	d0, r0, r1
 800a086:	b005      	add	sp, #20
 800a088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a08c <__copybits>:
 800a08c:	3901      	subs	r1, #1
 800a08e:	b570      	push	{r4, r5, r6, lr}
 800a090:	1149      	asrs	r1, r1, #5
 800a092:	6914      	ldr	r4, [r2, #16]
 800a094:	3101      	adds	r1, #1
 800a096:	f102 0314 	add.w	r3, r2, #20
 800a09a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a09e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a0a2:	1f05      	subs	r5, r0, #4
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	d30c      	bcc.n	800a0c2 <__copybits+0x36>
 800a0a8:	1aa3      	subs	r3, r4, r2
 800a0aa:	3b11      	subs	r3, #17
 800a0ac:	f023 0303 	bic.w	r3, r3, #3
 800a0b0:	3211      	adds	r2, #17
 800a0b2:	42a2      	cmp	r2, r4
 800a0b4:	bf88      	it	hi
 800a0b6:	2300      	movhi	r3, #0
 800a0b8:	4418      	add	r0, r3
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	4288      	cmp	r0, r1
 800a0be:	d305      	bcc.n	800a0cc <__copybits+0x40>
 800a0c0:	bd70      	pop	{r4, r5, r6, pc}
 800a0c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a0c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a0ca:	e7eb      	b.n	800a0a4 <__copybits+0x18>
 800a0cc:	f840 3b04 	str.w	r3, [r0], #4
 800a0d0:	e7f4      	b.n	800a0bc <__copybits+0x30>

0800a0d2 <__any_on>:
 800a0d2:	f100 0214 	add.w	r2, r0, #20
 800a0d6:	6900      	ldr	r0, [r0, #16]
 800a0d8:	114b      	asrs	r3, r1, #5
 800a0da:	4298      	cmp	r0, r3
 800a0dc:	b510      	push	{r4, lr}
 800a0de:	db11      	blt.n	800a104 <__any_on+0x32>
 800a0e0:	dd0a      	ble.n	800a0f8 <__any_on+0x26>
 800a0e2:	f011 011f 	ands.w	r1, r1, #31
 800a0e6:	d007      	beq.n	800a0f8 <__any_on+0x26>
 800a0e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0ec:	fa24 f001 	lsr.w	r0, r4, r1
 800a0f0:	fa00 f101 	lsl.w	r1, r0, r1
 800a0f4:	428c      	cmp	r4, r1
 800a0f6:	d10b      	bne.n	800a110 <__any_on+0x3e>
 800a0f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d803      	bhi.n	800a108 <__any_on+0x36>
 800a100:	2000      	movs	r0, #0
 800a102:	bd10      	pop	{r4, pc}
 800a104:	4603      	mov	r3, r0
 800a106:	e7f7      	b.n	800a0f8 <__any_on+0x26>
 800a108:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a10c:	2900      	cmp	r1, #0
 800a10e:	d0f5      	beq.n	800a0fc <__any_on+0x2a>
 800a110:	2001      	movs	r0, #1
 800a112:	e7f6      	b.n	800a102 <__any_on+0x30>

0800a114 <sulp>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	4604      	mov	r4, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	ec45 4b10 	vmov	d0, r4, r5
 800a11e:	4616      	mov	r6, r2
 800a120:	f7ff feba 	bl	8009e98 <__ulp>
 800a124:	ec51 0b10 	vmov	r0, r1, d0
 800a128:	b17e      	cbz	r6, 800a14a <sulp+0x36>
 800a12a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a12e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a132:	2b00      	cmp	r3, #0
 800a134:	dd09      	ble.n	800a14a <sulp+0x36>
 800a136:	051b      	lsls	r3, r3, #20
 800a138:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a13c:	2400      	movs	r4, #0
 800a13e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a142:	4622      	mov	r2, r4
 800a144:	462b      	mov	r3, r5
 800a146:	f7f6 fa57 	bl	80005f8 <__aeabi_dmul>
 800a14a:	ec41 0b10 	vmov	d0, r0, r1
 800a14e:	bd70      	pop	{r4, r5, r6, pc}

0800a150 <_strtod_l>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	b09f      	sub	sp, #124	@ 0x7c
 800a156:	460c      	mov	r4, r1
 800a158:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a15a:	2200      	movs	r2, #0
 800a15c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a15e:	9005      	str	r0, [sp, #20]
 800a160:	f04f 0a00 	mov.w	sl, #0
 800a164:	f04f 0b00 	mov.w	fp, #0
 800a168:	460a      	mov	r2, r1
 800a16a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a16c:	7811      	ldrb	r1, [r2, #0]
 800a16e:	292b      	cmp	r1, #43	@ 0x2b
 800a170:	d04a      	beq.n	800a208 <_strtod_l+0xb8>
 800a172:	d838      	bhi.n	800a1e6 <_strtod_l+0x96>
 800a174:	290d      	cmp	r1, #13
 800a176:	d832      	bhi.n	800a1de <_strtod_l+0x8e>
 800a178:	2908      	cmp	r1, #8
 800a17a:	d832      	bhi.n	800a1e2 <_strtod_l+0x92>
 800a17c:	2900      	cmp	r1, #0
 800a17e:	d03b      	beq.n	800a1f8 <_strtod_l+0xa8>
 800a180:	2200      	movs	r2, #0
 800a182:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a184:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a186:	782a      	ldrb	r2, [r5, #0]
 800a188:	2a30      	cmp	r2, #48	@ 0x30
 800a18a:	f040 80b3 	bne.w	800a2f4 <_strtod_l+0x1a4>
 800a18e:	786a      	ldrb	r2, [r5, #1]
 800a190:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a194:	2a58      	cmp	r2, #88	@ 0x58
 800a196:	d16e      	bne.n	800a276 <_strtod_l+0x126>
 800a198:	9302      	str	r3, [sp, #8]
 800a19a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	4a8e      	ldr	r2, [pc, #568]	@ (800a3dc <_strtod_l+0x28c>)
 800a1a4:	9805      	ldr	r0, [sp, #20]
 800a1a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a1a8:	a919      	add	r1, sp, #100	@ 0x64
 800a1aa:	f001 f927 	bl	800b3fc <__gethex>
 800a1ae:	f010 060f 	ands.w	r6, r0, #15
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	d005      	beq.n	800a1c2 <_strtod_l+0x72>
 800a1b6:	2e06      	cmp	r6, #6
 800a1b8:	d128      	bne.n	800a20c <_strtod_l+0xbc>
 800a1ba:	3501      	adds	r5, #1
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9519      	str	r5, [sp, #100]	@ 0x64
 800a1c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f040 858e 	bne.w	800ace6 <_strtod_l+0xb96>
 800a1ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1cc:	b1cb      	cbz	r3, 800a202 <_strtod_l+0xb2>
 800a1ce:	4652      	mov	r2, sl
 800a1d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a1d4:	ec43 2b10 	vmov	d0, r2, r3
 800a1d8:	b01f      	add	sp, #124	@ 0x7c
 800a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1de:	2920      	cmp	r1, #32
 800a1e0:	d1ce      	bne.n	800a180 <_strtod_l+0x30>
 800a1e2:	3201      	adds	r2, #1
 800a1e4:	e7c1      	b.n	800a16a <_strtod_l+0x1a>
 800a1e6:	292d      	cmp	r1, #45	@ 0x2d
 800a1e8:	d1ca      	bne.n	800a180 <_strtod_l+0x30>
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a1ee:	1c51      	adds	r1, r2, #1
 800a1f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1f2:	7852      	ldrb	r2, [r2, #1]
 800a1f4:	2a00      	cmp	r2, #0
 800a1f6:	d1c5      	bne.n	800a184 <_strtod_l+0x34>
 800a1f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f040 8570 	bne.w	800ace2 <_strtod_l+0xb92>
 800a202:	4652      	mov	r2, sl
 800a204:	465b      	mov	r3, fp
 800a206:	e7e5      	b.n	800a1d4 <_strtod_l+0x84>
 800a208:	2100      	movs	r1, #0
 800a20a:	e7ef      	b.n	800a1ec <_strtod_l+0x9c>
 800a20c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a20e:	b13a      	cbz	r2, 800a220 <_strtod_l+0xd0>
 800a210:	2135      	movs	r1, #53	@ 0x35
 800a212:	a81c      	add	r0, sp, #112	@ 0x70
 800a214:	f7ff ff3a 	bl	800a08c <__copybits>
 800a218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a21a:	9805      	ldr	r0, [sp, #20]
 800a21c:	f7ff fb08 	bl	8009830 <_Bfree>
 800a220:	3e01      	subs	r6, #1
 800a222:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a224:	2e04      	cmp	r6, #4
 800a226:	d806      	bhi.n	800a236 <_strtod_l+0xe6>
 800a228:	e8df f006 	tbb	[pc, r6]
 800a22c:	201d0314 	.word	0x201d0314
 800a230:	14          	.byte	0x14
 800a231:	00          	.byte	0x00
 800a232:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a236:	05e1      	lsls	r1, r4, #23
 800a238:	bf48      	it	mi
 800a23a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a23e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a242:	0d1b      	lsrs	r3, r3, #20
 800a244:	051b      	lsls	r3, r3, #20
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1bb      	bne.n	800a1c2 <_strtod_l+0x72>
 800a24a:	f7fe fb2f 	bl	80088ac <__errno>
 800a24e:	2322      	movs	r3, #34	@ 0x22
 800a250:	6003      	str	r3, [r0, #0]
 800a252:	e7b6      	b.n	800a1c2 <_strtod_l+0x72>
 800a254:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a258:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a25c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a260:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a264:	e7e7      	b.n	800a236 <_strtod_l+0xe6>
 800a266:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a3e4 <_strtod_l+0x294>
 800a26a:	e7e4      	b.n	800a236 <_strtod_l+0xe6>
 800a26c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a270:	f04f 3aff 	mov.w	sl, #4294967295
 800a274:	e7df      	b.n	800a236 <_strtod_l+0xe6>
 800a276:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	2b30      	cmp	r3, #48	@ 0x30
 800a280:	d0f9      	beq.n	800a276 <_strtod_l+0x126>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d09d      	beq.n	800a1c2 <_strtod_l+0x72>
 800a286:	2301      	movs	r3, #1
 800a288:	9309      	str	r3, [sp, #36]	@ 0x24
 800a28a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a28c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a28e:	2300      	movs	r3, #0
 800a290:	9308      	str	r3, [sp, #32]
 800a292:	930a      	str	r3, [sp, #40]	@ 0x28
 800a294:	461f      	mov	r7, r3
 800a296:	220a      	movs	r2, #10
 800a298:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a29a:	7805      	ldrb	r5, [r0, #0]
 800a29c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a2a0:	b2d9      	uxtb	r1, r3
 800a2a2:	2909      	cmp	r1, #9
 800a2a4:	d928      	bls.n	800a2f8 <_strtod_l+0x1a8>
 800a2a6:	494e      	ldr	r1, [pc, #312]	@ (800a3e0 <_strtod_l+0x290>)
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f000 ffd5 	bl	800b258 <strncmp>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d032      	beq.n	800a318 <_strtod_l+0x1c8>
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	462a      	mov	r2, r5
 800a2b6:	4681      	mov	r9, r0
 800a2b8:	463d      	mov	r5, r7
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2a65      	cmp	r2, #101	@ 0x65
 800a2be:	d001      	beq.n	800a2c4 <_strtod_l+0x174>
 800a2c0:	2a45      	cmp	r2, #69	@ 0x45
 800a2c2:	d114      	bne.n	800a2ee <_strtod_l+0x19e>
 800a2c4:	b91d      	cbnz	r5, 800a2ce <_strtod_l+0x17e>
 800a2c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2c8:	4302      	orrs	r2, r0
 800a2ca:	d095      	beq.n	800a1f8 <_strtod_l+0xa8>
 800a2cc:	2500      	movs	r5, #0
 800a2ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a2d0:	1c62      	adds	r2, r4, #1
 800a2d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2d4:	7862      	ldrb	r2, [r4, #1]
 800a2d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800a2d8:	d077      	beq.n	800a3ca <_strtod_l+0x27a>
 800a2da:	2a2d      	cmp	r2, #45	@ 0x2d
 800a2dc:	d07b      	beq.n	800a3d6 <_strtod_l+0x286>
 800a2de:	f04f 0c00 	mov.w	ip, #0
 800a2e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a2e6:	2909      	cmp	r1, #9
 800a2e8:	f240 8082 	bls.w	800a3f0 <_strtod_l+0x2a0>
 800a2ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800a2ee:	f04f 0800 	mov.w	r8, #0
 800a2f2:	e0a2      	b.n	800a43a <_strtod_l+0x2ea>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	e7c7      	b.n	800a288 <_strtod_l+0x138>
 800a2f8:	2f08      	cmp	r7, #8
 800a2fa:	bfd5      	itete	le
 800a2fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a2fe:	9908      	ldrgt	r1, [sp, #32]
 800a300:	fb02 3301 	mlale	r3, r2, r1, r3
 800a304:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a308:	f100 0001 	add.w	r0, r0, #1
 800a30c:	bfd4      	ite	le
 800a30e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a310:	9308      	strgt	r3, [sp, #32]
 800a312:	3701      	adds	r7, #1
 800a314:	9019      	str	r0, [sp, #100]	@ 0x64
 800a316:	e7bf      	b.n	800a298 <_strtod_l+0x148>
 800a318:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a31e:	785a      	ldrb	r2, [r3, #1]
 800a320:	b37f      	cbz	r7, 800a382 <_strtod_l+0x232>
 800a322:	4681      	mov	r9, r0
 800a324:	463d      	mov	r5, r7
 800a326:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a32a:	2b09      	cmp	r3, #9
 800a32c:	d912      	bls.n	800a354 <_strtod_l+0x204>
 800a32e:	2301      	movs	r3, #1
 800a330:	e7c4      	b.n	800a2bc <_strtod_l+0x16c>
 800a332:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	9219      	str	r2, [sp, #100]	@ 0x64
 800a338:	785a      	ldrb	r2, [r3, #1]
 800a33a:	3001      	adds	r0, #1
 800a33c:	2a30      	cmp	r2, #48	@ 0x30
 800a33e:	d0f8      	beq.n	800a332 <_strtod_l+0x1e2>
 800a340:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a344:	2b08      	cmp	r3, #8
 800a346:	f200 84d3 	bhi.w	800acf0 <_strtod_l+0xba0>
 800a34a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a34c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a34e:	4681      	mov	r9, r0
 800a350:	2000      	movs	r0, #0
 800a352:	4605      	mov	r5, r0
 800a354:	3a30      	subs	r2, #48	@ 0x30
 800a356:	f100 0301 	add.w	r3, r0, #1
 800a35a:	d02a      	beq.n	800a3b2 <_strtod_l+0x262>
 800a35c:	4499      	add	r9, r3
 800a35e:	eb00 0c05 	add.w	ip, r0, r5
 800a362:	462b      	mov	r3, r5
 800a364:	210a      	movs	r1, #10
 800a366:	4563      	cmp	r3, ip
 800a368:	d10d      	bne.n	800a386 <_strtod_l+0x236>
 800a36a:	1c69      	adds	r1, r5, #1
 800a36c:	4401      	add	r1, r0
 800a36e:	4428      	add	r0, r5
 800a370:	2808      	cmp	r0, #8
 800a372:	dc16      	bgt.n	800a3a2 <_strtod_l+0x252>
 800a374:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a376:	230a      	movs	r3, #10
 800a378:	fb03 2300 	mla	r3, r3, r0, r2
 800a37c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a37e:	2300      	movs	r3, #0
 800a380:	e018      	b.n	800a3b4 <_strtod_l+0x264>
 800a382:	4638      	mov	r0, r7
 800a384:	e7da      	b.n	800a33c <_strtod_l+0x1ec>
 800a386:	2b08      	cmp	r3, #8
 800a388:	f103 0301 	add.w	r3, r3, #1
 800a38c:	dc03      	bgt.n	800a396 <_strtod_l+0x246>
 800a38e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a390:	434e      	muls	r6, r1
 800a392:	960a      	str	r6, [sp, #40]	@ 0x28
 800a394:	e7e7      	b.n	800a366 <_strtod_l+0x216>
 800a396:	2b10      	cmp	r3, #16
 800a398:	bfde      	ittt	le
 800a39a:	9e08      	ldrle	r6, [sp, #32]
 800a39c:	434e      	mulle	r6, r1
 800a39e:	9608      	strle	r6, [sp, #32]
 800a3a0:	e7e1      	b.n	800a366 <_strtod_l+0x216>
 800a3a2:	280f      	cmp	r0, #15
 800a3a4:	dceb      	bgt.n	800a37e <_strtod_l+0x22e>
 800a3a6:	9808      	ldr	r0, [sp, #32]
 800a3a8:	230a      	movs	r3, #10
 800a3aa:	fb03 2300 	mla	r3, r3, r0, r2
 800a3ae:	9308      	str	r3, [sp, #32]
 800a3b0:	e7e5      	b.n	800a37e <_strtod_l+0x22e>
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3b6:	1c50      	adds	r0, r2, #1
 800a3b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a3ba:	7852      	ldrb	r2, [r2, #1]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	460d      	mov	r5, r1
 800a3c0:	e7b1      	b.n	800a326 <_strtod_l+0x1d6>
 800a3c2:	f04f 0900 	mov.w	r9, #0
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e77d      	b.n	800a2c6 <_strtod_l+0x176>
 800a3ca:	f04f 0c00 	mov.w	ip, #0
 800a3ce:	1ca2      	adds	r2, r4, #2
 800a3d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3d2:	78a2      	ldrb	r2, [r4, #2]
 800a3d4:	e785      	b.n	800a2e2 <_strtod_l+0x192>
 800a3d6:	f04f 0c01 	mov.w	ip, #1
 800a3da:	e7f8      	b.n	800a3ce <_strtod_l+0x27e>
 800a3dc:	0800ccd0 	.word	0x0800ccd0
 800a3e0:	0800ccb8 	.word	0x0800ccb8
 800a3e4:	7ff00000 	.word	0x7ff00000
 800a3e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3ea:	1c51      	adds	r1, r2, #1
 800a3ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3ee:	7852      	ldrb	r2, [r2, #1]
 800a3f0:	2a30      	cmp	r2, #48	@ 0x30
 800a3f2:	d0f9      	beq.n	800a3e8 <_strtod_l+0x298>
 800a3f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a3f8:	2908      	cmp	r1, #8
 800a3fa:	f63f af78 	bhi.w	800a2ee <_strtod_l+0x19e>
 800a3fe:	3a30      	subs	r2, #48	@ 0x30
 800a400:	920e      	str	r2, [sp, #56]	@ 0x38
 800a402:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a404:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a406:	f04f 080a 	mov.w	r8, #10
 800a40a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a40c:	1c56      	adds	r6, r2, #1
 800a40e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a410:	7852      	ldrb	r2, [r2, #1]
 800a412:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a416:	f1be 0f09 	cmp.w	lr, #9
 800a41a:	d939      	bls.n	800a490 <_strtod_l+0x340>
 800a41c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a41e:	1a76      	subs	r6, r6, r1
 800a420:	2e08      	cmp	r6, #8
 800a422:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a426:	dc03      	bgt.n	800a430 <_strtod_l+0x2e0>
 800a428:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a42a:	4588      	cmp	r8, r1
 800a42c:	bfa8      	it	ge
 800a42e:	4688      	movge	r8, r1
 800a430:	f1bc 0f00 	cmp.w	ip, #0
 800a434:	d001      	beq.n	800a43a <_strtod_l+0x2ea>
 800a436:	f1c8 0800 	rsb	r8, r8, #0
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	d14e      	bne.n	800a4dc <_strtod_l+0x38c>
 800a43e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a440:	4308      	orrs	r0, r1
 800a442:	f47f aebe 	bne.w	800a1c2 <_strtod_l+0x72>
 800a446:	2b00      	cmp	r3, #0
 800a448:	f47f aed6 	bne.w	800a1f8 <_strtod_l+0xa8>
 800a44c:	2a69      	cmp	r2, #105	@ 0x69
 800a44e:	d028      	beq.n	800a4a2 <_strtod_l+0x352>
 800a450:	dc25      	bgt.n	800a49e <_strtod_l+0x34e>
 800a452:	2a49      	cmp	r2, #73	@ 0x49
 800a454:	d025      	beq.n	800a4a2 <_strtod_l+0x352>
 800a456:	2a4e      	cmp	r2, #78	@ 0x4e
 800a458:	f47f aece 	bne.w	800a1f8 <_strtod_l+0xa8>
 800a45c:	499b      	ldr	r1, [pc, #620]	@ (800a6cc <_strtod_l+0x57c>)
 800a45e:	a819      	add	r0, sp, #100	@ 0x64
 800a460:	f001 f9ee 	bl	800b840 <__match>
 800a464:	2800      	cmp	r0, #0
 800a466:	f43f aec7 	beq.w	800a1f8 <_strtod_l+0xa8>
 800a46a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	2b28      	cmp	r3, #40	@ 0x28
 800a470:	d12e      	bne.n	800a4d0 <_strtod_l+0x380>
 800a472:	4997      	ldr	r1, [pc, #604]	@ (800a6d0 <_strtod_l+0x580>)
 800a474:	aa1c      	add	r2, sp, #112	@ 0x70
 800a476:	a819      	add	r0, sp, #100	@ 0x64
 800a478:	f001 f9f6 	bl	800b868 <__hexnan>
 800a47c:	2805      	cmp	r0, #5
 800a47e:	d127      	bne.n	800a4d0 <_strtod_l+0x380>
 800a480:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a482:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a486:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a48a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a48e:	e698      	b.n	800a1c2 <_strtod_l+0x72>
 800a490:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a492:	fb08 2101 	mla	r1, r8, r1, r2
 800a496:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a49a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a49c:	e7b5      	b.n	800a40a <_strtod_l+0x2ba>
 800a49e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a4a0:	e7da      	b.n	800a458 <_strtod_l+0x308>
 800a4a2:	498c      	ldr	r1, [pc, #560]	@ (800a6d4 <_strtod_l+0x584>)
 800a4a4:	a819      	add	r0, sp, #100	@ 0x64
 800a4a6:	f001 f9cb 	bl	800b840 <__match>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	f43f aea4 	beq.w	800a1f8 <_strtod_l+0xa8>
 800a4b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4b2:	4989      	ldr	r1, [pc, #548]	@ (800a6d8 <_strtod_l+0x588>)
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	a819      	add	r0, sp, #100	@ 0x64
 800a4b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4ba:	f001 f9c1 	bl	800b840 <__match>
 800a4be:	b910      	cbnz	r0, 800a4c6 <_strtod_l+0x376>
 800a4c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a6e8 <_strtod_l+0x598>
 800a4ca:	f04f 0a00 	mov.w	sl, #0
 800a4ce:	e678      	b.n	800a1c2 <_strtod_l+0x72>
 800a4d0:	4882      	ldr	r0, [pc, #520]	@ (800a6dc <_strtod_l+0x58c>)
 800a4d2:	f000 fef1 	bl	800b2b8 <nan>
 800a4d6:	ec5b ab10 	vmov	sl, fp, d0
 800a4da:	e672      	b.n	800a1c2 <_strtod_l+0x72>
 800a4dc:	eba8 0309 	sub.w	r3, r8, r9
 800a4e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e4:	2f00      	cmp	r7, #0
 800a4e6:	bf08      	it	eq
 800a4e8:	462f      	moveq	r7, r5
 800a4ea:	2d10      	cmp	r5, #16
 800a4ec:	462c      	mov	r4, r5
 800a4ee:	bfa8      	it	ge
 800a4f0:	2410      	movge	r4, #16
 800a4f2:	f7f6 f807 	bl	8000504 <__aeabi_ui2d>
 800a4f6:	2d09      	cmp	r5, #9
 800a4f8:	4682      	mov	sl, r0
 800a4fa:	468b      	mov	fp, r1
 800a4fc:	dc13      	bgt.n	800a526 <_strtod_l+0x3d6>
 800a4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a500:	2b00      	cmp	r3, #0
 800a502:	f43f ae5e 	beq.w	800a1c2 <_strtod_l+0x72>
 800a506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a508:	dd78      	ble.n	800a5fc <_strtod_l+0x4ac>
 800a50a:	2b16      	cmp	r3, #22
 800a50c:	dc5f      	bgt.n	800a5ce <_strtod_l+0x47e>
 800a50e:	4974      	ldr	r1, [pc, #464]	@ (800a6e0 <_strtod_l+0x590>)
 800a510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a518:	4652      	mov	r2, sl
 800a51a:	465b      	mov	r3, fp
 800a51c:	f7f6 f86c 	bl	80005f8 <__aeabi_dmul>
 800a520:	4682      	mov	sl, r0
 800a522:	468b      	mov	fp, r1
 800a524:	e64d      	b.n	800a1c2 <_strtod_l+0x72>
 800a526:	4b6e      	ldr	r3, [pc, #440]	@ (800a6e0 <_strtod_l+0x590>)
 800a528:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a52c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a530:	f7f6 f862 	bl	80005f8 <__aeabi_dmul>
 800a534:	4682      	mov	sl, r0
 800a536:	9808      	ldr	r0, [sp, #32]
 800a538:	468b      	mov	fp, r1
 800a53a:	f7f5 ffe3 	bl	8000504 <__aeabi_ui2d>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4650      	mov	r0, sl
 800a544:	4659      	mov	r1, fp
 800a546:	f7f5 fea1 	bl	800028c <__adddf3>
 800a54a:	2d0f      	cmp	r5, #15
 800a54c:	4682      	mov	sl, r0
 800a54e:	468b      	mov	fp, r1
 800a550:	ddd5      	ble.n	800a4fe <_strtod_l+0x3ae>
 800a552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a554:	1b2c      	subs	r4, r5, r4
 800a556:	441c      	add	r4, r3
 800a558:	2c00      	cmp	r4, #0
 800a55a:	f340 8096 	ble.w	800a68a <_strtod_l+0x53a>
 800a55e:	f014 030f 	ands.w	r3, r4, #15
 800a562:	d00a      	beq.n	800a57a <_strtod_l+0x42a>
 800a564:	495e      	ldr	r1, [pc, #376]	@ (800a6e0 <_strtod_l+0x590>)
 800a566:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a56a:	4652      	mov	r2, sl
 800a56c:	465b      	mov	r3, fp
 800a56e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a572:	f7f6 f841 	bl	80005f8 <__aeabi_dmul>
 800a576:	4682      	mov	sl, r0
 800a578:	468b      	mov	fp, r1
 800a57a:	f034 040f 	bics.w	r4, r4, #15
 800a57e:	d073      	beq.n	800a668 <_strtod_l+0x518>
 800a580:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a584:	dd48      	ble.n	800a618 <_strtod_l+0x4c8>
 800a586:	2400      	movs	r4, #0
 800a588:	46a0      	mov	r8, r4
 800a58a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a58c:	46a1      	mov	r9, r4
 800a58e:	9a05      	ldr	r2, [sp, #20]
 800a590:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a6e8 <_strtod_l+0x598>
 800a594:	2322      	movs	r3, #34	@ 0x22
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	f04f 0a00 	mov.w	sl, #0
 800a59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f43f ae0f 	beq.w	800a1c2 <_strtod_l+0x72>
 800a5a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5a6:	9805      	ldr	r0, [sp, #20]
 800a5a8:	f7ff f942 	bl	8009830 <_Bfree>
 800a5ac:	9805      	ldr	r0, [sp, #20]
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7ff f93e 	bl	8009830 <_Bfree>
 800a5b4:	9805      	ldr	r0, [sp, #20]
 800a5b6:	4641      	mov	r1, r8
 800a5b8:	f7ff f93a 	bl	8009830 <_Bfree>
 800a5bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5be:	9805      	ldr	r0, [sp, #20]
 800a5c0:	f7ff f936 	bl	8009830 <_Bfree>
 800a5c4:	9805      	ldr	r0, [sp, #20]
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	f7ff f932 	bl	8009830 <_Bfree>
 800a5cc:	e5f9      	b.n	800a1c2 <_strtod_l+0x72>
 800a5ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	dbbc      	blt.n	800a552 <_strtod_l+0x402>
 800a5d8:	4c41      	ldr	r4, [pc, #260]	@ (800a6e0 <_strtod_l+0x590>)
 800a5da:	f1c5 050f 	rsb	r5, r5, #15
 800a5de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a5e2:	4652      	mov	r2, sl
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ea:	f7f6 f805 	bl	80005f8 <__aeabi_dmul>
 800a5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f0:	1b5d      	subs	r5, r3, r5
 800a5f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a5f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5fa:	e78f      	b.n	800a51c <_strtod_l+0x3cc>
 800a5fc:	3316      	adds	r3, #22
 800a5fe:	dba8      	blt.n	800a552 <_strtod_l+0x402>
 800a600:	4b37      	ldr	r3, [pc, #220]	@ (800a6e0 <_strtod_l+0x590>)
 800a602:	eba9 0808 	sub.w	r8, r9, r8
 800a606:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a60a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a60e:	4650      	mov	r0, sl
 800a610:	4659      	mov	r1, fp
 800a612:	f7f6 f91b 	bl	800084c <__aeabi_ddiv>
 800a616:	e783      	b.n	800a520 <_strtod_l+0x3d0>
 800a618:	4b32      	ldr	r3, [pc, #200]	@ (800a6e4 <_strtod_l+0x594>)
 800a61a:	9308      	str	r3, [sp, #32]
 800a61c:	2300      	movs	r3, #0
 800a61e:	1124      	asrs	r4, r4, #4
 800a620:	4650      	mov	r0, sl
 800a622:	4659      	mov	r1, fp
 800a624:	461e      	mov	r6, r3
 800a626:	2c01      	cmp	r4, #1
 800a628:	dc21      	bgt.n	800a66e <_strtod_l+0x51e>
 800a62a:	b10b      	cbz	r3, 800a630 <_strtod_l+0x4e0>
 800a62c:	4682      	mov	sl, r0
 800a62e:	468b      	mov	fp, r1
 800a630:	492c      	ldr	r1, [pc, #176]	@ (800a6e4 <_strtod_l+0x594>)
 800a632:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a636:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a63a:	4652      	mov	r2, sl
 800a63c:	465b      	mov	r3, fp
 800a63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a642:	f7f5 ffd9 	bl	80005f8 <__aeabi_dmul>
 800a646:	4b28      	ldr	r3, [pc, #160]	@ (800a6e8 <_strtod_l+0x598>)
 800a648:	460a      	mov	r2, r1
 800a64a:	400b      	ands	r3, r1
 800a64c:	4927      	ldr	r1, [pc, #156]	@ (800a6ec <_strtod_l+0x59c>)
 800a64e:	428b      	cmp	r3, r1
 800a650:	4682      	mov	sl, r0
 800a652:	d898      	bhi.n	800a586 <_strtod_l+0x436>
 800a654:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a658:	428b      	cmp	r3, r1
 800a65a:	bf86      	itte	hi
 800a65c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a6f0 <_strtod_l+0x5a0>
 800a660:	f04f 3aff 	movhi.w	sl, #4294967295
 800a664:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a668:	2300      	movs	r3, #0
 800a66a:	9308      	str	r3, [sp, #32]
 800a66c:	e07a      	b.n	800a764 <_strtod_l+0x614>
 800a66e:	07e2      	lsls	r2, r4, #31
 800a670:	d505      	bpl.n	800a67e <_strtod_l+0x52e>
 800a672:	9b08      	ldr	r3, [sp, #32]
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 ffbe 	bl	80005f8 <__aeabi_dmul>
 800a67c:	2301      	movs	r3, #1
 800a67e:	9a08      	ldr	r2, [sp, #32]
 800a680:	3208      	adds	r2, #8
 800a682:	3601      	adds	r6, #1
 800a684:	1064      	asrs	r4, r4, #1
 800a686:	9208      	str	r2, [sp, #32]
 800a688:	e7cd      	b.n	800a626 <_strtod_l+0x4d6>
 800a68a:	d0ed      	beq.n	800a668 <_strtod_l+0x518>
 800a68c:	4264      	negs	r4, r4
 800a68e:	f014 020f 	ands.w	r2, r4, #15
 800a692:	d00a      	beq.n	800a6aa <_strtod_l+0x55a>
 800a694:	4b12      	ldr	r3, [pc, #72]	@ (800a6e0 <_strtod_l+0x590>)
 800a696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a69a:	4650      	mov	r0, sl
 800a69c:	4659      	mov	r1, fp
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f7f6 f8d3 	bl	800084c <__aeabi_ddiv>
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	468b      	mov	fp, r1
 800a6aa:	1124      	asrs	r4, r4, #4
 800a6ac:	d0dc      	beq.n	800a668 <_strtod_l+0x518>
 800a6ae:	2c1f      	cmp	r4, #31
 800a6b0:	dd20      	ble.n	800a6f4 <_strtod_l+0x5a4>
 800a6b2:	2400      	movs	r4, #0
 800a6b4:	46a0      	mov	r8, r4
 800a6b6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a6b8:	46a1      	mov	r9, r4
 800a6ba:	9a05      	ldr	r2, [sp, #20]
 800a6bc:	2322      	movs	r3, #34	@ 0x22
 800a6be:	f04f 0a00 	mov.w	sl, #0
 800a6c2:	f04f 0b00 	mov.w	fp, #0
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	e768      	b.n	800a59c <_strtod_l+0x44c>
 800a6ca:	bf00      	nop
 800a6cc:	0800caa5 	.word	0x0800caa5
 800a6d0:	0800ccbc 	.word	0x0800ccbc
 800a6d4:	0800ca9d 	.word	0x0800ca9d
 800a6d8:	0800cad4 	.word	0x0800cad4
 800a6dc:	0800ce65 	.word	0x0800ce65
 800a6e0:	0800cbf0 	.word	0x0800cbf0
 800a6e4:	0800cbc8 	.word	0x0800cbc8
 800a6e8:	7ff00000 	.word	0x7ff00000
 800a6ec:	7ca00000 	.word	0x7ca00000
 800a6f0:	7fefffff 	.word	0x7fefffff
 800a6f4:	f014 0310 	ands.w	r3, r4, #16
 800a6f8:	bf18      	it	ne
 800a6fa:	236a      	movne	r3, #106	@ 0x6a
 800a6fc:	4ea9      	ldr	r6, [pc, #676]	@ (800a9a4 <_strtod_l+0x854>)
 800a6fe:	9308      	str	r3, [sp, #32]
 800a700:	4650      	mov	r0, sl
 800a702:	4659      	mov	r1, fp
 800a704:	2300      	movs	r3, #0
 800a706:	07e2      	lsls	r2, r4, #31
 800a708:	d504      	bpl.n	800a714 <_strtod_l+0x5c4>
 800a70a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a70e:	f7f5 ff73 	bl	80005f8 <__aeabi_dmul>
 800a712:	2301      	movs	r3, #1
 800a714:	1064      	asrs	r4, r4, #1
 800a716:	f106 0608 	add.w	r6, r6, #8
 800a71a:	d1f4      	bne.n	800a706 <_strtod_l+0x5b6>
 800a71c:	b10b      	cbz	r3, 800a722 <_strtod_l+0x5d2>
 800a71e:	4682      	mov	sl, r0
 800a720:	468b      	mov	fp, r1
 800a722:	9b08      	ldr	r3, [sp, #32]
 800a724:	b1b3      	cbz	r3, 800a754 <_strtod_l+0x604>
 800a726:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a72a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a72e:	2b00      	cmp	r3, #0
 800a730:	4659      	mov	r1, fp
 800a732:	dd0f      	ble.n	800a754 <_strtod_l+0x604>
 800a734:	2b1f      	cmp	r3, #31
 800a736:	dd55      	ble.n	800a7e4 <_strtod_l+0x694>
 800a738:	2b34      	cmp	r3, #52	@ 0x34
 800a73a:	bfde      	ittt	le
 800a73c:	f04f 33ff 	movle.w	r3, #4294967295
 800a740:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a744:	4093      	lslle	r3, r2
 800a746:	f04f 0a00 	mov.w	sl, #0
 800a74a:	bfcc      	ite	gt
 800a74c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a750:	ea03 0b01 	andle.w	fp, r3, r1
 800a754:	2200      	movs	r2, #0
 800a756:	2300      	movs	r3, #0
 800a758:	4650      	mov	r0, sl
 800a75a:	4659      	mov	r1, fp
 800a75c:	f7f6 f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a760:	2800      	cmp	r0, #0
 800a762:	d1a6      	bne.n	800a6b2 <_strtod_l+0x562>
 800a764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a76a:	9805      	ldr	r0, [sp, #20]
 800a76c:	462b      	mov	r3, r5
 800a76e:	463a      	mov	r2, r7
 800a770:	f7ff f8c6 	bl	8009900 <__s2b>
 800a774:	900a      	str	r0, [sp, #40]	@ 0x28
 800a776:	2800      	cmp	r0, #0
 800a778:	f43f af05 	beq.w	800a586 <_strtod_l+0x436>
 800a77c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a77e:	2a00      	cmp	r2, #0
 800a780:	eba9 0308 	sub.w	r3, r9, r8
 800a784:	bfa8      	it	ge
 800a786:	2300      	movge	r3, #0
 800a788:	9312      	str	r3, [sp, #72]	@ 0x48
 800a78a:	2400      	movs	r4, #0
 800a78c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a790:	9316      	str	r3, [sp, #88]	@ 0x58
 800a792:	46a0      	mov	r8, r4
 800a794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a796:	9805      	ldr	r0, [sp, #20]
 800a798:	6859      	ldr	r1, [r3, #4]
 800a79a:	f7ff f809 	bl	80097b0 <_Balloc>
 800a79e:	4681      	mov	r9, r0
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	f43f aef4 	beq.w	800a58e <_strtod_l+0x43e>
 800a7a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7a8:	691a      	ldr	r2, [r3, #16]
 800a7aa:	3202      	adds	r2, #2
 800a7ac:	f103 010c 	add.w	r1, r3, #12
 800a7b0:	0092      	lsls	r2, r2, #2
 800a7b2:	300c      	adds	r0, #12
 800a7b4:	f000 fd72 	bl	800b29c <memcpy>
 800a7b8:	ec4b ab10 	vmov	d0, sl, fp
 800a7bc:	9805      	ldr	r0, [sp, #20]
 800a7be:	aa1c      	add	r2, sp, #112	@ 0x70
 800a7c0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a7c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a7c6:	f7ff fbd7 	bl	8009f78 <__d2b>
 800a7ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	f43f aede 	beq.w	800a58e <_strtod_l+0x43e>
 800a7d2:	9805      	ldr	r0, [sp, #20]
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	f7ff f929 	bl	8009a2c <__i2b>
 800a7da:	4680      	mov	r8, r0
 800a7dc:	b948      	cbnz	r0, 800a7f2 <_strtod_l+0x6a2>
 800a7de:	f04f 0800 	mov.w	r8, #0
 800a7e2:	e6d4      	b.n	800a58e <_strtod_l+0x43e>
 800a7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ec:	ea03 0a0a 	and.w	sl, r3, sl
 800a7f0:	e7b0      	b.n	800a754 <_strtod_l+0x604>
 800a7f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a7f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	bfab      	itete	ge
 800a7fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a7fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a7fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a800:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a802:	bfac      	ite	ge
 800a804:	18ef      	addge	r7, r5, r3
 800a806:	1b5e      	sublt	r6, r3, r5
 800a808:	9b08      	ldr	r3, [sp, #32]
 800a80a:	1aed      	subs	r5, r5, r3
 800a80c:	4415      	add	r5, r2
 800a80e:	4b66      	ldr	r3, [pc, #408]	@ (800a9a8 <_strtod_l+0x858>)
 800a810:	3d01      	subs	r5, #1
 800a812:	429d      	cmp	r5, r3
 800a814:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a818:	da50      	bge.n	800a8bc <_strtod_l+0x76c>
 800a81a:	1b5b      	subs	r3, r3, r5
 800a81c:	2b1f      	cmp	r3, #31
 800a81e:	eba2 0203 	sub.w	r2, r2, r3
 800a822:	f04f 0101 	mov.w	r1, #1
 800a826:	dc3d      	bgt.n	800a8a4 <_strtod_l+0x754>
 800a828:	fa01 f303 	lsl.w	r3, r1, r3
 800a82c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a82e:	2300      	movs	r3, #0
 800a830:	9310      	str	r3, [sp, #64]	@ 0x40
 800a832:	18bd      	adds	r5, r7, r2
 800a834:	9b08      	ldr	r3, [sp, #32]
 800a836:	42af      	cmp	r7, r5
 800a838:	4416      	add	r6, r2
 800a83a:	441e      	add	r6, r3
 800a83c:	463b      	mov	r3, r7
 800a83e:	bfa8      	it	ge
 800a840:	462b      	movge	r3, r5
 800a842:	42b3      	cmp	r3, r6
 800a844:	bfa8      	it	ge
 800a846:	4633      	movge	r3, r6
 800a848:	2b00      	cmp	r3, #0
 800a84a:	bfc2      	ittt	gt
 800a84c:	1aed      	subgt	r5, r5, r3
 800a84e:	1af6      	subgt	r6, r6, r3
 800a850:	1aff      	subgt	r7, r7, r3
 800a852:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a854:	2b00      	cmp	r3, #0
 800a856:	dd16      	ble.n	800a886 <_strtod_l+0x736>
 800a858:	4641      	mov	r1, r8
 800a85a:	9805      	ldr	r0, [sp, #20]
 800a85c:	461a      	mov	r2, r3
 800a85e:	f7ff f9a5 	bl	8009bac <__pow5mult>
 800a862:	4680      	mov	r8, r0
 800a864:	2800      	cmp	r0, #0
 800a866:	d0ba      	beq.n	800a7de <_strtod_l+0x68e>
 800a868:	4601      	mov	r1, r0
 800a86a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a86c:	9805      	ldr	r0, [sp, #20]
 800a86e:	f7ff f8f3 	bl	8009a58 <__multiply>
 800a872:	900e      	str	r0, [sp, #56]	@ 0x38
 800a874:	2800      	cmp	r0, #0
 800a876:	f43f ae8a 	beq.w	800a58e <_strtod_l+0x43e>
 800a87a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a87c:	9805      	ldr	r0, [sp, #20]
 800a87e:	f7fe ffd7 	bl	8009830 <_Bfree>
 800a882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a884:	931a      	str	r3, [sp, #104]	@ 0x68
 800a886:	2d00      	cmp	r5, #0
 800a888:	dc1d      	bgt.n	800a8c6 <_strtod_l+0x776>
 800a88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dd23      	ble.n	800a8d8 <_strtod_l+0x788>
 800a890:	4649      	mov	r1, r9
 800a892:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a894:	9805      	ldr	r0, [sp, #20]
 800a896:	f7ff f989 	bl	8009bac <__pow5mult>
 800a89a:	4681      	mov	r9, r0
 800a89c:	b9e0      	cbnz	r0, 800a8d8 <_strtod_l+0x788>
 800a89e:	f04f 0900 	mov.w	r9, #0
 800a8a2:	e674      	b.n	800a58e <_strtod_l+0x43e>
 800a8a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a8a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a8ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a8b0:	35e2      	adds	r5, #226	@ 0xe2
 800a8b2:	fa01 f305 	lsl.w	r3, r1, r5
 800a8b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a8ba:	e7ba      	b.n	800a832 <_strtod_l+0x6e2>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8c4:	e7b5      	b.n	800a832 <_strtod_l+0x6e2>
 800a8c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8c8:	9805      	ldr	r0, [sp, #20]
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	f7ff f9c8 	bl	8009c60 <__lshift>
 800a8d0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d1d9      	bne.n	800a88a <_strtod_l+0x73a>
 800a8d6:	e65a      	b.n	800a58e <_strtod_l+0x43e>
 800a8d8:	2e00      	cmp	r6, #0
 800a8da:	dd07      	ble.n	800a8ec <_strtod_l+0x79c>
 800a8dc:	4649      	mov	r1, r9
 800a8de:	9805      	ldr	r0, [sp, #20]
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	f7ff f9bd 	bl	8009c60 <__lshift>
 800a8e6:	4681      	mov	r9, r0
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d0d8      	beq.n	800a89e <_strtod_l+0x74e>
 800a8ec:	2f00      	cmp	r7, #0
 800a8ee:	dd08      	ble.n	800a902 <_strtod_l+0x7b2>
 800a8f0:	4641      	mov	r1, r8
 800a8f2:	9805      	ldr	r0, [sp, #20]
 800a8f4:	463a      	mov	r2, r7
 800a8f6:	f7ff f9b3 	bl	8009c60 <__lshift>
 800a8fa:	4680      	mov	r8, r0
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f43f ae46 	beq.w	800a58e <_strtod_l+0x43e>
 800a902:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a904:	9805      	ldr	r0, [sp, #20]
 800a906:	464a      	mov	r2, r9
 800a908:	f7ff fa32 	bl	8009d70 <__mdiff>
 800a90c:	4604      	mov	r4, r0
 800a90e:	2800      	cmp	r0, #0
 800a910:	f43f ae3d 	beq.w	800a58e <_strtod_l+0x43e>
 800a914:	68c3      	ldr	r3, [r0, #12]
 800a916:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a918:	2300      	movs	r3, #0
 800a91a:	60c3      	str	r3, [r0, #12]
 800a91c:	4641      	mov	r1, r8
 800a91e:	f7ff fa0b 	bl	8009d38 <__mcmp>
 800a922:	2800      	cmp	r0, #0
 800a924:	da46      	bge.n	800a9b4 <_strtod_l+0x864>
 800a926:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a928:	ea53 030a 	orrs.w	r3, r3, sl
 800a92c:	d16c      	bne.n	800aa08 <_strtod_l+0x8b8>
 800a92e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a932:	2b00      	cmp	r3, #0
 800a934:	d168      	bne.n	800aa08 <_strtod_l+0x8b8>
 800a936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a93a:	0d1b      	lsrs	r3, r3, #20
 800a93c:	051b      	lsls	r3, r3, #20
 800a93e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a942:	d961      	bls.n	800aa08 <_strtod_l+0x8b8>
 800a944:	6963      	ldr	r3, [r4, #20]
 800a946:	b913      	cbnz	r3, 800a94e <_strtod_l+0x7fe>
 800a948:	6923      	ldr	r3, [r4, #16]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	dd5c      	ble.n	800aa08 <_strtod_l+0x8b8>
 800a94e:	4621      	mov	r1, r4
 800a950:	2201      	movs	r2, #1
 800a952:	9805      	ldr	r0, [sp, #20]
 800a954:	f7ff f984 	bl	8009c60 <__lshift>
 800a958:	4641      	mov	r1, r8
 800a95a:	4604      	mov	r4, r0
 800a95c:	f7ff f9ec 	bl	8009d38 <__mcmp>
 800a960:	2800      	cmp	r0, #0
 800a962:	dd51      	ble.n	800aa08 <_strtod_l+0x8b8>
 800a964:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a968:	9a08      	ldr	r2, [sp, #32]
 800a96a:	0d1b      	lsrs	r3, r3, #20
 800a96c:	051b      	lsls	r3, r3, #20
 800a96e:	2a00      	cmp	r2, #0
 800a970:	d06b      	beq.n	800aa4a <_strtod_l+0x8fa>
 800a972:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a976:	d868      	bhi.n	800aa4a <_strtod_l+0x8fa>
 800a978:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a97c:	f67f ae9d 	bls.w	800a6ba <_strtod_l+0x56a>
 800a980:	4b0a      	ldr	r3, [pc, #40]	@ (800a9ac <_strtod_l+0x85c>)
 800a982:	4650      	mov	r0, sl
 800a984:	4659      	mov	r1, fp
 800a986:	2200      	movs	r2, #0
 800a988:	f7f5 fe36 	bl	80005f8 <__aeabi_dmul>
 800a98c:	4b08      	ldr	r3, [pc, #32]	@ (800a9b0 <_strtod_l+0x860>)
 800a98e:	400b      	ands	r3, r1
 800a990:	4682      	mov	sl, r0
 800a992:	468b      	mov	fp, r1
 800a994:	2b00      	cmp	r3, #0
 800a996:	f47f ae05 	bne.w	800a5a4 <_strtod_l+0x454>
 800a99a:	9a05      	ldr	r2, [sp, #20]
 800a99c:	2322      	movs	r3, #34	@ 0x22
 800a99e:	6013      	str	r3, [r2, #0]
 800a9a0:	e600      	b.n	800a5a4 <_strtod_l+0x454>
 800a9a2:	bf00      	nop
 800a9a4:	0800cce8 	.word	0x0800cce8
 800a9a8:	fffffc02 	.word	0xfffffc02
 800a9ac:	39500000 	.word	0x39500000
 800a9b0:	7ff00000 	.word	0x7ff00000
 800a9b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a9b8:	d165      	bne.n	800aa86 <_strtod_l+0x936>
 800a9ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a9bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9c0:	b35a      	cbz	r2, 800aa1a <_strtod_l+0x8ca>
 800a9c2:	4a9f      	ldr	r2, [pc, #636]	@ (800ac40 <_strtod_l+0xaf0>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d12b      	bne.n	800aa20 <_strtod_l+0x8d0>
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	4651      	mov	r1, sl
 800a9cc:	b303      	cbz	r3, 800aa10 <_strtod_l+0x8c0>
 800a9ce:	4b9d      	ldr	r3, [pc, #628]	@ (800ac44 <_strtod_l+0xaf4>)
 800a9d0:	465a      	mov	r2, fp
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9dc:	d81b      	bhi.n	800aa16 <_strtod_l+0x8c6>
 800a9de:	0d1b      	lsrs	r3, r3, #20
 800a9e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e8:	4299      	cmp	r1, r3
 800a9ea:	d119      	bne.n	800aa20 <_strtod_l+0x8d0>
 800a9ec:	4b96      	ldr	r3, [pc, #600]	@ (800ac48 <_strtod_l+0xaf8>)
 800a9ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d102      	bne.n	800a9fa <_strtod_l+0x8aa>
 800a9f4:	3101      	adds	r1, #1
 800a9f6:	f43f adca 	beq.w	800a58e <_strtod_l+0x43e>
 800a9fa:	4b92      	ldr	r3, [pc, #584]	@ (800ac44 <_strtod_l+0xaf4>)
 800a9fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9fe:	401a      	ands	r2, r3
 800aa00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aa04:	f04f 0a00 	mov.w	sl, #0
 800aa08:	9b08      	ldr	r3, [sp, #32]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1b8      	bne.n	800a980 <_strtod_l+0x830>
 800aa0e:	e5c9      	b.n	800a5a4 <_strtod_l+0x454>
 800aa10:	f04f 33ff 	mov.w	r3, #4294967295
 800aa14:	e7e8      	b.n	800a9e8 <_strtod_l+0x898>
 800aa16:	4613      	mov	r3, r2
 800aa18:	e7e6      	b.n	800a9e8 <_strtod_l+0x898>
 800aa1a:	ea53 030a 	orrs.w	r3, r3, sl
 800aa1e:	d0a1      	beq.n	800a964 <_strtod_l+0x814>
 800aa20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa22:	b1db      	cbz	r3, 800aa5c <_strtod_l+0x90c>
 800aa24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa26:	4213      	tst	r3, r2
 800aa28:	d0ee      	beq.n	800aa08 <_strtod_l+0x8b8>
 800aa2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa2c:	9a08      	ldr	r2, [sp, #32]
 800aa2e:	4650      	mov	r0, sl
 800aa30:	4659      	mov	r1, fp
 800aa32:	b1bb      	cbz	r3, 800aa64 <_strtod_l+0x914>
 800aa34:	f7ff fb6e 	bl	800a114 <sulp>
 800aa38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa3c:	ec53 2b10 	vmov	r2, r3, d0
 800aa40:	f7f5 fc24 	bl	800028c <__adddf3>
 800aa44:	4682      	mov	sl, r0
 800aa46:	468b      	mov	fp, r1
 800aa48:	e7de      	b.n	800aa08 <_strtod_l+0x8b8>
 800aa4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aa4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa56:	f04f 3aff 	mov.w	sl, #4294967295
 800aa5a:	e7d5      	b.n	800aa08 <_strtod_l+0x8b8>
 800aa5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa5e:	ea13 0f0a 	tst.w	r3, sl
 800aa62:	e7e1      	b.n	800aa28 <_strtod_l+0x8d8>
 800aa64:	f7ff fb56 	bl	800a114 <sulp>
 800aa68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa6c:	ec53 2b10 	vmov	r2, r3, d0
 800aa70:	f7f5 fc0a 	bl	8000288 <__aeabi_dsub>
 800aa74:	2200      	movs	r2, #0
 800aa76:	2300      	movs	r3, #0
 800aa78:	4682      	mov	sl, r0
 800aa7a:	468b      	mov	fp, r1
 800aa7c:	f7f6 f824 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d0c1      	beq.n	800aa08 <_strtod_l+0x8b8>
 800aa84:	e619      	b.n	800a6ba <_strtod_l+0x56a>
 800aa86:	4641      	mov	r1, r8
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f7ff facd 	bl	800a028 <__ratio>
 800aa8e:	ec57 6b10 	vmov	r6, r7, d0
 800aa92:	2200      	movs	r2, #0
 800aa94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa98:	4630      	mov	r0, r6
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f6 f828 	bl	8000af0 <__aeabi_dcmple>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d06f      	beq.n	800ab84 <_strtod_l+0xa34>
 800aaa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d17a      	bne.n	800aba0 <_strtod_l+0xa50>
 800aaaa:	f1ba 0f00 	cmp.w	sl, #0
 800aaae:	d158      	bne.n	800ab62 <_strtod_l+0xa12>
 800aab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d15a      	bne.n	800ab70 <_strtod_l+0xa20>
 800aaba:	4b64      	ldr	r3, [pc, #400]	@ (800ac4c <_strtod_l+0xafc>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	4630      	mov	r0, r6
 800aac0:	4639      	mov	r1, r7
 800aac2:	f7f6 f80b 	bl	8000adc <__aeabi_dcmplt>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d159      	bne.n	800ab7e <_strtod_l+0xa2e>
 800aaca:	4630      	mov	r0, r6
 800aacc:	4639      	mov	r1, r7
 800aace:	4b60      	ldr	r3, [pc, #384]	@ (800ac50 <_strtod_l+0xb00>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	f7f5 fd91 	bl	80005f8 <__aeabi_dmul>
 800aad6:	4606      	mov	r6, r0
 800aad8:	460f      	mov	r7, r1
 800aada:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aade:	9606      	str	r6, [sp, #24]
 800aae0:	9307      	str	r3, [sp, #28]
 800aae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aae6:	4d57      	ldr	r5, [pc, #348]	@ (800ac44 <_strtod_l+0xaf4>)
 800aae8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aaec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaee:	401d      	ands	r5, r3
 800aaf0:	4b58      	ldr	r3, [pc, #352]	@ (800ac54 <_strtod_l+0xb04>)
 800aaf2:	429d      	cmp	r5, r3
 800aaf4:	f040 80b2 	bne.w	800ac5c <_strtod_l+0xb0c>
 800aaf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aafa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aafe:	ec4b ab10 	vmov	d0, sl, fp
 800ab02:	f7ff f9c9 	bl	8009e98 <__ulp>
 800ab06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab0a:	ec51 0b10 	vmov	r0, r1, d0
 800ab0e:	f7f5 fd73 	bl	80005f8 <__aeabi_dmul>
 800ab12:	4652      	mov	r2, sl
 800ab14:	465b      	mov	r3, fp
 800ab16:	f7f5 fbb9 	bl	800028c <__adddf3>
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4949      	ldr	r1, [pc, #292]	@ (800ac44 <_strtod_l+0xaf4>)
 800ab1e:	4a4e      	ldr	r2, [pc, #312]	@ (800ac58 <_strtod_l+0xb08>)
 800ab20:	4019      	ands	r1, r3
 800ab22:	4291      	cmp	r1, r2
 800ab24:	4682      	mov	sl, r0
 800ab26:	d942      	bls.n	800abae <_strtod_l+0xa5e>
 800ab28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab2a:	4b47      	ldr	r3, [pc, #284]	@ (800ac48 <_strtod_l+0xaf8>)
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d103      	bne.n	800ab38 <_strtod_l+0x9e8>
 800ab30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab32:	3301      	adds	r3, #1
 800ab34:	f43f ad2b 	beq.w	800a58e <_strtod_l+0x43e>
 800ab38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ac48 <_strtod_l+0xaf8>
 800ab3c:	f04f 3aff 	mov.w	sl, #4294967295
 800ab40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab42:	9805      	ldr	r0, [sp, #20]
 800ab44:	f7fe fe74 	bl	8009830 <_Bfree>
 800ab48:	9805      	ldr	r0, [sp, #20]
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7fe fe70 	bl	8009830 <_Bfree>
 800ab50:	9805      	ldr	r0, [sp, #20]
 800ab52:	4641      	mov	r1, r8
 800ab54:	f7fe fe6c 	bl	8009830 <_Bfree>
 800ab58:	9805      	ldr	r0, [sp, #20]
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	f7fe fe68 	bl	8009830 <_Bfree>
 800ab60:	e618      	b.n	800a794 <_strtod_l+0x644>
 800ab62:	f1ba 0f01 	cmp.w	sl, #1
 800ab66:	d103      	bne.n	800ab70 <_strtod_l+0xa20>
 800ab68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f43f ada5 	beq.w	800a6ba <_strtod_l+0x56a>
 800ab70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ac20 <_strtod_l+0xad0>
 800ab74:	4f35      	ldr	r7, [pc, #212]	@ (800ac4c <_strtod_l+0xafc>)
 800ab76:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab7a:	2600      	movs	r6, #0
 800ab7c:	e7b1      	b.n	800aae2 <_strtod_l+0x992>
 800ab7e:	4f34      	ldr	r7, [pc, #208]	@ (800ac50 <_strtod_l+0xb00>)
 800ab80:	2600      	movs	r6, #0
 800ab82:	e7aa      	b.n	800aada <_strtod_l+0x98a>
 800ab84:	4b32      	ldr	r3, [pc, #200]	@ (800ac50 <_strtod_l+0xb00>)
 800ab86:	4630      	mov	r0, r6
 800ab88:	4639      	mov	r1, r7
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f7f5 fd34 	bl	80005f8 <__aeabi_dmul>
 800ab90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab92:	4606      	mov	r6, r0
 800ab94:	460f      	mov	r7, r1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d09f      	beq.n	800aada <_strtod_l+0x98a>
 800ab9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab9e:	e7a0      	b.n	800aae2 <_strtod_l+0x992>
 800aba0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ac28 <_strtod_l+0xad8>
 800aba4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aba8:	ec57 6b17 	vmov	r6, r7, d7
 800abac:	e799      	b.n	800aae2 <_strtod_l+0x992>
 800abae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800abb2:	9b08      	ldr	r3, [sp, #32]
 800abb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1c1      	bne.n	800ab40 <_strtod_l+0x9f0>
 800abbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abc0:	0d1b      	lsrs	r3, r3, #20
 800abc2:	051b      	lsls	r3, r3, #20
 800abc4:	429d      	cmp	r5, r3
 800abc6:	d1bb      	bne.n	800ab40 <_strtod_l+0x9f0>
 800abc8:	4630      	mov	r0, r6
 800abca:	4639      	mov	r1, r7
 800abcc:	f7f6 f874 	bl	8000cb8 <__aeabi_d2lz>
 800abd0:	f7f5 fce4 	bl	800059c <__aeabi_l2d>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4630      	mov	r0, r6
 800abda:	4639      	mov	r1, r7
 800abdc:	f7f5 fb54 	bl	8000288 <__aeabi_dsub>
 800abe0:	460b      	mov	r3, r1
 800abe2:	4602      	mov	r2, r0
 800abe4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800abe8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800abec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abee:	ea46 060a 	orr.w	r6, r6, sl
 800abf2:	431e      	orrs	r6, r3
 800abf4:	d06f      	beq.n	800acd6 <_strtod_l+0xb86>
 800abf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ac30 <_strtod_l+0xae0>)
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	f7f5 ff6e 	bl	8000adc <__aeabi_dcmplt>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	f47f accf 	bne.w	800a5a4 <_strtod_l+0x454>
 800ac06:	a30c      	add	r3, pc, #48	@ (adr r3, 800ac38 <_strtod_l+0xae8>)
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac10:	f7f5 ff82 	bl	8000b18 <__aeabi_dcmpgt>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d093      	beq.n	800ab40 <_strtod_l+0x9f0>
 800ac18:	e4c4      	b.n	800a5a4 <_strtod_l+0x454>
 800ac1a:	bf00      	nop
 800ac1c:	f3af 8000 	nop.w
 800ac20:	00000000 	.word	0x00000000
 800ac24:	bff00000 	.word	0xbff00000
 800ac28:	00000000 	.word	0x00000000
 800ac2c:	3ff00000 	.word	0x3ff00000
 800ac30:	94a03595 	.word	0x94a03595
 800ac34:	3fdfffff 	.word	0x3fdfffff
 800ac38:	35afe535 	.word	0x35afe535
 800ac3c:	3fe00000 	.word	0x3fe00000
 800ac40:	000fffff 	.word	0x000fffff
 800ac44:	7ff00000 	.word	0x7ff00000
 800ac48:	7fefffff 	.word	0x7fefffff
 800ac4c:	3ff00000 	.word	0x3ff00000
 800ac50:	3fe00000 	.word	0x3fe00000
 800ac54:	7fe00000 	.word	0x7fe00000
 800ac58:	7c9fffff 	.word	0x7c9fffff
 800ac5c:	9b08      	ldr	r3, [sp, #32]
 800ac5e:	b323      	cbz	r3, 800acaa <_strtod_l+0xb5a>
 800ac60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ac64:	d821      	bhi.n	800acaa <_strtod_l+0xb5a>
 800ac66:	a328      	add	r3, pc, #160	@ (adr r3, 800ad08 <_strtod_l+0xbb8>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f7f5 ff3e 	bl	8000af0 <__aeabi_dcmple>
 800ac74:	b1a0      	cbz	r0, 800aca0 <_strtod_l+0xb50>
 800ac76:	4639      	mov	r1, r7
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7f5 ff95 	bl	8000ba8 <__aeabi_d2uiz>
 800ac7e:	2801      	cmp	r0, #1
 800ac80:	bf38      	it	cc
 800ac82:	2001      	movcc	r0, #1
 800ac84:	f7f5 fc3e 	bl	8000504 <__aeabi_ui2d>
 800ac88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	b9fb      	cbnz	r3, 800acd0 <_strtod_l+0xb80>
 800ac90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac94:	9014      	str	r0, [sp, #80]	@ 0x50
 800ac96:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ac9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aca0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aca2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aca6:	1b5b      	subs	r3, r3, r5
 800aca8:	9311      	str	r3, [sp, #68]	@ 0x44
 800acaa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800acae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800acb2:	f7ff f8f1 	bl	8009e98 <__ulp>
 800acb6:	4650      	mov	r0, sl
 800acb8:	ec53 2b10 	vmov	r2, r3, d0
 800acbc:	4659      	mov	r1, fp
 800acbe:	f7f5 fc9b 	bl	80005f8 <__aeabi_dmul>
 800acc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800acc6:	f7f5 fae1 	bl	800028c <__adddf3>
 800acca:	4682      	mov	sl, r0
 800accc:	468b      	mov	fp, r1
 800acce:	e770      	b.n	800abb2 <_strtod_l+0xa62>
 800acd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800acd4:	e7e0      	b.n	800ac98 <_strtod_l+0xb48>
 800acd6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad10 <_strtod_l+0xbc0>)
 800acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acdc:	f7f5 fefe 	bl	8000adc <__aeabi_dcmplt>
 800ace0:	e798      	b.n	800ac14 <_strtod_l+0xac4>
 800ace2:	2300      	movs	r3, #0
 800ace4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ace6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ace8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	f7ff ba6d 	b.w	800a1ca <_strtod_l+0x7a>
 800acf0:	2a65      	cmp	r2, #101	@ 0x65
 800acf2:	f43f ab66 	beq.w	800a3c2 <_strtod_l+0x272>
 800acf6:	2a45      	cmp	r2, #69	@ 0x45
 800acf8:	f43f ab63 	beq.w	800a3c2 <_strtod_l+0x272>
 800acfc:	2301      	movs	r3, #1
 800acfe:	f7ff bb9e 	b.w	800a43e <_strtod_l+0x2ee>
 800ad02:	bf00      	nop
 800ad04:	f3af 8000 	nop.w
 800ad08:	ffc00000 	.word	0xffc00000
 800ad0c:	41dfffff 	.word	0x41dfffff
 800ad10:	94a03595 	.word	0x94a03595
 800ad14:	3fcfffff 	.word	0x3fcfffff

0800ad18 <_strtod_r>:
 800ad18:	4b01      	ldr	r3, [pc, #4]	@ (800ad20 <_strtod_r+0x8>)
 800ad1a:	f7ff ba19 	b.w	800a150 <_strtod_l>
 800ad1e:	bf00      	nop
 800ad20:	20000068 	.word	0x20000068

0800ad24 <_strtol_l.constprop.0>:
 800ad24:	2b24      	cmp	r3, #36	@ 0x24
 800ad26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2a:	4686      	mov	lr, r0
 800ad2c:	4690      	mov	r8, r2
 800ad2e:	d801      	bhi.n	800ad34 <_strtol_l.constprop.0+0x10>
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d106      	bne.n	800ad42 <_strtol_l.constprop.0+0x1e>
 800ad34:	f7fd fdba 	bl	80088ac <__errno>
 800ad38:	2316      	movs	r3, #22
 800ad3a:	6003      	str	r3, [r0, #0]
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad42:	4834      	ldr	r0, [pc, #208]	@ (800ae14 <_strtol_l.constprop.0+0xf0>)
 800ad44:	460d      	mov	r5, r1
 800ad46:	462a      	mov	r2, r5
 800ad48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad4c:	5d06      	ldrb	r6, [r0, r4]
 800ad4e:	f016 0608 	ands.w	r6, r6, #8
 800ad52:	d1f8      	bne.n	800ad46 <_strtol_l.constprop.0+0x22>
 800ad54:	2c2d      	cmp	r4, #45	@ 0x2d
 800ad56:	d12d      	bne.n	800adb4 <_strtol_l.constprop.0+0x90>
 800ad58:	782c      	ldrb	r4, [r5, #0]
 800ad5a:	2601      	movs	r6, #1
 800ad5c:	1c95      	adds	r5, r2, #2
 800ad5e:	f033 0210 	bics.w	r2, r3, #16
 800ad62:	d109      	bne.n	800ad78 <_strtol_l.constprop.0+0x54>
 800ad64:	2c30      	cmp	r4, #48	@ 0x30
 800ad66:	d12a      	bne.n	800adbe <_strtol_l.constprop.0+0x9a>
 800ad68:	782a      	ldrb	r2, [r5, #0]
 800ad6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad6e:	2a58      	cmp	r2, #88	@ 0x58
 800ad70:	d125      	bne.n	800adbe <_strtol_l.constprop.0+0x9a>
 800ad72:	786c      	ldrb	r4, [r5, #1]
 800ad74:	2310      	movs	r3, #16
 800ad76:	3502      	adds	r5, #2
 800ad78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ad7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad80:	2200      	movs	r2, #0
 800ad82:	fbbc f9f3 	udiv	r9, ip, r3
 800ad86:	4610      	mov	r0, r2
 800ad88:	fb03 ca19 	mls	sl, r3, r9, ip
 800ad8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ad90:	2f09      	cmp	r7, #9
 800ad92:	d81b      	bhi.n	800adcc <_strtol_l.constprop.0+0xa8>
 800ad94:	463c      	mov	r4, r7
 800ad96:	42a3      	cmp	r3, r4
 800ad98:	dd27      	ble.n	800adea <_strtol_l.constprop.0+0xc6>
 800ad9a:	1c57      	adds	r7, r2, #1
 800ad9c:	d007      	beq.n	800adae <_strtol_l.constprop.0+0x8a>
 800ad9e:	4581      	cmp	r9, r0
 800ada0:	d320      	bcc.n	800ade4 <_strtol_l.constprop.0+0xc0>
 800ada2:	d101      	bne.n	800ada8 <_strtol_l.constprop.0+0x84>
 800ada4:	45a2      	cmp	sl, r4
 800ada6:	db1d      	blt.n	800ade4 <_strtol_l.constprop.0+0xc0>
 800ada8:	fb00 4003 	mla	r0, r0, r3, r4
 800adac:	2201      	movs	r2, #1
 800adae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adb2:	e7eb      	b.n	800ad8c <_strtol_l.constprop.0+0x68>
 800adb4:	2c2b      	cmp	r4, #43	@ 0x2b
 800adb6:	bf04      	itt	eq
 800adb8:	782c      	ldrbeq	r4, [r5, #0]
 800adba:	1c95      	addeq	r5, r2, #2
 800adbc:	e7cf      	b.n	800ad5e <_strtol_l.constprop.0+0x3a>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1da      	bne.n	800ad78 <_strtol_l.constprop.0+0x54>
 800adc2:	2c30      	cmp	r4, #48	@ 0x30
 800adc4:	bf0c      	ite	eq
 800adc6:	2308      	moveq	r3, #8
 800adc8:	230a      	movne	r3, #10
 800adca:	e7d5      	b.n	800ad78 <_strtol_l.constprop.0+0x54>
 800adcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800add0:	2f19      	cmp	r7, #25
 800add2:	d801      	bhi.n	800add8 <_strtol_l.constprop.0+0xb4>
 800add4:	3c37      	subs	r4, #55	@ 0x37
 800add6:	e7de      	b.n	800ad96 <_strtol_l.constprop.0+0x72>
 800add8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800addc:	2f19      	cmp	r7, #25
 800adde:	d804      	bhi.n	800adea <_strtol_l.constprop.0+0xc6>
 800ade0:	3c57      	subs	r4, #87	@ 0x57
 800ade2:	e7d8      	b.n	800ad96 <_strtol_l.constprop.0+0x72>
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295
 800ade8:	e7e1      	b.n	800adae <_strtol_l.constprop.0+0x8a>
 800adea:	1c53      	adds	r3, r2, #1
 800adec:	d108      	bne.n	800ae00 <_strtol_l.constprop.0+0xdc>
 800adee:	2322      	movs	r3, #34	@ 0x22
 800adf0:	f8ce 3000 	str.w	r3, [lr]
 800adf4:	4660      	mov	r0, ip
 800adf6:	f1b8 0f00 	cmp.w	r8, #0
 800adfa:	d0a0      	beq.n	800ad3e <_strtol_l.constprop.0+0x1a>
 800adfc:	1e69      	subs	r1, r5, #1
 800adfe:	e006      	b.n	800ae0e <_strtol_l.constprop.0+0xea>
 800ae00:	b106      	cbz	r6, 800ae04 <_strtol_l.constprop.0+0xe0>
 800ae02:	4240      	negs	r0, r0
 800ae04:	f1b8 0f00 	cmp.w	r8, #0
 800ae08:	d099      	beq.n	800ad3e <_strtol_l.constprop.0+0x1a>
 800ae0a:	2a00      	cmp	r2, #0
 800ae0c:	d1f6      	bne.n	800adfc <_strtol_l.constprop.0+0xd8>
 800ae0e:	f8c8 1000 	str.w	r1, [r8]
 800ae12:	e794      	b.n	800ad3e <_strtol_l.constprop.0+0x1a>
 800ae14:	0800cd11 	.word	0x0800cd11

0800ae18 <_strtol_r>:
 800ae18:	f7ff bf84 	b.w	800ad24 <_strtol_l.constprop.0>

0800ae1c <__ssputs_r>:
 800ae1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae20:	688e      	ldr	r6, [r1, #8]
 800ae22:	461f      	mov	r7, r3
 800ae24:	42be      	cmp	r6, r7
 800ae26:	680b      	ldr	r3, [r1, #0]
 800ae28:	4682      	mov	sl, r0
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	4690      	mov	r8, r2
 800ae2e:	d82d      	bhi.n	800ae8c <__ssputs_r+0x70>
 800ae30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae38:	d026      	beq.n	800ae88 <__ssputs_r+0x6c>
 800ae3a:	6965      	ldr	r5, [r4, #20]
 800ae3c:	6909      	ldr	r1, [r1, #16]
 800ae3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae42:	eba3 0901 	sub.w	r9, r3, r1
 800ae46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae4a:	1c7b      	adds	r3, r7, #1
 800ae4c:	444b      	add	r3, r9
 800ae4e:	106d      	asrs	r5, r5, #1
 800ae50:	429d      	cmp	r5, r3
 800ae52:	bf38      	it	cc
 800ae54:	461d      	movcc	r5, r3
 800ae56:	0553      	lsls	r3, r2, #21
 800ae58:	d527      	bpl.n	800aeaa <__ssputs_r+0x8e>
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	f7fe fc1c 	bl	8009698 <_malloc_r>
 800ae60:	4606      	mov	r6, r0
 800ae62:	b360      	cbz	r0, 800aebe <__ssputs_r+0xa2>
 800ae64:	6921      	ldr	r1, [r4, #16]
 800ae66:	464a      	mov	r2, r9
 800ae68:	f000 fa18 	bl	800b29c <memcpy>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae76:	81a3      	strh	r3, [r4, #12]
 800ae78:	6126      	str	r6, [r4, #16]
 800ae7a:	6165      	str	r5, [r4, #20]
 800ae7c:	444e      	add	r6, r9
 800ae7e:	eba5 0509 	sub.w	r5, r5, r9
 800ae82:	6026      	str	r6, [r4, #0]
 800ae84:	60a5      	str	r5, [r4, #8]
 800ae86:	463e      	mov	r6, r7
 800ae88:	42be      	cmp	r6, r7
 800ae8a:	d900      	bls.n	800ae8e <__ssputs_r+0x72>
 800ae8c:	463e      	mov	r6, r7
 800ae8e:	6820      	ldr	r0, [r4, #0]
 800ae90:	4632      	mov	r2, r6
 800ae92:	4641      	mov	r1, r8
 800ae94:	f000 f9c6 	bl	800b224 <memmove>
 800ae98:	68a3      	ldr	r3, [r4, #8]
 800ae9a:	1b9b      	subs	r3, r3, r6
 800ae9c:	60a3      	str	r3, [r4, #8]
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	4433      	add	r3, r6
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	2000      	movs	r0, #0
 800aea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeaa:	462a      	mov	r2, r5
 800aeac:	f000 fd89 	bl	800b9c2 <_realloc_r>
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d1e0      	bne.n	800ae78 <__ssputs_r+0x5c>
 800aeb6:	6921      	ldr	r1, [r4, #16]
 800aeb8:	4650      	mov	r0, sl
 800aeba:	f7fe fb79 	bl	80095b0 <_free_r>
 800aebe:	230c      	movs	r3, #12
 800aec0:	f8ca 3000 	str.w	r3, [sl]
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	e7e9      	b.n	800aea6 <__ssputs_r+0x8a>
	...

0800aed4 <_svfiprintf_r>:
 800aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed8:	4698      	mov	r8, r3
 800aeda:	898b      	ldrh	r3, [r1, #12]
 800aedc:	061b      	lsls	r3, r3, #24
 800aede:	b09d      	sub	sp, #116	@ 0x74
 800aee0:	4607      	mov	r7, r0
 800aee2:	460d      	mov	r5, r1
 800aee4:	4614      	mov	r4, r2
 800aee6:	d510      	bpl.n	800af0a <_svfiprintf_r+0x36>
 800aee8:	690b      	ldr	r3, [r1, #16]
 800aeea:	b973      	cbnz	r3, 800af0a <_svfiprintf_r+0x36>
 800aeec:	2140      	movs	r1, #64	@ 0x40
 800aeee:	f7fe fbd3 	bl	8009698 <_malloc_r>
 800aef2:	6028      	str	r0, [r5, #0]
 800aef4:	6128      	str	r0, [r5, #16]
 800aef6:	b930      	cbnz	r0, 800af06 <_svfiprintf_r+0x32>
 800aef8:	230c      	movs	r3, #12
 800aefa:	603b      	str	r3, [r7, #0]
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295
 800af00:	b01d      	add	sp, #116	@ 0x74
 800af02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af06:	2340      	movs	r3, #64	@ 0x40
 800af08:	616b      	str	r3, [r5, #20]
 800af0a:	2300      	movs	r3, #0
 800af0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0e:	2320      	movs	r3, #32
 800af10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af14:	f8cd 800c 	str.w	r8, [sp, #12]
 800af18:	2330      	movs	r3, #48	@ 0x30
 800af1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0b8 <_svfiprintf_r+0x1e4>
 800af1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af22:	f04f 0901 	mov.w	r9, #1
 800af26:	4623      	mov	r3, r4
 800af28:	469a      	mov	sl, r3
 800af2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af2e:	b10a      	cbz	r2, 800af34 <_svfiprintf_r+0x60>
 800af30:	2a25      	cmp	r2, #37	@ 0x25
 800af32:	d1f9      	bne.n	800af28 <_svfiprintf_r+0x54>
 800af34:	ebba 0b04 	subs.w	fp, sl, r4
 800af38:	d00b      	beq.n	800af52 <_svfiprintf_r+0x7e>
 800af3a:	465b      	mov	r3, fp
 800af3c:	4622      	mov	r2, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	4638      	mov	r0, r7
 800af42:	f7ff ff6b 	bl	800ae1c <__ssputs_r>
 800af46:	3001      	adds	r0, #1
 800af48:	f000 80a7 	beq.w	800b09a <_svfiprintf_r+0x1c6>
 800af4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af4e:	445a      	add	r2, fp
 800af50:	9209      	str	r2, [sp, #36]	@ 0x24
 800af52:	f89a 3000 	ldrb.w	r3, [sl]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 809f 	beq.w	800b09a <_svfiprintf_r+0x1c6>
 800af5c:	2300      	movs	r3, #0
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295
 800af62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af66:	f10a 0a01 	add.w	sl, sl, #1
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	9307      	str	r3, [sp, #28]
 800af6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af72:	931a      	str	r3, [sp, #104]	@ 0x68
 800af74:	4654      	mov	r4, sl
 800af76:	2205      	movs	r2, #5
 800af78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af7c:	484e      	ldr	r0, [pc, #312]	@ (800b0b8 <_svfiprintf_r+0x1e4>)
 800af7e:	f7f5 f927 	bl	80001d0 <memchr>
 800af82:	9a04      	ldr	r2, [sp, #16]
 800af84:	b9d8      	cbnz	r0, 800afbe <_svfiprintf_r+0xea>
 800af86:	06d0      	lsls	r0, r2, #27
 800af88:	bf44      	itt	mi
 800af8a:	2320      	movmi	r3, #32
 800af8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af90:	0711      	lsls	r1, r2, #28
 800af92:	bf44      	itt	mi
 800af94:	232b      	movmi	r3, #43	@ 0x2b
 800af96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af9a:	f89a 3000 	ldrb.w	r3, [sl]
 800af9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800afa0:	d015      	beq.n	800afce <_svfiprintf_r+0xfa>
 800afa2:	9a07      	ldr	r2, [sp, #28]
 800afa4:	4654      	mov	r4, sl
 800afa6:	2000      	movs	r0, #0
 800afa8:	f04f 0c0a 	mov.w	ip, #10
 800afac:	4621      	mov	r1, r4
 800afae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afb2:	3b30      	subs	r3, #48	@ 0x30
 800afb4:	2b09      	cmp	r3, #9
 800afb6:	d94b      	bls.n	800b050 <_svfiprintf_r+0x17c>
 800afb8:	b1b0      	cbz	r0, 800afe8 <_svfiprintf_r+0x114>
 800afba:	9207      	str	r2, [sp, #28]
 800afbc:	e014      	b.n	800afe8 <_svfiprintf_r+0x114>
 800afbe:	eba0 0308 	sub.w	r3, r0, r8
 800afc2:	fa09 f303 	lsl.w	r3, r9, r3
 800afc6:	4313      	orrs	r3, r2
 800afc8:	9304      	str	r3, [sp, #16]
 800afca:	46a2      	mov	sl, r4
 800afcc:	e7d2      	b.n	800af74 <_svfiprintf_r+0xa0>
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	1d19      	adds	r1, r3, #4
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	9103      	str	r1, [sp, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	bfbb      	ittet	lt
 800afda:	425b      	neglt	r3, r3
 800afdc:	f042 0202 	orrlt.w	r2, r2, #2
 800afe0:	9307      	strge	r3, [sp, #28]
 800afe2:	9307      	strlt	r3, [sp, #28]
 800afe4:	bfb8      	it	lt
 800afe6:	9204      	strlt	r2, [sp, #16]
 800afe8:	7823      	ldrb	r3, [r4, #0]
 800afea:	2b2e      	cmp	r3, #46	@ 0x2e
 800afec:	d10a      	bne.n	800b004 <_svfiprintf_r+0x130>
 800afee:	7863      	ldrb	r3, [r4, #1]
 800aff0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aff2:	d132      	bne.n	800b05a <_svfiprintf_r+0x186>
 800aff4:	9b03      	ldr	r3, [sp, #12]
 800aff6:	1d1a      	adds	r2, r3, #4
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	9203      	str	r2, [sp, #12]
 800affc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b000:	3402      	adds	r4, #2
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0c8 <_svfiprintf_r+0x1f4>
 800b008:	7821      	ldrb	r1, [r4, #0]
 800b00a:	2203      	movs	r2, #3
 800b00c:	4650      	mov	r0, sl
 800b00e:	f7f5 f8df 	bl	80001d0 <memchr>
 800b012:	b138      	cbz	r0, 800b024 <_svfiprintf_r+0x150>
 800b014:	9b04      	ldr	r3, [sp, #16]
 800b016:	eba0 000a 	sub.w	r0, r0, sl
 800b01a:	2240      	movs	r2, #64	@ 0x40
 800b01c:	4082      	lsls	r2, r0
 800b01e:	4313      	orrs	r3, r2
 800b020:	3401      	adds	r4, #1
 800b022:	9304      	str	r3, [sp, #16]
 800b024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b028:	4824      	ldr	r0, [pc, #144]	@ (800b0bc <_svfiprintf_r+0x1e8>)
 800b02a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b02e:	2206      	movs	r2, #6
 800b030:	f7f5 f8ce 	bl	80001d0 <memchr>
 800b034:	2800      	cmp	r0, #0
 800b036:	d036      	beq.n	800b0a6 <_svfiprintf_r+0x1d2>
 800b038:	4b21      	ldr	r3, [pc, #132]	@ (800b0c0 <_svfiprintf_r+0x1ec>)
 800b03a:	bb1b      	cbnz	r3, 800b084 <_svfiprintf_r+0x1b0>
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	3307      	adds	r3, #7
 800b040:	f023 0307 	bic.w	r3, r3, #7
 800b044:	3308      	adds	r3, #8
 800b046:	9303      	str	r3, [sp, #12]
 800b048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b04a:	4433      	add	r3, r6
 800b04c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b04e:	e76a      	b.n	800af26 <_svfiprintf_r+0x52>
 800b050:	fb0c 3202 	mla	r2, ip, r2, r3
 800b054:	460c      	mov	r4, r1
 800b056:	2001      	movs	r0, #1
 800b058:	e7a8      	b.n	800afac <_svfiprintf_r+0xd8>
 800b05a:	2300      	movs	r3, #0
 800b05c:	3401      	adds	r4, #1
 800b05e:	9305      	str	r3, [sp, #20]
 800b060:	4619      	mov	r1, r3
 800b062:	f04f 0c0a 	mov.w	ip, #10
 800b066:	4620      	mov	r0, r4
 800b068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b06c:	3a30      	subs	r2, #48	@ 0x30
 800b06e:	2a09      	cmp	r2, #9
 800b070:	d903      	bls.n	800b07a <_svfiprintf_r+0x1a6>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0c6      	beq.n	800b004 <_svfiprintf_r+0x130>
 800b076:	9105      	str	r1, [sp, #20]
 800b078:	e7c4      	b.n	800b004 <_svfiprintf_r+0x130>
 800b07a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b07e:	4604      	mov	r4, r0
 800b080:	2301      	movs	r3, #1
 800b082:	e7f0      	b.n	800b066 <_svfiprintf_r+0x192>
 800b084:	ab03      	add	r3, sp, #12
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	462a      	mov	r2, r5
 800b08a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0c4 <_svfiprintf_r+0x1f0>)
 800b08c:	a904      	add	r1, sp, #16
 800b08e:	4638      	mov	r0, r7
 800b090:	f7fc fcc8 	bl	8007a24 <_printf_float>
 800b094:	1c42      	adds	r2, r0, #1
 800b096:	4606      	mov	r6, r0
 800b098:	d1d6      	bne.n	800b048 <_svfiprintf_r+0x174>
 800b09a:	89ab      	ldrh	r3, [r5, #12]
 800b09c:	065b      	lsls	r3, r3, #25
 800b09e:	f53f af2d 	bmi.w	800aefc <_svfiprintf_r+0x28>
 800b0a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0a4:	e72c      	b.n	800af00 <_svfiprintf_r+0x2c>
 800b0a6:	ab03      	add	r3, sp, #12
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	462a      	mov	r2, r5
 800b0ac:	4b05      	ldr	r3, [pc, #20]	@ (800b0c4 <_svfiprintf_r+0x1f0>)
 800b0ae:	a904      	add	r1, sp, #16
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f7fc ff4f 	bl	8007f54 <_printf_i>
 800b0b6:	e7ed      	b.n	800b094 <_svfiprintf_r+0x1c0>
 800b0b8:	0800ce11 	.word	0x0800ce11
 800b0bc:	0800ce1b 	.word	0x0800ce1b
 800b0c0:	08007a25 	.word	0x08007a25
 800b0c4:	0800ae1d 	.word	0x0800ae1d
 800b0c8:	0800ce17 	.word	0x0800ce17

0800b0cc <__sflush_r>:
 800b0cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d4:	0716      	lsls	r6, r2, #28
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	460c      	mov	r4, r1
 800b0da:	d454      	bmi.n	800b186 <__sflush_r+0xba>
 800b0dc:	684b      	ldr	r3, [r1, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dc02      	bgt.n	800b0e8 <__sflush_r+0x1c>
 800b0e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dd48      	ble.n	800b17a <__sflush_r+0xae>
 800b0e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0ea:	2e00      	cmp	r6, #0
 800b0ec:	d045      	beq.n	800b17a <__sflush_r+0xae>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0f4:	682f      	ldr	r7, [r5, #0]
 800b0f6:	6a21      	ldr	r1, [r4, #32]
 800b0f8:	602b      	str	r3, [r5, #0]
 800b0fa:	d030      	beq.n	800b15e <__sflush_r+0x92>
 800b0fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	0759      	lsls	r1, r3, #29
 800b102:	d505      	bpl.n	800b110 <__sflush_r+0x44>
 800b104:	6863      	ldr	r3, [r4, #4]
 800b106:	1ad2      	subs	r2, r2, r3
 800b108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b10a:	b10b      	cbz	r3, 800b110 <__sflush_r+0x44>
 800b10c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b10e:	1ad2      	subs	r2, r2, r3
 800b110:	2300      	movs	r3, #0
 800b112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b114:	6a21      	ldr	r1, [r4, #32]
 800b116:	4628      	mov	r0, r5
 800b118:	47b0      	blx	r6
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	d106      	bne.n	800b12e <__sflush_r+0x62>
 800b120:	6829      	ldr	r1, [r5, #0]
 800b122:	291d      	cmp	r1, #29
 800b124:	d82b      	bhi.n	800b17e <__sflush_r+0xb2>
 800b126:	4a2a      	ldr	r2, [pc, #168]	@ (800b1d0 <__sflush_r+0x104>)
 800b128:	410a      	asrs	r2, r1
 800b12a:	07d6      	lsls	r6, r2, #31
 800b12c:	d427      	bmi.n	800b17e <__sflush_r+0xb2>
 800b12e:	2200      	movs	r2, #0
 800b130:	6062      	str	r2, [r4, #4]
 800b132:	04d9      	lsls	r1, r3, #19
 800b134:	6922      	ldr	r2, [r4, #16]
 800b136:	6022      	str	r2, [r4, #0]
 800b138:	d504      	bpl.n	800b144 <__sflush_r+0x78>
 800b13a:	1c42      	adds	r2, r0, #1
 800b13c:	d101      	bne.n	800b142 <__sflush_r+0x76>
 800b13e:	682b      	ldr	r3, [r5, #0]
 800b140:	b903      	cbnz	r3, 800b144 <__sflush_r+0x78>
 800b142:	6560      	str	r0, [r4, #84]	@ 0x54
 800b144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b146:	602f      	str	r7, [r5, #0]
 800b148:	b1b9      	cbz	r1, 800b17a <__sflush_r+0xae>
 800b14a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b14e:	4299      	cmp	r1, r3
 800b150:	d002      	beq.n	800b158 <__sflush_r+0x8c>
 800b152:	4628      	mov	r0, r5
 800b154:	f7fe fa2c 	bl	80095b0 <_free_r>
 800b158:	2300      	movs	r3, #0
 800b15a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b15c:	e00d      	b.n	800b17a <__sflush_r+0xae>
 800b15e:	2301      	movs	r3, #1
 800b160:	4628      	mov	r0, r5
 800b162:	47b0      	blx	r6
 800b164:	4602      	mov	r2, r0
 800b166:	1c50      	adds	r0, r2, #1
 800b168:	d1c9      	bne.n	800b0fe <__sflush_r+0x32>
 800b16a:	682b      	ldr	r3, [r5, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d0c6      	beq.n	800b0fe <__sflush_r+0x32>
 800b170:	2b1d      	cmp	r3, #29
 800b172:	d001      	beq.n	800b178 <__sflush_r+0xac>
 800b174:	2b16      	cmp	r3, #22
 800b176:	d11e      	bne.n	800b1b6 <__sflush_r+0xea>
 800b178:	602f      	str	r7, [r5, #0]
 800b17a:	2000      	movs	r0, #0
 800b17c:	e022      	b.n	800b1c4 <__sflush_r+0xf8>
 800b17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b182:	b21b      	sxth	r3, r3
 800b184:	e01b      	b.n	800b1be <__sflush_r+0xf2>
 800b186:	690f      	ldr	r7, [r1, #16]
 800b188:	2f00      	cmp	r7, #0
 800b18a:	d0f6      	beq.n	800b17a <__sflush_r+0xae>
 800b18c:	0793      	lsls	r3, r2, #30
 800b18e:	680e      	ldr	r6, [r1, #0]
 800b190:	bf08      	it	eq
 800b192:	694b      	ldreq	r3, [r1, #20]
 800b194:	600f      	str	r7, [r1, #0]
 800b196:	bf18      	it	ne
 800b198:	2300      	movne	r3, #0
 800b19a:	eba6 0807 	sub.w	r8, r6, r7
 800b19e:	608b      	str	r3, [r1, #8]
 800b1a0:	f1b8 0f00 	cmp.w	r8, #0
 800b1a4:	dde9      	ble.n	800b17a <__sflush_r+0xae>
 800b1a6:	6a21      	ldr	r1, [r4, #32]
 800b1a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1aa:	4643      	mov	r3, r8
 800b1ac:	463a      	mov	r2, r7
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	47b0      	blx	r6
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	dc08      	bgt.n	800b1c8 <__sflush_r+0xfc>
 800b1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1be:	81a3      	strh	r3, [r4, #12]
 800b1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c8:	4407      	add	r7, r0
 800b1ca:	eba8 0800 	sub.w	r8, r8, r0
 800b1ce:	e7e7      	b.n	800b1a0 <__sflush_r+0xd4>
 800b1d0:	dfbffffe 	.word	0xdfbffffe

0800b1d4 <_fflush_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	690b      	ldr	r3, [r1, #16]
 800b1d8:	4605      	mov	r5, r0
 800b1da:	460c      	mov	r4, r1
 800b1dc:	b913      	cbnz	r3, 800b1e4 <_fflush_r+0x10>
 800b1de:	2500      	movs	r5, #0
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	b118      	cbz	r0, 800b1ee <_fflush_r+0x1a>
 800b1e6:	6a03      	ldr	r3, [r0, #32]
 800b1e8:	b90b      	cbnz	r3, 800b1ee <_fflush_r+0x1a>
 800b1ea:	f7fd fa73 	bl	80086d4 <__sinit>
 800b1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0f3      	beq.n	800b1de <_fflush_r+0xa>
 800b1f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1f8:	07d0      	lsls	r0, r2, #31
 800b1fa:	d404      	bmi.n	800b206 <_fflush_r+0x32>
 800b1fc:	0599      	lsls	r1, r3, #22
 800b1fe:	d402      	bmi.n	800b206 <_fflush_r+0x32>
 800b200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b202:	f7fd fb7e 	bl	8008902 <__retarget_lock_acquire_recursive>
 800b206:	4628      	mov	r0, r5
 800b208:	4621      	mov	r1, r4
 800b20a:	f7ff ff5f 	bl	800b0cc <__sflush_r>
 800b20e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b210:	07da      	lsls	r2, r3, #31
 800b212:	4605      	mov	r5, r0
 800b214:	d4e4      	bmi.n	800b1e0 <_fflush_r+0xc>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	059b      	lsls	r3, r3, #22
 800b21a:	d4e1      	bmi.n	800b1e0 <_fflush_r+0xc>
 800b21c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b21e:	f7fd fb71 	bl	8008904 <__retarget_lock_release_recursive>
 800b222:	e7dd      	b.n	800b1e0 <_fflush_r+0xc>

0800b224 <memmove>:
 800b224:	4288      	cmp	r0, r1
 800b226:	b510      	push	{r4, lr}
 800b228:	eb01 0402 	add.w	r4, r1, r2
 800b22c:	d902      	bls.n	800b234 <memmove+0x10>
 800b22e:	4284      	cmp	r4, r0
 800b230:	4623      	mov	r3, r4
 800b232:	d807      	bhi.n	800b244 <memmove+0x20>
 800b234:	1e43      	subs	r3, r0, #1
 800b236:	42a1      	cmp	r1, r4
 800b238:	d008      	beq.n	800b24c <memmove+0x28>
 800b23a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b23e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b242:	e7f8      	b.n	800b236 <memmove+0x12>
 800b244:	4402      	add	r2, r0
 800b246:	4601      	mov	r1, r0
 800b248:	428a      	cmp	r2, r1
 800b24a:	d100      	bne.n	800b24e <memmove+0x2a>
 800b24c:	bd10      	pop	{r4, pc}
 800b24e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b256:	e7f7      	b.n	800b248 <memmove+0x24>

0800b258 <strncmp>:
 800b258:	b510      	push	{r4, lr}
 800b25a:	b16a      	cbz	r2, 800b278 <strncmp+0x20>
 800b25c:	3901      	subs	r1, #1
 800b25e:	1884      	adds	r4, r0, r2
 800b260:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b264:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b268:	429a      	cmp	r2, r3
 800b26a:	d103      	bne.n	800b274 <strncmp+0x1c>
 800b26c:	42a0      	cmp	r0, r4
 800b26e:	d001      	beq.n	800b274 <strncmp+0x1c>
 800b270:	2a00      	cmp	r2, #0
 800b272:	d1f5      	bne.n	800b260 <strncmp+0x8>
 800b274:	1ad0      	subs	r0, r2, r3
 800b276:	bd10      	pop	{r4, pc}
 800b278:	4610      	mov	r0, r2
 800b27a:	e7fc      	b.n	800b276 <strncmp+0x1e>

0800b27c <_sbrk_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4d06      	ldr	r5, [pc, #24]	@ (800b298 <_sbrk_r+0x1c>)
 800b280:	2300      	movs	r3, #0
 800b282:	4604      	mov	r4, r0
 800b284:	4608      	mov	r0, r1
 800b286:	602b      	str	r3, [r5, #0]
 800b288:	f7f7 f8c8 	bl	800241c <_sbrk>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	d102      	bne.n	800b296 <_sbrk_r+0x1a>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	b103      	cbz	r3, 800b296 <_sbrk_r+0x1a>
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	bd38      	pop	{r3, r4, r5, pc}
 800b298:	2000051c 	.word	0x2000051c

0800b29c <memcpy>:
 800b29c:	440a      	add	r2, r1
 800b29e:	4291      	cmp	r1, r2
 800b2a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2a4:	d100      	bne.n	800b2a8 <memcpy+0xc>
 800b2a6:	4770      	bx	lr
 800b2a8:	b510      	push	{r4, lr}
 800b2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2b2:	4291      	cmp	r1, r2
 800b2b4:	d1f9      	bne.n	800b2aa <memcpy+0xe>
 800b2b6:	bd10      	pop	{r4, pc}

0800b2b8 <nan>:
 800b2b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b2c0 <nan+0x8>
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	00000000 	.word	0x00000000
 800b2c4:	7ff80000 	.word	0x7ff80000

0800b2c8 <__assert_func>:
 800b2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2ca:	4614      	mov	r4, r2
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	4b09      	ldr	r3, [pc, #36]	@ (800b2f4 <__assert_func+0x2c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	68d8      	ldr	r0, [r3, #12]
 800b2d6:	b954      	cbnz	r4, 800b2ee <__assert_func+0x26>
 800b2d8:	4b07      	ldr	r3, [pc, #28]	@ (800b2f8 <__assert_func+0x30>)
 800b2da:	461c      	mov	r4, r3
 800b2dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2e0:	9100      	str	r1, [sp, #0]
 800b2e2:	462b      	mov	r3, r5
 800b2e4:	4905      	ldr	r1, [pc, #20]	@ (800b2fc <__assert_func+0x34>)
 800b2e6:	f000 fba7 	bl	800ba38 <fiprintf>
 800b2ea:	f000 fbb7 	bl	800ba5c <abort>
 800b2ee:	4b04      	ldr	r3, [pc, #16]	@ (800b300 <__assert_func+0x38>)
 800b2f0:	e7f4      	b.n	800b2dc <__assert_func+0x14>
 800b2f2:	bf00      	nop
 800b2f4:	20000018 	.word	0x20000018
 800b2f8:	0800ce65 	.word	0x0800ce65
 800b2fc:	0800ce37 	.word	0x0800ce37
 800b300:	0800ce2a 	.word	0x0800ce2a

0800b304 <_calloc_r>:
 800b304:	b570      	push	{r4, r5, r6, lr}
 800b306:	fba1 5402 	umull	r5, r4, r1, r2
 800b30a:	b93c      	cbnz	r4, 800b31c <_calloc_r+0x18>
 800b30c:	4629      	mov	r1, r5
 800b30e:	f7fe f9c3 	bl	8009698 <_malloc_r>
 800b312:	4606      	mov	r6, r0
 800b314:	b928      	cbnz	r0, 800b322 <_calloc_r+0x1e>
 800b316:	2600      	movs	r6, #0
 800b318:	4630      	mov	r0, r6
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	220c      	movs	r2, #12
 800b31e:	6002      	str	r2, [r0, #0]
 800b320:	e7f9      	b.n	800b316 <_calloc_r+0x12>
 800b322:	462a      	mov	r2, r5
 800b324:	4621      	mov	r1, r4
 800b326:	f7fd fa6e 	bl	8008806 <memset>
 800b32a:	e7f5      	b.n	800b318 <_calloc_r+0x14>

0800b32c <rshift>:
 800b32c:	6903      	ldr	r3, [r0, #16]
 800b32e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b336:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b33a:	f100 0414 	add.w	r4, r0, #20
 800b33e:	dd45      	ble.n	800b3cc <rshift+0xa0>
 800b340:	f011 011f 	ands.w	r1, r1, #31
 800b344:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b348:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b34c:	d10c      	bne.n	800b368 <rshift+0x3c>
 800b34e:	f100 0710 	add.w	r7, r0, #16
 800b352:	4629      	mov	r1, r5
 800b354:	42b1      	cmp	r1, r6
 800b356:	d334      	bcc.n	800b3c2 <rshift+0x96>
 800b358:	1a9b      	subs	r3, r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	1eea      	subs	r2, r5, #3
 800b35e:	4296      	cmp	r6, r2
 800b360:	bf38      	it	cc
 800b362:	2300      	movcc	r3, #0
 800b364:	4423      	add	r3, r4
 800b366:	e015      	b.n	800b394 <rshift+0x68>
 800b368:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b36c:	f1c1 0820 	rsb	r8, r1, #32
 800b370:	40cf      	lsrs	r7, r1
 800b372:	f105 0e04 	add.w	lr, r5, #4
 800b376:	46a1      	mov	r9, r4
 800b378:	4576      	cmp	r6, lr
 800b37a:	46f4      	mov	ip, lr
 800b37c:	d815      	bhi.n	800b3aa <rshift+0x7e>
 800b37e:	1a9a      	subs	r2, r3, r2
 800b380:	0092      	lsls	r2, r2, #2
 800b382:	3a04      	subs	r2, #4
 800b384:	3501      	adds	r5, #1
 800b386:	42ae      	cmp	r6, r5
 800b388:	bf38      	it	cc
 800b38a:	2200      	movcc	r2, #0
 800b38c:	18a3      	adds	r3, r4, r2
 800b38e:	50a7      	str	r7, [r4, r2]
 800b390:	b107      	cbz	r7, 800b394 <rshift+0x68>
 800b392:	3304      	adds	r3, #4
 800b394:	1b1a      	subs	r2, r3, r4
 800b396:	42a3      	cmp	r3, r4
 800b398:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b39c:	bf08      	it	eq
 800b39e:	2300      	moveq	r3, #0
 800b3a0:	6102      	str	r2, [r0, #16]
 800b3a2:	bf08      	it	eq
 800b3a4:	6143      	streq	r3, [r0, #20]
 800b3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3aa:	f8dc c000 	ldr.w	ip, [ip]
 800b3ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3b2:	ea4c 0707 	orr.w	r7, ip, r7
 800b3b6:	f849 7b04 	str.w	r7, [r9], #4
 800b3ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3be:	40cf      	lsrs	r7, r1
 800b3c0:	e7da      	b.n	800b378 <rshift+0x4c>
 800b3c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3ca:	e7c3      	b.n	800b354 <rshift+0x28>
 800b3cc:	4623      	mov	r3, r4
 800b3ce:	e7e1      	b.n	800b394 <rshift+0x68>

0800b3d0 <__hexdig_fun>:
 800b3d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b3d4:	2b09      	cmp	r3, #9
 800b3d6:	d802      	bhi.n	800b3de <__hexdig_fun+0xe>
 800b3d8:	3820      	subs	r0, #32
 800b3da:	b2c0      	uxtb	r0, r0
 800b3dc:	4770      	bx	lr
 800b3de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b3e2:	2b05      	cmp	r3, #5
 800b3e4:	d801      	bhi.n	800b3ea <__hexdig_fun+0x1a>
 800b3e6:	3847      	subs	r0, #71	@ 0x47
 800b3e8:	e7f7      	b.n	800b3da <__hexdig_fun+0xa>
 800b3ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b3ee:	2b05      	cmp	r3, #5
 800b3f0:	d801      	bhi.n	800b3f6 <__hexdig_fun+0x26>
 800b3f2:	3827      	subs	r0, #39	@ 0x27
 800b3f4:	e7f1      	b.n	800b3da <__hexdig_fun+0xa>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	4770      	bx	lr
	...

0800b3fc <__gethex>:
 800b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b400:	b085      	sub	sp, #20
 800b402:	468a      	mov	sl, r1
 800b404:	9302      	str	r3, [sp, #8]
 800b406:	680b      	ldr	r3, [r1, #0]
 800b408:	9001      	str	r0, [sp, #4]
 800b40a:	4690      	mov	r8, r2
 800b40c:	1c9c      	adds	r4, r3, #2
 800b40e:	46a1      	mov	r9, r4
 800b410:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b414:	2830      	cmp	r0, #48	@ 0x30
 800b416:	d0fa      	beq.n	800b40e <__gethex+0x12>
 800b418:	eba9 0303 	sub.w	r3, r9, r3
 800b41c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b420:	f7ff ffd6 	bl	800b3d0 <__hexdig_fun>
 800b424:	4605      	mov	r5, r0
 800b426:	2800      	cmp	r0, #0
 800b428:	d168      	bne.n	800b4fc <__gethex+0x100>
 800b42a:	49a0      	ldr	r1, [pc, #640]	@ (800b6ac <__gethex+0x2b0>)
 800b42c:	2201      	movs	r2, #1
 800b42e:	4648      	mov	r0, r9
 800b430:	f7ff ff12 	bl	800b258 <strncmp>
 800b434:	4607      	mov	r7, r0
 800b436:	2800      	cmp	r0, #0
 800b438:	d167      	bne.n	800b50a <__gethex+0x10e>
 800b43a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b43e:	4626      	mov	r6, r4
 800b440:	f7ff ffc6 	bl	800b3d0 <__hexdig_fun>
 800b444:	2800      	cmp	r0, #0
 800b446:	d062      	beq.n	800b50e <__gethex+0x112>
 800b448:	4623      	mov	r3, r4
 800b44a:	7818      	ldrb	r0, [r3, #0]
 800b44c:	2830      	cmp	r0, #48	@ 0x30
 800b44e:	4699      	mov	r9, r3
 800b450:	f103 0301 	add.w	r3, r3, #1
 800b454:	d0f9      	beq.n	800b44a <__gethex+0x4e>
 800b456:	f7ff ffbb 	bl	800b3d0 <__hexdig_fun>
 800b45a:	fab0 f580 	clz	r5, r0
 800b45e:	096d      	lsrs	r5, r5, #5
 800b460:	f04f 0b01 	mov.w	fp, #1
 800b464:	464a      	mov	r2, r9
 800b466:	4616      	mov	r6, r2
 800b468:	3201      	adds	r2, #1
 800b46a:	7830      	ldrb	r0, [r6, #0]
 800b46c:	f7ff ffb0 	bl	800b3d0 <__hexdig_fun>
 800b470:	2800      	cmp	r0, #0
 800b472:	d1f8      	bne.n	800b466 <__gethex+0x6a>
 800b474:	498d      	ldr	r1, [pc, #564]	@ (800b6ac <__gethex+0x2b0>)
 800b476:	2201      	movs	r2, #1
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff feed 	bl	800b258 <strncmp>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d13f      	bne.n	800b502 <__gethex+0x106>
 800b482:	b944      	cbnz	r4, 800b496 <__gethex+0x9a>
 800b484:	1c74      	adds	r4, r6, #1
 800b486:	4622      	mov	r2, r4
 800b488:	4616      	mov	r6, r2
 800b48a:	3201      	adds	r2, #1
 800b48c:	7830      	ldrb	r0, [r6, #0]
 800b48e:	f7ff ff9f 	bl	800b3d0 <__hexdig_fun>
 800b492:	2800      	cmp	r0, #0
 800b494:	d1f8      	bne.n	800b488 <__gethex+0x8c>
 800b496:	1ba4      	subs	r4, r4, r6
 800b498:	00a7      	lsls	r7, r4, #2
 800b49a:	7833      	ldrb	r3, [r6, #0]
 800b49c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b4a0:	2b50      	cmp	r3, #80	@ 0x50
 800b4a2:	d13e      	bne.n	800b522 <__gethex+0x126>
 800b4a4:	7873      	ldrb	r3, [r6, #1]
 800b4a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4a8:	d033      	beq.n	800b512 <__gethex+0x116>
 800b4aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4ac:	d034      	beq.n	800b518 <__gethex+0x11c>
 800b4ae:	1c71      	adds	r1, r6, #1
 800b4b0:	2400      	movs	r4, #0
 800b4b2:	7808      	ldrb	r0, [r1, #0]
 800b4b4:	f7ff ff8c 	bl	800b3d0 <__hexdig_fun>
 800b4b8:	1e43      	subs	r3, r0, #1
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b18      	cmp	r3, #24
 800b4be:	d830      	bhi.n	800b522 <__gethex+0x126>
 800b4c0:	f1a0 0210 	sub.w	r2, r0, #16
 800b4c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4c8:	f7ff ff82 	bl	800b3d0 <__hexdig_fun>
 800b4cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b4d0:	fa5f fc8c 	uxtb.w	ip, ip
 800b4d4:	f1bc 0f18 	cmp.w	ip, #24
 800b4d8:	f04f 030a 	mov.w	r3, #10
 800b4dc:	d91e      	bls.n	800b51c <__gethex+0x120>
 800b4de:	b104      	cbz	r4, 800b4e2 <__gethex+0xe6>
 800b4e0:	4252      	negs	r2, r2
 800b4e2:	4417      	add	r7, r2
 800b4e4:	f8ca 1000 	str.w	r1, [sl]
 800b4e8:	b1ed      	cbz	r5, 800b526 <__gethex+0x12a>
 800b4ea:	f1bb 0f00 	cmp.w	fp, #0
 800b4ee:	bf0c      	ite	eq
 800b4f0:	2506      	moveq	r5, #6
 800b4f2:	2500      	movne	r5, #0
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	b005      	add	sp, #20
 800b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fc:	2500      	movs	r5, #0
 800b4fe:	462c      	mov	r4, r5
 800b500:	e7b0      	b.n	800b464 <__gethex+0x68>
 800b502:	2c00      	cmp	r4, #0
 800b504:	d1c7      	bne.n	800b496 <__gethex+0x9a>
 800b506:	4627      	mov	r7, r4
 800b508:	e7c7      	b.n	800b49a <__gethex+0x9e>
 800b50a:	464e      	mov	r6, r9
 800b50c:	462f      	mov	r7, r5
 800b50e:	2501      	movs	r5, #1
 800b510:	e7c3      	b.n	800b49a <__gethex+0x9e>
 800b512:	2400      	movs	r4, #0
 800b514:	1cb1      	adds	r1, r6, #2
 800b516:	e7cc      	b.n	800b4b2 <__gethex+0xb6>
 800b518:	2401      	movs	r4, #1
 800b51a:	e7fb      	b.n	800b514 <__gethex+0x118>
 800b51c:	fb03 0002 	mla	r0, r3, r2, r0
 800b520:	e7ce      	b.n	800b4c0 <__gethex+0xc4>
 800b522:	4631      	mov	r1, r6
 800b524:	e7de      	b.n	800b4e4 <__gethex+0xe8>
 800b526:	eba6 0309 	sub.w	r3, r6, r9
 800b52a:	3b01      	subs	r3, #1
 800b52c:	4629      	mov	r1, r5
 800b52e:	2b07      	cmp	r3, #7
 800b530:	dc0a      	bgt.n	800b548 <__gethex+0x14c>
 800b532:	9801      	ldr	r0, [sp, #4]
 800b534:	f7fe f93c 	bl	80097b0 <_Balloc>
 800b538:	4604      	mov	r4, r0
 800b53a:	b940      	cbnz	r0, 800b54e <__gethex+0x152>
 800b53c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6b0 <__gethex+0x2b4>)
 800b53e:	4602      	mov	r2, r0
 800b540:	21e4      	movs	r1, #228	@ 0xe4
 800b542:	485c      	ldr	r0, [pc, #368]	@ (800b6b4 <__gethex+0x2b8>)
 800b544:	f7ff fec0 	bl	800b2c8 <__assert_func>
 800b548:	3101      	adds	r1, #1
 800b54a:	105b      	asrs	r3, r3, #1
 800b54c:	e7ef      	b.n	800b52e <__gethex+0x132>
 800b54e:	f100 0a14 	add.w	sl, r0, #20
 800b552:	2300      	movs	r3, #0
 800b554:	4655      	mov	r5, sl
 800b556:	469b      	mov	fp, r3
 800b558:	45b1      	cmp	r9, r6
 800b55a:	d337      	bcc.n	800b5cc <__gethex+0x1d0>
 800b55c:	f845 bb04 	str.w	fp, [r5], #4
 800b560:	eba5 050a 	sub.w	r5, r5, sl
 800b564:	10ad      	asrs	r5, r5, #2
 800b566:	6125      	str	r5, [r4, #16]
 800b568:	4658      	mov	r0, fp
 800b56a:	f7fe fa13 	bl	8009994 <__hi0bits>
 800b56e:	016d      	lsls	r5, r5, #5
 800b570:	f8d8 6000 	ldr.w	r6, [r8]
 800b574:	1a2d      	subs	r5, r5, r0
 800b576:	42b5      	cmp	r5, r6
 800b578:	dd54      	ble.n	800b624 <__gethex+0x228>
 800b57a:	1bad      	subs	r5, r5, r6
 800b57c:	4629      	mov	r1, r5
 800b57e:	4620      	mov	r0, r4
 800b580:	f7fe fda7 	bl	800a0d2 <__any_on>
 800b584:	4681      	mov	r9, r0
 800b586:	b178      	cbz	r0, 800b5a8 <__gethex+0x1ac>
 800b588:	1e6b      	subs	r3, r5, #1
 800b58a:	1159      	asrs	r1, r3, #5
 800b58c:	f003 021f 	and.w	r2, r3, #31
 800b590:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b594:	f04f 0901 	mov.w	r9, #1
 800b598:	fa09 f202 	lsl.w	r2, r9, r2
 800b59c:	420a      	tst	r2, r1
 800b59e:	d003      	beq.n	800b5a8 <__gethex+0x1ac>
 800b5a0:	454b      	cmp	r3, r9
 800b5a2:	dc36      	bgt.n	800b612 <__gethex+0x216>
 800b5a4:	f04f 0902 	mov.w	r9, #2
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f7ff febe 	bl	800b32c <rshift>
 800b5b0:	442f      	add	r7, r5
 800b5b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5b6:	42bb      	cmp	r3, r7
 800b5b8:	da42      	bge.n	800b640 <__gethex+0x244>
 800b5ba:	9801      	ldr	r0, [sp, #4]
 800b5bc:	4621      	mov	r1, r4
 800b5be:	f7fe f937 	bl	8009830 <_Bfree>
 800b5c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	25a3      	movs	r5, #163	@ 0xa3
 800b5ca:	e793      	b.n	800b4f4 <__gethex+0xf8>
 800b5cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b5d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b5d2:	d012      	beq.n	800b5fa <__gethex+0x1fe>
 800b5d4:	2b20      	cmp	r3, #32
 800b5d6:	d104      	bne.n	800b5e2 <__gethex+0x1e6>
 800b5d8:	f845 bb04 	str.w	fp, [r5], #4
 800b5dc:	f04f 0b00 	mov.w	fp, #0
 800b5e0:	465b      	mov	r3, fp
 800b5e2:	7830      	ldrb	r0, [r6, #0]
 800b5e4:	9303      	str	r3, [sp, #12]
 800b5e6:	f7ff fef3 	bl	800b3d0 <__hexdig_fun>
 800b5ea:	9b03      	ldr	r3, [sp, #12]
 800b5ec:	f000 000f 	and.w	r0, r0, #15
 800b5f0:	4098      	lsls	r0, r3
 800b5f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	e7ae      	b.n	800b558 <__gethex+0x15c>
 800b5fa:	45b1      	cmp	r9, r6
 800b5fc:	d8ea      	bhi.n	800b5d4 <__gethex+0x1d8>
 800b5fe:	492b      	ldr	r1, [pc, #172]	@ (800b6ac <__gethex+0x2b0>)
 800b600:	9303      	str	r3, [sp, #12]
 800b602:	2201      	movs	r2, #1
 800b604:	4630      	mov	r0, r6
 800b606:	f7ff fe27 	bl	800b258 <strncmp>
 800b60a:	9b03      	ldr	r3, [sp, #12]
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d1e1      	bne.n	800b5d4 <__gethex+0x1d8>
 800b610:	e7a2      	b.n	800b558 <__gethex+0x15c>
 800b612:	1ea9      	subs	r1, r5, #2
 800b614:	4620      	mov	r0, r4
 800b616:	f7fe fd5c 	bl	800a0d2 <__any_on>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d0c2      	beq.n	800b5a4 <__gethex+0x1a8>
 800b61e:	f04f 0903 	mov.w	r9, #3
 800b622:	e7c1      	b.n	800b5a8 <__gethex+0x1ac>
 800b624:	da09      	bge.n	800b63a <__gethex+0x23e>
 800b626:	1b75      	subs	r5, r6, r5
 800b628:	4621      	mov	r1, r4
 800b62a:	9801      	ldr	r0, [sp, #4]
 800b62c:	462a      	mov	r2, r5
 800b62e:	f7fe fb17 	bl	8009c60 <__lshift>
 800b632:	1b7f      	subs	r7, r7, r5
 800b634:	4604      	mov	r4, r0
 800b636:	f100 0a14 	add.w	sl, r0, #20
 800b63a:	f04f 0900 	mov.w	r9, #0
 800b63e:	e7b8      	b.n	800b5b2 <__gethex+0x1b6>
 800b640:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b644:	42bd      	cmp	r5, r7
 800b646:	dd6f      	ble.n	800b728 <__gethex+0x32c>
 800b648:	1bed      	subs	r5, r5, r7
 800b64a:	42ae      	cmp	r6, r5
 800b64c:	dc34      	bgt.n	800b6b8 <__gethex+0x2bc>
 800b64e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b652:	2b02      	cmp	r3, #2
 800b654:	d022      	beq.n	800b69c <__gethex+0x2a0>
 800b656:	2b03      	cmp	r3, #3
 800b658:	d024      	beq.n	800b6a4 <__gethex+0x2a8>
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d115      	bne.n	800b68a <__gethex+0x28e>
 800b65e:	42ae      	cmp	r6, r5
 800b660:	d113      	bne.n	800b68a <__gethex+0x28e>
 800b662:	2e01      	cmp	r6, #1
 800b664:	d10b      	bne.n	800b67e <__gethex+0x282>
 800b666:	9a02      	ldr	r2, [sp, #8]
 800b668:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	2301      	movs	r3, #1
 800b670:	6123      	str	r3, [r4, #16]
 800b672:	f8ca 3000 	str.w	r3, [sl]
 800b676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b678:	2562      	movs	r5, #98	@ 0x62
 800b67a:	601c      	str	r4, [r3, #0]
 800b67c:	e73a      	b.n	800b4f4 <__gethex+0xf8>
 800b67e:	1e71      	subs	r1, r6, #1
 800b680:	4620      	mov	r0, r4
 800b682:	f7fe fd26 	bl	800a0d2 <__any_on>
 800b686:	2800      	cmp	r0, #0
 800b688:	d1ed      	bne.n	800b666 <__gethex+0x26a>
 800b68a:	9801      	ldr	r0, [sp, #4]
 800b68c:	4621      	mov	r1, r4
 800b68e:	f7fe f8cf 	bl	8009830 <_Bfree>
 800b692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b694:	2300      	movs	r3, #0
 800b696:	6013      	str	r3, [r2, #0]
 800b698:	2550      	movs	r5, #80	@ 0x50
 800b69a:	e72b      	b.n	800b4f4 <__gethex+0xf8>
 800b69c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1f3      	bne.n	800b68a <__gethex+0x28e>
 800b6a2:	e7e0      	b.n	800b666 <__gethex+0x26a>
 800b6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1dd      	bne.n	800b666 <__gethex+0x26a>
 800b6aa:	e7ee      	b.n	800b68a <__gethex+0x28e>
 800b6ac:	0800ccb8 	.word	0x0800ccb8
 800b6b0:	0800cb4d 	.word	0x0800cb4d
 800b6b4:	0800ce66 	.word	0x0800ce66
 800b6b8:	1e6f      	subs	r7, r5, #1
 800b6ba:	f1b9 0f00 	cmp.w	r9, #0
 800b6be:	d130      	bne.n	800b722 <__gethex+0x326>
 800b6c0:	b127      	cbz	r7, 800b6cc <__gethex+0x2d0>
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f7fe fd04 	bl	800a0d2 <__any_on>
 800b6ca:	4681      	mov	r9, r0
 800b6cc:	117a      	asrs	r2, r7, #5
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6d4:	f007 071f 	and.w	r7, r7, #31
 800b6d8:	40bb      	lsls	r3, r7
 800b6da:	4213      	tst	r3, r2
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4620      	mov	r0, r4
 800b6e0:	bf18      	it	ne
 800b6e2:	f049 0902 	orrne.w	r9, r9, #2
 800b6e6:	f7ff fe21 	bl	800b32c <rshift>
 800b6ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b6ee:	1b76      	subs	r6, r6, r5
 800b6f0:	2502      	movs	r5, #2
 800b6f2:	f1b9 0f00 	cmp.w	r9, #0
 800b6f6:	d047      	beq.n	800b788 <__gethex+0x38c>
 800b6f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d015      	beq.n	800b72c <__gethex+0x330>
 800b700:	2b03      	cmp	r3, #3
 800b702:	d017      	beq.n	800b734 <__gethex+0x338>
 800b704:	2b01      	cmp	r3, #1
 800b706:	d109      	bne.n	800b71c <__gethex+0x320>
 800b708:	f019 0f02 	tst.w	r9, #2
 800b70c:	d006      	beq.n	800b71c <__gethex+0x320>
 800b70e:	f8da 3000 	ldr.w	r3, [sl]
 800b712:	ea49 0903 	orr.w	r9, r9, r3
 800b716:	f019 0f01 	tst.w	r9, #1
 800b71a:	d10e      	bne.n	800b73a <__gethex+0x33e>
 800b71c:	f045 0510 	orr.w	r5, r5, #16
 800b720:	e032      	b.n	800b788 <__gethex+0x38c>
 800b722:	f04f 0901 	mov.w	r9, #1
 800b726:	e7d1      	b.n	800b6cc <__gethex+0x2d0>
 800b728:	2501      	movs	r5, #1
 800b72a:	e7e2      	b.n	800b6f2 <__gethex+0x2f6>
 800b72c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b72e:	f1c3 0301 	rsb	r3, r3, #1
 800b732:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b736:	2b00      	cmp	r3, #0
 800b738:	d0f0      	beq.n	800b71c <__gethex+0x320>
 800b73a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b73e:	f104 0314 	add.w	r3, r4, #20
 800b742:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b746:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b74a:	f04f 0c00 	mov.w	ip, #0
 800b74e:	4618      	mov	r0, r3
 800b750:	f853 2b04 	ldr.w	r2, [r3], #4
 800b754:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b758:	d01b      	beq.n	800b792 <__gethex+0x396>
 800b75a:	3201      	adds	r2, #1
 800b75c:	6002      	str	r2, [r0, #0]
 800b75e:	2d02      	cmp	r5, #2
 800b760:	f104 0314 	add.w	r3, r4, #20
 800b764:	d13c      	bne.n	800b7e0 <__gethex+0x3e4>
 800b766:	f8d8 2000 	ldr.w	r2, [r8]
 800b76a:	3a01      	subs	r2, #1
 800b76c:	42b2      	cmp	r2, r6
 800b76e:	d109      	bne.n	800b784 <__gethex+0x388>
 800b770:	1171      	asrs	r1, r6, #5
 800b772:	2201      	movs	r2, #1
 800b774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b778:	f006 061f 	and.w	r6, r6, #31
 800b77c:	fa02 f606 	lsl.w	r6, r2, r6
 800b780:	421e      	tst	r6, r3
 800b782:	d13a      	bne.n	800b7fa <__gethex+0x3fe>
 800b784:	f045 0520 	orr.w	r5, r5, #32
 800b788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b78a:	601c      	str	r4, [r3, #0]
 800b78c:	9b02      	ldr	r3, [sp, #8]
 800b78e:	601f      	str	r7, [r3, #0]
 800b790:	e6b0      	b.n	800b4f4 <__gethex+0xf8>
 800b792:	4299      	cmp	r1, r3
 800b794:	f843 cc04 	str.w	ip, [r3, #-4]
 800b798:	d8d9      	bhi.n	800b74e <__gethex+0x352>
 800b79a:	68a3      	ldr	r3, [r4, #8]
 800b79c:	459b      	cmp	fp, r3
 800b79e:	db17      	blt.n	800b7d0 <__gethex+0x3d4>
 800b7a0:	6861      	ldr	r1, [r4, #4]
 800b7a2:	9801      	ldr	r0, [sp, #4]
 800b7a4:	3101      	adds	r1, #1
 800b7a6:	f7fe f803 	bl	80097b0 <_Balloc>
 800b7aa:	4681      	mov	r9, r0
 800b7ac:	b918      	cbnz	r0, 800b7b6 <__gethex+0x3ba>
 800b7ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b818 <__gethex+0x41c>)
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	2184      	movs	r1, #132	@ 0x84
 800b7b4:	e6c5      	b.n	800b542 <__gethex+0x146>
 800b7b6:	6922      	ldr	r2, [r4, #16]
 800b7b8:	3202      	adds	r2, #2
 800b7ba:	f104 010c 	add.w	r1, r4, #12
 800b7be:	0092      	lsls	r2, r2, #2
 800b7c0:	300c      	adds	r0, #12
 800b7c2:	f7ff fd6b 	bl	800b29c <memcpy>
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	9801      	ldr	r0, [sp, #4]
 800b7ca:	f7fe f831 	bl	8009830 <_Bfree>
 800b7ce:	464c      	mov	r4, r9
 800b7d0:	6923      	ldr	r3, [r4, #16]
 800b7d2:	1c5a      	adds	r2, r3, #1
 800b7d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7d8:	6122      	str	r2, [r4, #16]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	615a      	str	r2, [r3, #20]
 800b7de:	e7be      	b.n	800b75e <__gethex+0x362>
 800b7e0:	6922      	ldr	r2, [r4, #16]
 800b7e2:	455a      	cmp	r2, fp
 800b7e4:	dd0b      	ble.n	800b7fe <__gethex+0x402>
 800b7e6:	2101      	movs	r1, #1
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f7ff fd9f 	bl	800b32c <rshift>
 800b7ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7f2:	3701      	adds	r7, #1
 800b7f4:	42bb      	cmp	r3, r7
 800b7f6:	f6ff aee0 	blt.w	800b5ba <__gethex+0x1be>
 800b7fa:	2501      	movs	r5, #1
 800b7fc:	e7c2      	b.n	800b784 <__gethex+0x388>
 800b7fe:	f016 061f 	ands.w	r6, r6, #31
 800b802:	d0fa      	beq.n	800b7fa <__gethex+0x3fe>
 800b804:	4453      	add	r3, sl
 800b806:	f1c6 0620 	rsb	r6, r6, #32
 800b80a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b80e:	f7fe f8c1 	bl	8009994 <__hi0bits>
 800b812:	42b0      	cmp	r0, r6
 800b814:	dbe7      	blt.n	800b7e6 <__gethex+0x3ea>
 800b816:	e7f0      	b.n	800b7fa <__gethex+0x3fe>
 800b818:	0800cb4d 	.word	0x0800cb4d

0800b81c <L_shift>:
 800b81c:	f1c2 0208 	rsb	r2, r2, #8
 800b820:	0092      	lsls	r2, r2, #2
 800b822:	b570      	push	{r4, r5, r6, lr}
 800b824:	f1c2 0620 	rsb	r6, r2, #32
 800b828:	6843      	ldr	r3, [r0, #4]
 800b82a:	6804      	ldr	r4, [r0, #0]
 800b82c:	fa03 f506 	lsl.w	r5, r3, r6
 800b830:	432c      	orrs	r4, r5
 800b832:	40d3      	lsrs	r3, r2
 800b834:	6004      	str	r4, [r0, #0]
 800b836:	f840 3f04 	str.w	r3, [r0, #4]!
 800b83a:	4288      	cmp	r0, r1
 800b83c:	d3f4      	bcc.n	800b828 <L_shift+0xc>
 800b83e:	bd70      	pop	{r4, r5, r6, pc}

0800b840 <__match>:
 800b840:	b530      	push	{r4, r5, lr}
 800b842:	6803      	ldr	r3, [r0, #0]
 800b844:	3301      	adds	r3, #1
 800b846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b84a:	b914      	cbnz	r4, 800b852 <__match+0x12>
 800b84c:	6003      	str	r3, [r0, #0]
 800b84e:	2001      	movs	r0, #1
 800b850:	bd30      	pop	{r4, r5, pc}
 800b852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b856:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b85a:	2d19      	cmp	r5, #25
 800b85c:	bf98      	it	ls
 800b85e:	3220      	addls	r2, #32
 800b860:	42a2      	cmp	r2, r4
 800b862:	d0f0      	beq.n	800b846 <__match+0x6>
 800b864:	2000      	movs	r0, #0
 800b866:	e7f3      	b.n	800b850 <__match+0x10>

0800b868 <__hexnan>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	680b      	ldr	r3, [r1, #0]
 800b86e:	6801      	ldr	r1, [r0, #0]
 800b870:	115e      	asrs	r6, r3, #5
 800b872:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b876:	f013 031f 	ands.w	r3, r3, #31
 800b87a:	b087      	sub	sp, #28
 800b87c:	bf18      	it	ne
 800b87e:	3604      	addne	r6, #4
 800b880:	2500      	movs	r5, #0
 800b882:	1f37      	subs	r7, r6, #4
 800b884:	4682      	mov	sl, r0
 800b886:	4690      	mov	r8, r2
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b88e:	46b9      	mov	r9, r7
 800b890:	463c      	mov	r4, r7
 800b892:	9502      	str	r5, [sp, #8]
 800b894:	46ab      	mov	fp, r5
 800b896:	784a      	ldrb	r2, [r1, #1]
 800b898:	1c4b      	adds	r3, r1, #1
 800b89a:	9303      	str	r3, [sp, #12]
 800b89c:	b342      	cbz	r2, 800b8f0 <__hexnan+0x88>
 800b89e:	4610      	mov	r0, r2
 800b8a0:	9105      	str	r1, [sp, #20]
 800b8a2:	9204      	str	r2, [sp, #16]
 800b8a4:	f7ff fd94 	bl	800b3d0 <__hexdig_fun>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d151      	bne.n	800b950 <__hexnan+0xe8>
 800b8ac:	9a04      	ldr	r2, [sp, #16]
 800b8ae:	9905      	ldr	r1, [sp, #20]
 800b8b0:	2a20      	cmp	r2, #32
 800b8b2:	d818      	bhi.n	800b8e6 <__hexnan+0x7e>
 800b8b4:	9b02      	ldr	r3, [sp, #8]
 800b8b6:	459b      	cmp	fp, r3
 800b8b8:	dd13      	ble.n	800b8e2 <__hexnan+0x7a>
 800b8ba:	454c      	cmp	r4, r9
 800b8bc:	d206      	bcs.n	800b8cc <__hexnan+0x64>
 800b8be:	2d07      	cmp	r5, #7
 800b8c0:	dc04      	bgt.n	800b8cc <__hexnan+0x64>
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f7ff ffa8 	bl	800b81c <L_shift>
 800b8cc:	4544      	cmp	r4, r8
 800b8ce:	d952      	bls.n	800b976 <__hexnan+0x10e>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	f1a4 0904 	sub.w	r9, r4, #4
 800b8d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8da:	f8cd b008 	str.w	fp, [sp, #8]
 800b8de:	464c      	mov	r4, r9
 800b8e0:	461d      	mov	r5, r3
 800b8e2:	9903      	ldr	r1, [sp, #12]
 800b8e4:	e7d7      	b.n	800b896 <__hexnan+0x2e>
 800b8e6:	2a29      	cmp	r2, #41	@ 0x29
 800b8e8:	d157      	bne.n	800b99a <__hexnan+0x132>
 800b8ea:	3102      	adds	r1, #2
 800b8ec:	f8ca 1000 	str.w	r1, [sl]
 800b8f0:	f1bb 0f00 	cmp.w	fp, #0
 800b8f4:	d051      	beq.n	800b99a <__hexnan+0x132>
 800b8f6:	454c      	cmp	r4, r9
 800b8f8:	d206      	bcs.n	800b908 <__hexnan+0xa0>
 800b8fa:	2d07      	cmp	r5, #7
 800b8fc:	dc04      	bgt.n	800b908 <__hexnan+0xa0>
 800b8fe:	462a      	mov	r2, r5
 800b900:	4649      	mov	r1, r9
 800b902:	4620      	mov	r0, r4
 800b904:	f7ff ff8a 	bl	800b81c <L_shift>
 800b908:	4544      	cmp	r4, r8
 800b90a:	d936      	bls.n	800b97a <__hexnan+0x112>
 800b90c:	f1a8 0204 	sub.w	r2, r8, #4
 800b910:	4623      	mov	r3, r4
 800b912:	f853 1b04 	ldr.w	r1, [r3], #4
 800b916:	f842 1f04 	str.w	r1, [r2, #4]!
 800b91a:	429f      	cmp	r7, r3
 800b91c:	d2f9      	bcs.n	800b912 <__hexnan+0xaa>
 800b91e:	1b3b      	subs	r3, r7, r4
 800b920:	f023 0303 	bic.w	r3, r3, #3
 800b924:	3304      	adds	r3, #4
 800b926:	3401      	adds	r4, #1
 800b928:	3e03      	subs	r6, #3
 800b92a:	42b4      	cmp	r4, r6
 800b92c:	bf88      	it	hi
 800b92e:	2304      	movhi	r3, #4
 800b930:	4443      	add	r3, r8
 800b932:	2200      	movs	r2, #0
 800b934:	f843 2b04 	str.w	r2, [r3], #4
 800b938:	429f      	cmp	r7, r3
 800b93a:	d2fb      	bcs.n	800b934 <__hexnan+0xcc>
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	b91b      	cbnz	r3, 800b948 <__hexnan+0xe0>
 800b940:	4547      	cmp	r7, r8
 800b942:	d128      	bne.n	800b996 <__hexnan+0x12e>
 800b944:	2301      	movs	r3, #1
 800b946:	603b      	str	r3, [r7, #0]
 800b948:	2005      	movs	r0, #5
 800b94a:	b007      	add	sp, #28
 800b94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b950:	3501      	adds	r5, #1
 800b952:	2d08      	cmp	r5, #8
 800b954:	f10b 0b01 	add.w	fp, fp, #1
 800b958:	dd06      	ble.n	800b968 <__hexnan+0x100>
 800b95a:	4544      	cmp	r4, r8
 800b95c:	d9c1      	bls.n	800b8e2 <__hexnan+0x7a>
 800b95e:	2300      	movs	r3, #0
 800b960:	f844 3c04 	str.w	r3, [r4, #-4]
 800b964:	2501      	movs	r5, #1
 800b966:	3c04      	subs	r4, #4
 800b968:	6822      	ldr	r2, [r4, #0]
 800b96a:	f000 000f 	and.w	r0, r0, #15
 800b96e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b972:	6020      	str	r0, [r4, #0]
 800b974:	e7b5      	b.n	800b8e2 <__hexnan+0x7a>
 800b976:	2508      	movs	r5, #8
 800b978:	e7b3      	b.n	800b8e2 <__hexnan+0x7a>
 800b97a:	9b01      	ldr	r3, [sp, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0dd      	beq.n	800b93c <__hexnan+0xd4>
 800b980:	f1c3 0320 	rsb	r3, r3, #32
 800b984:	f04f 32ff 	mov.w	r2, #4294967295
 800b988:	40da      	lsrs	r2, r3
 800b98a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b98e:	4013      	ands	r3, r2
 800b990:	f846 3c04 	str.w	r3, [r6, #-4]
 800b994:	e7d2      	b.n	800b93c <__hexnan+0xd4>
 800b996:	3f04      	subs	r7, #4
 800b998:	e7d0      	b.n	800b93c <__hexnan+0xd4>
 800b99a:	2004      	movs	r0, #4
 800b99c:	e7d5      	b.n	800b94a <__hexnan+0xe2>

0800b99e <__ascii_mbtowc>:
 800b99e:	b082      	sub	sp, #8
 800b9a0:	b901      	cbnz	r1, 800b9a4 <__ascii_mbtowc+0x6>
 800b9a2:	a901      	add	r1, sp, #4
 800b9a4:	b142      	cbz	r2, 800b9b8 <__ascii_mbtowc+0x1a>
 800b9a6:	b14b      	cbz	r3, 800b9bc <__ascii_mbtowc+0x1e>
 800b9a8:	7813      	ldrb	r3, [r2, #0]
 800b9aa:	600b      	str	r3, [r1, #0]
 800b9ac:	7812      	ldrb	r2, [r2, #0]
 800b9ae:	1e10      	subs	r0, r2, #0
 800b9b0:	bf18      	it	ne
 800b9b2:	2001      	movne	r0, #1
 800b9b4:	b002      	add	sp, #8
 800b9b6:	4770      	bx	lr
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	e7fb      	b.n	800b9b4 <__ascii_mbtowc+0x16>
 800b9bc:	f06f 0001 	mvn.w	r0, #1
 800b9c0:	e7f8      	b.n	800b9b4 <__ascii_mbtowc+0x16>

0800b9c2 <_realloc_r>:
 800b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	4680      	mov	r8, r0
 800b9c8:	4615      	mov	r5, r2
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	b921      	cbnz	r1, 800b9d8 <_realloc_r+0x16>
 800b9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	f7fd be60 	b.w	8009698 <_malloc_r>
 800b9d8:	b92a      	cbnz	r2, 800b9e6 <_realloc_r+0x24>
 800b9da:	f7fd fde9 	bl	80095b0 <_free_r>
 800b9de:	2400      	movs	r4, #0
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e6:	f000 f840 	bl	800ba6a <_malloc_usable_size_r>
 800b9ea:	4285      	cmp	r5, r0
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	d802      	bhi.n	800b9f6 <_realloc_r+0x34>
 800b9f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b9f4:	d8f4      	bhi.n	800b9e0 <_realloc_r+0x1e>
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	f7fd fe4d 	bl	8009698 <_malloc_r>
 800b9fe:	4607      	mov	r7, r0
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d0ec      	beq.n	800b9de <_realloc_r+0x1c>
 800ba04:	42b5      	cmp	r5, r6
 800ba06:	462a      	mov	r2, r5
 800ba08:	4621      	mov	r1, r4
 800ba0a:	bf28      	it	cs
 800ba0c:	4632      	movcs	r2, r6
 800ba0e:	f7ff fc45 	bl	800b29c <memcpy>
 800ba12:	4621      	mov	r1, r4
 800ba14:	4640      	mov	r0, r8
 800ba16:	f7fd fdcb 	bl	80095b0 <_free_r>
 800ba1a:	463c      	mov	r4, r7
 800ba1c:	e7e0      	b.n	800b9e0 <_realloc_r+0x1e>

0800ba1e <__ascii_wctomb>:
 800ba1e:	4603      	mov	r3, r0
 800ba20:	4608      	mov	r0, r1
 800ba22:	b141      	cbz	r1, 800ba36 <__ascii_wctomb+0x18>
 800ba24:	2aff      	cmp	r2, #255	@ 0xff
 800ba26:	d904      	bls.n	800ba32 <__ascii_wctomb+0x14>
 800ba28:	228a      	movs	r2, #138	@ 0x8a
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba30:	4770      	bx	lr
 800ba32:	700a      	strb	r2, [r1, #0]
 800ba34:	2001      	movs	r0, #1
 800ba36:	4770      	bx	lr

0800ba38 <fiprintf>:
 800ba38:	b40e      	push	{r1, r2, r3}
 800ba3a:	b503      	push	{r0, r1, lr}
 800ba3c:	4601      	mov	r1, r0
 800ba3e:	ab03      	add	r3, sp, #12
 800ba40:	4805      	ldr	r0, [pc, #20]	@ (800ba58 <fiprintf+0x20>)
 800ba42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba46:	6800      	ldr	r0, [r0, #0]
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	f000 f83f 	bl	800bacc <_vfiprintf_r>
 800ba4e:	b002      	add	sp, #8
 800ba50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba54:	b003      	add	sp, #12
 800ba56:	4770      	bx	lr
 800ba58:	20000018 	.word	0x20000018

0800ba5c <abort>:
 800ba5c:	b508      	push	{r3, lr}
 800ba5e:	2006      	movs	r0, #6
 800ba60:	f000 fa08 	bl	800be74 <raise>
 800ba64:	2001      	movs	r0, #1
 800ba66:	f7f6 fc57 	bl	8002318 <_exit>

0800ba6a <_malloc_usable_size_r>:
 800ba6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba6e:	1f18      	subs	r0, r3, #4
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	bfbc      	itt	lt
 800ba74:	580b      	ldrlt	r3, [r1, r0]
 800ba76:	18c0      	addlt	r0, r0, r3
 800ba78:	4770      	bx	lr

0800ba7a <__sfputc_r>:
 800ba7a:	6893      	ldr	r3, [r2, #8]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	b410      	push	{r4}
 800ba82:	6093      	str	r3, [r2, #8]
 800ba84:	da08      	bge.n	800ba98 <__sfputc_r+0x1e>
 800ba86:	6994      	ldr	r4, [r2, #24]
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	db01      	blt.n	800ba90 <__sfputc_r+0x16>
 800ba8c:	290a      	cmp	r1, #10
 800ba8e:	d103      	bne.n	800ba98 <__sfputc_r+0x1e>
 800ba90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba94:	f000 b932 	b.w	800bcfc <__swbuf_r>
 800ba98:	6813      	ldr	r3, [r2, #0]
 800ba9a:	1c58      	adds	r0, r3, #1
 800ba9c:	6010      	str	r0, [r2, #0]
 800ba9e:	7019      	strb	r1, [r3, #0]
 800baa0:	4608      	mov	r0, r1
 800baa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <__sfputs_r>:
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	4606      	mov	r6, r0
 800baac:	460f      	mov	r7, r1
 800baae:	4614      	mov	r4, r2
 800bab0:	18d5      	adds	r5, r2, r3
 800bab2:	42ac      	cmp	r4, r5
 800bab4:	d101      	bne.n	800baba <__sfputs_r+0x12>
 800bab6:	2000      	movs	r0, #0
 800bab8:	e007      	b.n	800baca <__sfputs_r+0x22>
 800baba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800babe:	463a      	mov	r2, r7
 800bac0:	4630      	mov	r0, r6
 800bac2:	f7ff ffda 	bl	800ba7a <__sfputc_r>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	d1f3      	bne.n	800bab2 <__sfputs_r+0xa>
 800baca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bacc <_vfiprintf_r>:
 800bacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad0:	460d      	mov	r5, r1
 800bad2:	b09d      	sub	sp, #116	@ 0x74
 800bad4:	4614      	mov	r4, r2
 800bad6:	4698      	mov	r8, r3
 800bad8:	4606      	mov	r6, r0
 800bada:	b118      	cbz	r0, 800bae4 <_vfiprintf_r+0x18>
 800badc:	6a03      	ldr	r3, [r0, #32]
 800bade:	b90b      	cbnz	r3, 800bae4 <_vfiprintf_r+0x18>
 800bae0:	f7fc fdf8 	bl	80086d4 <__sinit>
 800bae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bae6:	07d9      	lsls	r1, r3, #31
 800bae8:	d405      	bmi.n	800baf6 <_vfiprintf_r+0x2a>
 800baea:	89ab      	ldrh	r3, [r5, #12]
 800baec:	059a      	lsls	r2, r3, #22
 800baee:	d402      	bmi.n	800baf6 <_vfiprintf_r+0x2a>
 800baf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baf2:	f7fc ff06 	bl	8008902 <__retarget_lock_acquire_recursive>
 800baf6:	89ab      	ldrh	r3, [r5, #12]
 800baf8:	071b      	lsls	r3, r3, #28
 800bafa:	d501      	bpl.n	800bb00 <_vfiprintf_r+0x34>
 800bafc:	692b      	ldr	r3, [r5, #16]
 800bafe:	b99b      	cbnz	r3, 800bb28 <_vfiprintf_r+0x5c>
 800bb00:	4629      	mov	r1, r5
 800bb02:	4630      	mov	r0, r6
 800bb04:	f000 f938 	bl	800bd78 <__swsetup_r>
 800bb08:	b170      	cbz	r0, 800bb28 <_vfiprintf_r+0x5c>
 800bb0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb0c:	07dc      	lsls	r4, r3, #31
 800bb0e:	d504      	bpl.n	800bb1a <_vfiprintf_r+0x4e>
 800bb10:	f04f 30ff 	mov.w	r0, #4294967295
 800bb14:	b01d      	add	sp, #116	@ 0x74
 800bb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1a:	89ab      	ldrh	r3, [r5, #12]
 800bb1c:	0598      	lsls	r0, r3, #22
 800bb1e:	d4f7      	bmi.n	800bb10 <_vfiprintf_r+0x44>
 800bb20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb22:	f7fc feef 	bl	8008904 <__retarget_lock_release_recursive>
 800bb26:	e7f3      	b.n	800bb10 <_vfiprintf_r+0x44>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb2c:	2320      	movs	r3, #32
 800bb2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb32:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb36:	2330      	movs	r3, #48	@ 0x30
 800bb38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bce8 <_vfiprintf_r+0x21c>
 800bb3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb40:	f04f 0901 	mov.w	r9, #1
 800bb44:	4623      	mov	r3, r4
 800bb46:	469a      	mov	sl, r3
 800bb48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb4c:	b10a      	cbz	r2, 800bb52 <_vfiprintf_r+0x86>
 800bb4e:	2a25      	cmp	r2, #37	@ 0x25
 800bb50:	d1f9      	bne.n	800bb46 <_vfiprintf_r+0x7a>
 800bb52:	ebba 0b04 	subs.w	fp, sl, r4
 800bb56:	d00b      	beq.n	800bb70 <_vfiprintf_r+0xa4>
 800bb58:	465b      	mov	r3, fp
 800bb5a:	4622      	mov	r2, r4
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f7ff ffa2 	bl	800baa8 <__sfputs_r>
 800bb64:	3001      	adds	r0, #1
 800bb66:	f000 80a7 	beq.w	800bcb8 <_vfiprintf_r+0x1ec>
 800bb6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb6c:	445a      	add	r2, fp
 800bb6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb70:	f89a 3000 	ldrb.w	r3, [sl]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f000 809f 	beq.w	800bcb8 <_vfiprintf_r+0x1ec>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb84:	f10a 0a01 	add.w	sl, sl, #1
 800bb88:	9304      	str	r3, [sp, #16]
 800bb8a:	9307      	str	r3, [sp, #28]
 800bb8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb90:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb92:	4654      	mov	r4, sl
 800bb94:	2205      	movs	r2, #5
 800bb96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb9a:	4853      	ldr	r0, [pc, #332]	@ (800bce8 <_vfiprintf_r+0x21c>)
 800bb9c:	f7f4 fb18 	bl	80001d0 <memchr>
 800bba0:	9a04      	ldr	r2, [sp, #16]
 800bba2:	b9d8      	cbnz	r0, 800bbdc <_vfiprintf_r+0x110>
 800bba4:	06d1      	lsls	r1, r2, #27
 800bba6:	bf44      	itt	mi
 800bba8:	2320      	movmi	r3, #32
 800bbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbae:	0713      	lsls	r3, r2, #28
 800bbb0:	bf44      	itt	mi
 800bbb2:	232b      	movmi	r3, #43	@ 0x2b
 800bbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbbe:	d015      	beq.n	800bbec <_vfiprintf_r+0x120>
 800bbc0:	9a07      	ldr	r2, [sp, #28]
 800bbc2:	4654      	mov	r4, sl
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	f04f 0c0a 	mov.w	ip, #10
 800bbca:	4621      	mov	r1, r4
 800bbcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbd0:	3b30      	subs	r3, #48	@ 0x30
 800bbd2:	2b09      	cmp	r3, #9
 800bbd4:	d94b      	bls.n	800bc6e <_vfiprintf_r+0x1a2>
 800bbd6:	b1b0      	cbz	r0, 800bc06 <_vfiprintf_r+0x13a>
 800bbd8:	9207      	str	r2, [sp, #28]
 800bbda:	e014      	b.n	800bc06 <_vfiprintf_r+0x13a>
 800bbdc:	eba0 0308 	sub.w	r3, r0, r8
 800bbe0:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	9304      	str	r3, [sp, #16]
 800bbe8:	46a2      	mov	sl, r4
 800bbea:	e7d2      	b.n	800bb92 <_vfiprintf_r+0xc6>
 800bbec:	9b03      	ldr	r3, [sp, #12]
 800bbee:	1d19      	adds	r1, r3, #4
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	9103      	str	r1, [sp, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	bfbb      	ittet	lt
 800bbf8:	425b      	neglt	r3, r3
 800bbfa:	f042 0202 	orrlt.w	r2, r2, #2
 800bbfe:	9307      	strge	r3, [sp, #28]
 800bc00:	9307      	strlt	r3, [sp, #28]
 800bc02:	bfb8      	it	lt
 800bc04:	9204      	strlt	r2, [sp, #16]
 800bc06:	7823      	ldrb	r3, [r4, #0]
 800bc08:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc0a:	d10a      	bne.n	800bc22 <_vfiprintf_r+0x156>
 800bc0c:	7863      	ldrb	r3, [r4, #1]
 800bc0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc10:	d132      	bne.n	800bc78 <_vfiprintf_r+0x1ac>
 800bc12:	9b03      	ldr	r3, [sp, #12]
 800bc14:	1d1a      	adds	r2, r3, #4
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	9203      	str	r2, [sp, #12]
 800bc1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc1e:	3402      	adds	r4, #2
 800bc20:	9305      	str	r3, [sp, #20]
 800bc22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcf8 <_vfiprintf_r+0x22c>
 800bc26:	7821      	ldrb	r1, [r4, #0]
 800bc28:	2203      	movs	r2, #3
 800bc2a:	4650      	mov	r0, sl
 800bc2c:	f7f4 fad0 	bl	80001d0 <memchr>
 800bc30:	b138      	cbz	r0, 800bc42 <_vfiprintf_r+0x176>
 800bc32:	9b04      	ldr	r3, [sp, #16]
 800bc34:	eba0 000a 	sub.w	r0, r0, sl
 800bc38:	2240      	movs	r2, #64	@ 0x40
 800bc3a:	4082      	lsls	r2, r0
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	3401      	adds	r4, #1
 800bc40:	9304      	str	r3, [sp, #16]
 800bc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc46:	4829      	ldr	r0, [pc, #164]	@ (800bcec <_vfiprintf_r+0x220>)
 800bc48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc4c:	2206      	movs	r2, #6
 800bc4e:	f7f4 fabf 	bl	80001d0 <memchr>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d03f      	beq.n	800bcd6 <_vfiprintf_r+0x20a>
 800bc56:	4b26      	ldr	r3, [pc, #152]	@ (800bcf0 <_vfiprintf_r+0x224>)
 800bc58:	bb1b      	cbnz	r3, 800bca2 <_vfiprintf_r+0x1d6>
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	3307      	adds	r3, #7
 800bc5e:	f023 0307 	bic.w	r3, r3, #7
 800bc62:	3308      	adds	r3, #8
 800bc64:	9303      	str	r3, [sp, #12]
 800bc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc68:	443b      	add	r3, r7
 800bc6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc6c:	e76a      	b.n	800bb44 <_vfiprintf_r+0x78>
 800bc6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc72:	460c      	mov	r4, r1
 800bc74:	2001      	movs	r0, #1
 800bc76:	e7a8      	b.n	800bbca <_vfiprintf_r+0xfe>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	3401      	adds	r4, #1
 800bc7c:	9305      	str	r3, [sp, #20]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	f04f 0c0a 	mov.w	ip, #10
 800bc84:	4620      	mov	r0, r4
 800bc86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc8a:	3a30      	subs	r2, #48	@ 0x30
 800bc8c:	2a09      	cmp	r2, #9
 800bc8e:	d903      	bls.n	800bc98 <_vfiprintf_r+0x1cc>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d0c6      	beq.n	800bc22 <_vfiprintf_r+0x156>
 800bc94:	9105      	str	r1, [sp, #20]
 800bc96:	e7c4      	b.n	800bc22 <_vfiprintf_r+0x156>
 800bc98:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e7f0      	b.n	800bc84 <_vfiprintf_r+0x1b8>
 800bca2:	ab03      	add	r3, sp, #12
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	462a      	mov	r2, r5
 800bca8:	4b12      	ldr	r3, [pc, #72]	@ (800bcf4 <_vfiprintf_r+0x228>)
 800bcaa:	a904      	add	r1, sp, #16
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7fb feb9 	bl	8007a24 <_printf_float>
 800bcb2:	4607      	mov	r7, r0
 800bcb4:	1c78      	adds	r0, r7, #1
 800bcb6:	d1d6      	bne.n	800bc66 <_vfiprintf_r+0x19a>
 800bcb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcba:	07d9      	lsls	r1, r3, #31
 800bcbc:	d405      	bmi.n	800bcca <_vfiprintf_r+0x1fe>
 800bcbe:	89ab      	ldrh	r3, [r5, #12]
 800bcc0:	059a      	lsls	r2, r3, #22
 800bcc2:	d402      	bmi.n	800bcca <_vfiprintf_r+0x1fe>
 800bcc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcc6:	f7fc fe1d 	bl	8008904 <__retarget_lock_release_recursive>
 800bcca:	89ab      	ldrh	r3, [r5, #12]
 800bccc:	065b      	lsls	r3, r3, #25
 800bcce:	f53f af1f 	bmi.w	800bb10 <_vfiprintf_r+0x44>
 800bcd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcd4:	e71e      	b.n	800bb14 <_vfiprintf_r+0x48>
 800bcd6:	ab03      	add	r3, sp, #12
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	462a      	mov	r2, r5
 800bcdc:	4b05      	ldr	r3, [pc, #20]	@ (800bcf4 <_vfiprintf_r+0x228>)
 800bcde:	a904      	add	r1, sp, #16
 800bce0:	4630      	mov	r0, r6
 800bce2:	f7fc f937 	bl	8007f54 <_printf_i>
 800bce6:	e7e4      	b.n	800bcb2 <_vfiprintf_r+0x1e6>
 800bce8:	0800ce11 	.word	0x0800ce11
 800bcec:	0800ce1b 	.word	0x0800ce1b
 800bcf0:	08007a25 	.word	0x08007a25
 800bcf4:	0800baa9 	.word	0x0800baa9
 800bcf8:	0800ce17 	.word	0x0800ce17

0800bcfc <__swbuf_r>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	460e      	mov	r6, r1
 800bd00:	4614      	mov	r4, r2
 800bd02:	4605      	mov	r5, r0
 800bd04:	b118      	cbz	r0, 800bd0e <__swbuf_r+0x12>
 800bd06:	6a03      	ldr	r3, [r0, #32]
 800bd08:	b90b      	cbnz	r3, 800bd0e <__swbuf_r+0x12>
 800bd0a:	f7fc fce3 	bl	80086d4 <__sinit>
 800bd0e:	69a3      	ldr	r3, [r4, #24]
 800bd10:	60a3      	str	r3, [r4, #8]
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	071a      	lsls	r2, r3, #28
 800bd16:	d501      	bpl.n	800bd1c <__swbuf_r+0x20>
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	b943      	cbnz	r3, 800bd2e <__swbuf_r+0x32>
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	4628      	mov	r0, r5
 800bd20:	f000 f82a 	bl	800bd78 <__swsetup_r>
 800bd24:	b118      	cbz	r0, 800bd2e <__swbuf_r+0x32>
 800bd26:	f04f 37ff 	mov.w	r7, #4294967295
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	6922      	ldr	r2, [r4, #16]
 800bd32:	1a98      	subs	r0, r3, r2
 800bd34:	6963      	ldr	r3, [r4, #20]
 800bd36:	b2f6      	uxtb	r6, r6
 800bd38:	4283      	cmp	r3, r0
 800bd3a:	4637      	mov	r7, r6
 800bd3c:	dc05      	bgt.n	800bd4a <__swbuf_r+0x4e>
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4628      	mov	r0, r5
 800bd42:	f7ff fa47 	bl	800b1d4 <_fflush_r>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d1ed      	bne.n	800bd26 <__swbuf_r+0x2a>
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	60a3      	str	r3, [r4, #8]
 800bd50:	6823      	ldr	r3, [r4, #0]
 800bd52:	1c5a      	adds	r2, r3, #1
 800bd54:	6022      	str	r2, [r4, #0]
 800bd56:	701e      	strb	r6, [r3, #0]
 800bd58:	6962      	ldr	r2, [r4, #20]
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d004      	beq.n	800bd6a <__swbuf_r+0x6e>
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	07db      	lsls	r3, r3, #31
 800bd64:	d5e1      	bpl.n	800bd2a <__swbuf_r+0x2e>
 800bd66:	2e0a      	cmp	r6, #10
 800bd68:	d1df      	bne.n	800bd2a <__swbuf_r+0x2e>
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	f7ff fa31 	bl	800b1d4 <_fflush_r>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d0d9      	beq.n	800bd2a <__swbuf_r+0x2e>
 800bd76:	e7d6      	b.n	800bd26 <__swbuf_r+0x2a>

0800bd78 <__swsetup_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4b29      	ldr	r3, [pc, #164]	@ (800be20 <__swsetup_r+0xa8>)
 800bd7c:	4605      	mov	r5, r0
 800bd7e:	6818      	ldr	r0, [r3, #0]
 800bd80:	460c      	mov	r4, r1
 800bd82:	b118      	cbz	r0, 800bd8c <__swsetup_r+0x14>
 800bd84:	6a03      	ldr	r3, [r0, #32]
 800bd86:	b90b      	cbnz	r3, 800bd8c <__swsetup_r+0x14>
 800bd88:	f7fc fca4 	bl	80086d4 <__sinit>
 800bd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd90:	0719      	lsls	r1, r3, #28
 800bd92:	d422      	bmi.n	800bdda <__swsetup_r+0x62>
 800bd94:	06da      	lsls	r2, r3, #27
 800bd96:	d407      	bmi.n	800bda8 <__swsetup_r+0x30>
 800bd98:	2209      	movs	r2, #9
 800bd9a:	602a      	str	r2, [r5, #0]
 800bd9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bda0:	81a3      	strh	r3, [r4, #12]
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295
 800bda6:	e033      	b.n	800be10 <__swsetup_r+0x98>
 800bda8:	0758      	lsls	r0, r3, #29
 800bdaa:	d512      	bpl.n	800bdd2 <__swsetup_r+0x5a>
 800bdac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdae:	b141      	cbz	r1, 800bdc2 <__swsetup_r+0x4a>
 800bdb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdb4:	4299      	cmp	r1, r3
 800bdb6:	d002      	beq.n	800bdbe <__swsetup_r+0x46>
 800bdb8:	4628      	mov	r0, r5
 800bdba:	f7fd fbf9 	bl	80095b0 <_free_r>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdc8:	81a3      	strh	r3, [r4, #12]
 800bdca:	2300      	movs	r3, #0
 800bdcc:	6063      	str	r3, [r4, #4]
 800bdce:	6923      	ldr	r3, [r4, #16]
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	f043 0308 	orr.w	r3, r3, #8
 800bdd8:	81a3      	strh	r3, [r4, #12]
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	b94b      	cbnz	r3, 800bdf2 <__swsetup_r+0x7a>
 800bdde:	89a3      	ldrh	r3, [r4, #12]
 800bde0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bde4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bde8:	d003      	beq.n	800bdf2 <__swsetup_r+0x7a>
 800bdea:	4621      	mov	r1, r4
 800bdec:	4628      	mov	r0, r5
 800bdee:	f000 f883 	bl	800bef8 <__smakebuf_r>
 800bdf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf6:	f013 0201 	ands.w	r2, r3, #1
 800bdfa:	d00a      	beq.n	800be12 <__swsetup_r+0x9a>
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	60a2      	str	r2, [r4, #8]
 800be00:	6962      	ldr	r2, [r4, #20]
 800be02:	4252      	negs	r2, r2
 800be04:	61a2      	str	r2, [r4, #24]
 800be06:	6922      	ldr	r2, [r4, #16]
 800be08:	b942      	cbnz	r2, 800be1c <__swsetup_r+0xa4>
 800be0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be0e:	d1c5      	bne.n	800bd9c <__swsetup_r+0x24>
 800be10:	bd38      	pop	{r3, r4, r5, pc}
 800be12:	0799      	lsls	r1, r3, #30
 800be14:	bf58      	it	pl
 800be16:	6962      	ldrpl	r2, [r4, #20]
 800be18:	60a2      	str	r2, [r4, #8]
 800be1a:	e7f4      	b.n	800be06 <__swsetup_r+0x8e>
 800be1c:	2000      	movs	r0, #0
 800be1e:	e7f7      	b.n	800be10 <__swsetup_r+0x98>
 800be20:	20000018 	.word	0x20000018

0800be24 <_raise_r>:
 800be24:	291f      	cmp	r1, #31
 800be26:	b538      	push	{r3, r4, r5, lr}
 800be28:	4605      	mov	r5, r0
 800be2a:	460c      	mov	r4, r1
 800be2c:	d904      	bls.n	800be38 <_raise_r+0x14>
 800be2e:	2316      	movs	r3, #22
 800be30:	6003      	str	r3, [r0, #0]
 800be32:	f04f 30ff 	mov.w	r0, #4294967295
 800be36:	bd38      	pop	{r3, r4, r5, pc}
 800be38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be3a:	b112      	cbz	r2, 800be42 <_raise_r+0x1e>
 800be3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be40:	b94b      	cbnz	r3, 800be56 <_raise_r+0x32>
 800be42:	4628      	mov	r0, r5
 800be44:	f000 f830 	bl	800bea8 <_getpid_r>
 800be48:	4622      	mov	r2, r4
 800be4a:	4601      	mov	r1, r0
 800be4c:	4628      	mov	r0, r5
 800be4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be52:	f000 b817 	b.w	800be84 <_kill_r>
 800be56:	2b01      	cmp	r3, #1
 800be58:	d00a      	beq.n	800be70 <_raise_r+0x4c>
 800be5a:	1c59      	adds	r1, r3, #1
 800be5c:	d103      	bne.n	800be66 <_raise_r+0x42>
 800be5e:	2316      	movs	r3, #22
 800be60:	6003      	str	r3, [r0, #0]
 800be62:	2001      	movs	r0, #1
 800be64:	e7e7      	b.n	800be36 <_raise_r+0x12>
 800be66:	2100      	movs	r1, #0
 800be68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be6c:	4620      	mov	r0, r4
 800be6e:	4798      	blx	r3
 800be70:	2000      	movs	r0, #0
 800be72:	e7e0      	b.n	800be36 <_raise_r+0x12>

0800be74 <raise>:
 800be74:	4b02      	ldr	r3, [pc, #8]	@ (800be80 <raise+0xc>)
 800be76:	4601      	mov	r1, r0
 800be78:	6818      	ldr	r0, [r3, #0]
 800be7a:	f7ff bfd3 	b.w	800be24 <_raise_r>
 800be7e:	bf00      	nop
 800be80:	20000018 	.word	0x20000018

0800be84 <_kill_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4d07      	ldr	r5, [pc, #28]	@ (800bea4 <_kill_r+0x20>)
 800be88:	2300      	movs	r3, #0
 800be8a:	4604      	mov	r4, r0
 800be8c:	4608      	mov	r0, r1
 800be8e:	4611      	mov	r1, r2
 800be90:	602b      	str	r3, [r5, #0]
 800be92:	f7f6 fa31 	bl	80022f8 <_kill>
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	d102      	bne.n	800bea0 <_kill_r+0x1c>
 800be9a:	682b      	ldr	r3, [r5, #0]
 800be9c:	b103      	cbz	r3, 800bea0 <_kill_r+0x1c>
 800be9e:	6023      	str	r3, [r4, #0]
 800bea0:	bd38      	pop	{r3, r4, r5, pc}
 800bea2:	bf00      	nop
 800bea4:	2000051c 	.word	0x2000051c

0800bea8 <_getpid_r>:
 800bea8:	f7f6 ba1e 	b.w	80022e8 <_getpid>

0800beac <__swhatbuf_r>:
 800beac:	b570      	push	{r4, r5, r6, lr}
 800beae:	460c      	mov	r4, r1
 800beb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb4:	2900      	cmp	r1, #0
 800beb6:	b096      	sub	sp, #88	@ 0x58
 800beb8:	4615      	mov	r5, r2
 800beba:	461e      	mov	r6, r3
 800bebc:	da0d      	bge.n	800beda <__swhatbuf_r+0x2e>
 800bebe:	89a3      	ldrh	r3, [r4, #12]
 800bec0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bec4:	f04f 0100 	mov.w	r1, #0
 800bec8:	bf14      	ite	ne
 800beca:	2340      	movne	r3, #64	@ 0x40
 800becc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bed0:	2000      	movs	r0, #0
 800bed2:	6031      	str	r1, [r6, #0]
 800bed4:	602b      	str	r3, [r5, #0]
 800bed6:	b016      	add	sp, #88	@ 0x58
 800bed8:	bd70      	pop	{r4, r5, r6, pc}
 800beda:	466a      	mov	r2, sp
 800bedc:	f000 f848 	bl	800bf70 <_fstat_r>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	dbec      	blt.n	800bebe <__swhatbuf_r+0x12>
 800bee4:	9901      	ldr	r1, [sp, #4]
 800bee6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800beea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800beee:	4259      	negs	r1, r3
 800bef0:	4159      	adcs	r1, r3
 800bef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bef6:	e7eb      	b.n	800bed0 <__swhatbuf_r+0x24>

0800bef8 <__smakebuf_r>:
 800bef8:	898b      	ldrh	r3, [r1, #12]
 800befa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800befc:	079d      	lsls	r5, r3, #30
 800befe:	4606      	mov	r6, r0
 800bf00:	460c      	mov	r4, r1
 800bf02:	d507      	bpl.n	800bf14 <__smakebuf_r+0x1c>
 800bf04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	6123      	str	r3, [r4, #16]
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	6163      	str	r3, [r4, #20]
 800bf10:	b003      	add	sp, #12
 800bf12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf14:	ab01      	add	r3, sp, #4
 800bf16:	466a      	mov	r2, sp
 800bf18:	f7ff ffc8 	bl	800beac <__swhatbuf_r>
 800bf1c:	9f00      	ldr	r7, [sp, #0]
 800bf1e:	4605      	mov	r5, r0
 800bf20:	4639      	mov	r1, r7
 800bf22:	4630      	mov	r0, r6
 800bf24:	f7fd fbb8 	bl	8009698 <_malloc_r>
 800bf28:	b948      	cbnz	r0, 800bf3e <__smakebuf_r+0x46>
 800bf2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf2e:	059a      	lsls	r2, r3, #22
 800bf30:	d4ee      	bmi.n	800bf10 <__smakebuf_r+0x18>
 800bf32:	f023 0303 	bic.w	r3, r3, #3
 800bf36:	f043 0302 	orr.w	r3, r3, #2
 800bf3a:	81a3      	strh	r3, [r4, #12]
 800bf3c:	e7e2      	b.n	800bf04 <__smakebuf_r+0xc>
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	6020      	str	r0, [r4, #0]
 800bf42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	9b01      	ldr	r3, [sp, #4]
 800bf4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf4e:	b15b      	cbz	r3, 800bf68 <__smakebuf_r+0x70>
 800bf50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf54:	4630      	mov	r0, r6
 800bf56:	f000 f81d 	bl	800bf94 <_isatty_r>
 800bf5a:	b128      	cbz	r0, 800bf68 <__smakebuf_r+0x70>
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	f023 0303 	bic.w	r3, r3, #3
 800bf62:	f043 0301 	orr.w	r3, r3, #1
 800bf66:	81a3      	strh	r3, [r4, #12]
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	431d      	orrs	r5, r3
 800bf6c:	81a5      	strh	r5, [r4, #12]
 800bf6e:	e7cf      	b.n	800bf10 <__smakebuf_r+0x18>

0800bf70 <_fstat_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d07      	ldr	r5, [pc, #28]	@ (800bf90 <_fstat_r+0x20>)
 800bf74:	2300      	movs	r3, #0
 800bf76:	4604      	mov	r4, r0
 800bf78:	4608      	mov	r0, r1
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	f7f6 fa25 	bl	80023cc <_fstat>
 800bf82:	1c43      	adds	r3, r0, #1
 800bf84:	d102      	bne.n	800bf8c <_fstat_r+0x1c>
 800bf86:	682b      	ldr	r3, [r5, #0]
 800bf88:	b103      	cbz	r3, 800bf8c <_fstat_r+0x1c>
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	bd38      	pop	{r3, r4, r5, pc}
 800bf8e:	bf00      	nop
 800bf90:	2000051c 	.word	0x2000051c

0800bf94 <_isatty_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d06      	ldr	r5, [pc, #24]	@ (800bfb0 <_isatty_r+0x1c>)
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	602b      	str	r3, [r5, #0]
 800bfa0:	f7f6 fa24 	bl	80023ec <_isatty>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_isatty_r+0x1a>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_isatty_r+0x1a>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	2000051c 	.word	0x2000051c

0800bfb4 <_init>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	bf00      	nop
 800bfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfba:	bc08      	pop	{r3}
 800bfbc:	469e      	mov	lr, r3
 800bfbe:	4770      	bx	lr

0800bfc0 <_fini>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr
