
MTran_Assignment5_Embedded_LotterySystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800500c  0800500c  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800544c  0800544c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800544c  0800544c  0000644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005454  08005454  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005454  08005454  00006454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005458  08005458  00006458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800545c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  080054c4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080054c4  00007260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b847  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cbf  00000000  00000000  000128df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  000145a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000787  00000000  00000000  00014f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ba8  00000000  00000000  0001570f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c192  00000000  00000000  000362b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0ca9  00000000  00000000  00042449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001030f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  00103138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001066c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ff4 	.word	0x08004ff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004ff4 	.word	0x08004ff4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <addPlayers>:
* int *number: the order of player
*
* RETURNS : void
*/
void addPlayers(userInfoStruct *players, int *number)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b0a0      	sub	sp, #128	@ 0x80
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
    char userInfo[100];

    // Get user info
    printf("Enter participant details (Name,Age,Email,Phone,LotteryNumber): ");
 800056a:	483f      	ldr	r0, [pc, #252]	@ (8000668 <addPlayers+0x108>)
 800056c:	f003 f8ba 	bl	80036e4 <iprintf>
    scanf("%s", userInfo);
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	4619      	mov	r1, r3
 8000576:	483d      	ldr	r0, [pc, #244]	@ (800066c <addPlayers+0x10c>)
 8000578:	f003 f924 	bl	80037c4 <iscanf>
    printf("%s\r\n", userInfo);
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	4619      	mov	r1, r3
 8000582:	483b      	ldr	r0, [pc, #236]	@ (8000670 <addPlayers+0x110>)
 8000584:	f003 f8ae 	bl	80036e4 <iprintf>

    // Get user Name
    char *name = strtok(userInfo, ",");
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	4939      	ldr	r1, [pc, #228]	@ (8000674 <addPlayers+0x114>)
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fa1e 	bl	80039d0 <strtok>
 8000594:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (name != NULL)
 8000596:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000598:	2b00      	cmp	r3, #0
 800059a:	d05d      	beq.n	8000658 <addPlayers+0xf8>
    {
        strncpy(players[*number].name, name, sizeof(players[*number].name) - 1);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	019b      	lsls	r3, r3, #6
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	2213      	movs	r2, #19
 80005a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 f9fc 	bl	80039a8 <strncpy>

        // Get user Age
        char *age = strtok(NULL, ",");
 80005b0:	4930      	ldr	r1, [pc, #192]	@ (8000674 <addPlayers+0x114>)
 80005b2:	2000      	movs	r0, #0
 80005b4:	f003 fa0c 	bl	80039d0 <strtok>
 80005b8:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (age != NULL)
 80005ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00a      	beq.n	80005d6 <addPlayers+0x76>
        {
        	players[*number].age = atoi(age);
 80005c0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80005c2:	f002 fe5c 	bl	800327e <atoi>
 80005c6:	4601      	mov	r1, r0
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	019b      	lsls	r3, r3, #6
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	751a      	strb	r2, [r3, #20]
        }

        // Get user email
        char *email = strtok(NULL, ",");
 80005d6:	4927      	ldr	r1, [pc, #156]	@ (8000674 <addPlayers+0x114>)
 80005d8:	2000      	movs	r0, #0
 80005da:	f003 f9f9 	bl	80039d0 <strtok>
 80005de:	6778      	str	r0, [r7, #116]	@ 0x74
        if (email != NULL)
 80005e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d00a      	beq.n	80005fc <addPlayers+0x9c>
        {
            strncpy(players[*number].email, email, sizeof(players[*number].email) - 1);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	019b      	lsls	r3, r3, #6
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	3315      	adds	r3, #21
 80005f2:	221d      	movs	r2, #29
 80005f4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f9d6 	bl	80039a8 <strncpy>
        }

        // Get user phone number
        char *phoneNumber = strtok(NULL, ",");
 80005fc:	491d      	ldr	r1, [pc, #116]	@ (8000674 <addPlayers+0x114>)
 80005fe:	2000      	movs	r0, #0
 8000600:	f003 f9e6 	bl	80039d0 <strtok>
 8000604:	6738      	str	r0, [r7, #112]	@ 0x70
        if (phoneNumber != NULL)
 8000606:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00a      	beq.n	8000622 <addPlayers+0xc2>
        {
            strncpy(players[*number].phoneNumber, phoneNumber, sizeof(players[*number].phoneNumber) - 1);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	019b      	lsls	r3, r3, #6
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	3333      	adds	r3, #51	@ 0x33
 8000618:	220a      	movs	r2, #10
 800061a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800061c:	4618      	mov	r0, r3
 800061e:	f003 f9c3 	bl	80039a8 <strncpy>
        }

        // Get user Lottery Number
        char *lotteryNumber = strtok(NULL, ",");
 8000622:	4914      	ldr	r1, [pc, #80]	@ (8000674 <addPlayers+0x114>)
 8000624:	2000      	movs	r0, #0
 8000626:	f003 f9d3 	bl	80039d0 <strtok>
 800062a:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (lotteryNumber != NULL)
 800062c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00c      	beq.n	800064c <addPlayers+0xec>
        {
        	players[*number].lotteryNumber = (uint16_t)strtoul(lotteryNumber, NULL, 16);
 8000632:	2210      	movs	r2, #16
 8000634:	2100      	movs	r1, #0
 8000636:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000638:	f002 ff88 	bl	800354c <strtoul>
 800063c:	4601      	mov	r1, r0
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	019b      	lsls	r3, r3, #6
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	b28a      	uxth	r2, r1
 800064a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }

        (*number)++;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	601a      	str	r2, [r3, #0]
    }
    else
    {
        printf("Invalid input format. Try again.\n");
    }
}
 8000656:	e002      	b.n	800065e <addPlayers+0xfe>
        printf("Invalid input format. Try again.\n");
 8000658:	4807      	ldr	r0, [pc, #28]	@ (8000678 <addPlayers+0x118>)
 800065a:	f003 f8ab 	bl	80037b4 <puts>
}
 800065e:	bf00      	nop
 8000660:	3780      	adds	r7, #128	@ 0x80
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	0800500c 	.word	0x0800500c
 800066c:	08005050 	.word	0x08005050
 8000670:	08005054 	.word	0x08005054
 8000674:	0800505c 	.word	0x0800505c
 8000678:	08005060 	.word	0x08005060

0800067c <drawWinner>:
*
* RETURNS : void
*/

void drawWinner(userInfoStruct *players, int number)
{
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	b095      	sub	sp, #84	@ 0x54
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
    if (number == 0)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d103      	bne.n	8000694 <drawWinner+0x18>
    {
        printf("No participants to draw from.\r\n");
 800068c:	481d      	ldr	r0, [pc, #116]	@ (8000704 <drawWinner+0x88>)
 800068e:	f003 f891 	bl	80037b4 <puts>
 8000692:	e033      	b.n	80006fc <drawWinner+0x80>
        return;
    }

    // Select a random winner
    srand(HAL_GetTick());
 8000694:	f000 fbf4 	bl	8000e80 <HAL_GetTick>
 8000698:	4603      	mov	r3, r0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fdf4 	bl	8003288 <srand>
    int winnerNumber = rand() % number;
 80006a0:	f002 fe20 	bl	80032e4 <rand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	fb93 f2f2 	sdiv	r2, r3, r2
 80006ac:	6839      	ldr	r1, [r7, #0]
 80006ae:	fb01 f202 	mul.w	r2, r1, r2
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    userInfoStruct winner = players[winnerNumber];
 80006b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006b8:	019b      	lsls	r3, r3, #6
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	461c      	mov	r4, r3
 80006c0:	f107 060c 	add.w	r6, r7, #12
 80006c4:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 80006c8:	4635      	mov	r5, r6
 80006ca:	4623      	mov	r3, r4
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	6859      	ldr	r1, [r3, #4]
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d6:	3410      	adds	r4, #16
 80006d8:	3610      	adds	r6, #16
 80006da:	4564      	cmp	r4, ip
 80006dc:	d1f4      	bne.n	80006c8 <drawWinner+0x4c>

    // Display the winner's details
    printf("Congratulations! The winner is:\r\n");
 80006de:	480a      	ldr	r0, [pc, #40]	@ (8000708 <drawWinner+0x8c>)
 80006e0:	f003 f868 	bl	80037b4 <puts>
    printf("Name: %s\r\n", winner.name);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	4808      	ldr	r0, [pc, #32]	@ (800070c <drawWinner+0x90>)
 80006ec:	f002 fffa 	bl	80036e4 <iprintf>
    printf("Lottery Number: 0x%02x\r\n", winner.lotteryNumber);
 80006f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	@ (8000710 <drawWinner+0x94>)
 80006f8:	f002 fff4 	bl	80036e4 <iprintf>
}
 80006fc:	3754      	adds	r7, #84	@ 0x54
 80006fe:	46bd      	mov	sp, r7
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	bf00      	nop
 8000704:	08005084 	.word	0x08005084
 8000708:	080050a4 	.word	0x080050a4
 800070c:	080050c8 	.word	0x080050c8
 8000710:	080050d4 	.word	0x080050d4

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	userInfoStruct sUserInfo[MAX_USERS];
	int count = 0;
 800071c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000720:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
	int numberPlayers = 0;
 8000728:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800072c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fb3b 	bl	8000dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f88e 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f91e 	bl	800097c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000740:	f000 f8ec 	bl	800091c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Get number of participants
	printf("Enter the number of people who want to play (max 10): ");
 8000744:	483c      	ldr	r0, [pc, #240]	@ (8000838 <main+0x124>)
 8000746:	f002 ffcd 	bl	80036e4 <iprintf>
	scanf("%d", &numberPlayers);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	483b      	ldr	r0, [pc, #236]	@ (800083c <main+0x128>)
 8000750:	f003 f838 	bl	80037c4 <iscanf>
	printf("%d\r\n", numberPlayers);
 8000754:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000758:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4619      	mov	r1, r3
 8000760:	4837      	ldr	r0, [pc, #220]	@ (8000840 <main+0x12c>)
 8000762:	f002 ffbf 	bl	80036e4 <iprintf>

	if (numberPlayers < 1 || numberPlayers > MAX_USERS)
 8000766:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800076a:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dd06      	ble.n	8000782 <main+0x6e>
 8000774:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000778:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b0a      	cmp	r3, #10
 8000780:	dd03      	ble.n	800078a <main+0x76>
	{
        printf("Invalid number of participants.\r\n");
 8000782:	4830      	ldr	r0, [pc, #192]	@ (8000844 <main+0x130>)
 8000784:	f003 f816 	bl	80037b4 <puts>
 8000788:	e054      	b.n	8000834 <main+0x120>
    }
	else
	{
		// Input participant details
		for (int i = 0; i < numberPlayers; i++)
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8000790:	e00c      	b.n	80007ac <main+0x98>
		{
			addPlayers(sUserInfo, &count);
 8000792:	f107 0208 	add.w	r2, r7, #8
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fedf 	bl	8000560 <addPlayers>
		for (int i = 0; i < numberPlayers; i++)
 80007a2:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80007a6:	3301      	adds	r3, #1
 80007a8:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 80007ac:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80007b0:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f8d7 228c 	ldr.w	r2, [r7, #652]	@ 0x28c
 80007ba:	429a      	cmp	r2, r3
 80007bc:	dbe9      	blt.n	8000792 <main+0x7e>
		}

		// Reset count for next draw
		count = 0;
 80007be:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80007c2:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]

		// Ask if user wants to draw the result
		char choice;
		printf("Do you want to draw the result now? (y/n): ");
 80007ca:	481f      	ldr	r0, [pc, #124]	@ (8000848 <main+0x134>)
 80007cc:	f002 ff8a 	bl	80036e4 <iprintf>
		do
		{
			scanf("%c", &choice);
 80007d0:	1cfb      	adds	r3, r7, #3
 80007d2:	4619      	mov	r1, r3
 80007d4:	481d      	ldr	r0, [pc, #116]	@ (800084c <main+0x138>)
 80007d6:	f002 fff5 	bl	80037c4 <iscanf>
		}
		while (choice == '\r');
 80007da:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80007de:	f2a3 238d 	subw	r3, r3, #653	@ 0x28d
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b0d      	cmp	r3, #13
 80007e6:	d0f3      	beq.n	80007d0 <main+0xbc>
		printf("%c\r\n", choice);
 80007e8:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80007ec:	f2a3 238d 	subw	r3, r3, #653	@ 0x28d
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4816      	ldr	r0, [pc, #88]	@ (8000850 <main+0x13c>)
 80007f6:	f002 ff75 	bl	80036e4 <iprintf>
		if (choice == 'y' || choice == 'Y') {
 80007fa:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80007fe:	f2a3 238d 	subw	r3, r3, #653	@ 0x28d
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b79      	cmp	r3, #121	@ 0x79
 8000806:	d006      	beq.n	8000816 <main+0x102>
 8000808:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800080c:	f2a3 238d 	subw	r3, r3, #653	@ 0x28d
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b59      	cmp	r3, #89	@ 0x59
 8000814:	d10b      	bne.n	800082e <main+0x11a>
			drawWinner(sUserInfo, numberPlayers);
 8000816:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800081a:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff28 	bl	800067c <drawWinner>
 800082c:	e002      	b.n	8000834 <main+0x120>
		}
		else
		{
			printf("Lottery not drawn.\r\n");
 800082e:	4809      	ldr	r0, [pc, #36]	@ (8000854 <main+0x140>)
 8000830:	f002 ffc0 	bl	80037b4 <puts>
	printf("Enter the number of people who want to play (max 10): ");
 8000834:	e786      	b.n	8000744 <main+0x30>
 8000836:	bf00      	nop
 8000838:	080050f0 	.word	0x080050f0
 800083c:	08005128 	.word	0x08005128
 8000840:	0800512c 	.word	0x0800512c
 8000844:	08005134 	.word	0x08005134
 8000848:	08005158 	.word	0x08005158
 800084c:	08005184 	.word	0x08005184
 8000850:	08005188 	.word	0x08005188
 8000854:	08005190 	.word	0x08005190

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b096      	sub	sp, #88	@ 0x58
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2244      	movs	r2, #68	@ 0x44
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 f896 	bl	8003998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800087a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800087e:	f000 fd91 	bl	80013a4 <HAL_PWREx_ControlVoltageScaling>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000888:	f000 f8c2 	bl	8000a10 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800088c:	f000 fd6c 	bl	8001368 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000890:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <SystemClock_Config+0xc0>)
 8000892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000896:	4a20      	ldr	r2, [pc, #128]	@ (8000918 <SystemClock_Config+0xc0>)
 8000898:	f023 0318 	bic.w	r3, r3, #24
 800089c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008a0:	2314      	movs	r3, #20
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a8:	2301      	movs	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008b0:	2360      	movs	r3, #96	@ 0x60
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008b8:	2301      	movs	r3, #1
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008c0:	2310      	movs	r3, #16
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008c4:	2307      	movs	r3, #7
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fdbb 	bl	8001450 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f896 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	2303      	movs	r3, #3
 80008ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	2101      	movs	r1, #1
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f9bb 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000908:	f000 f882 	bl	8000a10 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800090c:	f001 fdce 	bl	80024ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8000910:	bf00      	nop
 8000912:	3758      	adds	r7, #88	@ 0x58
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <MX_USART2_UART_Init+0x5c>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_USART2_UART_Init+0x58>)
 8000960:	f001 fea6 	bl	80026b0 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 f851 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000084 	.word	0x20000084
 8000978:	40004400 	.word	0x40004400

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <MX_GPIO_Init+0x8c>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <MX_GPIO_Init+0x8c>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_GPIO_Init+0x8c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_GPIO_Init+0x8c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a16      	ldr	r2, [pc, #88]	@ (8000a08 <MX_GPIO_Init+0x8c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_GPIO_Init+0x8c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_GPIO_Init+0x8c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <MX_GPIO_Init+0x8c>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_GPIO_Init+0x8c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2108      	movs	r1, #8
 80009de:	480b      	ldr	r0, [pc, #44]	@ (8000a0c <MX_GPIO_Init+0x90>)
 80009e0:	f000 fcaa 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009e4:	2308      	movs	r3, #8
 80009e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_GPIO_Init+0x90>)
 80009fc:	f000 fb32 	bl	8001064 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000400 	.word	0x48000400

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <Error_Handler+0x8>

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3e:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b09e      	sub	sp, #120	@ 0x78
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2254      	movs	r2, #84	@ 0x54
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 ff87 	bl	8003998 <memset>
  if(huart->Instance==USART2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <HAL_UART_MspInit+0xcc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d148      	bne.n	8000b26 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fb0d 	bl	80020c0 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aac:	f7ff ffb0 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab0:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <HAL_UART_MspInit+0xd0>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b34 <HAL_UART_MspInit+0xd0>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aba:	6593      	str	r3, [r2, #88]	@ 0x58
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <HAL_UART_MspInit+0xd0>)
 8000abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <HAL_UART_MspInit+0xd0>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	4a19      	ldr	r2, [pc, #100]	@ (8000b34 <HAL_UART_MspInit+0xd0>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad4:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <HAL_UART_MspInit+0xd0>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af0:	2307      	movs	r3, #7
 8000af2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afe:	f000 fab1 	bl	8001064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b06:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b14:	2303      	movs	r3, #3
 8000b16:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b22:	f000 fa9f 	bl	8001064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3778      	adds	r7, #120	@ 0x78
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40021000 	.word	0x40021000

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <NMI_Handler+0x4>

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <MemManage_Handler+0x4>

08000b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 f963 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_kill>:

int _kill(int pid, int sig)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bb0:	f002 ffb0 	bl	8003b14 <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2216      	movs	r2, #22
 8000bb8:	601a      	str	r2, [r3, #0]
  return -1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_exit>:

void _exit (int status)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bce:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffe7 	bl	8000ba6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <_exit+0x12>

08000bdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
//  }
//
//  return len;
  extern UART_HandleTypeDef huart2;

  HAL_StatusTypeDef result = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	75fb      	strb	r3, [r7, #23]

  len = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	607b      	str	r3, [r7, #4]

  result = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <_read+0x40>)
 8000bfc:	f001 fe2f 	bl	800285e <HAL_UART_Receive>
 8000c00:	4603      	mov	r3, r0
 8000c02:	75fb      	strb	r3, [r7, #23]
  if (result != HAL_OK)
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <_read+0x34>
  {
	  len = EOF;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	607b      	str	r3, [r7, #4]
  }
  return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000084 	.word	0x20000084

08000c20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
//  {
//    __io_putchar(*ptr++);
//  }
  extern UART_HandleTypeDef huart2;

  HAL_StatusTypeDef result = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	75fb      	strb	r3, [r7, #23]

  result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <_write+0x40>)
 8000c3c:	f001 fd86 	bl	800274c <HAL_UART_Transmit>
 8000c40:	4603      	mov	r3, r0
 8000c42:	75fb      	strb	r3, [r7, #23]
  if (result == HAL_ERROR || result == HAL_BUSY)
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d002      	beq.n	8000c50 <_write+0x30>
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d101      	bne.n	8000c54 <_write+0x34>
  {
	  Error_Handler();
 8000c50:	f7ff fede 	bl	8000a10 <Error_Handler>
  }
  return len;
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000084 	.word	0x20000084

08000c64 <_close>:

int _close(int file)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_isatty>:

int _isatty(int file)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca4:	2301      	movs	r3, #1
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f002 ff0a 	bl	8003b14 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20010000 	.word	0x20010000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	2000010c 	.word	0x2000010c
 8000d34:	20000260 	.word	0x20000260

08000d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d60:	f7ff ffea 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d66:	490d      	ldr	r1, [pc, #52]	@ (8000d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <LoopForever+0xe>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000da8 <LoopForever+0x16>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f002 fec9 	bl	8003b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d8e:	f7ff fcc1 	bl	8000714 <main>

08000d92 <LoopForever>:

LoopForever:
    b LoopForever
 8000d92:	e7fe      	b.n	8000d92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da0:	0800545c 	.word	0x0800545c
  ldr r2, =_sbss
 8000da4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000da8:	20000260 	.word	0x20000260

08000dac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC1_IRQHandler>

08000dae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f91f 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f80e 	bl	8000de0 <HAL_InitTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	e001      	b.n	8000dd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd0:	f7ff fe24 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <HAL_InitTick+0x6c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d023      	beq.n	8000e3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <HAL_InitTick+0x70>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_InitTick+0x6c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f91d 	bl	800104a <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10f      	bne.n	8000e36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d809      	bhi.n	8000e30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f8f5 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e28:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <HAL_InitTick+0x74>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e007      	b.n	8000e40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e004      	b.n	8000e40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e001      	b.n	8000e40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000110 	.word	0x20000110

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000110 	.word	0x20000110

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	@ (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	@ (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff47 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff5c 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffb0 	bl	8000fb8 <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	e148      	b.n	8001306 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	2101      	movs	r1, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 813a 	beq.w	8001300 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d005      	beq.n	80010a4 <HAL_GPIO_Init+0x40>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d130      	bne.n	8001106 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010da:	2201      	movs	r2, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	f003 0201 	and.w	r2, r3, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b03      	cmp	r3, #3
 8001110:	d017      	beq.n	8001142 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d123      	bne.n	8001196 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0203 	and.w	r2, r3, #3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8094 	beq.w	8001300 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d8:	4b52      	ldr	r3, [pc, #328]	@ (8001324 <HAL_GPIO_Init+0x2c0>)
 80011da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011dc:	4a51      	ldr	r2, [pc, #324]	@ (8001324 <HAL_GPIO_Init+0x2c0>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001324 <HAL_GPIO_Init+0x2c0>)
 80011e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001328 <HAL_GPIO_Init+0x2c4>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800121a:	d00d      	beq.n	8001238 <HAL_GPIO_Init+0x1d4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a43      	ldr	r2, [pc, #268]	@ (800132c <HAL_GPIO_Init+0x2c8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d007      	beq.n	8001234 <HAL_GPIO_Init+0x1d0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a42      	ldr	r2, [pc, #264]	@ (8001330 <HAL_GPIO_Init+0x2cc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d101      	bne.n	8001230 <HAL_GPIO_Init+0x1cc>
 800122c:	2302      	movs	r3, #2
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x1d6>
 8001230:	2307      	movs	r3, #7
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x1d6>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x1d6>
 8001238:	2300      	movs	r3, #0
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124a:	4937      	ldr	r1, [pc, #220]	@ (8001328 <HAL_GPIO_Init+0x2c4>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001258:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800127c:	4a2d      	ldr	r2, [pc, #180]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001282:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a6:	4a23      	ldr	r2, [pc, #140]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d0:	4a18      	ldr	r2, [pc, #96]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <HAL_GPIO_Init+0x2d0>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f aeaf 	bne.w	8001074 <HAL_GPIO_Init+0x10>
  }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001354:	e002      	b.n	800135c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40007000 	.word	0x40007000

08001388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40007000 	.word	0x40007000

080013a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013b2:	d130      	bne.n	8001416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013c0:	d038      	beq.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c2:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2232      	movs	r2, #50	@ 0x32
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	4a1b      	ldr	r2, [pc, #108]	@ (800144c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e8:	e002      	b.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013fc:	d102      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f2      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001410:	d110      	bne.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e00f      	b.n	8001436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800141e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001422:	d007      	beq.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001424:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800142c:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40007000 	.word	0x40007000
 8001448:	20000000 	.word	0x20000000
 800144c:	431bde83 	.word	0x431bde83

08001450 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	f000 bc02 	b.w	8001c68 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001464:	4b96      	ldr	r3, [pc, #600]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800146e:	4b94      	ldr	r3, [pc, #592]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80e4 	beq.w	800164e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <HAL_RCC_OscConfig+0x4c>
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b0c      	cmp	r3, #12
 8001490:	f040 808b 	bne.w	80015aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b01      	cmp	r3, #1
 8001498:	f040 8087 	bne.w	80015aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149c:	4b88      	ldr	r3, [pc, #544]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_OscConfig+0x64>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e3d9      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1a      	ldr	r2, [r3, #32]
 80014b8:	4b81      	ldr	r3, [pc, #516]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <HAL_RCC_OscConfig+0x7e>
 80014c4:	4b7e      	ldr	r3, [pc, #504]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014cc:	e005      	b.n	80014da <HAL_RCC_OscConfig+0x8a>
 80014ce:	4b7c      	ldr	r3, [pc, #496]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014da:	4293      	cmp	r3, r2
 80014dc:	d223      	bcs.n	8001526 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fd8c 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e3ba      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f2:	4b73      	ldr	r3, [pc, #460]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a72      	ldr	r2, [pc, #456]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b70      	ldr	r3, [pc, #448]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	496d      	ldr	r1, [pc, #436]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001510:	4b6b      	ldr	r3, [pc, #428]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	4968      	ldr	r1, [pc, #416]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
 8001524:	e025      	b.n	8001572 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001526:	4b66      	ldr	r3, [pc, #408]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a65      	ldr	r2, [pc, #404]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b63      	ldr	r3, [pc, #396]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4960      	ldr	r1, [pc, #384]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001544:	4b5e      	ldr	r3, [pc, #376]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	495b      	ldr	r1, [pc, #364]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fd4c 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e37a      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001572:	f000 fc81 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001576:	4602      	mov	r2, r0
 8001578:	4b51      	ldr	r3, [pc, #324]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	4950      	ldr	r1, [pc, #320]	@ (80016c4 <HAL_RCC_OscConfig+0x274>)
 8001584:	5ccb      	ldrb	r3, [r1, r3]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	fa22 f303 	lsr.w	r3, r2, r3
 800158e:	4a4e      	ldr	r2, [pc, #312]	@ (80016c8 <HAL_RCC_OscConfig+0x278>)
 8001590:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001592:	4b4e      	ldr	r3, [pc, #312]	@ (80016cc <HAL_RCC_OscConfig+0x27c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fc22 	bl	8000de0 <HAL_InitTick>
 800159c:	4603      	mov	r3, r0
 800159e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d052      	beq.n	800164c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	e35e      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d032      	beq.n	8001618 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015b2:	4b43      	ldr	r3, [pc, #268]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a42      	ldr	r2, [pc, #264]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015be:	f7ff fc5f 	bl	8000e80 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc5b 	bl	8000e80 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e347      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d8:	4b39      	ldr	r3, [pc, #228]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e4:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a35      	ldr	r2, [pc, #212]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4930      	ldr	r1, [pc, #192]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001602:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	492b      	ldr	r1, [pc, #172]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
 8001616:	e01a      	b.n	800164e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001618:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a28      	ldr	r2, [pc, #160]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001624:	f7ff fc2c 	bl	8000e80 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800162c:	f7ff fc28 	bl	8000e80 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e314      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x1dc>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d073      	beq.n	8001742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b08      	cmp	r3, #8
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x21c>
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d10e      	bne.n	8001684 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d10b      	bne.n	8001684 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d063      	beq.n	8001740 <HAL_RCC_OscConfig+0x2f0>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d15f      	bne.n	8001740 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e2f1      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x24c>
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e025      	b.n	80016e8 <HAL_RCC_OscConfig+0x298>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016a4:	d114      	bne.n	80016d0 <HAL_RCC_OscConfig+0x280>
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a02      	ldr	r2, [pc, #8]	@ (80016c0 <HAL_RCC_OscConfig+0x270>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e013      	b.n	80016e8 <HAL_RCC_OscConfig+0x298>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	080051b0 	.word	0x080051b0
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004
 80016d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a9f      	ldr	r2, [pc, #636]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b9d      	ldr	r3, [pc, #628]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a9c      	ldr	r2, [pc, #624]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fbc6 	bl	8000e80 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fbc2 	bl	8000e80 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	@ 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e2ae      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170a:	4b92      	ldr	r3, [pc, #584]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x2a8>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fbb2 	bl	8000e80 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fbae 	bl	8000e80 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	@ 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e29a      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001732:	4b88      	ldr	r3, [pc, #544]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x2d0>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d060      	beq.n	8001810 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x310>
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d119      	bne.n	800178e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d116      	bne.n	800178e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001760:	4b7c      	ldr	r3, [pc, #496]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_OscConfig+0x328>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e277      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b76      	ldr	r3, [pc, #472]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	061b      	lsls	r3, r3, #24
 8001786:	4973      	ldr	r1, [pc, #460]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800178c:	e040      	b.n	8001810 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d023      	beq.n	80017de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001796:	4b6f      	ldr	r3, [pc, #444]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6e      	ldr	r2, [pc, #440]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff fb6d 	bl	8000e80 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff fb69 	bl	8000e80 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e255      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017bc:	4b65      	ldr	r3, [pc, #404]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b62      	ldr	r3, [pc, #392]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	495f      	ldr	r1, [pc, #380]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
 80017dc:	e018      	b.n	8001810 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017de:	4b5d      	ldr	r3, [pc, #372]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80017e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb49 	bl	8000e80 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fb45 	bl	8000e80 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e231      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d03c      	beq.n	8001896 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01c      	beq.n	800185e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001824:	4b4b      	ldr	r3, [pc, #300]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182a:	4a4a      	ldr	r2, [pc, #296]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff fb24 	bl	8000e80 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff fb20 	bl	8000e80 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e20c      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184e:	4b41      	ldr	r3, [pc, #260]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ef      	beq.n	800183c <HAL_RCC_OscConfig+0x3ec>
 800185c:	e01b      	b.n	8001896 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185e:	4b3d      	ldr	r3, [pc, #244]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001864:	4a3b      	ldr	r2, [pc, #236]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff fb07 	bl	8000e80 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff fb03 	bl	8000e80 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1ef      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001888:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ef      	bne.n	8001876 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80a6 	beq.w	80019f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10d      	bne.n	80018d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	4b27      	ldr	r3, [pc, #156]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b8:	4a26      	ldr	r2, [pc, #152]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80018ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018be:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c0:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d0:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <HAL_RCC_OscConfig+0x508>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d118      	bne.n	800190e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <HAL_RCC_OscConfig+0x508>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <HAL_RCC_OscConfig+0x508>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e8:	f7ff faca 	bl	8000e80 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f0:	f7ff fac6 	bl	8000e80 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e1b2      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_RCC_OscConfig+0x508>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_RCC_OscConfig+0x4d8>
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191c:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001926:	e029      	b.n	800197c <HAL_RCC_OscConfig+0x52c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b05      	cmp	r3, #5
 800192e:	d115      	bne.n	800195c <HAL_RCC_OscConfig+0x50c>
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001936:	4a07      	ldr	r2, [pc, #28]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001946:	4a03      	ldr	r2, [pc, #12]	@ (8001954 <HAL_RCC_OscConfig+0x504>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001950:	e014      	b.n	800197c <HAL_RCC_OscConfig+0x52c>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
 800195c:	4b9a      	ldr	r3, [pc, #616]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001962:	4a99      	ldr	r2, [pc, #612]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800196c:	4b96      	ldr	r3, [pc, #600]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001972:	4a95      	ldr	r2, [pc, #596]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d016      	beq.n	80019b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff fa7c 	bl	8000e80 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff fa78 	bl	8000e80 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e162      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a2:	4b89      	ldr	r3, [pc, #548]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 80019a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ed      	beq.n	800198c <HAL_RCC_OscConfig+0x53c>
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff fa65 	bl	8000e80 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff fa61 	bl	8000e80 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e14b      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d0:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ed      	bne.n	80019ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019de:	7ffb      	ldrb	r3, [r7, #31]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e4:	4b78      	ldr	r3, [pc, #480]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e8:	4a77      	ldr	r2, [pc, #476]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 80019ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d03c      	beq.n	8001a76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01c      	beq.n	8001a3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a04:	4b70      	ldr	r3, [pc, #448]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a0a:	4a6f      	ldr	r2, [pc, #444]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff fa34 	bl	8000e80 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a1c:	f7ff fa30 	bl	8000e80 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e11c      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a2e:	4b66      	ldr	r3, [pc, #408]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0ef      	beq.n	8001a1c <HAL_RCC_OscConfig+0x5cc>
 8001a3c:	e01b      	b.n	8001a76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a3e:	4b62      	ldr	r3, [pc, #392]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a44:	4a60      	ldr	r2, [pc, #384]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fa17 	bl	8000e80 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a56:	f7ff fa13 	bl	8000e80 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0ff      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a68:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ef      	bne.n	8001a56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80f3 	beq.w	8001c66 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	f040 80c9 	bne.w	8001c1c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0203 	and.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d12c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d123      	bne.n	8001af8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d11b      	bne.n	8001af8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d113      	bne.n	8001af8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	3b01      	subs	r3, #1
 8001ade:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d109      	bne.n	8001af8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	3b01      	subs	r3, #1
 8001af2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d06b      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d062      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001afe:	4b32      	ldr	r3, [pc, #200]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0ac      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b1a:	f7ff f9b1 	bl	8000e80 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f9ad 	bl	8000e80 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e099      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <HAL_RCC_OscConfig+0x77c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b50:	3a01      	subs	r2, #1
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	4311      	orrs	r1, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b5a:	0212      	lsls	r2, r2, #8
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b62:	0852      	lsrs	r2, r2, #1
 8001b64:	3a01      	subs	r2, #1
 8001b66:	0552      	lsls	r2, r2, #21
 8001b68:	4311      	orrs	r1, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b6e:	0852      	lsrs	r2, r2, #1
 8001b70:	3a01      	subs	r2, #1
 8001b72:	0652      	lsls	r2, r2, #25
 8001b74:	4311      	orrs	r1, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b7a:	06d2      	lsls	r2, r2, #27
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	4912      	ldr	r1, [pc, #72]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b84:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b9c:	f7ff f970 	bl	8000e80 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f96c 	bl	8000e80 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e058      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb6:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc2:	e050      	b.n	8001c66 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e04f      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd0:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d144      	bne.n	8001c66 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b24      	ldr	r3, [pc, #144]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a23      	ldr	r2, [pc, #140]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be8:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a20      	ldr	r2, [pc, #128]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bf4:	f7ff f944 	bl	8000e80 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff f940 	bl	8000e80 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e02c      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x7ac>
 8001c1a:	e024      	b.n	8001c66 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d01f      	beq.n	8001c62 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001c28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f927 	bl	8000e80 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff f923 	bl	8000e80 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e00f      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4905      	ldr	r1, [pc, #20]	@ (8001c70 <HAL_RCC_OscConfig+0x820>)
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_RCC_OscConfig+0x824>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
 8001c60:	e001      	b.n	8001c66 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	feeefffc 	.word	0xfeeefffc

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0e7      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d910      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b72      	ldr	r3, [pc, #456]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4970      	ldr	r1, [pc, #448]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b6e      	ldr	r3, [pc, #440]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0cf      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b66      	ldr	r3, [pc, #408]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d908      	bls.n	8001cea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b63      	ldr	r3, [pc, #396]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4960      	ldr	r1, [pc, #384]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d04c      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d121      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0a6      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d16:	4b54      	ldr	r3, [pc, #336]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e09a      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e08e      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e086      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b46      	ldr	r3, [pc, #280]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4943      	ldr	r1, [pc, #268]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d60:	f7ff f88e 	bl	8000e80 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7ff f88a 	bl	8000e80 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e06e      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d208      	bcs.n	8001dbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	492b      	ldr	r1, [pc, #172]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d210      	bcs.n	8001dee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 0207 	bic.w	r2, r3, #7
 8001dd4:	4923      	ldr	r1, [pc, #140]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e036      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	4918      	ldr	r1, [pc, #96]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4910      	ldr	r1, [pc, #64]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e2c:	f000 f824 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	490b      	ldr	r1, [pc, #44]	@ (8001e6c <HAL_RCC_ClockConfig+0x1f4>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	4a09      	ldr	r2, [pc, #36]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1fc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ffc5 	bl	8000de0 <HAL_InitTick>
 8001e56:	4603      	mov	r3, r0
 8001e58:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	080051b0 	.word	0x080051b0
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	4b3b      	ldr	r3, [pc, #236]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x34>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d121      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d11e      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eac:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e004      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001efc:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001efe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d134      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d003      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xac>
 8001f1c:	e005      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f20:	617b      	str	r3, [r7, #20]
      break;
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f24:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f26:	617b      	str	r3, [r7, #20]
      break;
 8001f28:	e002      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	fb03 f202 	mul.w	r2, r3, r2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	0e5b      	lsrs	r3, r3, #25
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	3301      	adds	r3, #1
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f70:	69bb      	ldr	r3, [r7, #24]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	080051c8 	.word	0x080051c8
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	007a1200 	.word	0x007a1200

08001f90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000000 	.word	0x20000000

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fac:	f7ff fff0 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4904      	ldr	r1, [pc, #16]	@ (8001fd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	080051c0 	.word	0x080051c0

08001fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fd8:	f7ff ffda 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	0adb      	lsrs	r3, r3, #11
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4904      	ldr	r1, [pc, #16]	@ (8001ffc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	080051c0 	.word	0x080051c0

08002000 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002018:	f7ff f9b6 	bl	8001388 <HAL_PWREx_GetVoltageRange>
 800201c:	6178      	str	r0, [r7, #20]
 800201e:	e014      	b.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	4a24      	ldr	r2, [pc, #144]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	@ 0x58
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002038:	f7ff f9a6 	bl	8001388 <HAL_PWREx_GetVoltageRange>
 800203c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002050:	d10b      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	@ 0x80
 8002056:	d919      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2ba0      	cmp	r3, #160	@ 0xa0
 800205c:	d902      	bls.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e013      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e010      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b80      	cmp	r3, #128	@ 0x80
 800206e:	d902      	bls.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002070:	2303      	movs	r3, #3
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	@ 0x80
 800207a:	d102      	bne.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e004      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b70      	cmp	r3, #112	@ 0x70
 8002086:	d101      	bne.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	4909      	ldr	r1, [pc, #36]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020cc:	2300      	movs	r3, #0
 80020ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d031      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020e4:	d01a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80020e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020ea:	d814      	bhi.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020f4:	d10f      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020f6:	4b5d      	ldr	r3, [pc, #372]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4a5c      	ldr	r2, [pc, #368]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002102:	e00c      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3304      	adds	r3, #4
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f9de 	bl	80024cc <RCCEx_PLLSAI1_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002114:	e003      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	74fb      	strb	r3, [r7, #19]
      break;
 800211a:	e000      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800211c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002124:	4b51      	ldr	r3, [pc, #324]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002132:	494e      	ldr	r1, [pc, #312]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800213a:	e001      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 809e 	beq.w	800228a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002152:	4b46      	ldr	r3, [pc, #280]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002162:	2300      	movs	r3, #0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b40      	ldr	r3, [pc, #256]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216c:	4a3f      	ldr	r2, [pc, #252]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	@ 0x58
 8002174:	4b3d      	ldr	r3, [pc, #244]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002180:	2301      	movs	r3, #1
 8002182:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002184:	4b3a      	ldr	r3, [pc, #232]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a39      	ldr	r2, [pc, #228]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800218e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002190:	f7fe fe76 	bl	8000e80 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002196:	e009      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7fe fe72 	bl	8000e80 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d902      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	74fb      	strb	r3, [r7, #19]
        break;
 80021aa:	e005      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ac:	4b30      	ldr	r3, [pc, #192]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ef      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d15a      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021be:	4b2b      	ldr	r3, [pc, #172]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01e      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d019      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021da:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e6:	4b21      	ldr	r3, [pc, #132]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ec:	4a1f      	ldr	r2, [pc, #124]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fc:	4a1b      	ldr	r2, [pc, #108]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002202:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002206:	4a19      	ldr	r2, [pc, #100]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d016      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe fe32 	bl	8000e80 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221e:	e00b      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe fe2e 	bl	8000e80 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d902      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	74fb      	strb	r3, [r7, #19]
            break;
 8002236:	e006      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0ec      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10b      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224c:	4b07      	ldr	r3, [pc, #28]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002252:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800225a:	4904      	ldr	r1, [pc, #16]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002262:	e009      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	74bb      	strb	r3, [r7, #18]
 8002268:	e006      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002278:	7c7b      	ldrb	r3, [r7, #17]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d105      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	4b8a      	ldr	r3, [pc, #552]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	4a89      	ldr	r2, [pc, #548]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002288:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002296:	4b84      	ldr	r3, [pc, #528]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229c:	f023 0203 	bic.w	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4980      	ldr	r1, [pc, #512]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022b8:	4b7b      	ldr	r3, [pc, #492]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	f023 020c 	bic.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	4978      	ldr	r1, [pc, #480]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022da:	4b73      	ldr	r3, [pc, #460]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	496f      	ldr	r1, [pc, #444]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fc:	4b6a      	ldr	r3, [pc, #424]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002302:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230a:	4967      	ldr	r1, [pc, #412]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800231e:	4b62      	ldr	r3, [pc, #392]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002324:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	495e      	ldr	r1, [pc, #376]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002340:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002346:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	4956      	ldr	r1, [pc, #344]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002362:	4b51      	ldr	r3, [pc, #324]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002368:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	494d      	ldr	r1, [pc, #308]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d028      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002384:	4b48      	ldr	r3, [pc, #288]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	4945      	ldr	r1, [pc, #276]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a4:	4b40      	ldr	r3, [pc, #256]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a3f      	ldr	r2, [pc, #252]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ae:	60d3      	str	r3, [r2, #12]
 80023b0:	e011      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	2101      	movs	r1, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f882 	bl	80024cc <RCCEx_PLLSAI1_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d028      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023e2:	4b31      	ldr	r3, [pc, #196]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f0:	492d      	ldr	r1, [pc, #180]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002400:	d106      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002402:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	4a28      	ldr	r2, [pc, #160]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800240c:	60d3      	str	r3, [r2, #12]
 800240e:	e011      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002418:	d10c      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	2101      	movs	r1, #1
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f853 	bl	80024cc <RCCEx_PLLSAI1_Config>
 8002426:	4603      	mov	r3, r0
 8002428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01c      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002446:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244e:	4916      	ldr	r1, [pc, #88]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800245e:	d10c      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	2102      	movs	r1, #2
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f830 	bl	80024cc <RCCEx_PLLSAI1_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002486:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002494:	4904      	ldr	r1, [pc, #16]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800249c:	7cbb      	ldrb	r3, [r7, #18]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000

080024cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024da:	4b74      	ldr	r3, [pc, #464]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d018      	beq.n	8002518 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024e6:	4b71      	ldr	r3, [pc, #452]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f003 0203 	and.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10d      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
       ||
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024fe:	4b6b      	ldr	r3, [pc, #428]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
       ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d047      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	e044      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d018      	beq.n	8002552 <RCCEx_PLLSAI1_Config+0x86>
 8002520:	2b03      	cmp	r3, #3
 8002522:	d825      	bhi.n	8002570 <RCCEx_PLLSAI1_Config+0xa4>
 8002524:	2b01      	cmp	r3, #1
 8002526:	d002      	beq.n	800252e <RCCEx_PLLSAI1_Config+0x62>
 8002528:	2b02      	cmp	r3, #2
 800252a:	d009      	beq.n	8002540 <RCCEx_PLLSAI1_Config+0x74>
 800252c:	e020      	b.n	8002570 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800252e:	4b5f      	ldr	r3, [pc, #380]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253e:	e01a      	b.n	8002576 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002540:	4b5a      	ldr	r3, [pc, #360]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d116      	bne.n	800257a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e013      	b.n	800257a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002552:	4b56      	ldr	r3, [pc, #344]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800255e:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800256e:	e006      	b.n	800257e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      break;
 8002574:	e004      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002576:	bf00      	nop
 8002578:	e002      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800257e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002586:	4b49      	ldr	r3, [pc, #292]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	430b      	orrs	r3, r1
 800259c:	4943      	ldr	r1, [pc, #268]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d17c      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025a8:	4b40      	ldr	r3, [pc, #256]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a3f      	ldr	r2, [pc, #252]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b4:	f7fe fc64 	bl	8000e80 <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ba:	e009      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025bc:	f7fe fc60 	bl	8000e80 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d902      	bls.n	80025d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	73fb      	strb	r3, [r7, #15]
        break;
 80025ce:	e005      	b.n	80025dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025d0:	4b36      	ldr	r3, [pc, #216]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ef      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d15f      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d110      	bne.n	800260a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e8:	4b30      	ldr	r3, [pc, #192]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80025f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	0211      	lsls	r1, r2, #8
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	06d2      	lsls	r2, r2, #27
 8002600:	430a      	orrs	r2, r1
 8002602:	492a      	ldr	r1, [pc, #168]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	610b      	str	r3, [r1, #16]
 8002608:	e027      	b.n	800265a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d112      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002610:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002618:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	0211      	lsls	r1, r2, #8
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6912      	ldr	r2, [r2, #16]
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0552      	lsls	r2, r2, #21
 800262c:	430a      	orrs	r2, r1
 800262e:	491f      	ldr	r1, [pc, #124]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	610b      	str	r3, [r1, #16]
 8002634:	e011      	b.n	800265a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002636:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800263e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6892      	ldr	r2, [r2, #8]
 8002646:	0211      	lsls	r1, r2, #8
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6952      	ldr	r2, [r2, #20]
 800264c:	0852      	lsrs	r2, r2, #1
 800264e:	3a01      	subs	r2, #1
 8002650:	0652      	lsls	r2, r2, #25
 8002652:	430a      	orrs	r2, r1
 8002654:	4915      	ldr	r1, [pc, #84]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800265a:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a13      	ldr	r2, [pc, #76]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002664:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe fc0b 	bl	8000e80 <HAL_GetTick>
 800266a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800266c:	e009      	b.n	8002682 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800266e:	f7fe fc07 	bl	8000e80 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d902      	bls.n	8002682 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	73fb      	strb	r3, [r7, #15]
          break;
 8002680:	e005      	b.n	800268e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0ef      	beq.n	800266e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4903      	ldr	r1, [pc, #12]	@ (80026ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e040      	b.n	8002744 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe f9c6 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	@ 0x24
 80026dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fba6 	bl	8002e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f977 	bl	80029f0 <UART_SetConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e01b      	b.n	8002744 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800271a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800272a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fc25 	bl	8002f8c <UART_CheckIdleState>
 8002742:	4603      	mov	r3, r0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	@ 0x28
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002760:	2b20      	cmp	r3, #32
 8002762:	d177      	bne.n	8002854 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_UART_Transmit+0x24>
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e070      	b.n	8002856 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2221      	movs	r2, #33	@ 0x21
 8002780:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002782:	f7fe fb7d 	bl	8000e80 <HAL_GetTick>
 8002786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	88fa      	ldrh	r2, [r7, #6]
 8002794:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a0:	d108      	bne.n	80027b4 <HAL_UART_Transmit+0x68>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d104      	bne.n	80027b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	e003      	b.n	80027bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027bc:	e02f      	b.n	800281e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2180      	movs	r1, #128	@ 0x80
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fc87 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e03b      	b.n	8002856 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	881a      	ldrh	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027f0:	b292      	uxth	r2, r2
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	3302      	adds	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	e007      	b.n	800280c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1c9      	bne.n	80027be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	2140      	movs	r1, #64	@ 0x40
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fc51 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e005      	b.n	8002856 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e000      	b.n	8002856 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b08a      	sub	sp, #40	@ 0x28
 8002862:	af02      	add	r7, sp, #8
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4613      	mov	r3, r2
 800286c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002874:	2b20      	cmp	r3, #32
 8002876:	f040 80b6 	bne.w	80029e6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <HAL_UART_Receive+0x28>
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0ae      	b.n	80029e8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2222      	movs	r2, #34	@ 0x22
 8002896:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028a0:	f7fe faee 	bl	8000e80 <HAL_GetTick>
 80028a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028be:	d10e      	bne.n	80028de <HAL_UART_Receive+0x80>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_UART_Receive+0x76>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80028ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80028d2:	e02d      	b.n	8002930 <HAL_UART_Receive+0xd2>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	22ff      	movs	r2, #255	@ 0xff
 80028d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80028dc:	e028      	b.n	8002930 <HAL_UART_Receive+0xd2>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_UART_Receive+0xa4>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <HAL_UART_Receive+0x9a>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	22ff      	movs	r2, #255	@ 0xff
 80028f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80028f6:	e01b      	b.n	8002930 <HAL_UART_Receive+0xd2>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	227f      	movs	r2, #127	@ 0x7f
 80028fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002900:	e016      	b.n	8002930 <HAL_UART_Receive+0xd2>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800290a:	d10d      	bne.n	8002928 <HAL_UART_Receive+0xca>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <HAL_UART_Receive+0xc0>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	227f      	movs	r2, #127	@ 0x7f
 8002918:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800291c:	e008      	b.n	8002930 <HAL_UART_Receive+0xd2>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	223f      	movs	r2, #63	@ 0x3f
 8002922:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002926:	e003      	b.n	8002930 <HAL_UART_Receive+0xd2>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002936:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002940:	d108      	bne.n	8002954 <HAL_UART_Receive+0xf6>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	e003      	b.n	800295c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800295c:	e037      	b.n	80029ce <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2200      	movs	r2, #0
 8002966:	2120      	movs	r1, #32
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fbb7 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e033      	b.n	80029e8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800298c:	b29a      	uxth	r2, r3
 800298e:	8a7b      	ldrh	r3, [r7, #18]
 8002990:	4013      	ands	r3, r2
 8002992:	b29a      	uxth	r2, r3
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	3302      	adds	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	e00d      	b.n	80029bc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	8a7b      	ldrh	r3, [r7, #18]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4013      	ands	r3, r2
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1c1      	bne.n	800295e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
  }
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f4:	b08a      	sub	sp, #40	@ 0x28
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4bb4      	ldr	r3, [pc, #720]	@ (8002cf0 <UART_SetConfig+0x300>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4aa9      	ldr	r2, [pc, #676]	@ (8002cf4 <UART_SetConfig+0x304>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4aa0      	ldr	r2, [pc, #640]	@ (8002cf8 <UART_SetConfig+0x308>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d126      	bne.n	8002ac8 <UART_SetConfig+0xd8>
 8002a7a:	4ba0      	ldr	r3, [pc, #640]	@ (8002cfc <UART_SetConfig+0x30c>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d81b      	bhi.n	8002ac0 <UART_SetConfig+0xd0>
 8002a88:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <UART_SetConfig+0xa0>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002ab1 	.word	0x08002ab1
 8002a98:	08002aa9 	.word	0x08002aa9
 8002a9c:	08002ab9 	.word	0x08002ab9
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa6:	e080      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aae:	e07c      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab6:	e078      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002ab8:	2308      	movs	r3, #8
 8002aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002abe:	e074      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac6:	e070      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a8c      	ldr	r2, [pc, #560]	@ (8002d00 <UART_SetConfig+0x310>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d138      	bne.n	8002b44 <UART_SetConfig+0x154>
 8002ad2:	4b8a      	ldr	r3, [pc, #552]	@ (8002cfc <UART_SetConfig+0x30c>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d82d      	bhi.n	8002b3c <UART_SetConfig+0x14c>
 8002ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae8 <UART_SetConfig+0xf8>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002b1d 	.word	0x08002b1d
 8002aec:	08002b3d 	.word	0x08002b3d
 8002af0:	08002b3d 	.word	0x08002b3d
 8002af4:	08002b3d 	.word	0x08002b3d
 8002af8:	08002b2d 	.word	0x08002b2d
 8002afc:	08002b3d 	.word	0x08002b3d
 8002b00:	08002b3d 	.word	0x08002b3d
 8002b04:	08002b3d 	.word	0x08002b3d
 8002b08:	08002b25 	.word	0x08002b25
 8002b0c:	08002b3d 	.word	0x08002b3d
 8002b10:	08002b3d 	.word	0x08002b3d
 8002b14:	08002b3d 	.word	0x08002b3d
 8002b18:	08002b35 	.word	0x08002b35
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b22:	e042      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002b24:	2302      	movs	r3, #2
 8002b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b2a:	e03e      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b32:	e03a      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002b34:	2308      	movs	r3, #8
 8002b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b3a:	e036      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002b3c:	2310      	movs	r3, #16
 8002b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b42:	e032      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a6a      	ldr	r2, [pc, #424]	@ (8002cf4 <UART_SetConfig+0x304>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d12a      	bne.n	8002ba4 <UART_SetConfig+0x1b4>
 8002b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8002cfc <UART_SetConfig+0x30c>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b5c:	d01a      	beq.n	8002b94 <UART_SetConfig+0x1a4>
 8002b5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b62:	d81b      	bhi.n	8002b9c <UART_SetConfig+0x1ac>
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b68:	d00c      	beq.n	8002b84 <UART_SetConfig+0x194>
 8002b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b6e:	d815      	bhi.n	8002b9c <UART_SetConfig+0x1ac>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <UART_SetConfig+0x18c>
 8002b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b78:	d008      	beq.n	8002b8c <UART_SetConfig+0x19c>
 8002b7a:	e00f      	b.n	8002b9c <UART_SetConfig+0x1ac>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b82:	e012      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002b84:	2302      	movs	r3, #2
 8002b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b8a:	e00e      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b92:	e00a      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002b94:	2308      	movs	r3, #8
 8002b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b9a:	e006      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ba2:	e002      	b.n	8002baa <UART_SetConfig+0x1ba>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a51      	ldr	r2, [pc, #324]	@ (8002cf4 <UART_SetConfig+0x304>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d17a      	bne.n	8002caa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d824      	bhi.n	8002c06 <UART_SetConfig+0x216>
 8002bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <UART_SetConfig+0x1d4>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002be9 	.word	0x08002be9
 8002bc8:	08002c07 	.word	0x08002c07
 8002bcc:	08002bf1 	.word	0x08002bf1
 8002bd0:	08002c07 	.word	0x08002c07
 8002bd4:	08002bf7 	.word	0x08002bf7
 8002bd8:	08002c07 	.word	0x08002c07
 8002bdc:	08002c07 	.word	0x08002c07
 8002be0:	08002c07 	.word	0x08002c07
 8002be4:	08002bff 	.word	0x08002bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be8:	f7ff f9de 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8002bec:	61f8      	str	r0, [r7, #28]
        break;
 8002bee:	e010      	b.n	8002c12 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf0:	4b44      	ldr	r3, [pc, #272]	@ (8002d04 <UART_SetConfig+0x314>)
 8002bf2:	61fb      	str	r3, [r7, #28]
        break;
 8002bf4:	e00d      	b.n	8002c12 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf6:	f7ff f93f 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8002bfa:	61f8      	str	r0, [r7, #28]
        break;
 8002bfc:	e009      	b.n	8002c12 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c02:	61fb      	str	r3, [r7, #28]
        break;
 8002c04:	e005      	b.n	8002c12 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8107 	beq.w	8002e28 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d305      	bcc.n	8002c36 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d903      	bls.n	8002c3e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c3c:	e0f4      	b.n	8002e28 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2200      	movs	r2, #0
 8002c42:	461c      	mov	r4, r3
 8002c44:	4615      	mov	r5, r2
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	022b      	lsls	r3, r5, #8
 8002c50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c54:	0222      	lsls	r2, r4, #8
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	6849      	ldr	r1, [r1, #4]
 8002c5a:	0849      	lsrs	r1, r1, #1
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	4688      	mov	r8, r1
 8002c60:	4681      	mov	r9, r0
 8002c62:	eb12 0a08 	adds.w	sl, r2, r8
 8002c66:	eb43 0b09 	adc.w	fp, r3, r9
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c78:	4650      	mov	r0, sl
 8002c7a:	4659      	mov	r1, fp
 8002c7c:	f7fd faf8 	bl	8000270 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4613      	mov	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c8e:	d308      	bcc.n	8002ca2 <UART_SetConfig+0x2b2>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c96:	d204      	bcs.n	8002ca2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	e0c2      	b.n	8002e28 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002ca8:	e0be      	b.n	8002e28 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cb2:	d16a      	bne.n	8002d8a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d834      	bhi.n	8002d26 <UART_SetConfig+0x336>
 8002cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc4 <UART_SetConfig+0x2d4>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002ce9 	.word	0x08002ce9
 8002cc8:	08002d09 	.word	0x08002d09
 8002ccc:	08002d11 	.word	0x08002d11
 8002cd0:	08002d27 	.word	0x08002d27
 8002cd4:	08002d17 	.word	0x08002d17
 8002cd8:	08002d27 	.word	0x08002d27
 8002cdc:	08002d27 	.word	0x08002d27
 8002ce0:	08002d27 	.word	0x08002d27
 8002ce4:	08002d1f 	.word	0x08002d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce8:	f7ff f95e 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8002cec:	61f8      	str	r0, [r7, #28]
        break;
 8002cee:	e020      	b.n	8002d32 <UART_SetConfig+0x342>
 8002cf0:	efff69f3 	.word	0xefff69f3
 8002cf4:	40008000 	.word	0x40008000
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40004400 	.word	0x40004400
 8002d04:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d08:	f7ff f964 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 8002d0c:	61f8      	str	r0, [r7, #28]
        break;
 8002d0e:	e010      	b.n	8002d32 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d10:	4b4c      	ldr	r3, [pc, #304]	@ (8002e44 <UART_SetConfig+0x454>)
 8002d12:	61fb      	str	r3, [r7, #28]
        break;
 8002d14:	e00d      	b.n	8002d32 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d16:	f7ff f8af 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8002d1a:	61f8      	str	r0, [r7, #28]
        break;
 8002d1c:	e009      	b.n	8002d32 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d22:	61fb      	str	r3, [r7, #28]
        break;
 8002d24:	e005      	b.n	8002d32 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d077      	beq.n	8002e28 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005a      	lsls	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	441a      	add	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d916      	bls.n	8002d82 <UART_SetConfig+0x392>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d5a:	d212      	bcs.n	8002d82 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f023 030f 	bic.w	r3, r3, #15
 8002d64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	8afb      	ldrh	r3, [r7, #22]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	8afa      	ldrh	r2, [r7, #22]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	e052      	b.n	8002e28 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d88:	e04e      	b.n	8002e28 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d827      	bhi.n	8002de2 <UART_SetConfig+0x3f2>
 8002d92:	a201      	add	r2, pc, #4	@ (adr r2, 8002d98 <UART_SetConfig+0x3a8>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002dbd 	.word	0x08002dbd
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	08002dcd 	.word	0x08002dcd
 8002da4:	08002de3 	.word	0x08002de3
 8002da8:	08002dd3 	.word	0x08002dd3
 8002dac:	08002de3 	.word	0x08002de3
 8002db0:	08002de3 	.word	0x08002de3
 8002db4:	08002de3 	.word	0x08002de3
 8002db8:	08002ddb 	.word	0x08002ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dbc:	f7ff f8f4 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8002dc0:	61f8      	str	r0, [r7, #28]
        break;
 8002dc2:	e014      	b.n	8002dee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc4:	f7ff f906 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 8002dc8:	61f8      	str	r0, [r7, #28]
        break;
 8002dca:	e010      	b.n	8002dee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <UART_SetConfig+0x454>)
 8002dce:	61fb      	str	r3, [r7, #28]
        break;
 8002dd0:	e00d      	b.n	8002dee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd2:	f7ff f851 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8002dd6:	61f8      	str	r0, [r7, #28]
        break;
 8002dd8:	e009      	b.n	8002dee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dde:	61fb      	str	r3, [r7, #28]
        break;
 8002de0:	e005      	b.n	8002dee <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002dec:	bf00      	nop
    }

    if (pclk != 0U)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d019      	beq.n	8002e28 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	085a      	lsrs	r2, r3, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	441a      	add	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	d909      	bls.n	8002e22 <UART_SetConfig+0x432>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e14:	d205      	bcs.n	8002e22 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	e002      	b.n	8002e28 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3728      	adds	r7, #40	@ 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e42:	bf00      	nop
 8002e44:	00f42400 	.word	0x00f42400

08002e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01a      	beq.n	8002f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f46:	d10a      	bne.n	8002f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  }
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b098      	sub	sp, #96	@ 0x60
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f9c:	f7fd ff70 	bl	8000e80 <HAL_GetTick>
 8002fa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d12e      	bne.n	800300e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f88c 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d021      	beq.n	800300e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e6      	bne.n	8002fca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e062      	b.n	80030d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b04      	cmp	r3, #4
 800301a:	d149      	bne.n	80030b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800301c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003024:	2200      	movs	r2, #0
 8003026:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f856 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d03c      	beq.n	80030b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	e853 3f00 	ldrex	r3, [r3]
 8003042:	623b      	str	r3, [r7, #32]
   return(result);
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800304a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003054:	633b      	str	r3, [r7, #48]	@ 0x30
 8003056:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800305a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e6      	bne.n	8003036 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3308      	adds	r3, #8
 800306e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	60fb      	str	r3, [r7, #12]
   return(result);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3308      	adds	r3, #8
 8003086:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003088:	61fa      	str	r2, [r7, #28]
 800308a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	617b      	str	r3, [r7, #20]
   return(result);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e011      	b.n	80030d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3758      	adds	r7, #88	@ 0x58
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ec:	e04f      	b.n	800318e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d04b      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7fd fec3 	bl	8000e80 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <UART_WaitOnFlagUntilTimeout+0x30>
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e04e      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d037      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0xb2>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b80      	cmp	r3, #128	@ 0x80
 8003122:	d034      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b40      	cmp	r3, #64	@ 0x40
 8003128:	d031      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b08      	cmp	r3, #8
 8003136:	d110      	bne.n	800315a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2208      	movs	r2, #8
 800313e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f838 	bl	80031b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2208      	movs	r2, #8
 800314a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e029      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003168:	d111      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f81e 	bl	80031b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e00f      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d0a0      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b095      	sub	sp, #84	@ 0x54
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80031de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e6      	bne.n	80031be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3308      	adds	r3, #8
 80031f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	e853 3f00 	ldrex	r3, [r3]
 80031fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3308      	adds	r3, #8
 800320e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003210:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e5      	bne.n	80031f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003228:	2b01      	cmp	r3, #1
 800322a:	d118      	bne.n	800325e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	60bb      	str	r3, [r7, #8]
   return(result);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f023 0310 	bic.w	r3, r3, #16
 8003240:	647b      	str	r3, [r7, #68]	@ 0x44
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6979      	ldr	r1, [r7, #20]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	613b      	str	r3, [r7, #16]
   return(result);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e6      	bne.n	800322c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003272:	bf00      	nop
 8003274:	3754      	adds	r7, #84	@ 0x54
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <atoi>:
 800327e:	220a      	movs	r2, #10
 8003280:	2100      	movs	r1, #0
 8003282:	f000 b8e9 	b.w	8003458 <strtol>
	...

08003288 <srand>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <srand+0x44>)
 800328c:	681d      	ldr	r5, [r3, #0]
 800328e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003290:	4604      	mov	r4, r0
 8003292:	b9b3      	cbnz	r3, 80032c2 <srand+0x3a>
 8003294:	2018      	movs	r0, #24
 8003296:	f000 fcd3 	bl	8003c40 <malloc>
 800329a:	4602      	mov	r2, r0
 800329c:	6328      	str	r0, [r5, #48]	@ 0x30
 800329e:	b920      	cbnz	r0, 80032aa <srand+0x22>
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <srand+0x48>)
 80032a2:	480c      	ldr	r0, [pc, #48]	@ (80032d4 <srand+0x4c>)
 80032a4:	2146      	movs	r1, #70	@ 0x46
 80032a6:	f000 fc63 	bl	8003b70 <__assert_func>
 80032aa:	490b      	ldr	r1, [pc, #44]	@ (80032d8 <srand+0x50>)
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <srand+0x54>)
 80032ae:	e9c0 1300 	strd	r1, r3, [r0]
 80032b2:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <srand+0x58>)
 80032b4:	6083      	str	r3, [r0, #8]
 80032b6:	230b      	movs	r3, #11
 80032b8:	8183      	strh	r3, [r0, #12]
 80032ba:	2100      	movs	r1, #0
 80032bc:	2001      	movs	r0, #1
 80032be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80032c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80032c4:	2200      	movs	r2, #0
 80032c6:	611c      	str	r4, [r3, #16]
 80032c8:	615a      	str	r2, [r3, #20]
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
 80032cc:	20000018 	.word	0x20000018
 80032d0:	080051f8 	.word	0x080051f8
 80032d4:	0800520f 	.word	0x0800520f
 80032d8:	abcd330e 	.word	0xabcd330e
 80032dc:	e66d1234 	.word	0xe66d1234
 80032e0:	0005deec 	.word	0x0005deec

080032e4 <rand>:
 80032e4:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <rand+0x5c>)
 80032e6:	b510      	push	{r4, lr}
 80032e8:	681c      	ldr	r4, [r3, #0]
 80032ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80032ec:	b9b3      	cbnz	r3, 800331c <rand+0x38>
 80032ee:	2018      	movs	r0, #24
 80032f0:	f000 fca6 	bl	8003c40 <malloc>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80032f8:	b920      	cbnz	r0, 8003304 <rand+0x20>
 80032fa:	4b12      	ldr	r3, [pc, #72]	@ (8003344 <rand+0x60>)
 80032fc:	4812      	ldr	r0, [pc, #72]	@ (8003348 <rand+0x64>)
 80032fe:	2152      	movs	r1, #82	@ 0x52
 8003300:	f000 fc36 	bl	8003b70 <__assert_func>
 8003304:	4911      	ldr	r1, [pc, #68]	@ (800334c <rand+0x68>)
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <rand+0x6c>)
 8003308:	e9c0 1300 	strd	r1, r3, [r0]
 800330c:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <rand+0x70>)
 800330e:	6083      	str	r3, [r0, #8]
 8003310:	230b      	movs	r3, #11
 8003312:	8183      	strh	r3, [r0, #12]
 8003314:	2100      	movs	r1, #0
 8003316:	2001      	movs	r0, #1
 8003318:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800331c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800331e:	480e      	ldr	r0, [pc, #56]	@ (8003358 <rand+0x74>)
 8003320:	690b      	ldr	r3, [r1, #16]
 8003322:	694c      	ldr	r4, [r1, #20]
 8003324:	4a0d      	ldr	r2, [pc, #52]	@ (800335c <rand+0x78>)
 8003326:	4358      	muls	r0, r3
 8003328:	fb02 0004 	mla	r0, r2, r4, r0
 800332c:	fba3 3202 	umull	r3, r2, r3, r2
 8003330:	3301      	adds	r3, #1
 8003332:	eb40 0002 	adc.w	r0, r0, r2
 8003336:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800333a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800333e:	bd10      	pop	{r4, pc}
 8003340:	20000018 	.word	0x20000018
 8003344:	080051f8 	.word	0x080051f8
 8003348:	0800520f 	.word	0x0800520f
 800334c:	abcd330e 	.word	0xabcd330e
 8003350:	e66d1234 	.word	0xe66d1234
 8003354:	0005deec 	.word	0x0005deec
 8003358:	5851f42d 	.word	0x5851f42d
 800335c:	4c957f2d 	.word	0x4c957f2d

08003360 <_strtol_l.constprop.0>:
 8003360:	2b24      	cmp	r3, #36	@ 0x24
 8003362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003366:	4686      	mov	lr, r0
 8003368:	4690      	mov	r8, r2
 800336a:	d801      	bhi.n	8003370 <_strtol_l.constprop.0+0x10>
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <_strtol_l.constprop.0+0x1e>
 8003370:	f000 fbd0 	bl	8003b14 <__errno>
 8003374:	2316      	movs	r3, #22
 8003376:	6003      	str	r3, [r0, #0]
 8003378:	2000      	movs	r0, #0
 800337a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337e:	4834      	ldr	r0, [pc, #208]	@ (8003450 <_strtol_l.constprop.0+0xf0>)
 8003380:	460d      	mov	r5, r1
 8003382:	462a      	mov	r2, r5
 8003384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003388:	5d06      	ldrb	r6, [r0, r4]
 800338a:	f016 0608 	ands.w	r6, r6, #8
 800338e:	d1f8      	bne.n	8003382 <_strtol_l.constprop.0+0x22>
 8003390:	2c2d      	cmp	r4, #45	@ 0x2d
 8003392:	d12d      	bne.n	80033f0 <_strtol_l.constprop.0+0x90>
 8003394:	782c      	ldrb	r4, [r5, #0]
 8003396:	2601      	movs	r6, #1
 8003398:	1c95      	adds	r5, r2, #2
 800339a:	f033 0210 	bics.w	r2, r3, #16
 800339e:	d109      	bne.n	80033b4 <_strtol_l.constprop.0+0x54>
 80033a0:	2c30      	cmp	r4, #48	@ 0x30
 80033a2:	d12a      	bne.n	80033fa <_strtol_l.constprop.0+0x9a>
 80033a4:	782a      	ldrb	r2, [r5, #0]
 80033a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80033aa:	2a58      	cmp	r2, #88	@ 0x58
 80033ac:	d125      	bne.n	80033fa <_strtol_l.constprop.0+0x9a>
 80033ae:	786c      	ldrb	r4, [r5, #1]
 80033b0:	2310      	movs	r3, #16
 80033b2:	3502      	adds	r5, #2
 80033b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80033b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80033bc:	2200      	movs	r2, #0
 80033be:	fbbc f9f3 	udiv	r9, ip, r3
 80033c2:	4610      	mov	r0, r2
 80033c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80033c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80033cc:	2f09      	cmp	r7, #9
 80033ce:	d81b      	bhi.n	8003408 <_strtol_l.constprop.0+0xa8>
 80033d0:	463c      	mov	r4, r7
 80033d2:	42a3      	cmp	r3, r4
 80033d4:	dd27      	ble.n	8003426 <_strtol_l.constprop.0+0xc6>
 80033d6:	1c57      	adds	r7, r2, #1
 80033d8:	d007      	beq.n	80033ea <_strtol_l.constprop.0+0x8a>
 80033da:	4581      	cmp	r9, r0
 80033dc:	d320      	bcc.n	8003420 <_strtol_l.constprop.0+0xc0>
 80033de:	d101      	bne.n	80033e4 <_strtol_l.constprop.0+0x84>
 80033e0:	45a2      	cmp	sl, r4
 80033e2:	db1d      	blt.n	8003420 <_strtol_l.constprop.0+0xc0>
 80033e4:	fb00 4003 	mla	r0, r0, r3, r4
 80033e8:	2201      	movs	r2, #1
 80033ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80033ee:	e7eb      	b.n	80033c8 <_strtol_l.constprop.0+0x68>
 80033f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80033f2:	bf04      	itt	eq
 80033f4:	782c      	ldrbeq	r4, [r5, #0]
 80033f6:	1c95      	addeq	r5, r2, #2
 80033f8:	e7cf      	b.n	800339a <_strtol_l.constprop.0+0x3a>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1da      	bne.n	80033b4 <_strtol_l.constprop.0+0x54>
 80033fe:	2c30      	cmp	r4, #48	@ 0x30
 8003400:	bf0c      	ite	eq
 8003402:	2308      	moveq	r3, #8
 8003404:	230a      	movne	r3, #10
 8003406:	e7d5      	b.n	80033b4 <_strtol_l.constprop.0+0x54>
 8003408:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800340c:	2f19      	cmp	r7, #25
 800340e:	d801      	bhi.n	8003414 <_strtol_l.constprop.0+0xb4>
 8003410:	3c37      	subs	r4, #55	@ 0x37
 8003412:	e7de      	b.n	80033d2 <_strtol_l.constprop.0+0x72>
 8003414:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003418:	2f19      	cmp	r7, #25
 800341a:	d804      	bhi.n	8003426 <_strtol_l.constprop.0+0xc6>
 800341c:	3c57      	subs	r4, #87	@ 0x57
 800341e:	e7d8      	b.n	80033d2 <_strtol_l.constprop.0+0x72>
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	e7e1      	b.n	80033ea <_strtol_l.constprop.0+0x8a>
 8003426:	1c53      	adds	r3, r2, #1
 8003428:	d108      	bne.n	800343c <_strtol_l.constprop.0+0xdc>
 800342a:	2322      	movs	r3, #34	@ 0x22
 800342c:	f8ce 3000 	str.w	r3, [lr]
 8003430:	4660      	mov	r0, ip
 8003432:	f1b8 0f00 	cmp.w	r8, #0
 8003436:	d0a0      	beq.n	800337a <_strtol_l.constprop.0+0x1a>
 8003438:	1e69      	subs	r1, r5, #1
 800343a:	e006      	b.n	800344a <_strtol_l.constprop.0+0xea>
 800343c:	b106      	cbz	r6, 8003440 <_strtol_l.constprop.0+0xe0>
 800343e:	4240      	negs	r0, r0
 8003440:	f1b8 0f00 	cmp.w	r8, #0
 8003444:	d099      	beq.n	800337a <_strtol_l.constprop.0+0x1a>
 8003446:	2a00      	cmp	r2, #0
 8003448:	d1f6      	bne.n	8003438 <_strtol_l.constprop.0+0xd8>
 800344a:	f8c8 1000 	str.w	r1, [r8]
 800344e:	e794      	b.n	800337a <_strtol_l.constprop.0+0x1a>
 8003450:	08005268 	.word	0x08005268

08003454 <_strtol_r>:
 8003454:	f7ff bf84 	b.w	8003360 <_strtol_l.constprop.0>

08003458 <strtol>:
 8003458:	4613      	mov	r3, r2
 800345a:	460a      	mov	r2, r1
 800345c:	4601      	mov	r1, r0
 800345e:	4802      	ldr	r0, [pc, #8]	@ (8003468 <strtol+0x10>)
 8003460:	6800      	ldr	r0, [r0, #0]
 8003462:	f7ff bf7d 	b.w	8003360 <_strtol_l.constprop.0>
 8003466:	bf00      	nop
 8003468:	20000018 	.word	0x20000018

0800346c <_strtoul_l.constprop.0>:
 800346c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003470:	4e34      	ldr	r6, [pc, #208]	@ (8003544 <_strtoul_l.constprop.0+0xd8>)
 8003472:	4686      	mov	lr, r0
 8003474:	460d      	mov	r5, r1
 8003476:	4628      	mov	r0, r5
 8003478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800347c:	5d37      	ldrb	r7, [r6, r4]
 800347e:	f017 0708 	ands.w	r7, r7, #8
 8003482:	d1f8      	bne.n	8003476 <_strtoul_l.constprop.0+0xa>
 8003484:	2c2d      	cmp	r4, #45	@ 0x2d
 8003486:	d12f      	bne.n	80034e8 <_strtoul_l.constprop.0+0x7c>
 8003488:	782c      	ldrb	r4, [r5, #0]
 800348a:	2701      	movs	r7, #1
 800348c:	1c85      	adds	r5, r0, #2
 800348e:	f033 0010 	bics.w	r0, r3, #16
 8003492:	d109      	bne.n	80034a8 <_strtoul_l.constprop.0+0x3c>
 8003494:	2c30      	cmp	r4, #48	@ 0x30
 8003496:	d12c      	bne.n	80034f2 <_strtoul_l.constprop.0+0x86>
 8003498:	7828      	ldrb	r0, [r5, #0]
 800349a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800349e:	2858      	cmp	r0, #88	@ 0x58
 80034a0:	d127      	bne.n	80034f2 <_strtoul_l.constprop.0+0x86>
 80034a2:	786c      	ldrb	r4, [r5, #1]
 80034a4:	2310      	movs	r3, #16
 80034a6:	3502      	adds	r5, #2
 80034a8:	f04f 38ff 	mov.w	r8, #4294967295
 80034ac:	2600      	movs	r6, #0
 80034ae:	fbb8 f8f3 	udiv	r8, r8, r3
 80034b2:	fb03 f908 	mul.w	r9, r3, r8
 80034b6:	ea6f 0909 	mvn.w	r9, r9
 80034ba:	4630      	mov	r0, r6
 80034bc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80034c0:	f1bc 0f09 	cmp.w	ip, #9
 80034c4:	d81c      	bhi.n	8003500 <_strtoul_l.constprop.0+0x94>
 80034c6:	4664      	mov	r4, ip
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	dd2a      	ble.n	8003522 <_strtoul_l.constprop.0+0xb6>
 80034cc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80034d0:	d007      	beq.n	80034e2 <_strtoul_l.constprop.0+0x76>
 80034d2:	4580      	cmp	r8, r0
 80034d4:	d322      	bcc.n	800351c <_strtoul_l.constprop.0+0xb0>
 80034d6:	d101      	bne.n	80034dc <_strtoul_l.constprop.0+0x70>
 80034d8:	45a1      	cmp	r9, r4
 80034da:	db1f      	blt.n	800351c <_strtoul_l.constprop.0+0xb0>
 80034dc:	fb00 4003 	mla	r0, r0, r3, r4
 80034e0:	2601      	movs	r6, #1
 80034e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034e6:	e7e9      	b.n	80034bc <_strtoul_l.constprop.0+0x50>
 80034e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80034ea:	bf04      	itt	eq
 80034ec:	782c      	ldrbeq	r4, [r5, #0]
 80034ee:	1c85      	addeq	r5, r0, #2
 80034f0:	e7cd      	b.n	800348e <_strtoul_l.constprop.0+0x22>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1d8      	bne.n	80034a8 <_strtoul_l.constprop.0+0x3c>
 80034f6:	2c30      	cmp	r4, #48	@ 0x30
 80034f8:	bf0c      	ite	eq
 80034fa:	2308      	moveq	r3, #8
 80034fc:	230a      	movne	r3, #10
 80034fe:	e7d3      	b.n	80034a8 <_strtoul_l.constprop.0+0x3c>
 8003500:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003504:	f1bc 0f19 	cmp.w	ip, #25
 8003508:	d801      	bhi.n	800350e <_strtoul_l.constprop.0+0xa2>
 800350a:	3c37      	subs	r4, #55	@ 0x37
 800350c:	e7dc      	b.n	80034c8 <_strtoul_l.constprop.0+0x5c>
 800350e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003512:	f1bc 0f19 	cmp.w	ip, #25
 8003516:	d804      	bhi.n	8003522 <_strtoul_l.constprop.0+0xb6>
 8003518:	3c57      	subs	r4, #87	@ 0x57
 800351a:	e7d5      	b.n	80034c8 <_strtoul_l.constprop.0+0x5c>
 800351c:	f04f 36ff 	mov.w	r6, #4294967295
 8003520:	e7df      	b.n	80034e2 <_strtoul_l.constprop.0+0x76>
 8003522:	1c73      	adds	r3, r6, #1
 8003524:	d106      	bne.n	8003534 <_strtoul_l.constprop.0+0xc8>
 8003526:	2322      	movs	r3, #34	@ 0x22
 8003528:	f8ce 3000 	str.w	r3, [lr]
 800352c:	4630      	mov	r0, r6
 800352e:	b932      	cbnz	r2, 800353e <_strtoul_l.constprop.0+0xd2>
 8003530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003534:	b107      	cbz	r7, 8003538 <_strtoul_l.constprop.0+0xcc>
 8003536:	4240      	negs	r0, r0
 8003538:	2a00      	cmp	r2, #0
 800353a:	d0f9      	beq.n	8003530 <_strtoul_l.constprop.0+0xc4>
 800353c:	b106      	cbz	r6, 8003540 <_strtoul_l.constprop.0+0xd4>
 800353e:	1e69      	subs	r1, r5, #1
 8003540:	6011      	str	r1, [r2, #0]
 8003542:	e7f5      	b.n	8003530 <_strtoul_l.constprop.0+0xc4>
 8003544:	08005268 	.word	0x08005268

08003548 <_strtoul_r>:
 8003548:	f7ff bf90 	b.w	800346c <_strtoul_l.constprop.0>

0800354c <strtoul>:
 800354c:	4613      	mov	r3, r2
 800354e:	460a      	mov	r2, r1
 8003550:	4601      	mov	r1, r0
 8003552:	4802      	ldr	r0, [pc, #8]	@ (800355c <strtoul+0x10>)
 8003554:	6800      	ldr	r0, [r0, #0]
 8003556:	f7ff bf89 	b.w	800346c <_strtoul_l.constprop.0>
 800355a:	bf00      	nop
 800355c:	20000018 	.word	0x20000018

08003560 <std>:
 8003560:	2300      	movs	r3, #0
 8003562:	b510      	push	{r4, lr}
 8003564:	4604      	mov	r4, r0
 8003566:	e9c0 3300 	strd	r3, r3, [r0]
 800356a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800356e:	6083      	str	r3, [r0, #8]
 8003570:	8181      	strh	r1, [r0, #12]
 8003572:	6643      	str	r3, [r0, #100]	@ 0x64
 8003574:	81c2      	strh	r2, [r0, #14]
 8003576:	6183      	str	r3, [r0, #24]
 8003578:	4619      	mov	r1, r3
 800357a:	2208      	movs	r2, #8
 800357c:	305c      	adds	r0, #92	@ 0x5c
 800357e:	f000 fa0b 	bl	8003998 <memset>
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <std+0x58>)
 8003584:	6263      	str	r3, [r4, #36]	@ 0x24
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <std+0x5c>)
 8003588:	62a3      	str	r3, [r4, #40]	@ 0x28
 800358a:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <std+0x60>)
 800358c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800358e:	4b0d      	ldr	r3, [pc, #52]	@ (80035c4 <std+0x64>)
 8003590:	6323      	str	r3, [r4, #48]	@ 0x30
 8003592:	4b0d      	ldr	r3, [pc, #52]	@ (80035c8 <std+0x68>)
 8003594:	6224      	str	r4, [r4, #32]
 8003596:	429c      	cmp	r4, r3
 8003598:	d006      	beq.n	80035a8 <std+0x48>
 800359a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800359e:	4294      	cmp	r4, r2
 80035a0:	d002      	beq.n	80035a8 <std+0x48>
 80035a2:	33d0      	adds	r3, #208	@ 0xd0
 80035a4:	429c      	cmp	r4, r3
 80035a6:	d105      	bne.n	80035b4 <std+0x54>
 80035a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b0:	f000 bada 	b.w	8003b68 <__retarget_lock_init_recursive>
 80035b4:	bd10      	pop	{r4, pc}
 80035b6:	bf00      	nop
 80035b8:	080037e9 	.word	0x080037e9
 80035bc:	0800380b 	.word	0x0800380b
 80035c0:	08003843 	.word	0x08003843
 80035c4:	08003867 	.word	0x08003867
 80035c8:	20000114 	.word	0x20000114

080035cc <stdio_exit_handler>:
 80035cc:	4a02      	ldr	r2, [pc, #8]	@ (80035d8 <stdio_exit_handler+0xc>)
 80035ce:	4903      	ldr	r1, [pc, #12]	@ (80035dc <stdio_exit_handler+0x10>)
 80035d0:	4803      	ldr	r0, [pc, #12]	@ (80035e0 <stdio_exit_handler+0x14>)
 80035d2:	f000 b869 	b.w	80036a8 <_fwalk_sglue>
 80035d6:	bf00      	nop
 80035d8:	2000000c 	.word	0x2000000c
 80035dc:	08004a51 	.word	0x08004a51
 80035e0:	2000001c 	.word	0x2000001c

080035e4 <cleanup_stdio>:
 80035e4:	6841      	ldr	r1, [r0, #4]
 80035e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <cleanup_stdio+0x34>)
 80035e8:	4299      	cmp	r1, r3
 80035ea:	b510      	push	{r4, lr}
 80035ec:	4604      	mov	r4, r0
 80035ee:	d001      	beq.n	80035f4 <cleanup_stdio+0x10>
 80035f0:	f001 fa2e 	bl	8004a50 <_fflush_r>
 80035f4:	68a1      	ldr	r1, [r4, #8]
 80035f6:	4b09      	ldr	r3, [pc, #36]	@ (800361c <cleanup_stdio+0x38>)
 80035f8:	4299      	cmp	r1, r3
 80035fa:	d002      	beq.n	8003602 <cleanup_stdio+0x1e>
 80035fc:	4620      	mov	r0, r4
 80035fe:	f001 fa27 	bl	8004a50 <_fflush_r>
 8003602:	68e1      	ldr	r1, [r4, #12]
 8003604:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <cleanup_stdio+0x3c>)
 8003606:	4299      	cmp	r1, r3
 8003608:	d004      	beq.n	8003614 <cleanup_stdio+0x30>
 800360a:	4620      	mov	r0, r4
 800360c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003610:	f001 ba1e 	b.w	8004a50 <_fflush_r>
 8003614:	bd10      	pop	{r4, pc}
 8003616:	bf00      	nop
 8003618:	20000114 	.word	0x20000114
 800361c:	2000017c 	.word	0x2000017c
 8003620:	200001e4 	.word	0x200001e4

08003624 <global_stdio_init.part.0>:
 8003624:	b510      	push	{r4, lr}
 8003626:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <global_stdio_init.part.0+0x30>)
 8003628:	4c0b      	ldr	r4, [pc, #44]	@ (8003658 <global_stdio_init.part.0+0x34>)
 800362a:	4a0c      	ldr	r2, [pc, #48]	@ (800365c <global_stdio_init.part.0+0x38>)
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	4620      	mov	r0, r4
 8003630:	2200      	movs	r2, #0
 8003632:	2104      	movs	r1, #4
 8003634:	f7ff ff94 	bl	8003560 <std>
 8003638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800363c:	2201      	movs	r2, #1
 800363e:	2109      	movs	r1, #9
 8003640:	f7ff ff8e 	bl	8003560 <std>
 8003644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003648:	2202      	movs	r2, #2
 800364a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800364e:	2112      	movs	r1, #18
 8003650:	f7ff bf86 	b.w	8003560 <std>
 8003654:	2000024c 	.word	0x2000024c
 8003658:	20000114 	.word	0x20000114
 800365c:	080035cd 	.word	0x080035cd

08003660 <__sfp_lock_acquire>:
 8003660:	4801      	ldr	r0, [pc, #4]	@ (8003668 <__sfp_lock_acquire+0x8>)
 8003662:	f000 ba82 	b.w	8003b6a <__retarget_lock_acquire_recursive>
 8003666:	bf00      	nop
 8003668:	20000255 	.word	0x20000255

0800366c <__sfp_lock_release>:
 800366c:	4801      	ldr	r0, [pc, #4]	@ (8003674 <__sfp_lock_release+0x8>)
 800366e:	f000 ba7d 	b.w	8003b6c <__retarget_lock_release_recursive>
 8003672:	bf00      	nop
 8003674:	20000255 	.word	0x20000255

08003678 <__sinit>:
 8003678:	b510      	push	{r4, lr}
 800367a:	4604      	mov	r4, r0
 800367c:	f7ff fff0 	bl	8003660 <__sfp_lock_acquire>
 8003680:	6a23      	ldr	r3, [r4, #32]
 8003682:	b11b      	cbz	r3, 800368c <__sinit+0x14>
 8003684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003688:	f7ff bff0 	b.w	800366c <__sfp_lock_release>
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <__sinit+0x28>)
 800368e:	6223      	str	r3, [r4, #32]
 8003690:	4b04      	ldr	r3, [pc, #16]	@ (80036a4 <__sinit+0x2c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f5      	bne.n	8003684 <__sinit+0xc>
 8003698:	f7ff ffc4 	bl	8003624 <global_stdio_init.part.0>
 800369c:	e7f2      	b.n	8003684 <__sinit+0xc>
 800369e:	bf00      	nop
 80036a0:	080035e5 	.word	0x080035e5
 80036a4:	2000024c 	.word	0x2000024c

080036a8 <_fwalk_sglue>:
 80036a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036ac:	4607      	mov	r7, r0
 80036ae:	4688      	mov	r8, r1
 80036b0:	4614      	mov	r4, r2
 80036b2:	2600      	movs	r6, #0
 80036b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036b8:	f1b9 0901 	subs.w	r9, r9, #1
 80036bc:	d505      	bpl.n	80036ca <_fwalk_sglue+0x22>
 80036be:	6824      	ldr	r4, [r4, #0]
 80036c0:	2c00      	cmp	r4, #0
 80036c2:	d1f7      	bne.n	80036b4 <_fwalk_sglue+0xc>
 80036c4:	4630      	mov	r0, r6
 80036c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ca:	89ab      	ldrh	r3, [r5, #12]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d907      	bls.n	80036e0 <_fwalk_sglue+0x38>
 80036d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036d4:	3301      	adds	r3, #1
 80036d6:	d003      	beq.n	80036e0 <_fwalk_sglue+0x38>
 80036d8:	4629      	mov	r1, r5
 80036da:	4638      	mov	r0, r7
 80036dc:	47c0      	blx	r8
 80036de:	4306      	orrs	r6, r0
 80036e0:	3568      	adds	r5, #104	@ 0x68
 80036e2:	e7e9      	b.n	80036b8 <_fwalk_sglue+0x10>

080036e4 <iprintf>:
 80036e4:	b40f      	push	{r0, r1, r2, r3}
 80036e6:	b507      	push	{r0, r1, r2, lr}
 80036e8:	4906      	ldr	r1, [pc, #24]	@ (8003704 <iprintf+0x20>)
 80036ea:	ab04      	add	r3, sp, #16
 80036ec:	6808      	ldr	r0, [r1, #0]
 80036ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80036f2:	6881      	ldr	r1, [r0, #8]
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	f000 fb83 	bl	8003e00 <_vfiprintf_r>
 80036fa:	b003      	add	sp, #12
 80036fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003700:	b004      	add	sp, #16
 8003702:	4770      	bx	lr
 8003704:	20000018 	.word	0x20000018

08003708 <_puts_r>:
 8003708:	6a03      	ldr	r3, [r0, #32]
 800370a:	b570      	push	{r4, r5, r6, lr}
 800370c:	6884      	ldr	r4, [r0, #8]
 800370e:	4605      	mov	r5, r0
 8003710:	460e      	mov	r6, r1
 8003712:	b90b      	cbnz	r3, 8003718 <_puts_r+0x10>
 8003714:	f7ff ffb0 	bl	8003678 <__sinit>
 8003718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800371a:	07db      	lsls	r3, r3, #31
 800371c:	d405      	bmi.n	800372a <_puts_r+0x22>
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	0598      	lsls	r0, r3, #22
 8003722:	d402      	bmi.n	800372a <_puts_r+0x22>
 8003724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003726:	f000 fa20 	bl	8003b6a <__retarget_lock_acquire_recursive>
 800372a:	89a3      	ldrh	r3, [r4, #12]
 800372c:	0719      	lsls	r1, r3, #28
 800372e:	d502      	bpl.n	8003736 <_puts_r+0x2e>
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d135      	bne.n	80037a2 <_puts_r+0x9a>
 8003736:	4621      	mov	r1, r4
 8003738:	4628      	mov	r0, r5
 800373a:	f000 f8d7 	bl	80038ec <__swsetup_r>
 800373e:	b380      	cbz	r0, 80037a2 <_puts_r+0x9a>
 8003740:	f04f 35ff 	mov.w	r5, #4294967295
 8003744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003746:	07da      	lsls	r2, r3, #31
 8003748:	d405      	bmi.n	8003756 <_puts_r+0x4e>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	059b      	lsls	r3, r3, #22
 800374e:	d402      	bmi.n	8003756 <_puts_r+0x4e>
 8003750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003752:	f000 fa0b 	bl	8003b6c <__retarget_lock_release_recursive>
 8003756:	4628      	mov	r0, r5
 8003758:	bd70      	pop	{r4, r5, r6, pc}
 800375a:	2b00      	cmp	r3, #0
 800375c:	da04      	bge.n	8003768 <_puts_r+0x60>
 800375e:	69a2      	ldr	r2, [r4, #24]
 8003760:	429a      	cmp	r2, r3
 8003762:	dc17      	bgt.n	8003794 <_puts_r+0x8c>
 8003764:	290a      	cmp	r1, #10
 8003766:	d015      	beq.n	8003794 <_puts_r+0x8c>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	6022      	str	r2, [r4, #0]
 800376e:	7019      	strb	r1, [r3, #0]
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003776:	3b01      	subs	r3, #1
 8003778:	60a3      	str	r3, [r4, #8]
 800377a:	2900      	cmp	r1, #0
 800377c:	d1ed      	bne.n	800375a <_puts_r+0x52>
 800377e:	2b00      	cmp	r3, #0
 8003780:	da11      	bge.n	80037a6 <_puts_r+0x9e>
 8003782:	4622      	mov	r2, r4
 8003784:	210a      	movs	r1, #10
 8003786:	4628      	mov	r0, r5
 8003788:	f000 f871 	bl	800386e <__swbuf_r>
 800378c:	3001      	adds	r0, #1
 800378e:	d0d7      	beq.n	8003740 <_puts_r+0x38>
 8003790:	250a      	movs	r5, #10
 8003792:	e7d7      	b.n	8003744 <_puts_r+0x3c>
 8003794:	4622      	mov	r2, r4
 8003796:	4628      	mov	r0, r5
 8003798:	f000 f869 	bl	800386e <__swbuf_r>
 800379c:	3001      	adds	r0, #1
 800379e:	d1e7      	bne.n	8003770 <_puts_r+0x68>
 80037a0:	e7ce      	b.n	8003740 <_puts_r+0x38>
 80037a2:	3e01      	subs	r6, #1
 80037a4:	e7e4      	b.n	8003770 <_puts_r+0x68>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	6022      	str	r2, [r4, #0]
 80037ac:	220a      	movs	r2, #10
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e7ee      	b.n	8003790 <_puts_r+0x88>
	...

080037b4 <puts>:
 80037b4:	4b02      	ldr	r3, [pc, #8]	@ (80037c0 <puts+0xc>)
 80037b6:	4601      	mov	r1, r0
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f7ff bfa5 	b.w	8003708 <_puts_r>
 80037be:	bf00      	nop
 80037c0:	20000018 	.word	0x20000018

080037c4 <iscanf>:
 80037c4:	b40f      	push	{r0, r1, r2, r3}
 80037c6:	b507      	push	{r0, r1, r2, lr}
 80037c8:	4906      	ldr	r1, [pc, #24]	@ (80037e4 <iscanf+0x20>)
 80037ca:	ab04      	add	r3, sp, #16
 80037cc:	6808      	ldr	r0, [r1, #0]
 80037ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80037d2:	6841      	ldr	r1, [r0, #4]
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	f000 ff55 	bl	8004684 <_vfiscanf_r>
 80037da:	b003      	add	sp, #12
 80037dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80037e0:	b004      	add	sp, #16
 80037e2:	4770      	bx	lr
 80037e4:	20000018 	.word	0x20000018

080037e8 <__sread>:
 80037e8:	b510      	push	{r4, lr}
 80037ea:	460c      	mov	r4, r1
 80037ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f0:	f000 f96c 	bl	8003acc <_read_r>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	bfab      	itete	ge
 80037f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80037fa:	89a3      	ldrhlt	r3, [r4, #12]
 80037fc:	181b      	addge	r3, r3, r0
 80037fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003802:	bfac      	ite	ge
 8003804:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003806:	81a3      	strhlt	r3, [r4, #12]
 8003808:	bd10      	pop	{r4, pc}

0800380a <__swrite>:
 800380a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380e:	461f      	mov	r7, r3
 8003810:	898b      	ldrh	r3, [r1, #12]
 8003812:	05db      	lsls	r3, r3, #23
 8003814:	4605      	mov	r5, r0
 8003816:	460c      	mov	r4, r1
 8003818:	4616      	mov	r6, r2
 800381a:	d505      	bpl.n	8003828 <__swrite+0x1e>
 800381c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003820:	2302      	movs	r3, #2
 8003822:	2200      	movs	r2, #0
 8003824:	f000 f940 	bl	8003aa8 <_lseek_r>
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800382e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003832:	81a3      	strh	r3, [r4, #12]
 8003834:	4632      	mov	r2, r6
 8003836:	463b      	mov	r3, r7
 8003838:	4628      	mov	r0, r5
 800383a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800383e:	f000 b957 	b.w	8003af0 <_write_r>

08003842 <__sseek>:
 8003842:	b510      	push	{r4, lr}
 8003844:	460c      	mov	r4, r1
 8003846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800384a:	f000 f92d 	bl	8003aa8 <_lseek_r>
 800384e:	1c43      	adds	r3, r0, #1
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	bf15      	itete	ne
 8003854:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003856:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800385a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800385e:	81a3      	strheq	r3, [r4, #12]
 8003860:	bf18      	it	ne
 8003862:	81a3      	strhne	r3, [r4, #12]
 8003864:	bd10      	pop	{r4, pc}

08003866 <__sclose>:
 8003866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800386a:	f000 b90d 	b.w	8003a88 <_close_r>

0800386e <__swbuf_r>:
 800386e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003870:	460e      	mov	r6, r1
 8003872:	4614      	mov	r4, r2
 8003874:	4605      	mov	r5, r0
 8003876:	b118      	cbz	r0, 8003880 <__swbuf_r+0x12>
 8003878:	6a03      	ldr	r3, [r0, #32]
 800387a:	b90b      	cbnz	r3, 8003880 <__swbuf_r+0x12>
 800387c:	f7ff fefc 	bl	8003678 <__sinit>
 8003880:	69a3      	ldr	r3, [r4, #24]
 8003882:	60a3      	str	r3, [r4, #8]
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	071a      	lsls	r2, r3, #28
 8003888:	d501      	bpl.n	800388e <__swbuf_r+0x20>
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	b943      	cbnz	r3, 80038a0 <__swbuf_r+0x32>
 800388e:	4621      	mov	r1, r4
 8003890:	4628      	mov	r0, r5
 8003892:	f000 f82b 	bl	80038ec <__swsetup_r>
 8003896:	b118      	cbz	r0, 80038a0 <__swbuf_r+0x32>
 8003898:	f04f 37ff 	mov.w	r7, #4294967295
 800389c:	4638      	mov	r0, r7
 800389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	6922      	ldr	r2, [r4, #16]
 80038a4:	1a98      	subs	r0, r3, r2
 80038a6:	6963      	ldr	r3, [r4, #20]
 80038a8:	b2f6      	uxtb	r6, r6
 80038aa:	4283      	cmp	r3, r0
 80038ac:	4637      	mov	r7, r6
 80038ae:	dc05      	bgt.n	80038bc <__swbuf_r+0x4e>
 80038b0:	4621      	mov	r1, r4
 80038b2:	4628      	mov	r0, r5
 80038b4:	f001 f8cc 	bl	8004a50 <_fflush_r>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d1ed      	bne.n	8003898 <__swbuf_r+0x2a>
 80038bc:	68a3      	ldr	r3, [r4, #8]
 80038be:	3b01      	subs	r3, #1
 80038c0:	60a3      	str	r3, [r4, #8]
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	6022      	str	r2, [r4, #0]
 80038c8:	701e      	strb	r6, [r3, #0]
 80038ca:	6962      	ldr	r2, [r4, #20]
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d004      	beq.n	80038dc <__swbuf_r+0x6e>
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	07db      	lsls	r3, r3, #31
 80038d6:	d5e1      	bpl.n	800389c <__swbuf_r+0x2e>
 80038d8:	2e0a      	cmp	r6, #10
 80038da:	d1df      	bne.n	800389c <__swbuf_r+0x2e>
 80038dc:	4621      	mov	r1, r4
 80038de:	4628      	mov	r0, r5
 80038e0:	f001 f8b6 	bl	8004a50 <_fflush_r>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d0d9      	beq.n	800389c <__swbuf_r+0x2e>
 80038e8:	e7d6      	b.n	8003898 <__swbuf_r+0x2a>
	...

080038ec <__swsetup_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4b29      	ldr	r3, [pc, #164]	@ (8003994 <__swsetup_r+0xa8>)
 80038f0:	4605      	mov	r5, r0
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	460c      	mov	r4, r1
 80038f6:	b118      	cbz	r0, 8003900 <__swsetup_r+0x14>
 80038f8:	6a03      	ldr	r3, [r0, #32]
 80038fa:	b90b      	cbnz	r3, 8003900 <__swsetup_r+0x14>
 80038fc:	f7ff febc 	bl	8003678 <__sinit>
 8003900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003904:	0719      	lsls	r1, r3, #28
 8003906:	d422      	bmi.n	800394e <__swsetup_r+0x62>
 8003908:	06da      	lsls	r2, r3, #27
 800390a:	d407      	bmi.n	800391c <__swsetup_r+0x30>
 800390c:	2209      	movs	r2, #9
 800390e:	602a      	str	r2, [r5, #0]
 8003910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003914:	81a3      	strh	r3, [r4, #12]
 8003916:	f04f 30ff 	mov.w	r0, #4294967295
 800391a:	e033      	b.n	8003984 <__swsetup_r+0x98>
 800391c:	0758      	lsls	r0, r3, #29
 800391e:	d512      	bpl.n	8003946 <__swsetup_r+0x5a>
 8003920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003922:	b141      	cbz	r1, 8003936 <__swsetup_r+0x4a>
 8003924:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003928:	4299      	cmp	r1, r3
 800392a:	d002      	beq.n	8003932 <__swsetup_r+0x46>
 800392c:	4628      	mov	r0, r5
 800392e:	f000 f93d 	bl	8003bac <_free_r>
 8003932:	2300      	movs	r3, #0
 8003934:	6363      	str	r3, [r4, #52]	@ 0x34
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800393c:	81a3      	strh	r3, [r4, #12]
 800393e:	2300      	movs	r3, #0
 8003940:	6063      	str	r3, [r4, #4]
 8003942:	6923      	ldr	r3, [r4, #16]
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	f043 0308 	orr.w	r3, r3, #8
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	6923      	ldr	r3, [r4, #16]
 8003950:	b94b      	cbnz	r3, 8003966 <__swsetup_r+0x7a>
 8003952:	89a3      	ldrh	r3, [r4, #12]
 8003954:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800395c:	d003      	beq.n	8003966 <__swsetup_r+0x7a>
 800395e:	4621      	mov	r1, r4
 8003960:	4628      	mov	r0, r5
 8003962:	f001 f8d5 	bl	8004b10 <__smakebuf_r>
 8003966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396a:	f013 0201 	ands.w	r2, r3, #1
 800396e:	d00a      	beq.n	8003986 <__swsetup_r+0x9a>
 8003970:	2200      	movs	r2, #0
 8003972:	60a2      	str	r2, [r4, #8]
 8003974:	6962      	ldr	r2, [r4, #20]
 8003976:	4252      	negs	r2, r2
 8003978:	61a2      	str	r2, [r4, #24]
 800397a:	6922      	ldr	r2, [r4, #16]
 800397c:	b942      	cbnz	r2, 8003990 <__swsetup_r+0xa4>
 800397e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003982:	d1c5      	bne.n	8003910 <__swsetup_r+0x24>
 8003984:	bd38      	pop	{r3, r4, r5, pc}
 8003986:	0799      	lsls	r1, r3, #30
 8003988:	bf58      	it	pl
 800398a:	6962      	ldrpl	r2, [r4, #20]
 800398c:	60a2      	str	r2, [r4, #8]
 800398e:	e7f4      	b.n	800397a <__swsetup_r+0x8e>
 8003990:	2000      	movs	r0, #0
 8003992:	e7f7      	b.n	8003984 <__swsetup_r+0x98>
 8003994:	20000018 	.word	0x20000018

08003998 <memset>:
 8003998:	4402      	add	r2, r0
 800399a:	4603      	mov	r3, r0
 800399c:	4293      	cmp	r3, r2
 800399e:	d100      	bne.n	80039a2 <memset+0xa>
 80039a0:	4770      	bx	lr
 80039a2:	f803 1b01 	strb.w	r1, [r3], #1
 80039a6:	e7f9      	b.n	800399c <memset+0x4>

080039a8 <strncpy>:
 80039a8:	b510      	push	{r4, lr}
 80039aa:	3901      	subs	r1, #1
 80039ac:	4603      	mov	r3, r0
 80039ae:	b132      	cbz	r2, 80039be <strncpy+0x16>
 80039b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80039b4:	f803 4b01 	strb.w	r4, [r3], #1
 80039b8:	3a01      	subs	r2, #1
 80039ba:	2c00      	cmp	r4, #0
 80039bc:	d1f7      	bne.n	80039ae <strncpy+0x6>
 80039be:	441a      	add	r2, r3
 80039c0:	2100      	movs	r1, #0
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d100      	bne.n	80039c8 <strncpy+0x20>
 80039c6:	bd10      	pop	{r4, pc}
 80039c8:	f803 1b01 	strb.w	r1, [r3], #1
 80039cc:	e7f9      	b.n	80039c2 <strncpy+0x1a>
	...

080039d0 <strtok>:
 80039d0:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <strtok+0x5c>)
 80039d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d6:	681f      	ldr	r7, [r3, #0]
 80039d8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80039da:	4605      	mov	r5, r0
 80039dc:	460e      	mov	r6, r1
 80039de:	b9ec      	cbnz	r4, 8003a1c <strtok+0x4c>
 80039e0:	2050      	movs	r0, #80	@ 0x50
 80039e2:	f000 f92d 	bl	8003c40 <malloc>
 80039e6:	4602      	mov	r2, r0
 80039e8:	6478      	str	r0, [r7, #68]	@ 0x44
 80039ea:	b920      	cbnz	r0, 80039f6 <strtok+0x26>
 80039ec:	4b10      	ldr	r3, [pc, #64]	@ (8003a30 <strtok+0x60>)
 80039ee:	4811      	ldr	r0, [pc, #68]	@ (8003a34 <strtok+0x64>)
 80039f0:	215b      	movs	r1, #91	@ 0x5b
 80039f2:	f000 f8bd 	bl	8003b70 <__assert_func>
 80039f6:	e9c0 4400 	strd	r4, r4, [r0]
 80039fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80039fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003a02:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8003a06:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8003a0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8003a0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8003a12:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8003a16:	6184      	str	r4, [r0, #24]
 8003a18:	7704      	strb	r4, [r0, #28]
 8003a1a:	6244      	str	r4, [r0, #36]	@ 0x24
 8003a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a1e:	4631      	mov	r1, r6
 8003a20:	4628      	mov	r0, r5
 8003a22:	2301      	movs	r3, #1
 8003a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a28:	f000 b806 	b.w	8003a38 <__strtok_r>
 8003a2c:	20000018 	.word	0x20000018
 8003a30:	080051f8 	.word	0x080051f8
 8003a34:	08005368 	.word	0x08005368

08003a38 <__strtok_r>:
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	b908      	cbnz	r0, 8003a42 <__strtok_r+0xa>
 8003a3e:	6814      	ldr	r4, [r2, #0]
 8003a40:	b144      	cbz	r4, 8003a54 <__strtok_r+0x1c>
 8003a42:	4620      	mov	r0, r4
 8003a44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003a48:	460f      	mov	r7, r1
 8003a4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003a4e:	b91e      	cbnz	r6, 8003a58 <__strtok_r+0x20>
 8003a50:	b965      	cbnz	r5, 8003a6c <__strtok_r+0x34>
 8003a52:	6015      	str	r5, [r2, #0]
 8003a54:	2000      	movs	r0, #0
 8003a56:	e005      	b.n	8003a64 <__strtok_r+0x2c>
 8003a58:	42b5      	cmp	r5, r6
 8003a5a:	d1f6      	bne.n	8003a4a <__strtok_r+0x12>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <__strtok_r+0xa>
 8003a60:	6014      	str	r4, [r2, #0]
 8003a62:	7003      	strb	r3, [r0, #0]
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a66:	461c      	mov	r4, r3
 8003a68:	e00c      	b.n	8003a84 <__strtok_r+0x4c>
 8003a6a:	b915      	cbnz	r5, 8003a72 <__strtok_r+0x3a>
 8003a6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003a70:	460e      	mov	r6, r1
 8003a72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003a76:	42ab      	cmp	r3, r5
 8003a78:	d1f7      	bne.n	8003a6a <__strtok_r+0x32>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f3      	beq.n	8003a66 <__strtok_r+0x2e>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003a84:	6014      	str	r4, [r2, #0]
 8003a86:	e7ed      	b.n	8003a64 <__strtok_r+0x2c>

08003a88 <_close_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	4d06      	ldr	r5, [pc, #24]	@ (8003aa4 <_close_r+0x1c>)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	f7fd f8e6 	bl	8000c64 <_close>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_close_r+0x1a>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_close_r+0x1a>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	20000250 	.word	0x20000250

08003aa8 <_lseek_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4d07      	ldr	r5, [pc, #28]	@ (8003ac8 <_lseek_r+0x20>)
 8003aac:	4604      	mov	r4, r0
 8003aae:	4608      	mov	r0, r1
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	602a      	str	r2, [r5, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f7fd f8fb 	bl	8000cb2 <_lseek>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_lseek_r+0x1e>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_lseek_r+0x1e>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	20000250 	.word	0x20000250

08003acc <_read_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4d07      	ldr	r5, [pc, #28]	@ (8003aec <_read_r+0x20>)
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	4608      	mov	r0, r1
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	602a      	str	r2, [r5, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f7fd f87e 	bl	8000bdc <_read>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d102      	bne.n	8003aea <_read_r+0x1e>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	b103      	cbz	r3, 8003aea <_read_r+0x1e>
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	20000250 	.word	0x20000250

08003af0 <_write_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4d07      	ldr	r5, [pc, #28]	@ (8003b10 <_write_r+0x20>)
 8003af4:	4604      	mov	r4, r0
 8003af6:	4608      	mov	r0, r1
 8003af8:	4611      	mov	r1, r2
 8003afa:	2200      	movs	r2, #0
 8003afc:	602a      	str	r2, [r5, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f7fd f88e 	bl	8000c20 <_write>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_write_r+0x1e>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_write_r+0x1e>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	20000250 	.word	0x20000250

08003b14 <__errno>:
 8003b14:	4b01      	ldr	r3, [pc, #4]	@ (8003b1c <__errno+0x8>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000018 	.word	0x20000018

08003b20 <__libc_init_array>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	4d0d      	ldr	r5, [pc, #52]	@ (8003b58 <__libc_init_array+0x38>)
 8003b24:	4c0d      	ldr	r4, [pc, #52]	@ (8003b5c <__libc_init_array+0x3c>)
 8003b26:	1b64      	subs	r4, r4, r5
 8003b28:	10a4      	asrs	r4, r4, #2
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	42a6      	cmp	r6, r4
 8003b2e:	d109      	bne.n	8003b44 <__libc_init_array+0x24>
 8003b30:	4d0b      	ldr	r5, [pc, #44]	@ (8003b60 <__libc_init_array+0x40>)
 8003b32:	4c0c      	ldr	r4, [pc, #48]	@ (8003b64 <__libc_init_array+0x44>)
 8003b34:	f001 fa5e 	bl	8004ff4 <_init>
 8003b38:	1b64      	subs	r4, r4, r5
 8003b3a:	10a4      	asrs	r4, r4, #2
 8003b3c:	2600      	movs	r6, #0
 8003b3e:	42a6      	cmp	r6, r4
 8003b40:	d105      	bne.n	8003b4e <__libc_init_array+0x2e>
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b48:	4798      	blx	r3
 8003b4a:	3601      	adds	r6, #1
 8003b4c:	e7ee      	b.n	8003b2c <__libc_init_array+0xc>
 8003b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b52:	4798      	blx	r3
 8003b54:	3601      	adds	r6, #1
 8003b56:	e7f2      	b.n	8003b3e <__libc_init_array+0x1e>
 8003b58:	08005454 	.word	0x08005454
 8003b5c:	08005454 	.word	0x08005454
 8003b60:	08005454 	.word	0x08005454
 8003b64:	08005458 	.word	0x08005458

08003b68 <__retarget_lock_init_recursive>:
 8003b68:	4770      	bx	lr

08003b6a <__retarget_lock_acquire_recursive>:
 8003b6a:	4770      	bx	lr

08003b6c <__retarget_lock_release_recursive>:
 8003b6c:	4770      	bx	lr
	...

08003b70 <__assert_func>:
 8003b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b72:	4614      	mov	r4, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <__assert_func+0x2c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	68d8      	ldr	r0, [r3, #12]
 8003b7e:	b954      	cbnz	r4, 8003b96 <__assert_func+0x26>
 8003b80:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <__assert_func+0x30>)
 8003b82:	461c      	mov	r4, r3
 8003b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b88:	9100      	str	r1, [sp, #0]
 8003b8a:	462b      	mov	r3, r5
 8003b8c:	4905      	ldr	r1, [pc, #20]	@ (8003ba4 <__assert_func+0x34>)
 8003b8e:	f000 ff87 	bl	8004aa0 <fiprintf>
 8003b92:	f001 f9ad 	bl	8004ef0 <abort>
 8003b96:	4b04      	ldr	r3, [pc, #16]	@ (8003ba8 <__assert_func+0x38>)
 8003b98:	e7f4      	b.n	8003b84 <__assert_func+0x14>
 8003b9a:	bf00      	nop
 8003b9c:	20000018 	.word	0x20000018
 8003ba0:	080053fd 	.word	0x080053fd
 8003ba4:	080053cf 	.word	0x080053cf
 8003ba8:	080053c2 	.word	0x080053c2

08003bac <_free_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	4605      	mov	r5, r0
 8003bb0:	2900      	cmp	r1, #0
 8003bb2:	d041      	beq.n	8003c38 <_free_r+0x8c>
 8003bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb8:	1f0c      	subs	r4, r1, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bfb8      	it	lt
 8003bbe:	18e4      	addlt	r4, r4, r3
 8003bc0:	f000 f8e8 	bl	8003d94 <__malloc_lock>
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c3c <_free_r+0x90>)
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	b933      	cbnz	r3, 8003bd8 <_free_r+0x2c>
 8003bca:	6063      	str	r3, [r4, #4]
 8003bcc:	6014      	str	r4, [r2, #0]
 8003bce:	4628      	mov	r0, r5
 8003bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bd4:	f000 b8e4 	b.w	8003da0 <__malloc_unlock>
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	d908      	bls.n	8003bee <_free_r+0x42>
 8003bdc:	6820      	ldr	r0, [r4, #0]
 8003bde:	1821      	adds	r1, r4, r0
 8003be0:	428b      	cmp	r3, r1
 8003be2:	bf01      	itttt	eq
 8003be4:	6819      	ldreq	r1, [r3, #0]
 8003be6:	685b      	ldreq	r3, [r3, #4]
 8003be8:	1809      	addeq	r1, r1, r0
 8003bea:	6021      	streq	r1, [r4, #0]
 8003bec:	e7ed      	b.n	8003bca <_free_r+0x1e>
 8003bee:	461a      	mov	r2, r3
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	b10b      	cbz	r3, 8003bf8 <_free_r+0x4c>
 8003bf4:	42a3      	cmp	r3, r4
 8003bf6:	d9fa      	bls.n	8003bee <_free_r+0x42>
 8003bf8:	6811      	ldr	r1, [r2, #0]
 8003bfa:	1850      	adds	r0, r2, r1
 8003bfc:	42a0      	cmp	r0, r4
 8003bfe:	d10b      	bne.n	8003c18 <_free_r+0x6c>
 8003c00:	6820      	ldr	r0, [r4, #0]
 8003c02:	4401      	add	r1, r0
 8003c04:	1850      	adds	r0, r2, r1
 8003c06:	4283      	cmp	r3, r0
 8003c08:	6011      	str	r1, [r2, #0]
 8003c0a:	d1e0      	bne.n	8003bce <_free_r+0x22>
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	6053      	str	r3, [r2, #4]
 8003c12:	4408      	add	r0, r1
 8003c14:	6010      	str	r0, [r2, #0]
 8003c16:	e7da      	b.n	8003bce <_free_r+0x22>
 8003c18:	d902      	bls.n	8003c20 <_free_r+0x74>
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	602b      	str	r3, [r5, #0]
 8003c1e:	e7d6      	b.n	8003bce <_free_r+0x22>
 8003c20:	6820      	ldr	r0, [r4, #0]
 8003c22:	1821      	adds	r1, r4, r0
 8003c24:	428b      	cmp	r3, r1
 8003c26:	bf04      	itt	eq
 8003c28:	6819      	ldreq	r1, [r3, #0]
 8003c2a:	685b      	ldreq	r3, [r3, #4]
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	bf04      	itt	eq
 8003c30:	1809      	addeq	r1, r1, r0
 8003c32:	6021      	streq	r1, [r4, #0]
 8003c34:	6054      	str	r4, [r2, #4]
 8003c36:	e7ca      	b.n	8003bce <_free_r+0x22>
 8003c38:	bd38      	pop	{r3, r4, r5, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000025c 	.word	0x2000025c

08003c40 <malloc>:
 8003c40:	4b02      	ldr	r3, [pc, #8]	@ (8003c4c <malloc+0xc>)
 8003c42:	4601      	mov	r1, r0
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f000 b825 	b.w	8003c94 <_malloc_r>
 8003c4a:	bf00      	nop
 8003c4c:	20000018 	.word	0x20000018

08003c50 <sbrk_aligned>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4e0f      	ldr	r6, [pc, #60]	@ (8003c90 <sbrk_aligned+0x40>)
 8003c54:	460c      	mov	r4, r1
 8003c56:	6831      	ldr	r1, [r6, #0]
 8003c58:	4605      	mov	r5, r0
 8003c5a:	b911      	cbnz	r1, 8003c62 <sbrk_aligned+0x12>
 8003c5c:	f001 f92a 	bl	8004eb4 <_sbrk_r>
 8003c60:	6030      	str	r0, [r6, #0]
 8003c62:	4621      	mov	r1, r4
 8003c64:	4628      	mov	r0, r5
 8003c66:	f001 f925 	bl	8004eb4 <_sbrk_r>
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d103      	bne.n	8003c76 <sbrk_aligned+0x26>
 8003c6e:	f04f 34ff 	mov.w	r4, #4294967295
 8003c72:	4620      	mov	r0, r4
 8003c74:	bd70      	pop	{r4, r5, r6, pc}
 8003c76:	1cc4      	adds	r4, r0, #3
 8003c78:	f024 0403 	bic.w	r4, r4, #3
 8003c7c:	42a0      	cmp	r0, r4
 8003c7e:	d0f8      	beq.n	8003c72 <sbrk_aligned+0x22>
 8003c80:	1a21      	subs	r1, r4, r0
 8003c82:	4628      	mov	r0, r5
 8003c84:	f001 f916 	bl	8004eb4 <_sbrk_r>
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d1f2      	bne.n	8003c72 <sbrk_aligned+0x22>
 8003c8c:	e7ef      	b.n	8003c6e <sbrk_aligned+0x1e>
 8003c8e:	bf00      	nop
 8003c90:	20000258 	.word	0x20000258

08003c94 <_malloc_r>:
 8003c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c98:	1ccd      	adds	r5, r1, #3
 8003c9a:	f025 0503 	bic.w	r5, r5, #3
 8003c9e:	3508      	adds	r5, #8
 8003ca0:	2d0c      	cmp	r5, #12
 8003ca2:	bf38      	it	cc
 8003ca4:	250c      	movcc	r5, #12
 8003ca6:	2d00      	cmp	r5, #0
 8003ca8:	4606      	mov	r6, r0
 8003caa:	db01      	blt.n	8003cb0 <_malloc_r+0x1c>
 8003cac:	42a9      	cmp	r1, r5
 8003cae:	d904      	bls.n	8003cba <_malloc_r+0x26>
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	6033      	str	r3, [r6, #0]
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d90 <_malloc_r+0xfc>
 8003cbe:	f000 f869 	bl	8003d94 <__malloc_lock>
 8003cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc6:	461c      	mov	r4, r3
 8003cc8:	bb44      	cbnz	r4, 8003d1c <_malloc_r+0x88>
 8003cca:	4629      	mov	r1, r5
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f7ff ffbf 	bl	8003c50 <sbrk_aligned>
 8003cd2:	1c43      	adds	r3, r0, #1
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	d158      	bne.n	8003d8a <_malloc_r+0xf6>
 8003cd8:	f8d8 4000 	ldr.w	r4, [r8]
 8003cdc:	4627      	mov	r7, r4
 8003cde:	2f00      	cmp	r7, #0
 8003ce0:	d143      	bne.n	8003d6a <_malloc_r+0xd6>
 8003ce2:	2c00      	cmp	r4, #0
 8003ce4:	d04b      	beq.n	8003d7e <_malloc_r+0xea>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	4639      	mov	r1, r7
 8003cea:	4630      	mov	r0, r6
 8003cec:	eb04 0903 	add.w	r9, r4, r3
 8003cf0:	f001 f8e0 	bl	8004eb4 <_sbrk_r>
 8003cf4:	4581      	cmp	r9, r0
 8003cf6:	d142      	bne.n	8003d7e <_malloc_r+0xea>
 8003cf8:	6821      	ldr	r1, [r4, #0]
 8003cfa:	1a6d      	subs	r5, r5, r1
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	4630      	mov	r0, r6
 8003d00:	f7ff ffa6 	bl	8003c50 <sbrk_aligned>
 8003d04:	3001      	adds	r0, #1
 8003d06:	d03a      	beq.n	8003d7e <_malloc_r+0xea>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	442b      	add	r3, r5
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	bb62      	cbnz	r2, 8003d70 <_malloc_r+0xdc>
 8003d16:	f8c8 7000 	str.w	r7, [r8]
 8003d1a:	e00f      	b.n	8003d3c <_malloc_r+0xa8>
 8003d1c:	6822      	ldr	r2, [r4, #0]
 8003d1e:	1b52      	subs	r2, r2, r5
 8003d20:	d420      	bmi.n	8003d64 <_malloc_r+0xd0>
 8003d22:	2a0b      	cmp	r2, #11
 8003d24:	d917      	bls.n	8003d56 <_malloc_r+0xc2>
 8003d26:	1961      	adds	r1, r4, r5
 8003d28:	42a3      	cmp	r3, r4
 8003d2a:	6025      	str	r5, [r4, #0]
 8003d2c:	bf18      	it	ne
 8003d2e:	6059      	strne	r1, [r3, #4]
 8003d30:	6863      	ldr	r3, [r4, #4]
 8003d32:	bf08      	it	eq
 8003d34:	f8c8 1000 	streq.w	r1, [r8]
 8003d38:	5162      	str	r2, [r4, r5]
 8003d3a:	604b      	str	r3, [r1, #4]
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f000 f82f 	bl	8003da0 <__malloc_unlock>
 8003d42:	f104 000b 	add.w	r0, r4, #11
 8003d46:	1d23      	adds	r3, r4, #4
 8003d48:	f020 0007 	bic.w	r0, r0, #7
 8003d4c:	1ac2      	subs	r2, r0, r3
 8003d4e:	bf1c      	itt	ne
 8003d50:	1a1b      	subne	r3, r3, r0
 8003d52:	50a3      	strne	r3, [r4, r2]
 8003d54:	e7af      	b.n	8003cb6 <_malloc_r+0x22>
 8003d56:	6862      	ldr	r2, [r4, #4]
 8003d58:	42a3      	cmp	r3, r4
 8003d5a:	bf0c      	ite	eq
 8003d5c:	f8c8 2000 	streq.w	r2, [r8]
 8003d60:	605a      	strne	r2, [r3, #4]
 8003d62:	e7eb      	b.n	8003d3c <_malloc_r+0xa8>
 8003d64:	4623      	mov	r3, r4
 8003d66:	6864      	ldr	r4, [r4, #4]
 8003d68:	e7ae      	b.n	8003cc8 <_malloc_r+0x34>
 8003d6a:	463c      	mov	r4, r7
 8003d6c:	687f      	ldr	r7, [r7, #4]
 8003d6e:	e7b6      	b.n	8003cde <_malloc_r+0x4a>
 8003d70:	461a      	mov	r2, r3
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	d1fb      	bne.n	8003d70 <_malloc_r+0xdc>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	6053      	str	r3, [r2, #4]
 8003d7c:	e7de      	b.n	8003d3c <_malloc_r+0xa8>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	6033      	str	r3, [r6, #0]
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 f80c 	bl	8003da0 <__malloc_unlock>
 8003d88:	e794      	b.n	8003cb4 <_malloc_r+0x20>
 8003d8a:	6005      	str	r5, [r0, #0]
 8003d8c:	e7d6      	b.n	8003d3c <_malloc_r+0xa8>
 8003d8e:	bf00      	nop
 8003d90:	2000025c 	.word	0x2000025c

08003d94 <__malloc_lock>:
 8003d94:	4801      	ldr	r0, [pc, #4]	@ (8003d9c <__malloc_lock+0x8>)
 8003d96:	f7ff bee8 	b.w	8003b6a <__retarget_lock_acquire_recursive>
 8003d9a:	bf00      	nop
 8003d9c:	20000254 	.word	0x20000254

08003da0 <__malloc_unlock>:
 8003da0:	4801      	ldr	r0, [pc, #4]	@ (8003da8 <__malloc_unlock+0x8>)
 8003da2:	f7ff bee3 	b.w	8003b6c <__retarget_lock_release_recursive>
 8003da6:	bf00      	nop
 8003da8:	20000254 	.word	0x20000254

08003dac <__sfputc_r>:
 8003dac:	6893      	ldr	r3, [r2, #8]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	b410      	push	{r4}
 8003db4:	6093      	str	r3, [r2, #8]
 8003db6:	da08      	bge.n	8003dca <__sfputc_r+0x1e>
 8003db8:	6994      	ldr	r4, [r2, #24]
 8003dba:	42a3      	cmp	r3, r4
 8003dbc:	db01      	blt.n	8003dc2 <__sfputc_r+0x16>
 8003dbe:	290a      	cmp	r1, #10
 8003dc0:	d103      	bne.n	8003dca <__sfputc_r+0x1e>
 8003dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dc6:	f7ff bd52 	b.w	800386e <__swbuf_r>
 8003dca:	6813      	ldr	r3, [r2, #0]
 8003dcc:	1c58      	adds	r0, r3, #1
 8003dce:	6010      	str	r0, [r2, #0]
 8003dd0:	7019      	strb	r1, [r3, #0]
 8003dd2:	4608      	mov	r0, r1
 8003dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <__sfputs_r>:
 8003dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ddc:	4606      	mov	r6, r0
 8003dde:	460f      	mov	r7, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	18d5      	adds	r5, r2, r3
 8003de4:	42ac      	cmp	r4, r5
 8003de6:	d101      	bne.n	8003dec <__sfputs_r+0x12>
 8003de8:	2000      	movs	r0, #0
 8003dea:	e007      	b.n	8003dfc <__sfputs_r+0x22>
 8003dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df0:	463a      	mov	r2, r7
 8003df2:	4630      	mov	r0, r6
 8003df4:	f7ff ffda 	bl	8003dac <__sfputc_r>
 8003df8:	1c43      	adds	r3, r0, #1
 8003dfa:	d1f3      	bne.n	8003de4 <__sfputs_r+0xa>
 8003dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e00 <_vfiprintf_r>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	460d      	mov	r5, r1
 8003e06:	b09d      	sub	sp, #116	@ 0x74
 8003e08:	4614      	mov	r4, r2
 8003e0a:	4698      	mov	r8, r3
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	b118      	cbz	r0, 8003e18 <_vfiprintf_r+0x18>
 8003e10:	6a03      	ldr	r3, [r0, #32]
 8003e12:	b90b      	cbnz	r3, 8003e18 <_vfiprintf_r+0x18>
 8003e14:	f7ff fc30 	bl	8003678 <__sinit>
 8003e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e1a:	07d9      	lsls	r1, r3, #31
 8003e1c:	d405      	bmi.n	8003e2a <_vfiprintf_r+0x2a>
 8003e1e:	89ab      	ldrh	r3, [r5, #12]
 8003e20:	059a      	lsls	r2, r3, #22
 8003e22:	d402      	bmi.n	8003e2a <_vfiprintf_r+0x2a>
 8003e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e26:	f7ff fea0 	bl	8003b6a <__retarget_lock_acquire_recursive>
 8003e2a:	89ab      	ldrh	r3, [r5, #12]
 8003e2c:	071b      	lsls	r3, r3, #28
 8003e2e:	d501      	bpl.n	8003e34 <_vfiprintf_r+0x34>
 8003e30:	692b      	ldr	r3, [r5, #16]
 8003e32:	b99b      	cbnz	r3, 8003e5c <_vfiprintf_r+0x5c>
 8003e34:	4629      	mov	r1, r5
 8003e36:	4630      	mov	r0, r6
 8003e38:	f7ff fd58 	bl	80038ec <__swsetup_r>
 8003e3c:	b170      	cbz	r0, 8003e5c <_vfiprintf_r+0x5c>
 8003e3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e40:	07dc      	lsls	r4, r3, #31
 8003e42:	d504      	bpl.n	8003e4e <_vfiprintf_r+0x4e>
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	b01d      	add	sp, #116	@ 0x74
 8003e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e4e:	89ab      	ldrh	r3, [r5, #12]
 8003e50:	0598      	lsls	r0, r3, #22
 8003e52:	d4f7      	bmi.n	8003e44 <_vfiprintf_r+0x44>
 8003e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e56:	f7ff fe89 	bl	8003b6c <__retarget_lock_release_recursive>
 8003e5a:	e7f3      	b.n	8003e44 <_vfiprintf_r+0x44>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e60:	2320      	movs	r3, #32
 8003e62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e6a:	2330      	movs	r3, #48	@ 0x30
 8003e6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800401c <_vfiprintf_r+0x21c>
 8003e70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e74:	f04f 0901 	mov.w	r9, #1
 8003e78:	4623      	mov	r3, r4
 8003e7a:	469a      	mov	sl, r3
 8003e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e80:	b10a      	cbz	r2, 8003e86 <_vfiprintf_r+0x86>
 8003e82:	2a25      	cmp	r2, #37	@ 0x25
 8003e84:	d1f9      	bne.n	8003e7a <_vfiprintf_r+0x7a>
 8003e86:	ebba 0b04 	subs.w	fp, sl, r4
 8003e8a:	d00b      	beq.n	8003ea4 <_vfiprintf_r+0xa4>
 8003e8c:	465b      	mov	r3, fp
 8003e8e:	4622      	mov	r2, r4
 8003e90:	4629      	mov	r1, r5
 8003e92:	4630      	mov	r0, r6
 8003e94:	f7ff ffa1 	bl	8003dda <__sfputs_r>
 8003e98:	3001      	adds	r0, #1
 8003e9a:	f000 80a7 	beq.w	8003fec <_vfiprintf_r+0x1ec>
 8003e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ea0:	445a      	add	r2, fp
 8003ea2:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 809f 	beq.w	8003fec <_vfiprintf_r+0x1ec>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eb8:	f10a 0a01 	add.w	sl, sl, #1
 8003ebc:	9304      	str	r3, [sp, #16]
 8003ebe:	9307      	str	r3, [sp, #28]
 8003ec0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ec4:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ec6:	4654      	mov	r4, sl
 8003ec8:	2205      	movs	r2, #5
 8003eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ece:	4853      	ldr	r0, [pc, #332]	@ (800401c <_vfiprintf_r+0x21c>)
 8003ed0:	f7fc f97e 	bl	80001d0 <memchr>
 8003ed4:	9a04      	ldr	r2, [sp, #16]
 8003ed6:	b9d8      	cbnz	r0, 8003f10 <_vfiprintf_r+0x110>
 8003ed8:	06d1      	lsls	r1, r2, #27
 8003eda:	bf44      	itt	mi
 8003edc:	2320      	movmi	r3, #32
 8003ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ee2:	0713      	lsls	r3, r2, #28
 8003ee4:	bf44      	itt	mi
 8003ee6:	232b      	movmi	r3, #43	@ 0x2b
 8003ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003eec:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ef2:	d015      	beq.n	8003f20 <_vfiprintf_r+0x120>
 8003ef4:	9a07      	ldr	r2, [sp, #28]
 8003ef6:	4654      	mov	r4, sl
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f04f 0c0a 	mov.w	ip, #10
 8003efe:	4621      	mov	r1, r4
 8003f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f04:	3b30      	subs	r3, #48	@ 0x30
 8003f06:	2b09      	cmp	r3, #9
 8003f08:	d94b      	bls.n	8003fa2 <_vfiprintf_r+0x1a2>
 8003f0a:	b1b0      	cbz	r0, 8003f3a <_vfiprintf_r+0x13a>
 8003f0c:	9207      	str	r2, [sp, #28]
 8003f0e:	e014      	b.n	8003f3a <_vfiprintf_r+0x13a>
 8003f10:	eba0 0308 	sub.w	r3, r0, r8
 8003f14:	fa09 f303 	lsl.w	r3, r9, r3
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	9304      	str	r3, [sp, #16]
 8003f1c:	46a2      	mov	sl, r4
 8003f1e:	e7d2      	b.n	8003ec6 <_vfiprintf_r+0xc6>
 8003f20:	9b03      	ldr	r3, [sp, #12]
 8003f22:	1d19      	adds	r1, r3, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	9103      	str	r1, [sp, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bfbb      	ittet	lt
 8003f2c:	425b      	neglt	r3, r3
 8003f2e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f32:	9307      	strge	r3, [sp, #28]
 8003f34:	9307      	strlt	r3, [sp, #28]
 8003f36:	bfb8      	it	lt
 8003f38:	9204      	strlt	r2, [sp, #16]
 8003f3a:	7823      	ldrb	r3, [r4, #0]
 8003f3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f3e:	d10a      	bne.n	8003f56 <_vfiprintf_r+0x156>
 8003f40:	7863      	ldrb	r3, [r4, #1]
 8003f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f44:	d132      	bne.n	8003fac <_vfiprintf_r+0x1ac>
 8003f46:	9b03      	ldr	r3, [sp, #12]
 8003f48:	1d1a      	adds	r2, r3, #4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	9203      	str	r2, [sp, #12]
 8003f4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f52:	3402      	adds	r4, #2
 8003f54:	9305      	str	r3, [sp, #20]
 8003f56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800402c <_vfiprintf_r+0x22c>
 8003f5a:	7821      	ldrb	r1, [r4, #0]
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	4650      	mov	r0, sl
 8003f60:	f7fc f936 	bl	80001d0 <memchr>
 8003f64:	b138      	cbz	r0, 8003f76 <_vfiprintf_r+0x176>
 8003f66:	9b04      	ldr	r3, [sp, #16]
 8003f68:	eba0 000a 	sub.w	r0, r0, sl
 8003f6c:	2240      	movs	r2, #64	@ 0x40
 8003f6e:	4082      	lsls	r2, r0
 8003f70:	4313      	orrs	r3, r2
 8003f72:	3401      	adds	r4, #1
 8003f74:	9304      	str	r3, [sp, #16]
 8003f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f7a:	4829      	ldr	r0, [pc, #164]	@ (8004020 <_vfiprintf_r+0x220>)
 8003f7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f80:	2206      	movs	r2, #6
 8003f82:	f7fc f925 	bl	80001d0 <memchr>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d03f      	beq.n	800400a <_vfiprintf_r+0x20a>
 8003f8a:	4b26      	ldr	r3, [pc, #152]	@ (8004024 <_vfiprintf_r+0x224>)
 8003f8c:	bb1b      	cbnz	r3, 8003fd6 <_vfiprintf_r+0x1d6>
 8003f8e:	9b03      	ldr	r3, [sp, #12]
 8003f90:	3307      	adds	r3, #7
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	3308      	adds	r3, #8
 8003f98:	9303      	str	r3, [sp, #12]
 8003f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f9c:	443b      	add	r3, r7
 8003f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fa0:	e76a      	b.n	8003e78 <_vfiprintf_r+0x78>
 8003fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	2001      	movs	r0, #1
 8003faa:	e7a8      	b.n	8003efe <_vfiprintf_r+0xfe>
 8003fac:	2300      	movs	r3, #0
 8003fae:	3401      	adds	r4, #1
 8003fb0:	9305      	str	r3, [sp, #20]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f04f 0c0a 	mov.w	ip, #10
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fbe:	3a30      	subs	r2, #48	@ 0x30
 8003fc0:	2a09      	cmp	r2, #9
 8003fc2:	d903      	bls.n	8003fcc <_vfiprintf_r+0x1cc>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0c6      	beq.n	8003f56 <_vfiprintf_r+0x156>
 8003fc8:	9105      	str	r1, [sp, #20]
 8003fca:	e7c4      	b.n	8003f56 <_vfiprintf_r+0x156>
 8003fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e7f0      	b.n	8003fb8 <_vfiprintf_r+0x1b8>
 8003fd6:	ab03      	add	r3, sp, #12
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	462a      	mov	r2, r5
 8003fdc:	4b12      	ldr	r3, [pc, #72]	@ (8004028 <_vfiprintf_r+0x228>)
 8003fde:	a904      	add	r1, sp, #16
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f3af 8000 	nop.w
 8003fe6:	4607      	mov	r7, r0
 8003fe8:	1c78      	adds	r0, r7, #1
 8003fea:	d1d6      	bne.n	8003f9a <_vfiprintf_r+0x19a>
 8003fec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fee:	07d9      	lsls	r1, r3, #31
 8003ff0:	d405      	bmi.n	8003ffe <_vfiprintf_r+0x1fe>
 8003ff2:	89ab      	ldrh	r3, [r5, #12]
 8003ff4:	059a      	lsls	r2, r3, #22
 8003ff6:	d402      	bmi.n	8003ffe <_vfiprintf_r+0x1fe>
 8003ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ffa:	f7ff fdb7 	bl	8003b6c <__retarget_lock_release_recursive>
 8003ffe:	89ab      	ldrh	r3, [r5, #12]
 8004000:	065b      	lsls	r3, r3, #25
 8004002:	f53f af1f 	bmi.w	8003e44 <_vfiprintf_r+0x44>
 8004006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004008:	e71e      	b.n	8003e48 <_vfiprintf_r+0x48>
 800400a:	ab03      	add	r3, sp, #12
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	462a      	mov	r2, r5
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <_vfiprintf_r+0x228>)
 8004012:	a904      	add	r1, sp, #16
 8004014:	4630      	mov	r0, r6
 8004016:	f000 f879 	bl	800410c <_printf_i>
 800401a:	e7e4      	b.n	8003fe6 <_vfiprintf_r+0x1e6>
 800401c:	080053fe 	.word	0x080053fe
 8004020:	08005408 	.word	0x08005408
 8004024:	00000000 	.word	0x00000000
 8004028:	08003ddb 	.word	0x08003ddb
 800402c:	08005404 	.word	0x08005404

08004030 <_printf_common>:
 8004030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	4616      	mov	r6, r2
 8004036:	4698      	mov	r8, r3
 8004038:	688a      	ldr	r2, [r1, #8]
 800403a:	690b      	ldr	r3, [r1, #16]
 800403c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004040:	4293      	cmp	r3, r2
 8004042:	bfb8      	it	lt
 8004044:	4613      	movlt	r3, r2
 8004046:	6033      	str	r3, [r6, #0]
 8004048:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800404c:	4607      	mov	r7, r0
 800404e:	460c      	mov	r4, r1
 8004050:	b10a      	cbz	r2, 8004056 <_printf_common+0x26>
 8004052:	3301      	adds	r3, #1
 8004054:	6033      	str	r3, [r6, #0]
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	0699      	lsls	r1, r3, #26
 800405a:	bf42      	ittt	mi
 800405c:	6833      	ldrmi	r3, [r6, #0]
 800405e:	3302      	addmi	r3, #2
 8004060:	6033      	strmi	r3, [r6, #0]
 8004062:	6825      	ldr	r5, [r4, #0]
 8004064:	f015 0506 	ands.w	r5, r5, #6
 8004068:	d106      	bne.n	8004078 <_printf_common+0x48>
 800406a:	f104 0a19 	add.w	sl, r4, #25
 800406e:	68e3      	ldr	r3, [r4, #12]
 8004070:	6832      	ldr	r2, [r6, #0]
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	42ab      	cmp	r3, r5
 8004076:	dc26      	bgt.n	80040c6 <_printf_common+0x96>
 8004078:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	3b00      	subs	r3, #0
 8004080:	bf18      	it	ne
 8004082:	2301      	movne	r3, #1
 8004084:	0692      	lsls	r2, r2, #26
 8004086:	d42b      	bmi.n	80040e0 <_printf_common+0xb0>
 8004088:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800408c:	4641      	mov	r1, r8
 800408e:	4638      	mov	r0, r7
 8004090:	47c8      	blx	r9
 8004092:	3001      	adds	r0, #1
 8004094:	d01e      	beq.n	80040d4 <_printf_common+0xa4>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	6922      	ldr	r2, [r4, #16]
 800409a:	f003 0306 	and.w	r3, r3, #6
 800409e:	2b04      	cmp	r3, #4
 80040a0:	bf02      	ittt	eq
 80040a2:	68e5      	ldreq	r5, [r4, #12]
 80040a4:	6833      	ldreq	r3, [r6, #0]
 80040a6:	1aed      	subeq	r5, r5, r3
 80040a8:	68a3      	ldr	r3, [r4, #8]
 80040aa:	bf0c      	ite	eq
 80040ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b0:	2500      	movne	r5, #0
 80040b2:	4293      	cmp	r3, r2
 80040b4:	bfc4      	itt	gt
 80040b6:	1a9b      	subgt	r3, r3, r2
 80040b8:	18ed      	addgt	r5, r5, r3
 80040ba:	2600      	movs	r6, #0
 80040bc:	341a      	adds	r4, #26
 80040be:	42b5      	cmp	r5, r6
 80040c0:	d11a      	bne.n	80040f8 <_printf_common+0xc8>
 80040c2:	2000      	movs	r0, #0
 80040c4:	e008      	b.n	80040d8 <_printf_common+0xa8>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4652      	mov	r2, sl
 80040ca:	4641      	mov	r1, r8
 80040cc:	4638      	mov	r0, r7
 80040ce:	47c8      	blx	r9
 80040d0:	3001      	adds	r0, #1
 80040d2:	d103      	bne.n	80040dc <_printf_common+0xac>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040dc:	3501      	adds	r5, #1
 80040de:	e7c6      	b.n	800406e <_printf_common+0x3e>
 80040e0:	18e1      	adds	r1, r4, r3
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	2030      	movs	r0, #48	@ 0x30
 80040e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040ea:	4422      	add	r2, r4
 80040ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040f4:	3302      	adds	r3, #2
 80040f6:	e7c7      	b.n	8004088 <_printf_common+0x58>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4622      	mov	r2, r4
 80040fc:	4641      	mov	r1, r8
 80040fe:	4638      	mov	r0, r7
 8004100:	47c8      	blx	r9
 8004102:	3001      	adds	r0, #1
 8004104:	d0e6      	beq.n	80040d4 <_printf_common+0xa4>
 8004106:	3601      	adds	r6, #1
 8004108:	e7d9      	b.n	80040be <_printf_common+0x8e>
	...

0800410c <_printf_i>:
 800410c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004110:	7e0f      	ldrb	r7, [r1, #24]
 8004112:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004114:	2f78      	cmp	r7, #120	@ 0x78
 8004116:	4691      	mov	r9, r2
 8004118:	4680      	mov	r8, r0
 800411a:	460c      	mov	r4, r1
 800411c:	469a      	mov	sl, r3
 800411e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004122:	d807      	bhi.n	8004134 <_printf_i+0x28>
 8004124:	2f62      	cmp	r7, #98	@ 0x62
 8004126:	d80a      	bhi.n	800413e <_printf_i+0x32>
 8004128:	2f00      	cmp	r7, #0
 800412a:	f000 80d2 	beq.w	80042d2 <_printf_i+0x1c6>
 800412e:	2f58      	cmp	r7, #88	@ 0x58
 8004130:	f000 80b9 	beq.w	80042a6 <_printf_i+0x19a>
 8004134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004138:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800413c:	e03a      	b.n	80041b4 <_printf_i+0xa8>
 800413e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004142:	2b15      	cmp	r3, #21
 8004144:	d8f6      	bhi.n	8004134 <_printf_i+0x28>
 8004146:	a101      	add	r1, pc, #4	@ (adr r1, 800414c <_printf_i+0x40>)
 8004148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800414c:	080041a5 	.word	0x080041a5
 8004150:	080041b9 	.word	0x080041b9
 8004154:	08004135 	.word	0x08004135
 8004158:	08004135 	.word	0x08004135
 800415c:	08004135 	.word	0x08004135
 8004160:	08004135 	.word	0x08004135
 8004164:	080041b9 	.word	0x080041b9
 8004168:	08004135 	.word	0x08004135
 800416c:	08004135 	.word	0x08004135
 8004170:	08004135 	.word	0x08004135
 8004174:	08004135 	.word	0x08004135
 8004178:	080042b9 	.word	0x080042b9
 800417c:	080041e3 	.word	0x080041e3
 8004180:	08004273 	.word	0x08004273
 8004184:	08004135 	.word	0x08004135
 8004188:	08004135 	.word	0x08004135
 800418c:	080042db 	.word	0x080042db
 8004190:	08004135 	.word	0x08004135
 8004194:	080041e3 	.word	0x080041e3
 8004198:	08004135 	.word	0x08004135
 800419c:	08004135 	.word	0x08004135
 80041a0:	0800427b 	.word	0x0800427b
 80041a4:	6833      	ldr	r3, [r6, #0]
 80041a6:	1d1a      	adds	r2, r3, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6032      	str	r2, [r6, #0]
 80041ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041b4:	2301      	movs	r3, #1
 80041b6:	e09d      	b.n	80042f4 <_printf_i+0x1e8>
 80041b8:	6833      	ldr	r3, [r6, #0]
 80041ba:	6820      	ldr	r0, [r4, #0]
 80041bc:	1d19      	adds	r1, r3, #4
 80041be:	6031      	str	r1, [r6, #0]
 80041c0:	0606      	lsls	r6, r0, #24
 80041c2:	d501      	bpl.n	80041c8 <_printf_i+0xbc>
 80041c4:	681d      	ldr	r5, [r3, #0]
 80041c6:	e003      	b.n	80041d0 <_printf_i+0xc4>
 80041c8:	0645      	lsls	r5, r0, #25
 80041ca:	d5fb      	bpl.n	80041c4 <_printf_i+0xb8>
 80041cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041d0:	2d00      	cmp	r5, #0
 80041d2:	da03      	bge.n	80041dc <_printf_i+0xd0>
 80041d4:	232d      	movs	r3, #45	@ 0x2d
 80041d6:	426d      	negs	r5, r5
 80041d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041dc:	4859      	ldr	r0, [pc, #356]	@ (8004344 <_printf_i+0x238>)
 80041de:	230a      	movs	r3, #10
 80041e0:	e011      	b.n	8004206 <_printf_i+0xfa>
 80041e2:	6821      	ldr	r1, [r4, #0]
 80041e4:	6833      	ldr	r3, [r6, #0]
 80041e6:	0608      	lsls	r0, r1, #24
 80041e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80041ec:	d402      	bmi.n	80041f4 <_printf_i+0xe8>
 80041ee:	0649      	lsls	r1, r1, #25
 80041f0:	bf48      	it	mi
 80041f2:	b2ad      	uxthmi	r5, r5
 80041f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80041f6:	4853      	ldr	r0, [pc, #332]	@ (8004344 <_printf_i+0x238>)
 80041f8:	6033      	str	r3, [r6, #0]
 80041fa:	bf14      	ite	ne
 80041fc:	230a      	movne	r3, #10
 80041fe:	2308      	moveq	r3, #8
 8004200:	2100      	movs	r1, #0
 8004202:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004206:	6866      	ldr	r6, [r4, #4]
 8004208:	60a6      	str	r6, [r4, #8]
 800420a:	2e00      	cmp	r6, #0
 800420c:	bfa2      	ittt	ge
 800420e:	6821      	ldrge	r1, [r4, #0]
 8004210:	f021 0104 	bicge.w	r1, r1, #4
 8004214:	6021      	strge	r1, [r4, #0]
 8004216:	b90d      	cbnz	r5, 800421c <_printf_i+0x110>
 8004218:	2e00      	cmp	r6, #0
 800421a:	d04b      	beq.n	80042b4 <_printf_i+0x1a8>
 800421c:	4616      	mov	r6, r2
 800421e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004222:	fb03 5711 	mls	r7, r3, r1, r5
 8004226:	5dc7      	ldrb	r7, [r0, r7]
 8004228:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800422c:	462f      	mov	r7, r5
 800422e:	42bb      	cmp	r3, r7
 8004230:	460d      	mov	r5, r1
 8004232:	d9f4      	bls.n	800421e <_printf_i+0x112>
 8004234:	2b08      	cmp	r3, #8
 8004236:	d10b      	bne.n	8004250 <_printf_i+0x144>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	07df      	lsls	r7, r3, #31
 800423c:	d508      	bpl.n	8004250 <_printf_i+0x144>
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	6861      	ldr	r1, [r4, #4]
 8004242:	4299      	cmp	r1, r3
 8004244:	bfde      	ittt	le
 8004246:	2330      	movle	r3, #48	@ 0x30
 8004248:	f806 3c01 	strble.w	r3, [r6, #-1]
 800424c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004250:	1b92      	subs	r2, r2, r6
 8004252:	6122      	str	r2, [r4, #16]
 8004254:	f8cd a000 	str.w	sl, [sp]
 8004258:	464b      	mov	r3, r9
 800425a:	aa03      	add	r2, sp, #12
 800425c:	4621      	mov	r1, r4
 800425e:	4640      	mov	r0, r8
 8004260:	f7ff fee6 	bl	8004030 <_printf_common>
 8004264:	3001      	adds	r0, #1
 8004266:	d14a      	bne.n	80042fe <_printf_i+0x1f2>
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	b004      	add	sp, #16
 800426e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	f043 0320 	orr.w	r3, r3, #32
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	4833      	ldr	r0, [pc, #204]	@ (8004348 <_printf_i+0x23c>)
 800427c:	2778      	movs	r7, #120	@ 0x78
 800427e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	6831      	ldr	r1, [r6, #0]
 8004286:	061f      	lsls	r7, r3, #24
 8004288:	f851 5b04 	ldr.w	r5, [r1], #4
 800428c:	d402      	bmi.n	8004294 <_printf_i+0x188>
 800428e:	065f      	lsls	r7, r3, #25
 8004290:	bf48      	it	mi
 8004292:	b2ad      	uxthmi	r5, r5
 8004294:	6031      	str	r1, [r6, #0]
 8004296:	07d9      	lsls	r1, r3, #31
 8004298:	bf44      	itt	mi
 800429a:	f043 0320 	orrmi.w	r3, r3, #32
 800429e:	6023      	strmi	r3, [r4, #0]
 80042a0:	b11d      	cbz	r5, 80042aa <_printf_i+0x19e>
 80042a2:	2310      	movs	r3, #16
 80042a4:	e7ac      	b.n	8004200 <_printf_i+0xf4>
 80042a6:	4827      	ldr	r0, [pc, #156]	@ (8004344 <_printf_i+0x238>)
 80042a8:	e7e9      	b.n	800427e <_printf_i+0x172>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	f023 0320 	bic.w	r3, r3, #32
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	e7f6      	b.n	80042a2 <_printf_i+0x196>
 80042b4:	4616      	mov	r6, r2
 80042b6:	e7bd      	b.n	8004234 <_printf_i+0x128>
 80042b8:	6833      	ldr	r3, [r6, #0]
 80042ba:	6825      	ldr	r5, [r4, #0]
 80042bc:	6961      	ldr	r1, [r4, #20]
 80042be:	1d18      	adds	r0, r3, #4
 80042c0:	6030      	str	r0, [r6, #0]
 80042c2:	062e      	lsls	r6, r5, #24
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	d501      	bpl.n	80042cc <_printf_i+0x1c0>
 80042c8:	6019      	str	r1, [r3, #0]
 80042ca:	e002      	b.n	80042d2 <_printf_i+0x1c6>
 80042cc:	0668      	lsls	r0, r5, #25
 80042ce:	d5fb      	bpl.n	80042c8 <_printf_i+0x1bc>
 80042d0:	8019      	strh	r1, [r3, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	4616      	mov	r6, r2
 80042d8:	e7bc      	b.n	8004254 <_printf_i+0x148>
 80042da:	6833      	ldr	r3, [r6, #0]
 80042dc:	1d1a      	adds	r2, r3, #4
 80042de:	6032      	str	r2, [r6, #0]
 80042e0:	681e      	ldr	r6, [r3, #0]
 80042e2:	6862      	ldr	r2, [r4, #4]
 80042e4:	2100      	movs	r1, #0
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7fb ff72 	bl	80001d0 <memchr>
 80042ec:	b108      	cbz	r0, 80042f2 <_printf_i+0x1e6>
 80042ee:	1b80      	subs	r0, r0, r6
 80042f0:	6060      	str	r0, [r4, #4]
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	6123      	str	r3, [r4, #16]
 80042f6:	2300      	movs	r3, #0
 80042f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042fc:	e7aa      	b.n	8004254 <_printf_i+0x148>
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	4632      	mov	r2, r6
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	47d0      	blx	sl
 8004308:	3001      	adds	r0, #1
 800430a:	d0ad      	beq.n	8004268 <_printf_i+0x15c>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	079b      	lsls	r3, r3, #30
 8004310:	d413      	bmi.n	800433a <_printf_i+0x22e>
 8004312:	68e0      	ldr	r0, [r4, #12]
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	4298      	cmp	r0, r3
 8004318:	bfb8      	it	lt
 800431a:	4618      	movlt	r0, r3
 800431c:	e7a6      	b.n	800426c <_printf_i+0x160>
 800431e:	2301      	movs	r3, #1
 8004320:	4632      	mov	r2, r6
 8004322:	4649      	mov	r1, r9
 8004324:	4640      	mov	r0, r8
 8004326:	47d0      	blx	sl
 8004328:	3001      	adds	r0, #1
 800432a:	d09d      	beq.n	8004268 <_printf_i+0x15c>
 800432c:	3501      	adds	r5, #1
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	9903      	ldr	r1, [sp, #12]
 8004332:	1a5b      	subs	r3, r3, r1
 8004334:	42ab      	cmp	r3, r5
 8004336:	dcf2      	bgt.n	800431e <_printf_i+0x212>
 8004338:	e7eb      	b.n	8004312 <_printf_i+0x206>
 800433a:	2500      	movs	r5, #0
 800433c:	f104 0619 	add.w	r6, r4, #25
 8004340:	e7f5      	b.n	800432e <_printf_i+0x222>
 8004342:	bf00      	nop
 8004344:	0800540f 	.word	0x0800540f
 8004348:	08005420 	.word	0x08005420

0800434c <__svfiscanf_r>:
 800434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	461d      	mov	r5, r3
 8004352:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8004354:	07df      	lsls	r7, r3, #31
 8004356:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800435a:	4606      	mov	r6, r0
 800435c:	460c      	mov	r4, r1
 800435e:	4691      	mov	r9, r2
 8004360:	d405      	bmi.n	800436e <__svfiscanf_r+0x22>
 8004362:	898b      	ldrh	r3, [r1, #12]
 8004364:	0598      	lsls	r0, r3, #22
 8004366:	d402      	bmi.n	800436e <__svfiscanf_r+0x22>
 8004368:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800436a:	f7ff fbfe 	bl	8003b6a <__retarget_lock_acquire_recursive>
 800436e:	2300      	movs	r3, #0
 8004370:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8004374:	4ba7      	ldr	r3, [pc, #668]	@ (8004614 <__svfiscanf_r+0x2c8>)
 8004376:	93a0      	str	r3, [sp, #640]	@ 0x280
 8004378:	f10d 0804 	add.w	r8, sp, #4
 800437c:	4ba6      	ldr	r3, [pc, #664]	@ (8004618 <__svfiscanf_r+0x2cc>)
 800437e:	4fa7      	ldr	r7, [pc, #668]	@ (800461c <__svfiscanf_r+0x2d0>)
 8004380:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004384:	93a1      	str	r3, [sp, #644]	@ 0x284
 8004386:	9500      	str	r5, [sp, #0]
 8004388:	f899 3000 	ldrb.w	r3, [r9]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 816c 	beq.w	800466a <__svfiscanf_r+0x31e>
 8004392:	5cf9      	ldrb	r1, [r7, r3]
 8004394:	f011 0108 	ands.w	r1, r1, #8
 8004398:	f109 0501 	add.w	r5, r9, #1
 800439c:	d019      	beq.n	80043d2 <__svfiscanf_r+0x86>
 800439e:	6863      	ldr	r3, [r4, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	dd0f      	ble.n	80043c4 <__svfiscanf_r+0x78>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	5cba      	ldrb	r2, [r7, r2]
 80043aa:	0711      	lsls	r1, r2, #28
 80043ac:	d401      	bmi.n	80043b2 <__svfiscanf_r+0x66>
 80043ae:	46a9      	mov	r9, r5
 80043b0:	e7ea      	b.n	8004388 <__svfiscanf_r+0x3c>
 80043b2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80043b4:	3201      	adds	r2, #1
 80043b6:	9245      	str	r2, [sp, #276]	@ 0x114
 80043b8:	6862      	ldr	r2, [r4, #4]
 80043ba:	3301      	adds	r3, #1
 80043bc:	3a01      	subs	r2, #1
 80043be:	6062      	str	r2, [r4, #4]
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	e7ec      	b.n	800439e <__svfiscanf_r+0x52>
 80043c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80043c6:	4621      	mov	r1, r4
 80043c8:	4630      	mov	r0, r6
 80043ca:	4798      	blx	r3
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d0e9      	beq.n	80043a4 <__svfiscanf_r+0x58>
 80043d0:	e7ed      	b.n	80043ae <__svfiscanf_r+0x62>
 80043d2:	2b25      	cmp	r3, #37	@ 0x25
 80043d4:	d012      	beq.n	80043fc <__svfiscanf_r+0xb0>
 80043d6:	4699      	mov	r9, r3
 80043d8:	6863      	ldr	r3, [r4, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f340 8095 	ble.w	800450a <__svfiscanf_r+0x1be>
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	7813      	ldrb	r3, [r2, #0]
 80043e4:	454b      	cmp	r3, r9
 80043e6:	f040 8140 	bne.w	800466a <__svfiscanf_r+0x31e>
 80043ea:	6863      	ldr	r3, [r4, #4]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	6063      	str	r3, [r4, #4]
 80043f0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80043f2:	3201      	adds	r2, #1
 80043f4:	3301      	adds	r3, #1
 80043f6:	6022      	str	r2, [r4, #0]
 80043f8:	9345      	str	r3, [sp, #276]	@ 0x114
 80043fa:	e7d8      	b.n	80043ae <__svfiscanf_r+0x62>
 80043fc:	9141      	str	r1, [sp, #260]	@ 0x104
 80043fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004400:	f899 3001 	ldrb.w	r3, [r9, #1]
 8004404:	2b2a      	cmp	r3, #42	@ 0x2a
 8004406:	bf02      	ittt	eq
 8004408:	2310      	moveq	r3, #16
 800440a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800440c:	f109 0502 	addeq.w	r5, r9, #2
 8004410:	220a      	movs	r2, #10
 8004412:	46a9      	mov	r9, r5
 8004414:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004418:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800441c:	2b09      	cmp	r3, #9
 800441e:	d91f      	bls.n	8004460 <__svfiscanf_r+0x114>
 8004420:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8004620 <__svfiscanf_r+0x2d4>
 8004424:	2203      	movs	r2, #3
 8004426:	4650      	mov	r0, sl
 8004428:	f7fb fed2 	bl	80001d0 <memchr>
 800442c:	b138      	cbz	r0, 800443e <__svfiscanf_r+0xf2>
 800442e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004430:	eba0 000a 	sub.w	r0, r0, sl
 8004434:	2301      	movs	r3, #1
 8004436:	4083      	lsls	r3, r0
 8004438:	4313      	orrs	r3, r2
 800443a:	9341      	str	r3, [sp, #260]	@ 0x104
 800443c:	464d      	mov	r5, r9
 800443e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004442:	2b78      	cmp	r3, #120	@ 0x78
 8004444:	d807      	bhi.n	8004456 <__svfiscanf_r+0x10a>
 8004446:	2b57      	cmp	r3, #87	@ 0x57
 8004448:	d811      	bhi.n	800446e <__svfiscanf_r+0x122>
 800444a:	2b25      	cmp	r3, #37	@ 0x25
 800444c:	d0c3      	beq.n	80043d6 <__svfiscanf_r+0x8a>
 800444e:	d857      	bhi.n	8004500 <__svfiscanf_r+0x1b4>
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80c1 	beq.w	80045d8 <__svfiscanf_r+0x28c>
 8004456:	2303      	movs	r3, #3
 8004458:	9347      	str	r3, [sp, #284]	@ 0x11c
 800445a:	230a      	movs	r3, #10
 800445c:	9342      	str	r3, [sp, #264]	@ 0x108
 800445e:	e07e      	b.n	800455e <__svfiscanf_r+0x212>
 8004460:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004462:	fb02 1103 	mla	r1, r2, r3, r1
 8004466:	3930      	subs	r1, #48	@ 0x30
 8004468:	9143      	str	r1, [sp, #268]	@ 0x10c
 800446a:	464d      	mov	r5, r9
 800446c:	e7d1      	b.n	8004412 <__svfiscanf_r+0xc6>
 800446e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004472:	2a20      	cmp	r2, #32
 8004474:	d8ef      	bhi.n	8004456 <__svfiscanf_r+0x10a>
 8004476:	a101      	add	r1, pc, #4	@ (adr r1, 800447c <__svfiscanf_r+0x130>)
 8004478:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800447c:	0800453d 	.word	0x0800453d
 8004480:	08004457 	.word	0x08004457
 8004484:	08004457 	.word	0x08004457
 8004488:	08004597 	.word	0x08004597
 800448c:	08004457 	.word	0x08004457
 8004490:	08004457 	.word	0x08004457
 8004494:	08004457 	.word	0x08004457
 8004498:	08004457 	.word	0x08004457
 800449c:	08004457 	.word	0x08004457
 80044a0:	08004457 	.word	0x08004457
 80044a4:	08004457 	.word	0x08004457
 80044a8:	080045ad 	.word	0x080045ad
 80044ac:	08004593 	.word	0x08004593
 80044b0:	08004507 	.word	0x08004507
 80044b4:	08004507 	.word	0x08004507
 80044b8:	08004507 	.word	0x08004507
 80044bc:	08004457 	.word	0x08004457
 80044c0:	0800454f 	.word	0x0800454f
 80044c4:	08004457 	.word	0x08004457
 80044c8:	08004457 	.word	0x08004457
 80044cc:	08004457 	.word	0x08004457
 80044d0:	08004457 	.word	0x08004457
 80044d4:	080045bd 	.word	0x080045bd
 80044d8:	08004557 	.word	0x08004557
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004457 	.word	0x08004457
 80044e4:	08004457 	.word	0x08004457
 80044e8:	080045b9 	.word	0x080045b9
 80044ec:	08004457 	.word	0x08004457
 80044f0:	08004593 	.word	0x08004593
 80044f4:	08004457 	.word	0x08004457
 80044f8:	08004457 	.word	0x08004457
 80044fc:	0800453d 	.word	0x0800453d
 8004500:	3b45      	subs	r3, #69	@ 0x45
 8004502:	2b02      	cmp	r3, #2
 8004504:	d8a7      	bhi.n	8004456 <__svfiscanf_r+0x10a>
 8004506:	2305      	movs	r3, #5
 8004508:	e028      	b.n	800455c <__svfiscanf_r+0x210>
 800450a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800450c:	4621      	mov	r1, r4
 800450e:	4630      	mov	r0, r6
 8004510:	4798      	blx	r3
 8004512:	2800      	cmp	r0, #0
 8004514:	f43f af64 	beq.w	80043e0 <__svfiscanf_r+0x94>
 8004518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800451a:	07da      	lsls	r2, r3, #31
 800451c:	f140 809d 	bpl.w	800465a <__svfiscanf_r+0x30e>
 8004520:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004522:	2800      	cmp	r0, #0
 8004524:	d061      	beq.n	80045ea <__svfiscanf_r+0x29e>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	0659      	lsls	r1, r3, #25
 800452a:	d45e      	bmi.n	80045ea <__svfiscanf_r+0x29e>
 800452c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004534:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004536:	f042 0220 	orr.w	r2, r2, #32
 800453a:	9241      	str	r2, [sp, #260]	@ 0x104
 800453c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800453e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004542:	9241      	str	r2, [sp, #260]	@ 0x104
 8004544:	2210      	movs	r2, #16
 8004546:	2b6e      	cmp	r3, #110	@ 0x6e
 8004548:	9242      	str	r2, [sp, #264]	@ 0x108
 800454a:	d902      	bls.n	8004552 <__svfiscanf_r+0x206>
 800454c:	e005      	b.n	800455a <__svfiscanf_r+0x20e>
 800454e:	2300      	movs	r3, #0
 8004550:	9342      	str	r3, [sp, #264]	@ 0x108
 8004552:	2303      	movs	r3, #3
 8004554:	e002      	b.n	800455c <__svfiscanf_r+0x210>
 8004556:	2308      	movs	r3, #8
 8004558:	9342      	str	r3, [sp, #264]	@ 0x108
 800455a:	2304      	movs	r3, #4
 800455c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800455e:	6863      	ldr	r3, [r4, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	dd45      	ble.n	80045f0 <__svfiscanf_r+0x2a4>
 8004564:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004566:	0659      	lsls	r1, r3, #25
 8004568:	d404      	bmi.n	8004574 <__svfiscanf_r+0x228>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	5cba      	ldrb	r2, [r7, r2]
 8004570:	0712      	lsls	r2, r2, #28
 8004572:	d444      	bmi.n	80045fe <__svfiscanf_r+0x2b2>
 8004574:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004576:	2b02      	cmp	r3, #2
 8004578:	dc5b      	bgt.n	8004632 <__svfiscanf_r+0x2e6>
 800457a:	466b      	mov	r3, sp
 800457c:	4622      	mov	r2, r4
 800457e:	a941      	add	r1, sp, #260	@ 0x104
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f893 	bl	80046ac <_scanf_chars>
 8004586:	2801      	cmp	r0, #1
 8004588:	d06f      	beq.n	800466a <__svfiscanf_r+0x31e>
 800458a:	2802      	cmp	r0, #2
 800458c:	f47f af0f 	bne.w	80043ae <__svfiscanf_r+0x62>
 8004590:	e7c2      	b.n	8004518 <__svfiscanf_r+0x1cc>
 8004592:	220a      	movs	r2, #10
 8004594:	e7d7      	b.n	8004546 <__svfiscanf_r+0x1fa>
 8004596:	4629      	mov	r1, r5
 8004598:	4640      	mov	r0, r8
 800459a:	f000 fb77 	bl	8004c8c <__sccl>
 800459e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80045a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80045a6:	4605      	mov	r5, r0
 80045a8:	2301      	movs	r3, #1
 80045aa:	e7d7      	b.n	800455c <__svfiscanf_r+0x210>
 80045ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80045ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80045b4:	2300      	movs	r3, #0
 80045b6:	e7d1      	b.n	800455c <__svfiscanf_r+0x210>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e7cf      	b.n	800455c <__svfiscanf_r+0x210>
 80045bc:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80045be:	06c3      	lsls	r3, r0, #27
 80045c0:	f53f aef5 	bmi.w	80043ae <__svfiscanf_r+0x62>
 80045c4:	9b00      	ldr	r3, [sp, #0]
 80045c6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80045c8:	1d19      	adds	r1, r3, #4
 80045ca:	9100      	str	r1, [sp, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	07c0      	lsls	r0, r0, #31
 80045d0:	bf4c      	ite	mi
 80045d2:	801a      	strhmi	r2, [r3, #0]
 80045d4:	601a      	strpl	r2, [r3, #0]
 80045d6:	e6ea      	b.n	80043ae <__svfiscanf_r+0x62>
 80045d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045da:	07de      	lsls	r6, r3, #31
 80045dc:	d405      	bmi.n	80045ea <__svfiscanf_r+0x29e>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	059d      	lsls	r5, r3, #22
 80045e2:	d402      	bmi.n	80045ea <__svfiscanf_r+0x29e>
 80045e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045e6:	f7ff fac1 	bl	8003b6c <__retarget_lock_release_recursive>
 80045ea:	f04f 30ff 	mov.w	r0, #4294967295
 80045ee:	e79d      	b.n	800452c <__svfiscanf_r+0x1e0>
 80045f0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80045f2:	4621      	mov	r1, r4
 80045f4:	4630      	mov	r0, r6
 80045f6:	4798      	blx	r3
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d0b3      	beq.n	8004564 <__svfiscanf_r+0x218>
 80045fc:	e78c      	b.n	8004518 <__svfiscanf_r+0x1cc>
 80045fe:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004600:	3201      	adds	r2, #1
 8004602:	9245      	str	r2, [sp, #276]	@ 0x114
 8004604:	6862      	ldr	r2, [r4, #4]
 8004606:	3a01      	subs	r2, #1
 8004608:	2a00      	cmp	r2, #0
 800460a:	6062      	str	r2, [r4, #4]
 800460c:	dd0a      	ble.n	8004624 <__svfiscanf_r+0x2d8>
 800460e:	3301      	adds	r3, #1
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	e7aa      	b.n	800456a <__svfiscanf_r+0x21e>
 8004614:	08004d73 	.word	0x08004d73
 8004618:	08004ba5 	.word	0x08004ba5
 800461c:	08005268 	.word	0x08005268
 8004620:	08005404 	.word	0x08005404
 8004624:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004626:	4621      	mov	r1, r4
 8004628:	4630      	mov	r0, r6
 800462a:	4798      	blx	r3
 800462c:	2800      	cmp	r0, #0
 800462e:	d09c      	beq.n	800456a <__svfiscanf_r+0x21e>
 8004630:	e772      	b.n	8004518 <__svfiscanf_r+0x1cc>
 8004632:	2b04      	cmp	r3, #4
 8004634:	dc06      	bgt.n	8004644 <__svfiscanf_r+0x2f8>
 8004636:	466b      	mov	r3, sp
 8004638:	4622      	mov	r2, r4
 800463a:	a941      	add	r1, sp, #260	@ 0x104
 800463c:	4630      	mov	r0, r6
 800463e:	f000 f88f 	bl	8004760 <_scanf_i>
 8004642:	e7a0      	b.n	8004586 <__svfiscanf_r+0x23a>
 8004644:	4b0e      	ldr	r3, [pc, #56]	@ (8004680 <__svfiscanf_r+0x334>)
 8004646:	2b00      	cmp	r3, #0
 8004648:	f43f aeb1 	beq.w	80043ae <__svfiscanf_r+0x62>
 800464c:	466b      	mov	r3, sp
 800464e:	4622      	mov	r2, r4
 8004650:	a941      	add	r1, sp, #260	@ 0x104
 8004652:	4630      	mov	r0, r6
 8004654:	f3af 8000 	nop.w
 8004658:	e795      	b.n	8004586 <__svfiscanf_r+0x23a>
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	0598      	lsls	r0, r3, #22
 800465e:	f53f af5f 	bmi.w	8004520 <__svfiscanf_r+0x1d4>
 8004662:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004664:	f7ff fa82 	bl	8003b6c <__retarget_lock_release_recursive>
 8004668:	e75a      	b.n	8004520 <__svfiscanf_r+0x1d4>
 800466a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800466c:	07da      	lsls	r2, r3, #31
 800466e:	d405      	bmi.n	800467c <__svfiscanf_r+0x330>
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	059b      	lsls	r3, r3, #22
 8004674:	d402      	bmi.n	800467c <__svfiscanf_r+0x330>
 8004676:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004678:	f7ff fa78 	bl	8003b6c <__retarget_lock_release_recursive>
 800467c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800467e:	e755      	b.n	800452c <__svfiscanf_r+0x1e0>
 8004680:	00000000 	.word	0x00000000

08004684 <_vfiscanf_r>:
 8004684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004688:	460d      	mov	r5, r1
 800468a:	4616      	mov	r6, r2
 800468c:	461f      	mov	r7, r3
 800468e:	4604      	mov	r4, r0
 8004690:	b118      	cbz	r0, 800469a <_vfiscanf_r+0x16>
 8004692:	6a03      	ldr	r3, [r0, #32]
 8004694:	b90b      	cbnz	r3, 800469a <_vfiscanf_r+0x16>
 8004696:	f7fe ffef 	bl	8003678 <__sinit>
 800469a:	463b      	mov	r3, r7
 800469c:	4632      	mov	r2, r6
 800469e:	4629      	mov	r1, r5
 80046a0:	4620      	mov	r0, r4
 80046a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a6:	f7ff be51 	b.w	800434c <__svfiscanf_r>
	...

080046ac <_scanf_chars>:
 80046ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b0:	4615      	mov	r5, r2
 80046b2:	688a      	ldr	r2, [r1, #8]
 80046b4:	4680      	mov	r8, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	b932      	cbnz	r2, 80046c8 <_scanf_chars+0x1c>
 80046ba:	698a      	ldr	r2, [r1, #24]
 80046bc:	2a00      	cmp	r2, #0
 80046be:	bf14      	ite	ne
 80046c0:	f04f 32ff 	movne.w	r2, #4294967295
 80046c4:	2201      	moveq	r2, #1
 80046c6:	608a      	str	r2, [r1, #8]
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800475c <_scanf_chars+0xb0>
 80046ce:	06d1      	lsls	r1, r2, #27
 80046d0:	bf5f      	itttt	pl
 80046d2:	681a      	ldrpl	r2, [r3, #0]
 80046d4:	1d11      	addpl	r1, r2, #4
 80046d6:	6019      	strpl	r1, [r3, #0]
 80046d8:	6816      	ldrpl	r6, [r2, #0]
 80046da:	2700      	movs	r7, #0
 80046dc:	69a0      	ldr	r0, [r4, #24]
 80046de:	b188      	cbz	r0, 8004704 <_scanf_chars+0x58>
 80046e0:	2801      	cmp	r0, #1
 80046e2:	d107      	bne.n	80046f4 <_scanf_chars+0x48>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	781a      	ldrb	r2, [r3, #0]
 80046e8:	6963      	ldr	r3, [r4, #20]
 80046ea:	5c9b      	ldrb	r3, [r3, r2]
 80046ec:	b953      	cbnz	r3, 8004704 <_scanf_chars+0x58>
 80046ee:	2f00      	cmp	r7, #0
 80046f0:	d031      	beq.n	8004756 <_scanf_chars+0xaa>
 80046f2:	e022      	b.n	800473a <_scanf_chars+0x8e>
 80046f4:	2802      	cmp	r0, #2
 80046f6:	d120      	bne.n	800473a <_scanf_chars+0x8e>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004700:	071b      	lsls	r3, r3, #28
 8004702:	d41a      	bmi.n	800473a <_scanf_chars+0x8e>
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	06da      	lsls	r2, r3, #27
 8004708:	bf5e      	ittt	pl
 800470a:	682b      	ldrpl	r3, [r5, #0]
 800470c:	781b      	ldrbpl	r3, [r3, #0]
 800470e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004712:	682a      	ldr	r2, [r5, #0]
 8004714:	686b      	ldr	r3, [r5, #4]
 8004716:	3201      	adds	r2, #1
 8004718:	602a      	str	r2, [r5, #0]
 800471a:	68a2      	ldr	r2, [r4, #8]
 800471c:	3b01      	subs	r3, #1
 800471e:	3a01      	subs	r2, #1
 8004720:	606b      	str	r3, [r5, #4]
 8004722:	3701      	adds	r7, #1
 8004724:	60a2      	str	r2, [r4, #8]
 8004726:	b142      	cbz	r2, 800473a <_scanf_chars+0x8e>
 8004728:	2b00      	cmp	r3, #0
 800472a:	dcd7      	bgt.n	80046dc <_scanf_chars+0x30>
 800472c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004730:	4629      	mov	r1, r5
 8004732:	4640      	mov	r0, r8
 8004734:	4798      	blx	r3
 8004736:	2800      	cmp	r0, #0
 8004738:	d0d0      	beq.n	80046dc <_scanf_chars+0x30>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	f013 0310 	ands.w	r3, r3, #16
 8004740:	d105      	bne.n	800474e <_scanf_chars+0xa2>
 8004742:	68e2      	ldr	r2, [r4, #12]
 8004744:	3201      	adds	r2, #1
 8004746:	60e2      	str	r2, [r4, #12]
 8004748:	69a2      	ldr	r2, [r4, #24]
 800474a:	b102      	cbz	r2, 800474e <_scanf_chars+0xa2>
 800474c:	7033      	strb	r3, [r6, #0]
 800474e:	6923      	ldr	r3, [r4, #16]
 8004750:	443b      	add	r3, r7
 8004752:	6123      	str	r3, [r4, #16]
 8004754:	2000      	movs	r0, #0
 8004756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800475a:	bf00      	nop
 800475c:	08005268 	.word	0x08005268

08004760 <_scanf_i>:
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	4698      	mov	r8, r3
 8004766:	4b74      	ldr	r3, [pc, #464]	@ (8004938 <_scanf_i+0x1d8>)
 8004768:	460c      	mov	r4, r1
 800476a:	4682      	mov	sl, r0
 800476c:	4616      	mov	r6, r2
 800476e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004772:	b087      	sub	sp, #28
 8004774:	ab03      	add	r3, sp, #12
 8004776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800477a:	4b70      	ldr	r3, [pc, #448]	@ (800493c <_scanf_i+0x1dc>)
 800477c:	69a1      	ldr	r1, [r4, #24]
 800477e:	4a70      	ldr	r2, [pc, #448]	@ (8004940 <_scanf_i+0x1e0>)
 8004780:	2903      	cmp	r1, #3
 8004782:	bf08      	it	eq
 8004784:	461a      	moveq	r2, r3
 8004786:	68a3      	ldr	r3, [r4, #8]
 8004788:	9201      	str	r2, [sp, #4]
 800478a:	1e5a      	subs	r2, r3, #1
 800478c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004790:	bf88      	it	hi
 8004792:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004796:	4627      	mov	r7, r4
 8004798:	bf82      	ittt	hi
 800479a:	eb03 0905 	addhi.w	r9, r3, r5
 800479e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80047a2:	60a3      	strhi	r3, [r4, #8]
 80047a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80047a8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80047ac:	bf98      	it	ls
 80047ae:	f04f 0900 	movls.w	r9, #0
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	463d      	mov	r5, r7
 80047b6:	f04f 0b00 	mov.w	fp, #0
 80047ba:	6831      	ldr	r1, [r6, #0]
 80047bc:	ab03      	add	r3, sp, #12
 80047be:	7809      	ldrb	r1, [r1, #0]
 80047c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f7fb fd03 	bl	80001d0 <memchr>
 80047ca:	b328      	cbz	r0, 8004818 <_scanf_i+0xb8>
 80047cc:	f1bb 0f01 	cmp.w	fp, #1
 80047d0:	d159      	bne.n	8004886 <_scanf_i+0x126>
 80047d2:	6862      	ldr	r2, [r4, #4]
 80047d4:	b92a      	cbnz	r2, 80047e2 <_scanf_i+0x82>
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	2108      	movs	r1, #8
 80047da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047de:	6061      	str	r1, [r4, #4]
 80047e0:	6022      	str	r2, [r4, #0]
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80047e8:	6022      	str	r2, [r4, #0]
 80047ea:	68a2      	ldr	r2, [r4, #8]
 80047ec:	1e51      	subs	r1, r2, #1
 80047ee:	60a1      	str	r1, [r4, #8]
 80047f0:	b192      	cbz	r2, 8004818 <_scanf_i+0xb8>
 80047f2:	6832      	ldr	r2, [r6, #0]
 80047f4:	1c51      	adds	r1, r2, #1
 80047f6:	6031      	str	r1, [r6, #0]
 80047f8:	7812      	ldrb	r2, [r2, #0]
 80047fa:	f805 2b01 	strb.w	r2, [r5], #1
 80047fe:	6872      	ldr	r2, [r6, #4]
 8004800:	3a01      	subs	r2, #1
 8004802:	2a00      	cmp	r2, #0
 8004804:	6072      	str	r2, [r6, #4]
 8004806:	dc07      	bgt.n	8004818 <_scanf_i+0xb8>
 8004808:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800480c:	4631      	mov	r1, r6
 800480e:	4650      	mov	r0, sl
 8004810:	4790      	blx	r2
 8004812:	2800      	cmp	r0, #0
 8004814:	f040 8085 	bne.w	8004922 <_scanf_i+0x1c2>
 8004818:	f10b 0b01 	add.w	fp, fp, #1
 800481c:	f1bb 0f03 	cmp.w	fp, #3
 8004820:	d1cb      	bne.n	80047ba <_scanf_i+0x5a>
 8004822:	6863      	ldr	r3, [r4, #4]
 8004824:	b90b      	cbnz	r3, 800482a <_scanf_i+0xca>
 8004826:	230a      	movs	r3, #10
 8004828:	6063      	str	r3, [r4, #4]
 800482a:	6863      	ldr	r3, [r4, #4]
 800482c:	4945      	ldr	r1, [pc, #276]	@ (8004944 <_scanf_i+0x1e4>)
 800482e:	6960      	ldr	r0, [r4, #20]
 8004830:	1ac9      	subs	r1, r1, r3
 8004832:	f000 fa2b 	bl	8004c8c <__sccl>
 8004836:	f04f 0b00 	mov.w	fp, #0
 800483a:	68a3      	ldr	r3, [r4, #8]
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03d      	beq.n	80048be <_scanf_i+0x15e>
 8004842:	6831      	ldr	r1, [r6, #0]
 8004844:	6960      	ldr	r0, [r4, #20]
 8004846:	f891 c000 	ldrb.w	ip, [r1]
 800484a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800484e:	2800      	cmp	r0, #0
 8004850:	d035      	beq.n	80048be <_scanf_i+0x15e>
 8004852:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8004856:	d124      	bne.n	80048a2 <_scanf_i+0x142>
 8004858:	0510      	lsls	r0, r2, #20
 800485a:	d522      	bpl.n	80048a2 <_scanf_i+0x142>
 800485c:	f10b 0b01 	add.w	fp, fp, #1
 8004860:	f1b9 0f00 	cmp.w	r9, #0
 8004864:	d003      	beq.n	800486e <_scanf_i+0x10e>
 8004866:	3301      	adds	r3, #1
 8004868:	f109 39ff 	add.w	r9, r9, #4294967295
 800486c:	60a3      	str	r3, [r4, #8]
 800486e:	6873      	ldr	r3, [r6, #4]
 8004870:	3b01      	subs	r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	6073      	str	r3, [r6, #4]
 8004876:	dd1b      	ble.n	80048b0 <_scanf_i+0x150>
 8004878:	6833      	ldr	r3, [r6, #0]
 800487a:	3301      	adds	r3, #1
 800487c:	6033      	str	r3, [r6, #0]
 800487e:	68a3      	ldr	r3, [r4, #8]
 8004880:	3b01      	subs	r3, #1
 8004882:	60a3      	str	r3, [r4, #8]
 8004884:	e7d9      	b.n	800483a <_scanf_i+0xda>
 8004886:	f1bb 0f02 	cmp.w	fp, #2
 800488a:	d1ae      	bne.n	80047ea <_scanf_i+0x8a>
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004892:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004896:	d1bf      	bne.n	8004818 <_scanf_i+0xb8>
 8004898:	2110      	movs	r1, #16
 800489a:	6061      	str	r1, [r4, #4]
 800489c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a0:	e7a2      	b.n	80047e8 <_scanf_i+0x88>
 80048a2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80048a6:	6022      	str	r2, [r4, #0]
 80048a8:	780b      	ldrb	r3, [r1, #0]
 80048aa:	f805 3b01 	strb.w	r3, [r5], #1
 80048ae:	e7de      	b.n	800486e <_scanf_i+0x10e>
 80048b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80048b4:	4631      	mov	r1, r6
 80048b6:	4650      	mov	r0, sl
 80048b8:	4798      	blx	r3
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d0df      	beq.n	800487e <_scanf_i+0x11e>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	05d9      	lsls	r1, r3, #23
 80048c2:	d50d      	bpl.n	80048e0 <_scanf_i+0x180>
 80048c4:	42bd      	cmp	r5, r7
 80048c6:	d909      	bls.n	80048dc <_scanf_i+0x17c>
 80048c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80048cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80048d0:	4632      	mov	r2, r6
 80048d2:	4650      	mov	r0, sl
 80048d4:	4798      	blx	r3
 80048d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80048da:	464d      	mov	r5, r9
 80048dc:	42bd      	cmp	r5, r7
 80048de:	d028      	beq.n	8004932 <_scanf_i+0x1d2>
 80048e0:	6822      	ldr	r2, [r4, #0]
 80048e2:	f012 0210 	ands.w	r2, r2, #16
 80048e6:	d113      	bne.n	8004910 <_scanf_i+0x1b0>
 80048e8:	702a      	strb	r2, [r5, #0]
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	9e01      	ldr	r6, [sp, #4]
 80048ee:	4639      	mov	r1, r7
 80048f0:	4650      	mov	r0, sl
 80048f2:	47b0      	blx	r6
 80048f4:	f8d8 3000 	ldr.w	r3, [r8]
 80048f8:	6821      	ldr	r1, [r4, #0]
 80048fa:	1d1a      	adds	r2, r3, #4
 80048fc:	f8c8 2000 	str.w	r2, [r8]
 8004900:	f011 0f20 	tst.w	r1, #32
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	d00f      	beq.n	8004928 <_scanf_i+0x1c8>
 8004908:	6018      	str	r0, [r3, #0]
 800490a:	68e3      	ldr	r3, [r4, #12]
 800490c:	3301      	adds	r3, #1
 800490e:	60e3      	str	r3, [r4, #12]
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	1bed      	subs	r5, r5, r7
 8004914:	445d      	add	r5, fp
 8004916:	442b      	add	r3, r5
 8004918:	6123      	str	r3, [r4, #16]
 800491a:	2000      	movs	r0, #0
 800491c:	b007      	add	sp, #28
 800491e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004922:	f04f 0b00 	mov.w	fp, #0
 8004926:	e7ca      	b.n	80048be <_scanf_i+0x15e>
 8004928:	07ca      	lsls	r2, r1, #31
 800492a:	bf4c      	ite	mi
 800492c:	8018      	strhmi	r0, [r3, #0]
 800492e:	6018      	strpl	r0, [r3, #0]
 8004930:	e7eb      	b.n	800490a <_scanf_i+0x1aa>
 8004932:	2001      	movs	r0, #1
 8004934:	e7f2      	b.n	800491c <_scanf_i+0x1bc>
 8004936:	bf00      	nop
 8004938:	080051a4 	.word	0x080051a4
 800493c:	08003455 	.word	0x08003455
 8004940:	08003549 	.word	0x08003549
 8004944:	08005441 	.word	0x08005441

08004948 <__sflush_r>:
 8004948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800494c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004950:	0716      	lsls	r6, r2, #28
 8004952:	4605      	mov	r5, r0
 8004954:	460c      	mov	r4, r1
 8004956:	d454      	bmi.n	8004a02 <__sflush_r+0xba>
 8004958:	684b      	ldr	r3, [r1, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	dc02      	bgt.n	8004964 <__sflush_r+0x1c>
 800495e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	dd48      	ble.n	80049f6 <__sflush_r+0xae>
 8004964:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004966:	2e00      	cmp	r6, #0
 8004968:	d045      	beq.n	80049f6 <__sflush_r+0xae>
 800496a:	2300      	movs	r3, #0
 800496c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004970:	682f      	ldr	r7, [r5, #0]
 8004972:	6a21      	ldr	r1, [r4, #32]
 8004974:	602b      	str	r3, [r5, #0]
 8004976:	d030      	beq.n	80049da <__sflush_r+0x92>
 8004978:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	0759      	lsls	r1, r3, #29
 800497e:	d505      	bpl.n	800498c <__sflush_r+0x44>
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004986:	b10b      	cbz	r3, 800498c <__sflush_r+0x44>
 8004988:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	2300      	movs	r3, #0
 800498e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004990:	6a21      	ldr	r1, [r4, #32]
 8004992:	4628      	mov	r0, r5
 8004994:	47b0      	blx	r6
 8004996:	1c43      	adds	r3, r0, #1
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	d106      	bne.n	80049aa <__sflush_r+0x62>
 800499c:	6829      	ldr	r1, [r5, #0]
 800499e:	291d      	cmp	r1, #29
 80049a0:	d82b      	bhi.n	80049fa <__sflush_r+0xb2>
 80049a2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a4c <__sflush_r+0x104>)
 80049a4:	410a      	asrs	r2, r1
 80049a6:	07d6      	lsls	r6, r2, #31
 80049a8:	d427      	bmi.n	80049fa <__sflush_r+0xb2>
 80049aa:	2200      	movs	r2, #0
 80049ac:	6062      	str	r2, [r4, #4]
 80049ae:	04d9      	lsls	r1, r3, #19
 80049b0:	6922      	ldr	r2, [r4, #16]
 80049b2:	6022      	str	r2, [r4, #0]
 80049b4:	d504      	bpl.n	80049c0 <__sflush_r+0x78>
 80049b6:	1c42      	adds	r2, r0, #1
 80049b8:	d101      	bne.n	80049be <__sflush_r+0x76>
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	b903      	cbnz	r3, 80049c0 <__sflush_r+0x78>
 80049be:	6560      	str	r0, [r4, #84]	@ 0x54
 80049c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049c2:	602f      	str	r7, [r5, #0]
 80049c4:	b1b9      	cbz	r1, 80049f6 <__sflush_r+0xae>
 80049c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049ca:	4299      	cmp	r1, r3
 80049cc:	d002      	beq.n	80049d4 <__sflush_r+0x8c>
 80049ce:	4628      	mov	r0, r5
 80049d0:	f7ff f8ec 	bl	8003bac <_free_r>
 80049d4:	2300      	movs	r3, #0
 80049d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80049d8:	e00d      	b.n	80049f6 <__sflush_r+0xae>
 80049da:	2301      	movs	r3, #1
 80049dc:	4628      	mov	r0, r5
 80049de:	47b0      	blx	r6
 80049e0:	4602      	mov	r2, r0
 80049e2:	1c50      	adds	r0, r2, #1
 80049e4:	d1c9      	bne.n	800497a <__sflush_r+0x32>
 80049e6:	682b      	ldr	r3, [r5, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0c6      	beq.n	800497a <__sflush_r+0x32>
 80049ec:	2b1d      	cmp	r3, #29
 80049ee:	d001      	beq.n	80049f4 <__sflush_r+0xac>
 80049f0:	2b16      	cmp	r3, #22
 80049f2:	d11e      	bne.n	8004a32 <__sflush_r+0xea>
 80049f4:	602f      	str	r7, [r5, #0]
 80049f6:	2000      	movs	r0, #0
 80049f8:	e022      	b.n	8004a40 <__sflush_r+0xf8>
 80049fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049fe:	b21b      	sxth	r3, r3
 8004a00:	e01b      	b.n	8004a3a <__sflush_r+0xf2>
 8004a02:	690f      	ldr	r7, [r1, #16]
 8004a04:	2f00      	cmp	r7, #0
 8004a06:	d0f6      	beq.n	80049f6 <__sflush_r+0xae>
 8004a08:	0793      	lsls	r3, r2, #30
 8004a0a:	680e      	ldr	r6, [r1, #0]
 8004a0c:	bf08      	it	eq
 8004a0e:	694b      	ldreq	r3, [r1, #20]
 8004a10:	600f      	str	r7, [r1, #0]
 8004a12:	bf18      	it	ne
 8004a14:	2300      	movne	r3, #0
 8004a16:	eba6 0807 	sub.w	r8, r6, r7
 8004a1a:	608b      	str	r3, [r1, #8]
 8004a1c:	f1b8 0f00 	cmp.w	r8, #0
 8004a20:	dde9      	ble.n	80049f6 <__sflush_r+0xae>
 8004a22:	6a21      	ldr	r1, [r4, #32]
 8004a24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a26:	4643      	mov	r3, r8
 8004a28:	463a      	mov	r2, r7
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b0      	blx	r6
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	dc08      	bgt.n	8004a44 <__sflush_r+0xfc>
 8004a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a44:	4407      	add	r7, r0
 8004a46:	eba8 0800 	sub.w	r8, r8, r0
 8004a4a:	e7e7      	b.n	8004a1c <__sflush_r+0xd4>
 8004a4c:	dfbffffe 	.word	0xdfbffffe

08004a50 <_fflush_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	690b      	ldr	r3, [r1, #16]
 8004a54:	4605      	mov	r5, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	b913      	cbnz	r3, 8004a60 <_fflush_r+0x10>
 8004a5a:	2500      	movs	r5, #0
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	b118      	cbz	r0, 8004a6a <_fflush_r+0x1a>
 8004a62:	6a03      	ldr	r3, [r0, #32]
 8004a64:	b90b      	cbnz	r3, 8004a6a <_fflush_r+0x1a>
 8004a66:	f7fe fe07 	bl	8003678 <__sinit>
 8004a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f3      	beq.n	8004a5a <_fflush_r+0xa>
 8004a72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a74:	07d0      	lsls	r0, r2, #31
 8004a76:	d404      	bmi.n	8004a82 <_fflush_r+0x32>
 8004a78:	0599      	lsls	r1, r3, #22
 8004a7a:	d402      	bmi.n	8004a82 <_fflush_r+0x32>
 8004a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7e:	f7ff f874 	bl	8003b6a <__retarget_lock_acquire_recursive>
 8004a82:	4628      	mov	r0, r5
 8004a84:	4621      	mov	r1, r4
 8004a86:	f7ff ff5f 	bl	8004948 <__sflush_r>
 8004a8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a8c:	07da      	lsls	r2, r3, #31
 8004a8e:	4605      	mov	r5, r0
 8004a90:	d4e4      	bmi.n	8004a5c <_fflush_r+0xc>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	059b      	lsls	r3, r3, #22
 8004a96:	d4e1      	bmi.n	8004a5c <_fflush_r+0xc>
 8004a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a9a:	f7ff f867 	bl	8003b6c <__retarget_lock_release_recursive>
 8004a9e:	e7dd      	b.n	8004a5c <_fflush_r+0xc>

08004aa0 <fiprintf>:
 8004aa0:	b40e      	push	{r1, r2, r3}
 8004aa2:	b503      	push	{r0, r1, lr}
 8004aa4:	4601      	mov	r1, r0
 8004aa6:	ab03      	add	r3, sp, #12
 8004aa8:	4805      	ldr	r0, [pc, #20]	@ (8004ac0 <fiprintf+0x20>)
 8004aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aae:	6800      	ldr	r0, [r0, #0]
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	f7ff f9a5 	bl	8003e00 <_vfiprintf_r>
 8004ab6:	b002      	add	sp, #8
 8004ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004abc:	b003      	add	sp, #12
 8004abe:	4770      	bx	lr
 8004ac0:	20000018 	.word	0x20000018

08004ac4 <__swhatbuf_r>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004acc:	2900      	cmp	r1, #0
 8004ace:	b096      	sub	sp, #88	@ 0x58
 8004ad0:	4615      	mov	r5, r2
 8004ad2:	461e      	mov	r6, r3
 8004ad4:	da0d      	bge.n	8004af2 <__swhatbuf_r+0x2e>
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	bf14      	ite	ne
 8004ae2:	2340      	movne	r3, #64	@ 0x40
 8004ae4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ae8:	2000      	movs	r0, #0
 8004aea:	6031      	str	r1, [r6, #0]
 8004aec:	602b      	str	r3, [r5, #0]
 8004aee:	b016      	add	sp, #88	@ 0x58
 8004af0:	bd70      	pop	{r4, r5, r6, pc}
 8004af2:	466a      	mov	r2, sp
 8004af4:	f000 f9bc 	bl	8004e70 <_fstat_r>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	dbec      	blt.n	8004ad6 <__swhatbuf_r+0x12>
 8004afc:	9901      	ldr	r1, [sp, #4]
 8004afe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b06:	4259      	negs	r1, r3
 8004b08:	4159      	adcs	r1, r3
 8004b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b0e:	e7eb      	b.n	8004ae8 <__swhatbuf_r+0x24>

08004b10 <__smakebuf_r>:
 8004b10:	898b      	ldrh	r3, [r1, #12]
 8004b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b14:	079d      	lsls	r5, r3, #30
 8004b16:	4606      	mov	r6, r0
 8004b18:	460c      	mov	r4, r1
 8004b1a:	d507      	bpl.n	8004b2c <__smakebuf_r+0x1c>
 8004b1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	6123      	str	r3, [r4, #16]
 8004b24:	2301      	movs	r3, #1
 8004b26:	6163      	str	r3, [r4, #20]
 8004b28:	b003      	add	sp, #12
 8004b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b2c:	ab01      	add	r3, sp, #4
 8004b2e:	466a      	mov	r2, sp
 8004b30:	f7ff ffc8 	bl	8004ac4 <__swhatbuf_r>
 8004b34:	9f00      	ldr	r7, [sp, #0]
 8004b36:	4605      	mov	r5, r0
 8004b38:	4639      	mov	r1, r7
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f7ff f8aa 	bl	8003c94 <_malloc_r>
 8004b40:	b948      	cbnz	r0, 8004b56 <__smakebuf_r+0x46>
 8004b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b46:	059a      	lsls	r2, r3, #22
 8004b48:	d4ee      	bmi.n	8004b28 <__smakebuf_r+0x18>
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	f043 0302 	orr.w	r3, r3, #2
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	e7e2      	b.n	8004b1c <__smakebuf_r+0xc>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	6020      	str	r0, [r4, #0]
 8004b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b5e:	81a3      	strh	r3, [r4, #12]
 8004b60:	9b01      	ldr	r3, [sp, #4]
 8004b62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b66:	b15b      	cbz	r3, 8004b80 <__smakebuf_r+0x70>
 8004b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f000 f991 	bl	8004e94 <_isatty_r>
 8004b72:	b128      	cbz	r0, 8004b80 <__smakebuf_r+0x70>
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	81a3      	strh	r3, [r4, #12]
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	431d      	orrs	r5, r3
 8004b84:	81a5      	strh	r5, [r4, #12]
 8004b86:	e7cf      	b.n	8004b28 <__smakebuf_r+0x18>

08004b88 <lflush>:
 8004b88:	898b      	ldrh	r3, [r1, #12]
 8004b8a:	f003 0309 	and.w	r3, r3, #9
 8004b8e:	2b09      	cmp	r3, #9
 8004b90:	d103      	bne.n	8004b9a <lflush+0x12>
 8004b92:	4b03      	ldr	r3, [pc, #12]	@ (8004ba0 <lflush+0x18>)
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	f7ff bf5b 	b.w	8004a50 <_fflush_r>
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000018 	.word	0x20000018

08004ba4 <__srefill_r>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	4605      	mov	r5, r0
 8004baa:	b118      	cbz	r0, 8004bb4 <__srefill_r+0x10>
 8004bac:	6a03      	ldr	r3, [r0, #32]
 8004bae:	b90b      	cbnz	r3, 8004bb4 <__srefill_r+0x10>
 8004bb0:	f7fe fd62 	bl	8003678 <__sinit>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bbc:	069e      	lsls	r6, r3, #26
 8004bbe:	d408      	bmi.n	8004bd2 <__srefill_r+0x2e>
 8004bc0:	0758      	lsls	r0, r3, #29
 8004bc2:	d445      	bmi.n	8004c50 <__srefill_r+0xac>
 8004bc4:	06d9      	lsls	r1, r3, #27
 8004bc6:	d407      	bmi.n	8004bd8 <__srefill_r+0x34>
 8004bc8:	2209      	movs	r2, #9
 8004bca:	602a      	str	r2, [r5, #0]
 8004bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	071a      	lsls	r2, r3, #28
 8004bda:	d50b      	bpl.n	8004bf4 <__srefill_r+0x50>
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4628      	mov	r0, r5
 8004be0:	f7ff ff36 	bl	8004a50 <_fflush_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d1f4      	bne.n	8004bd2 <__srefill_r+0x2e>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	60a0      	str	r0, [r4, #8]
 8004bec:	f023 0308 	bic.w	r3, r3, #8
 8004bf0:	81a3      	strh	r3, [r4, #12]
 8004bf2:	61a0      	str	r0, [r4, #24]
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	b91b      	cbnz	r3, 8004c08 <__srefill_r+0x64>
 8004c00:	4621      	mov	r1, r4
 8004c02:	4628      	mov	r0, r5
 8004c04:	f7ff ff84 	bl	8004b10 <__smakebuf_r>
 8004c08:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8004c0c:	07b3      	lsls	r3, r6, #30
 8004c0e:	d00f      	beq.n	8004c30 <__srefill_r+0x8c>
 8004c10:	2301      	movs	r3, #1
 8004c12:	4a1b      	ldr	r2, [pc, #108]	@ (8004c80 <__srefill_r+0xdc>)
 8004c14:	491b      	ldr	r1, [pc, #108]	@ (8004c84 <__srefill_r+0xe0>)
 8004c16:	481c      	ldr	r0, [pc, #112]	@ (8004c88 <__srefill_r+0xe4>)
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	f7fe fd45 	bl	80036a8 <_fwalk_sglue>
 8004c1e:	81a6      	strh	r6, [r4, #12]
 8004c20:	f006 0609 	and.w	r6, r6, #9
 8004c24:	2e09      	cmp	r6, #9
 8004c26:	d103      	bne.n	8004c30 <__srefill_r+0x8c>
 8004c28:	4621      	mov	r1, r4
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f7ff fe8c 	bl	8004948 <__sflush_r>
 8004c30:	6922      	ldr	r2, [r4, #16]
 8004c32:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8004c34:	6963      	ldr	r3, [r4, #20]
 8004c36:	6a21      	ldr	r1, [r4, #32]
 8004c38:	6022      	str	r2, [r4, #0]
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b0      	blx	r6
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	6060      	str	r0, [r4, #4]
 8004c42:	dc17      	bgt.n	8004c74 <__srefill_r+0xd0>
 8004c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c48:	d116      	bne.n	8004c78 <__srefill_r+0xd4>
 8004c4a:	f043 0320 	orr.w	r3, r3, #32
 8004c4e:	e7bf      	b.n	8004bd0 <__srefill_r+0x2c>
 8004c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c52:	2900      	cmp	r1, #0
 8004c54:	d0d2      	beq.n	8004bfc <__srefill_r+0x58>
 8004c56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	d002      	beq.n	8004c64 <__srefill_r+0xc0>
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f7fe ffa4 	bl	8003bac <_free_r>
 8004c64:	2300      	movs	r3, #0
 8004c66:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c6a:	6063      	str	r3, [r4, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0c5      	beq.n	8004bfc <__srefill_r+0x58>
 8004c70:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	2000      	movs	r0, #0
 8004c76:	e7ae      	b.n	8004bd6 <__srefill_r+0x32>
 8004c78:	2200      	movs	r2, #0
 8004c7a:	6062      	str	r2, [r4, #4]
 8004c7c:	e7a6      	b.n	8004bcc <__srefill_r+0x28>
 8004c7e:	bf00      	nop
 8004c80:	2000000c 	.word	0x2000000c
 8004c84:	08004b89 	.word	0x08004b89
 8004c88:	2000001c 	.word	0x2000001c

08004c8c <__sccl>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	780b      	ldrb	r3, [r1, #0]
 8004c90:	4604      	mov	r4, r0
 8004c92:	2b5e      	cmp	r3, #94	@ 0x5e
 8004c94:	bf0b      	itete	eq
 8004c96:	784b      	ldrbeq	r3, [r1, #1]
 8004c98:	1c4a      	addne	r2, r1, #1
 8004c9a:	1c8a      	addeq	r2, r1, #2
 8004c9c:	2100      	movne	r1, #0
 8004c9e:	bf08      	it	eq
 8004ca0:	2101      	moveq	r1, #1
 8004ca2:	3801      	subs	r0, #1
 8004ca4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8004ca8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004cac:	42a8      	cmp	r0, r5
 8004cae:	d1fb      	bne.n	8004ca8 <__sccl+0x1c>
 8004cb0:	b90b      	cbnz	r3, 8004cb6 <__sccl+0x2a>
 8004cb2:	1e50      	subs	r0, r2, #1
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
 8004cb6:	f081 0101 	eor.w	r1, r1, #1
 8004cba:	54e1      	strb	r1, [r4, r3]
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004cc4:	2d2d      	cmp	r5, #45	@ 0x2d
 8004cc6:	d005      	beq.n	8004cd4 <__sccl+0x48>
 8004cc8:	2d5d      	cmp	r5, #93	@ 0x5d
 8004cca:	d016      	beq.n	8004cfa <__sccl+0x6e>
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	d0f1      	beq.n	8004cb4 <__sccl+0x28>
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	e7f2      	b.n	8004cba <__sccl+0x2e>
 8004cd4:	7846      	ldrb	r6, [r0, #1]
 8004cd6:	2e5d      	cmp	r6, #93	@ 0x5d
 8004cd8:	d0fa      	beq.n	8004cd0 <__sccl+0x44>
 8004cda:	42b3      	cmp	r3, r6
 8004cdc:	dcf8      	bgt.n	8004cd0 <__sccl+0x44>
 8004cde:	3002      	adds	r0, #2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	3201      	adds	r2, #1
 8004ce4:	4296      	cmp	r6, r2
 8004ce6:	54a1      	strb	r1, [r4, r2]
 8004ce8:	dcfb      	bgt.n	8004ce2 <__sccl+0x56>
 8004cea:	1af2      	subs	r2, r6, r3
 8004cec:	3a01      	subs	r2, #1
 8004cee:	1c5d      	adds	r5, r3, #1
 8004cf0:	42b3      	cmp	r3, r6
 8004cf2:	bfa8      	it	ge
 8004cf4:	2200      	movge	r2, #0
 8004cf6:	18ab      	adds	r3, r5, r2
 8004cf8:	e7e1      	b.n	8004cbe <__sccl+0x32>
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	e7da      	b.n	8004cb4 <__sccl+0x28>

08004cfe <__submore>:
 8004cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d02:	460c      	mov	r4, r1
 8004d04:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004d06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d0a:	4299      	cmp	r1, r3
 8004d0c:	d11d      	bne.n	8004d4a <__submore+0x4c>
 8004d0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d12:	f7fe ffbf 	bl	8003c94 <_malloc_r>
 8004d16:	b918      	cbnz	r0, 8004d20 <__submore+0x22>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d24:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004d26:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8004d2a:	6360      	str	r0, [r4, #52]	@ 0x34
 8004d2c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8004d30:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004d34:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8004d38:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004d3c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8004d40:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8004d44:	6020      	str	r0, [r4, #0]
 8004d46:	2000      	movs	r0, #0
 8004d48:	e7e8      	b.n	8004d1c <__submore+0x1e>
 8004d4a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004d4c:	0077      	lsls	r7, r6, #1
 8004d4e:	463a      	mov	r2, r7
 8004d50:	f000 f8d5 	bl	8004efe <_realloc_r>
 8004d54:	4605      	mov	r5, r0
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0de      	beq.n	8004d18 <__submore+0x1a>
 8004d5a:	eb00 0806 	add.w	r8, r0, r6
 8004d5e:	4601      	mov	r1, r0
 8004d60:	4632      	mov	r2, r6
 8004d62:	4640      	mov	r0, r8
 8004d64:	f000 f8b6 	bl	8004ed4 <memcpy>
 8004d68:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8004d6c:	f8c4 8000 	str.w	r8, [r4]
 8004d70:	e7e9      	b.n	8004d46 <__submore+0x48>

08004d72 <_ungetc_r>:
 8004d72:	b570      	push	{r4, r5, r6, lr}
 8004d74:	460d      	mov	r5, r1
 8004d76:	1c69      	adds	r1, r5, #1
 8004d78:	4606      	mov	r6, r0
 8004d7a:	4614      	mov	r4, r2
 8004d7c:	d01e      	beq.n	8004dbc <_ungetc_r+0x4a>
 8004d7e:	b118      	cbz	r0, 8004d88 <_ungetc_r+0x16>
 8004d80:	6a03      	ldr	r3, [r0, #32]
 8004d82:	b90b      	cbnz	r3, 8004d88 <_ungetc_r+0x16>
 8004d84:	f7fe fc78 	bl	8003678 <__sinit>
 8004d88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d8a:	07da      	lsls	r2, r3, #31
 8004d8c:	d405      	bmi.n	8004d9a <_ungetc_r+0x28>
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	059b      	lsls	r3, r3, #22
 8004d92:	d402      	bmi.n	8004d9a <_ungetc_r+0x28>
 8004d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d96:	f7fe fee8 	bl	8003b6a <__retarget_lock_acquire_recursive>
 8004d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d9e:	f023 0220 	bic.w	r2, r3, #32
 8004da2:	0758      	lsls	r0, r3, #29
 8004da4:	81a2      	strh	r2, [r4, #12]
 8004da6:	d422      	bmi.n	8004dee <_ungetc_r+0x7c>
 8004da8:	06d9      	lsls	r1, r3, #27
 8004daa:	d40a      	bmi.n	8004dc2 <_ungetc_r+0x50>
 8004dac:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004dae:	07d2      	lsls	r2, r2, #31
 8004db0:	d404      	bmi.n	8004dbc <_ungetc_r+0x4a>
 8004db2:	0599      	lsls	r1, r3, #22
 8004db4:	d402      	bmi.n	8004dbc <_ungetc_r+0x4a>
 8004db6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004db8:	f7fe fed8 	bl	8003b6c <__retarget_lock_release_recursive>
 8004dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8004dc0:	e046      	b.n	8004e50 <_ungetc_r+0xde>
 8004dc2:	071b      	lsls	r3, r3, #28
 8004dc4:	d50f      	bpl.n	8004de6 <_ungetc_r+0x74>
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f7ff fe41 	bl	8004a50 <_fflush_r>
 8004dce:	b120      	cbz	r0, 8004dda <_ungetc_r+0x68>
 8004dd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dd2:	07d8      	lsls	r0, r3, #31
 8004dd4:	d4f2      	bmi.n	8004dbc <_ungetc_r+0x4a>
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	e7eb      	b.n	8004db2 <_ungetc_r+0x40>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	60a0      	str	r0, [r4, #8]
 8004dde:	f023 0308 	bic.w	r3, r3, #8
 8004de2:	81a3      	strh	r3, [r4, #12]
 8004de4:	61a0      	str	r0, [r4, #24]
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f043 0304 	orr.w	r3, r3, #4
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004df0:	6862      	ldr	r2, [r4, #4]
 8004df2:	b2ed      	uxtb	r5, r5
 8004df4:	b1d3      	cbz	r3, 8004e2c <_ungetc_r+0xba>
 8004df6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	dc05      	bgt.n	8004e08 <_ungetc_r+0x96>
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7ff ff7d 	bl	8004cfe <__submore>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1e3      	bne.n	8004dd0 <_ungetc_r+0x5e>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	1e5a      	subs	r2, r3, #1
 8004e0c:	6022      	str	r2, [r4, #0]
 8004e0e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004e12:	6863      	ldr	r3, [r4, #4]
 8004e14:	3301      	adds	r3, #1
 8004e16:	6063      	str	r3, [r4, #4]
 8004e18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e1a:	07da      	lsls	r2, r3, #31
 8004e1c:	d418      	bmi.n	8004e50 <_ungetc_r+0xde>
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	059b      	lsls	r3, r3, #22
 8004e22:	d415      	bmi.n	8004e50 <_ungetc_r+0xde>
 8004e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e26:	f7fe fea1 	bl	8003b6c <__retarget_lock_release_recursive>
 8004e2a:	e011      	b.n	8004e50 <_ungetc_r+0xde>
 8004e2c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004e2e:	6920      	ldr	r0, [r4, #16]
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	f001 0101 	and.w	r1, r1, #1
 8004e36:	b168      	cbz	r0, 8004e54 <_ungetc_r+0xe2>
 8004e38:	4298      	cmp	r0, r3
 8004e3a:	d20b      	bcs.n	8004e54 <_ungetc_r+0xe2>
 8004e3c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004e40:	42a8      	cmp	r0, r5
 8004e42:	d107      	bne.n	8004e54 <_ungetc_r+0xe2>
 8004e44:	3b01      	subs	r3, #1
 8004e46:	3201      	adds	r2, #1
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	6062      	str	r2, [r4, #4]
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	d0e6      	beq.n	8004e1e <_ungetc_r+0xac>
 8004e50:	4628      	mov	r0, r5
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8004e58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e5e:	2303      	movs	r3, #3
 8004e60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004e62:	4623      	mov	r3, r4
 8004e64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	6063      	str	r3, [r4, #4]
 8004e6e:	e7ed      	b.n	8004e4c <_ungetc_r+0xda>

08004e70 <_fstat_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d07      	ldr	r5, [pc, #28]	@ (8004e90 <_fstat_r+0x20>)
 8004e74:	2300      	movs	r3, #0
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	602b      	str	r3, [r5, #0]
 8004e7e:	f7fb fefd 	bl	8000c7c <_fstat>
 8004e82:	1c43      	adds	r3, r0, #1
 8004e84:	d102      	bne.n	8004e8c <_fstat_r+0x1c>
 8004e86:	682b      	ldr	r3, [r5, #0]
 8004e88:	b103      	cbz	r3, 8004e8c <_fstat_r+0x1c>
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	bd38      	pop	{r3, r4, r5, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000250 	.word	0x20000250

08004e94 <_isatty_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d06      	ldr	r5, [pc, #24]	@ (8004eb0 <_isatty_r+0x1c>)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	602b      	str	r3, [r5, #0]
 8004ea0:	f7fb fefc 	bl	8000c9c <_isatty>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_isatty_r+0x1a>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_isatty_r+0x1a>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000250 	.word	0x20000250

08004eb4 <_sbrk_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d06      	ldr	r5, [pc, #24]	@ (8004ed0 <_sbrk_r+0x1c>)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	602b      	str	r3, [r5, #0]
 8004ec0:	f7fb ff04 	bl	8000ccc <_sbrk>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_sbrk_r+0x1a>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_sbrk_r+0x1a>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	20000250 	.word	0x20000250

08004ed4 <memcpy>:
 8004ed4:	440a      	add	r2, r1
 8004ed6:	4291      	cmp	r1, r2
 8004ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004edc:	d100      	bne.n	8004ee0 <memcpy+0xc>
 8004ede:	4770      	bx	lr
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eea:	4291      	cmp	r1, r2
 8004eec:	d1f9      	bne.n	8004ee2 <memcpy+0xe>
 8004eee:	bd10      	pop	{r4, pc}

08004ef0 <abort>:
 8004ef0:	b508      	push	{r3, lr}
 8004ef2:	2006      	movs	r0, #6
 8004ef4:	f000 f85a 	bl	8004fac <raise>
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f7fb fe64 	bl	8000bc6 <_exit>

08004efe <_realloc_r>:
 8004efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f02:	4680      	mov	r8, r0
 8004f04:	4615      	mov	r5, r2
 8004f06:	460c      	mov	r4, r1
 8004f08:	b921      	cbnz	r1, 8004f14 <_realloc_r+0x16>
 8004f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0e:	4611      	mov	r1, r2
 8004f10:	f7fe bec0 	b.w	8003c94 <_malloc_r>
 8004f14:	b92a      	cbnz	r2, 8004f22 <_realloc_r+0x24>
 8004f16:	f7fe fe49 	bl	8003bac <_free_r>
 8004f1a:	2400      	movs	r4, #0
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f22:	f000 f85f 	bl	8004fe4 <_malloc_usable_size_r>
 8004f26:	4285      	cmp	r5, r0
 8004f28:	4606      	mov	r6, r0
 8004f2a:	d802      	bhi.n	8004f32 <_realloc_r+0x34>
 8004f2c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f30:	d8f4      	bhi.n	8004f1c <_realloc_r+0x1e>
 8004f32:	4629      	mov	r1, r5
 8004f34:	4640      	mov	r0, r8
 8004f36:	f7fe fead 	bl	8003c94 <_malloc_r>
 8004f3a:	4607      	mov	r7, r0
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d0ec      	beq.n	8004f1a <_realloc_r+0x1c>
 8004f40:	42b5      	cmp	r5, r6
 8004f42:	462a      	mov	r2, r5
 8004f44:	4621      	mov	r1, r4
 8004f46:	bf28      	it	cs
 8004f48:	4632      	movcs	r2, r6
 8004f4a:	f7ff ffc3 	bl	8004ed4 <memcpy>
 8004f4e:	4621      	mov	r1, r4
 8004f50:	4640      	mov	r0, r8
 8004f52:	f7fe fe2b 	bl	8003bac <_free_r>
 8004f56:	463c      	mov	r4, r7
 8004f58:	e7e0      	b.n	8004f1c <_realloc_r+0x1e>

08004f5a <_raise_r>:
 8004f5a:	291f      	cmp	r1, #31
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4605      	mov	r5, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	d904      	bls.n	8004f6e <_raise_r+0x14>
 8004f64:	2316      	movs	r3, #22
 8004f66:	6003      	str	r3, [r0, #0]
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	bd38      	pop	{r3, r4, r5, pc}
 8004f6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004f70:	b112      	cbz	r2, 8004f78 <_raise_r+0x1e>
 8004f72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f76:	b94b      	cbnz	r3, 8004f8c <_raise_r+0x32>
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 f831 	bl	8004fe0 <_getpid_r>
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4601      	mov	r1, r0
 8004f82:	4628      	mov	r0, r5
 8004f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f88:	f000 b818 	b.w	8004fbc <_kill_r>
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d00a      	beq.n	8004fa6 <_raise_r+0x4c>
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	d103      	bne.n	8004f9c <_raise_r+0x42>
 8004f94:	2316      	movs	r3, #22
 8004f96:	6003      	str	r3, [r0, #0]
 8004f98:	2001      	movs	r0, #1
 8004f9a:	e7e7      	b.n	8004f6c <_raise_r+0x12>
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	4798      	blx	r3
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e7e0      	b.n	8004f6c <_raise_r+0x12>
	...

08004fac <raise>:
 8004fac:	4b02      	ldr	r3, [pc, #8]	@ (8004fb8 <raise+0xc>)
 8004fae:	4601      	mov	r1, r0
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f7ff bfd2 	b.w	8004f5a <_raise_r>
 8004fb6:	bf00      	nop
 8004fb8:	20000018 	.word	0x20000018

08004fbc <_kill_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4d07      	ldr	r5, [pc, #28]	@ (8004fdc <_kill_r+0x20>)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	602b      	str	r3, [r5, #0]
 8004fca:	f7fb fdec 	bl	8000ba6 <_kill>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	d102      	bne.n	8004fd8 <_kill_r+0x1c>
 8004fd2:	682b      	ldr	r3, [r5, #0]
 8004fd4:	b103      	cbz	r3, 8004fd8 <_kill_r+0x1c>
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	bd38      	pop	{r3, r4, r5, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000250 	.word	0x20000250

08004fe0 <_getpid_r>:
 8004fe0:	f7fb bdd9 	b.w	8000b96 <_getpid>

08004fe4 <_malloc_usable_size_r>:
 8004fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe8:	1f18      	subs	r0, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bfbc      	itt	lt
 8004fee:	580b      	ldrlt	r3, [r1, r0]
 8004ff0:	18c0      	addlt	r0, r0, r3
 8004ff2:	4770      	bx	lr

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr
